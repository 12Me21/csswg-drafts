<h1>CSS Basic User Interface Module Level 3 (CSS3 UI)</h1>

<pre class='metadata'>
ED: http://dev.w3.org/csswg/css-ui/
TR: http://www.w3.org/TR/css3-ui/
Previous Version: http://www.w3.org/TR/2012/WD-css3-ui-20120117/
Shortname: css-ui
Level: 3
Group: csswg
!Issue Tracking: http://wiki.csswg.org/spec/css3-ui
Status: ED
Editor: Tantek &Ccedil;elik, Mozilla http://www.mozilla.org, tantek@cs.stanford.edu, http://tantek.com

Abstract: This specification describes user interface related selectors,
          properties and values that are proposed for CSS level&nbsp;3
          to style HTML and XML (including XHTML).
          It includes and extends user interface related features from the selectors,
          properties and values of CSS level&nbsp;2 revision 1 and Selectors specifications.
          It uses various selectors,
          properties and values to style basic user interface elements in a document.
Deadline: 2012-2-14
Link Defaults: css-color-3 (property) color
Link Defaults: selectors-4 (selector) :indeterminate
Link Defaults: css21 (property) border-width
Link Defaults: css21 (property) border-style
Ignored Terms: outline-top
Ignored Terms: outline-left
At Risk: ::value ::choices ::repeat-item ::repeat-index pseudo-elements
At Risk: 'box-sizing' property value: padding-box
At Risk: 'content' property value: icon
At Risk: 'icon' property
At Risk: 'ime-mode' property
At Risk: 'nav-index' property
At Risk: 'text-overflow' property value: &lt;string&gt;
At Risk: 'text-overflow' property 2-value syntax and definition
</pre>

<!--
At risk due to only one implementation, or obsolete dependency:
XForms is defunct on the web.
<li>XForms needs:	:default :valid :invalid :in-range :out-of-range :required :optional :read-only :read-write ::value ::choices ::repeat-item ::repeat-index

<li>box-sizing: padding-box - only FF supports in prefixed version

<li>ime-mode: new - not sure about IE5+ vs FF3+ interop

<li>nav-index property
	implemented for sure only by Opera, http://www.opera.com/docs/specs/presto22/#css
	possibly obsolete: Tasman v1 internal implementation
	possibly current: MSTV Tasman
	required (depended on) by non-web DVB-HTML, ATSC standards
	 - unknown if any DVB-HTML or ATSC simulators
</li>

Not at risk:
<li>CSS2.1:  		:hover :active :focus
<li>Selectors:		:enabled :disabled :checked
<li>:indeterminate implemented by FF3.6, IE9, Opera 10.6, Saf3

<li>box-sizing implemented by IE5/Mac, Opera
	-moz-box-sizing implemented by Mozilla

<li>outline, outline-width, outline-color, outline-style all in CSS 2.1
<li>outline-offset property
	implemented by Safari 1.2

<li>cursor property:
	CSS2.1: auto | default | help | pointer | wait | crosshair | text |
e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize
	IE5/Mac implements: none | progress | cell
	IE6/Windows implements: <uri> | progress | not-allowed | no-drop | vertical-text | all-scroll | col-resize | row-resize | move |
	Mozilla implements: progress | cell(as -moz-cell) | alias(as -moz-alias) | copy(as -moz-copy) | context-menu(as -moz-context-menu) |
	freedesktop.org copied all the cursors from the CSS3-UI LC Working Draft
		by FredrikHoeglund - 14 Oct 2003
		http://freedesktop.org/Standards/cursor-spec

<li>'cursor' property values: ew-resize | ns-resize | nesw-resize | nwse-resize
implemented by Firefox and Safari

<li>'resize' property
implemented by Firefox 4 and Safari
<li>nav-up, nav-down, nav-right, nav-left properties
implemented by Opera in Presto and Blink, as well as Samsung in webkit

-->

<hr title="Separator for header">

<h2 class="no-num no-toc" id="summary">Overview</h2>

This section is <em>informative</em>.

This document is one of the "modules" for the upcoming CSS3
specification. It not only describes the user interface related
properties and values that already exist in
<a href="http://www.w3.org/TR/REC-CSS1">CSS1</a> [[CSS1]]
and <a href="http://www.w3.org/TR/CSS21">CSS2.1</a> [[!CSS21]], but introduces
new properties and values for CSS3 as well.
The Working Group doesn't expect that all implementations of CSS3 will implement
all properties or values.
Instead, there will probably be a small number of variants of CSS3, so-called "profiles".

This document is the result of the merging of relevant parts of
the following Recommendations and Working Drafts, and the addition of some new features.
<ul>
 <li>Cascading Style Sheets, level 2, revision 1 [[!CSS21]]
 <li><a href="http://www.w3.org/TR/2000/WD-css3-userint-20000216">User Interface for CSS3 (16 February 2000)</a> [[CSSUI]]
</ul>

This specification contains:
<ul>
<li>Pseudo-classes and pseudo-elements to style
user interface states and element fragments respectively.

<li>Additions to the user interface features in
<a href="http://www.w3.org/TR/CSS21">CSS2.1</a>.
<li>Directional focus navigation properties.
<li>A mechanism to allow the styling of elements as icons for accessibility.
</ul>

<hr>

<h2 id="intro">Introduction</h2>

CSS3 is a set of modules, divided up and profiled in order to
simplify the specification,
and to allow implementors the flexibility of supporting
the particular modules appropriate for their implementations.

This module describes selectors and CSS properties which enable authors
to style user interface related states, element fragments, properties
and values.

<a href="http://www.w3.org/TR/REC-CSS1#anchor-pseudo-classes">Section 2.1 of CSS1</a> [[CSS1]]
and <a href="http://www.w3.org/TR/CSS2/ui.html">Chapter 18 of CSS2</a> [[CSS2]]
introduced several user interface related pseudo-classes, properties and values.
<a href="http://www.w3.org/TR/css3-selectors/#UIstates">Section 6.6.4 of Selectors</a> [[!SELECT]] also describes several additional user interface related pseudo-classes (and one pseudo-element).

This Working Draft extends them to provide the ability, through CSS,
to style elements based upon additional user interface states,
to style fragments of user interface elements, and to alter the
dynamic presentation of elements in ways previously only available through specific HTML4/XHTML1 elements and attributes.

<h3 id="purpose">Purpose</h3>

The purpose of this specification is to achieve the following objectives:
<ul>
<li>Extend the user interface features in CSS2.1.
<li>Provide additional CSS mechanisms to augment or replace other
dynamic presentation related features in HTML4/XHTML1.
<li>Introduce directional navigation properties to assist in the construction of
user interfaces which make use of a directional navigation model.
<li>Introduce properties and values to specify icon presentations for
elements to enhance accessibility.
</ul>

<h2 id="dependencies">Dependencies on other modules</h2>

This CSS3 module depends on the following other specifications.

<ul>
<li>[[!SELECT]]
<li>[[!CSS3COLOR]]
<li>[[!CSS21]]
<li>[[!CSS3VAL]]
<li>[[!CSS3-WRITING-MODES]]<!--for end, start, line-left, line-end-->
</ul>

<!--
It has non-normative (informative) references to the following
other specifications:
<ul>
</ul>
-->

The following work is related to the CSS Basic User Interface Module Level 3 (CSS3 Basic UI).

<ul>
<li>[[HTML401]]
<li>[[HTML5]]
<li>[[UAAG10]]
<li>[[XML10]]
<li>[[XHTML10]]
<li>[[XHTML11]]
<li>[[XFORMS11]]
</ul>

This specification does not define what is a form element.

<h2 id="selectors">User Interface Selectors</h2>

<h3 id="pseudo-classes">User interface states: pseudo-classes</h3>

The Selectors specification <a href="http://www.w3.org/TR/css3-selectors/#UIstates">defines several user interface selectors</a> ([[!SELECT]], sections 6.6.1 and 6.6.4)
which represent user interface states:
<ul><li id="pseudo-hover"><a href="http://www.w3.org/TR/css3-selectors/#useraction-pseudos">:hover</a>
	<li id="pseudo-active"><a href="http://www.w3.org/TR/css3-selectors/#useraction-pseudos">:active</a>
	<li id="pseudo-focus"><a href="http://www.w3.org/TR/css3-selectors/#useraction-pseudos">:focus</a>
	<li id="pseudo-enabled"><a href="http://www.w3.org/TR/css3-selectors/#enableddisabled">:enabled</a>
	<li id="pseudo-disabled"><a href="http://www.w3.org/TR/css3-selectors/#enableddisabled">:disabled</a>
	<li id="pseudo-checked"><a href="http://www.w3.org/TR/css3-selectors/#checked">:checked</a>
	<li id="pseudo-indeterminate"><a href="http://www.w3.org/TR/css3-selectors/#indeterminate">:indeterminate</a>
</ul>

These pseudo-classes as defined by [[!SELECT]] are
included in this specification by reference.

CSS 2.1 [[!CSS21]] specifies additional details
for some of the selectors mentioned, above and beyond Selectors.


<h4 id="active">:active details</h4>

In addition, on systems with more than one mouse button,
:active is clarified to apply only to the primary
or primary activation button (typically the "left" mouse button),
and any aliases thereof.

<h4 id="indeterminate">
The indeterminate-value pseudo-class '':indeterminate''</h4>

The '':indeterminate'' pseudo-class applies
to UI elements whose value is in an indeterminate state.
For example, radio and checkbox elements
can be toggled between checked and unchecked states,
but are sometimes in an indeterminate state,
neither checked nor unchecked.
Similarly a progress meter can be in an indeterminate state
when the percent completion is unknown.

Like the :checked pseudo-class,
'':indeterminate'' applies to all media.
Components of a radio-group initialized with no pre-selected choice,
for example, would be '':indeterminate''
even in a static display.


<h4 id="new-pseudo-classes" class="no-num no-toc">New user interface state pseudo-classes</h4>

In addition to the above-mentioned pseudo-classes,
this specification introduces several new pseudo-classes
to define additional user interface states.
<ul>
  <li>:default
  <li>:valid
  <li>:invalid
  <li>:in-range
  <li>:out-of-range
  <li>:required
  <li>:optional
  <li>:read-only
  <li>:read-write
</ul>

Specifically, these new states (except for :default) are provided
as a way to style elements which are in the respective states as defined by XForms [[XFORMS11]].

<h4 id="pseudo-default">:default</h4>

The :default selector applies to the one or more UI elements
that are the default among a set of similar elements.
This selector typically applies to context menu items,
buttons, and select lists/menus.

One example is the default submit button among a set of buttons.
Another example is the default option from a popup menu.
Multiple elements in a select-many group could have multiple :default elements,
like a selection of pizza toppings for example.

<h4 id="pseudo-validity"><span id="pseudo-valid">:valid</span>
and <span id="pseudo-invalid">:invalid</span></h4>

An element is :valid or :invalid when it is,
respectively, valid or invalid with respect to data validity semantics
defined by a different specification (e.g. [[XFORMS11]]).
An element which lacks data validity semantics is neither :valid nor :invalid.
This is different from an element which otherwise has no constraints.
Such an element would always be :valid.

<h4 id="pseudo-range"><span id="pseudo-in-range">:in-range</span> and <span id="pseudo-out-of-range">:out-of-range</span></h4>

The :in-range and :out-of-range pseudo-classes apply only to elements that have range limitations.
An element is :in-range or :out-of-range
when the value that the element is bound to is in range or out of range
of the presentation (e.g. visual or spoken representation) of the element respectively.
An element that lacks data range limits or is not a form control is neither :in-range nor :out-of-range.
E.g. a slider element with a value of 11
presented as a slider control that only represents the values from 1-10 is :out-of-range.
Another example is a menu element with a value of "E"
that happens to be presented as a popup menu that only has choices "A", "B" and "C".

<h4 id="pseudo-required-value"><span id="pseudo-required">:required</span>
and <span id="pseudo-optional">:optional</span></h4>

A form element is :required or :optional if a value for it
is, respectively, required or optional before the form it belongs to is submitted.
Elements that are not form elements are neither required nor optional.

<h4 id="pseudo-ro-rw"><span id="pseudo-read-only">:read-only</span>
and <span id="pseudo-read-write">:read-write</span></h4>

An element whose contents are not user-alterable is :read-only.
However, elements whose contents are user-alterable (such as text input fields)
are considered to be in a :read-write state.
In typical documents, most elements are :read-only.
However it may be possible (e.g. in the context of an editor) for any element to become :read-write.

<h3 id="pseudo-elements">User interface element fragments: pseudo-elements</h3>

In addition to the above-mentioned pseudo-element,
this specification introduces four new pseudo-elements
to provide access to additional user interface element fragments.
<ul>
  <li>::value
  <li>::choices
  <li>::repeat-item
  <li>::repeat-index
</ul>

Specifically, these new pseudo-elements are provided
as a way to style user interface fragments
as defined by XForms [[XFORMS11]].

Note: The ::value, ::choices, ::repeat-item, and ::repeat-index
pseudo-elements are all at risk.

<h4 id="pseudo-value">::value</h4>

A form element may contain both a label for its data value,
and the data value itself.
For such elements, the ::value pseudo-element
selects the representation of just the data value itself,
in order to style its appearance.

<div class="example"><p style="display:none">Example(s):
<h4 id="value-example" class="no-num no-toc">fictional markup and illustration</h4>

Here is an example which illustrates the ::value of a text input field
with fictional markup which is then styled with CSS.

sample XForms fragment with fictional markup:
<pre><code class="lang-markup">
&lt;input&gt;
  &lt;label&gt;Zip code&lt;label&gt;
  <em>&lt;input::value/&gt;</em>
&lt;/input&gt;
</code></pre>

sample CSS:
<pre><code class="lang-css">
input { border:dashed }
label { border:dotted }
input::value { border:solid }
</code></pre>

an HTML+CSS approximation of this example

<p>
<span style="border:dashed;display:inline-block;padding:10px">
 <label
  style="border:dotted;display:inline-block;padding:2px;margin:0;font-size:1em"
 >Zip code</label>
 <input type="text"
  style="border:solid;display:inline-block;padding:2px;margin:0;font-size:1em"
  value="94117">
</span>

Spacing (in the form of padding) has been added to the above approximation
to separate the borders and make the individual (pseudo-)elements easier to distinguish.
</div>

The ''::value'' pseudo-element is similar to an inline-level element,
but with certain restrictions.
The following properties apply to ''::value''
pseudo-element: font properties, color property, background properties,
'word-spacing', 'letter-spacing', 'text-decoration', 'vertical-align',
'text-transform', 'line-height'.  UAs may apply other properties as well.


<h4 id="pseudo-choices">::choices</h4>

Similarly, a form element which represents a list of options
may contain both a label for the list,
and the list of choices itself.
For such elements,
the ''::choices'' pseudo-element selects
the representation of just the list of choices themselves,
in order to style their appearance.

A list of radio buttons can also be selected with the ''::choices'' pseudo-element,
and the currently chosen radio button can be selected with the ''::value'' pseudo-element.

<h4 id="pseudo-repeat-item">::repeat-item</h4>

The ''::repeat-item'' pseudo-element represents a single item from a repeating sequence.
It is generated as a parent to all the elements in a single repeating item.
Each ''::repeat-item'' is associated with a particular instance data node,
and is affected by the model item properties (e.g. '<code>relevant</code>') found there,
as the related style properties will cascade to the child elements.

<h4 id="pseudo-repeat-index">::repeat-index</h4>

The ::repeat-index pseudo-element represents the current item of a repeating sequence.
It takes the place of the ::repeat-item as a parent of all the elements in the index repeating item.

Note: Any style declarations that an author wants to apply to all repeat items,
including the index,
must be done so by using both ::repeat-item and ::repeat-index selectors.
Styles that are only applied to ::repeat-item will not automatically be applied to the respective ::repeat-index.

<div class="example"><p style="display:none">Example(s):
<h4 id="repeat-item-index-example" class="no-num no-toc">::repeat-item and ::repeat-index fictional markup</h4>

Here is an example that illustrates both ::repeat-item and ::repeat-index,
since they are often both available and used at the same time.
Assume appropriate namespace declarations were made in a header somewhere
preceding the code in the example.

The following markup snippet uses XHTML and XForms:
<pre><code class="lang-markup">
&lt;html:table xforms:repeat-nodeset="..."&gt;
   &lt;html:tr&gt;
      &lt;html:td&gt;&lt;xforms:input ref="..."/&gt;&lt;xforms:input ref="..."/&gt;&lt;/html:td&gt;
   &lt;/html:tr&gt;
&lt;/html:table&gt;
</code></pre>

The following style rules are used to style all the repeated items and the current repeated item.
<pre><code class="lang-css">
html|tr::repeat-item { outline: medium solid; color:gray }
html|tr::repeat-index { outline: medium dashed; color:black }
</code></pre>

The following fictional markup shows
the state of the above markup
when through user interaction the XForm contains three of the repeated items,
where the third item is current.
<pre><code class="lang-markup">
&lt;html:table xforms:repeat-nodeset="..."&gt;
 <em>&lt;html:tr::repeat-item&gt;</em>
  &lt;html:tr&gt;
   &lt;html:td&gt;&lt;xforms:input ref="..."/&gt;&lt;xforms:input ref="..."/&gt;&lt;/html:td&gt;
  &lt;/html:tr&gt;
 <em>&lt;/html:tr::repeat-item&gt;</em>
 <em>&lt;html:tr::repeat-item&gt;</em>
  &lt;html:tr&gt;
   &lt;html:td&gt;&lt;xforms:input ref="..."/&gt;&lt;xforms:input ref="..."/&gt;&lt;/html:td&gt;
  &lt;/html:tr&gt;
 <em>&lt;/html:tr::repeat-item&gt;</em>
 <em>&lt;html:tr::repeat-index&gt;</em>
  &lt;html:tr&gt;
   &lt;html:td&gt;&lt;xforms:input ref="..."/&gt;&lt;xforms:input ref="..."/&gt;&lt;/html:td&gt;
  &lt;/html:tr&gt;
 <em>&lt;/html:tr::repeat-index&gt;</em>
&lt;/html:table&gt;
</code></pre>
</div>

Note: The ::repeat-index pseudo-element takes the place of the ::repeat-item
rather than being nested inside as a separate element.
Thus just like :link or :visited are mutually exclusive for selecting hyperlinks,
only one will exist and apply to a particular repeated item at any point.

<h2 id="icons">Element icons</h2>

<h3 id="content-addition">'content' property addition</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>content</dfn></td></tr>
<tr><th>New&nbsp;Value(s):</th><td title="">icon</td></tr>

<tr><th>Initial:</th><td>same as CSS 2.1</td></tr>
<tr><th>Applies to:</th><td>same as CSS 2.1</td></tr>
<tr><th>Inherited:</th><td>same as CSS 2.1</td></tr>
<tr><th>Percentages:</th><td>same as CSS 2.1</td></tr>
<tr><th>Media:</th><td>same as CSS 2.1</td></tr>
<tr><th>Computed&nbsp;value:</th><td>the keyword ''icon'' if specified as such, otherwise same as CSS 2.1</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>icon</dt>
<dd>The (pseudo-)element is replaced in its entirety by the resource referenced by its 'icon' property, and treated as a replaced element.
</dd>
</dl>

Note: It is expected that the next draft of the CSS3 Generated Content module [[CSS3GENCON]]
will include and superset this functionality.

Note: The ''icon'' value is at risk.

<h3 id="icon">'icon' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>icon</dfn></td></tr>
<tr><th>Value:</th><td>auto | &lt;uri&gt; [, &lt;uri&gt;]* | inherit</td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>all</td></tr>
<tr><th>Computed&nbsp;value:</th><td>as specified, except with any relative URLs converted to absolute</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>auto</dt>
<dd>Use a default generic icon provided by the user agent.</dd>
<dt>&lt;uri&gt;</dt>
<dd>URIs (see [[!URI]], [[!RFC1738]] and [[!RFC1808]]) provide a way of identifying resources.
The &lt;uri&gt; value(s) in this property refer to one or more icons in a comma delimited list.
The user agent loads the referenced icons one by one until it finds one that it is able to render.
This permits the usage of multiple different icon formats for various platforms,
and various media for that matter.</dd>
</dl>

The 'icon' property provides the author
the ability to style any arbitrary element with an iconic equivalent.
An element's icon is not used/rendered
unless the 'content' property is set
to the value ''icon''(see above).
Documents whose elements have icons assigned to them
can be more easily viewed by users who find too much text distracting.

<div class="example"><p style="display:none">Example(s):
<h4 id="icon-example" class="no-num no-toc">Representing elements with icons</h4>

This example uses the above icon features to display icons in place of images and objects.
<pre><code class="lang-css">
img,object { content:icon }
  /* note that the CSS3 Generated Content module [[CSS3GENCON]]
     expands the 'content'property to apply to all elements. */

img { icon:url(imgicon.png); }
  /* provide a custom icon for images */

object { icon:url(objicon.png); }
  /* provide a different custom icon for objects */
</code></pre>
</div>

Note: The 'icon' property is at risk.

<h2 id="box-model">Box Model addition</h2>

<h3 id="box-sizing">'box-sizing' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>box-sizing</dfn></td></tr>
<tr><th>Value:</th><td>
content-box |
padding-box |
border-box |
inherit</td></tr>
<tr><th>Initial:</th><td>content-box</td></tr>
<tr><th>Applies to:</th><td>all elements that accept width or height</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>content-box</dt>
<dd>This is the behavior of width and height as specified by CSS2.1.
The specified width and height (and respective min/max properties)
apply to the width and height respectively of the content box of the element.
The padding and border of the element are laid out
and drawn outside the specified width and height.</dd>
<dt>padding-box</dt>
<dd>
The specified width and height (and respective min/max properties)
on this element determine the padding box of the element.
That is, any padding specified on the element is laid out
and drawn inside this specified width and height.
The content width and height are calculated by
subtracting the padding widths of the respective sides
from the specified 'width' and
'height' properties.
As the content width and height
<a href="http://www.w3.org/TR/CSS21/visudet.html#the-width-property">
cannot be negative</a> ([[!CSS21]], section 10.2),
this computation is floored at 0.
</dd>
<dt>border-box</dt>
<dd>The specified width and height (and respective min/max properties) on this element
determine the border box of the element.
That is, any padding or border specified on the element
is laid out and drawn inside this specified width and height.
The content width and height are calculated
by subtracting the border and padding widths of the respective sides
from the specified 'width'
and 'height' properties.
As the content width and height
<a href="http://www.w3.org/TR/CSS21/visudet.html#the-width-property">cannot be negative</a> ([[!CSS21]], section 10.2),
this computation is floored at 0.

Note: This is the behavior of width and height as commonly implemented
by legacy HTML user agents for replaced elements and input elements.
</dd>
</dl>


<div class="example"><p style="display:none">Example(s):
<h4 id="box-sizing-example" class="no-num no-toc">Using box-sizing to evenly share space</h4>

This example uses box-sizing to evenly horizontally split
two divs with fixed size borders inside a div container,
which would otherwise require additional markup.

sample CSS:
<pre><code class="lang-css">
div.container {
	width:38em;
	border:1em solid black;
}

div.split {
	box-sizing:border-box;
	width:50%;
	border:1em silver ridge;
	float:left;
}
</code></pre>

sample HTML fragment:
<pre><code class="lang-markup">
&lt;div class="container"&gt;
&lt;div class="split"&gt;This div occupies the left half.&lt;/div&gt;
&lt;div class="split"&gt;This div occupies the right half.&lt;/div&gt;
&lt;/div&gt;
</code></pre>

demonstration of sample CSS and HTML:
<div style="width:38em; border:1em solid black"><div style="box-sizing:border-box; width:50%; border:1em silver ridge; float:left">This div should occupy the left half.</div><div style="box-sizing:border-box; width:50%; border:1em silver ridge; float:left">This div should occupy the right half.</div>The two divs above should appear side by side, each (including borders) 50% of the content width of their container. If instead they are stacked one on top of the other then your browser does not support 'box-sizing'.
</div>
</div>

Note: The ''padding-box'' value is at risk.

<h2 id="outline-props">Outline properties</h2>

At times, style sheet authors may want to create outlines around
visual objects such as buttons, active form fields, image maps, etc.,
to make them stand out. Outlines differ from borders in the following
ways:

<ol>
<li>Outlines do not take up space. 
<li>Outlines may be non-rectangular. 
</ol>

The outline properties control the style of these dynamic outlines.

<h3 id="outline">'outline' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline</dfn></td></tr>
<tr><th>Value:</th><td>
[ &lt;'outline-color'&gt; || &lt;'outline-style'&gt; ||
&lt;'outline-width'&gt; ] |
inherit
</td></tr>
<tr><th>Initial:</th><td>see individual properties</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>see individual properties</td></tr>
<tr><th>Animatable:</th><td>see individual properties</td></tr>
</tbody></table>

<h3 id="outline-width">'outline-width' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-width</dfn></td></tr>
<tr><th>Value:</th><td><<'border-width'>> | inherit</td></tr>
<tr><th>Initial:</th><td>medium</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>absolute length; ''0'' if the outline style is ''none''.</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-length">length</a></td></tr>
</tbody></table>

<h3 id="outline-style">'outline-style' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-style</dfn></td></tr>
<tr><th>Value:</th><td>auto | <<'border-style'>> | inherit</td></tr>
<tr><th>Initial:</th><td>none</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<h3 id="outline-color">'outline-color' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-color</dfn></td></tr>
<tr><th>Value:</th><td><<color>> | invert | inherit</td></tr>
<tr><th>Initial:</th><td>invert</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>The computed value for ''invert'' is ''invert''. For &lt;color&gt; values, the computed value is as defined for the [[!CSS3COLOR]] 'color' property.</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-color">color</a></td></tr>
</tbody></table>

The outline created with the outline properties is drawn "over" a box,
i.e., the outline is always on top,
and doesn't influence the position or size of the box,
or of any other boxes.
Therefore, displaying or suppressing outlines does not cause reflow.

Outlines may be non-rectangular.
For example, if the element is broken across several lines,
the outline should be an outline or minimum set of outlines
that encloses all the element's boxes.
Each part of the outline should be fully connected
rather than open on some sides
(as borders on inline elements are when lines are broken).
The parts of the outline are not required to be rectangular.
The position of the outline may be affected by descendant boxes.
User agents should use an algorithm for determining
the outline that encloses a region appropriate
for conveying the concept of focus to the user.

The 'outline-width' property accepts
the same values as
          'border-width'
([[!CSS21]], section 8.5.1).

The 'outline-style' property accepts
the same values as
          'border-style'
([[!CSS21]], section 8.5.3), except that
''hidden'' is not a legal outline style.
In addition, in CSS3,
'outline-style'
accepts the value ''auto''.
The ''auto'' value permits the user agent
to render a custom outline style,
typically a style which is either a user interface default for the platform,
or perhaps a style that is richer
than can be described in detail in CSS,
e.g. a rounded edge outline with semi-translucent outer pixels
that appears to glow.
As such, this specification does not define how the
'outline-color'
is incorporated or used (if at all) when rendering
''auto'' style outlines.
User agents may treat ''auto'' as
''solid''.

The 'outline-color' property
accepts all colors, as well as the keyword <dfn>invert</dfn>.
''Invert'' is expected to perform a color inversion on the pixels on the screen.
This is a common trick to ensure the focus border is visible,
regardless of color background.

Conformant UAs may ignore the ''invert'' value
on platforms that do not support color inversion of the pixels on the screen.
If the UA does not support the ''invert'' value
then the initial value of the 'outline-color' property
is the ''currentColor'' [[!CSS3COLOR]] keyword.

The 'outline' property is a shorthand property,
and sets all three of 'outline-style',
'outline-width',
and 'outline-color'.

Note: The outline is the same on all sides.
In contrast to borders,
there are no 'outline-top' or 'outline-left' etc. properties.

This specification does not define how multiple overlapping outlines are drawn,
or how outlines are drawn for boxes that are partially obscured behind other elements.

<div class="example"><p style="display:none">Example(s):

Here's an example of drawing a thick outline around a BUTTON element:
<pre><code class="lang-css">
button { outline: thick solid }
</code></pre>
</div>

Graphical user interfaces may use outlines around elements
to tell the user which element on the page has the focus.
These outlines are in addition to any borders,
and switching outlines on and off should not cause the document to reflow.
The focus is the subject of user interaction in a document
(e.g., for entering text, selecting a button, etc.).

<div class="example"><p style="display:none">Example(s):

For example, to draw a thick black line around an element when it has the focus,
and a thick red line when it is active,
the following rules can be used:
<pre><code class="lang-css">
:focus  { outline: thick solid black }
:active { outline: thick solid red }
</code></pre>
</div>

Note: Since the outline does not affect formatting
(i.e., no space is left for it in the box model),
it may well overlap other elements on the page.

<h3 id="outline-offset">'outline-offset' property</h3>

By default, the outline is drawn starting just outside the border edge.
However, it is possible to offset the outline and draw it beyond the border edge.

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>outline-offset</dfn></td></tr>
<tr><th>Value:</th><td>&lt;length&gt; | inherit</td></tr>
<tr><th>Initial:</th><td>0</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>&lt;length&gt; value in absolute units (px or physical).</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-length">length</a></td></tr>
</tbody></table>

If the computed value of 'outline-offset'
is anything other than 0,
then the outline is outset from the border edge by that amount.

<div class="example"><p style="display:none">Example(s):

For example,
to leave 2 pixels of space between a focus outline
and the element that has the focus or is active,
the following rule can be used:
<pre><code class="lang-css">
:focus,:active  { outline-offset: 2px }
</code></pre>
</div>


<h2 id="resizing-and-overflow">Resizing &amp; Overflow</h2>

CSS2.1 provides a mechanism for controlling the appearance of a scrolling mechanism
(e.g. scrollbars)
on block container elements.
This specification adds to that a mechanism for controlling
user resizability of elements as well as the ability to specify text overflow behavior.

<h3 id="resize">'resize' property</h3>

The 'resize' property allows the author
to specify whether or not an element is resizable by the user,
and if so, along which axis/axes.

<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>resize</dfn></td></tr>
<tr><th>Value: </th><td>none | both | horizontal | vertical | inherit</td></tr>
<tr><th>Initial:</th><td>none</td></tr>
<tr><th>Applies to:</th><td>elements with 'overflow' other than visible</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value.</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>none</dt>
<dd>The UA does not present a resizing mechanism on the element,
and the user is given no direct manipulation mechanism to resize the element.</dd>
<dt>both</dt>
<dd>The UA presents a bidirectional resizing mechanism
to allow the user to adjust both the height and the width of the element.</dd>
<dt>horizontal</dt>
<dd>The UA presents a unidirectional horizontal resizing mechanism
to allow the user to adjust only the width of the element.</dd>
<dt>vertical</dt>
<dd>The UA presents a unidirectional vertical resizing mechanism
to allow the user to adjust only the height of the element.</dd>
</dl>

Currently it is possible to control the appearance of the scrolling mechanism (if any)
on an element using the 'overflow' property
(e.g. '<code class="lang-css">overflow: scroll</code>' vs. '<code class="lang-css">overflow: hidden</code>' etc.).
The purpose of the 'resize' property
is to also allow control over the appearance and function of the resizing mechanism
(e.g. a resize box or widget) on the element.

Note: The resizing mechanism is NOT the same as the scrolling mechanism.
The scrolling mechanism allows the user
to determine which portion of the contents of an element is shown.
The resizing mechanism allows the user
to determine the size of the element.

The 'resize' property applies to elements
whose computed 'overflow' value
is something other than ''visible''.
If 'overflow' is different in a particular axis
(i.e. 'overflow-x' vs. 'overflow-y'),
then this property applies to the dimension(s)
which do not have the value ''visible''.

When an element is resized by the user,
the user agent keeps track of a resize factor
(which is initially 1.0) for the width and height,
which it then applies to the computed width and height
as part of determining the used width and height.
The element's contents (and surroundings) are reformatted as necessary.

The resize factor introduces a step in width/height calculations and formatting
as described in <a href="http://www.w3.org/TR/CSS21/visudet.html">chapter 10 of CSS2.1</a>.
Specifically the following step is inserted between steps 1 and 2
of the algorithm in <a href="http://www.w3.org/TR/CSS21/visudet.html#min-max-widths">section 10.4</a>
and <a href="http://www.w3.org/TR/CSS21/visudet.html#min-max-heights">10.7</a> in CSS2.1 [[!CSS21]],
where [dimension] is 'width' for 10.4 and 'height' for 10.7.
<blockquote><p style="text-indent:-2em">
1b. If the resize [dimension] factor is not 1.0,
 then the tentative used [dimension] is multiplied by that factor,
 and the rules above are applied again,
 but this time using the result of that multiplication as the computed value for '[dimension]'.
</blockquote>

With regard to interactivity and the Document Object Model (DOM),
the resize factor on an element lasts the lifetime of the element,
however, if the 'resize' property itself is altered
(e.g. via pseudo-class change or via DOM manipulation),
then the resize factor is reset to 1.0.

The precise direction of resizing
(i.e. altering the top left of the element or altering the bottom right)
may depend on a number of factors
including whether the element is absolutely positioned,
whether it is positioned using the 'right'
and 'bottom' properties,
whether the language of the element is right-to-left etc.
The precise direction of resizing is left to the UA to properly determine for the platform.

The user agent may restrict the resizing range to something suitable,
such as between the original formatted size of the element,
and large enough to encompass all the element's contents.

<div class="example"><p style="display:none">Example(s):

For example,
to make iframes scrollable <em>and</em> resizable,
the following rule can be used:
<pre><code class="lang-css">
iframe,object[type^="text/"],
object[type$="+xml"],object[type="application/xml"]
{
  overflow:auto;
  resize:both;
}
</code></pre>
</div>

<!--
too bad we don't have @viewport yet. otherwise this would be cool:
<pre><code class="lang-css">
@viewport {
       width: 100px;
       height: 100px;
       overflow: hidden;
       resize: none
     } /* display content in a non-resizable 100px by 100px window */
</code></pre>
-->


<h3 id="text-overflow">
    Overflow Ellipsis: the 'text-overflow' property</h3>

<table class="propdef"><tbody>
<tr><th>Name:</th>
    <td><dfn>text-overflow</dfn></td></tr>
<tr><th>Value:</th>
    <td> (
clip |
ellipsis |
<<string>>
){1,2} |
inherit
</td></tr>
<tr><th>Initial:</th>
    <td>clip</td></tr>
<tr><th>Applies to:</th>
    <td>block containers</td></tr>
<tr><th>Inherited:</th>
    <td>no</td></tr>
<tr><th>Percentages:</th>
    <td>N/A</td></tr>
<tr><th>Media:</th>
    <td>visual</td></tr>
<tr><th>Computed&nbsp;value:</th>
    <td>as specified</td></tr>
<tr><th>Animatable:</th>
    <td>no</td></tr>
</tbody></table>

This property specifies rendering when inline content overflows
its block container element ("the block")
in its inline progression direction
that has 'overflow'
other than ''visible''.
Text can overflow for example when it is prevented from wrapping
(e.g. due to '<code class="lang-css">white-space: nowrap</code>'
or a single word is too long to fit).
Values have the following meanings:

<dl data-dfn-for="overflow" class="valuedef">
  <dt><dfn>clip</dfn></dt>
    <dd>Clip inline content that overflows. Characters may be only partially rendered.</dd>

  <dt><dfn>ellipsis</dfn></dt>
    <dd>
Render an ellipsis character (U+2026)
to represent clipped inline content.
Implementations may substitute a more language/script-appropriate
ellipsis character,
or three dots "..." if the ellipsis character is unavailable.
</dd>
<dt><<string>></dt>
   <dd>
Render the given string to represent clipped inline content.
The given string is treated as an independent paragraph
for bidi purposes.
</dd>
</dl>

Note: The &lt;string&gt; value, and the 2-value syntax "{1,2}"
and functionality are all at risk.

The term "character" is used in this property definition
for better readability and means "grapheme cluster" [[!UAX29]]
for implementation purposes.

If there is one value,
it applies only to the <a>end</a> line edge.
If there are two values,
the first value applies to the <a>line-left</a> edge,
and the second value applies to the <a>line-right</a> edge.
The terms <a>end</a>, <a>line-left</a> and <a>line-right</a> are defined in [[!CSS3-WRITING-MODES]].

Note: the use of <a>line-left</a> and <a>line-right</a>
rather than <a>start</a> and <a>end</a>
when there are two values is intentional,
to facilitate the use of directional characters such as arrows.

For the ellipsis
and string values,
implementations must hide characters and
<a href="http://www.w3.org/TR/CSS21/visuren.html#inline-boxes">
atomic inline-level elements</a>
at the applicable edge(s) of the line as necessary to fit the ellipsis/string.
Place the ellipsis/string immediately adjacent
to the applicable edge(s) of the remaining inline content.
The first character or
<a href="http://www.w3.org/TR/CSS21/visuren.html#inline-boxes">
atomic inline-level element</a>
on a line
must be clipped rather than ellipsed.

<h4 id="ellipsing-details" class="no-num no-toc">ellipsing details</h4>
<ul>
<li>
Ellipsing only affects rendering and must not affect layout
nor dispatching of pointer events.
<li>
The ellipsis is styled and baseline-aligned according to
the block.
<li>
Ellipsing occurs after relative positioning and other graphical transformations.
<li>
If there is insufficient space for the ellipsis,
then clip the rendering of the ellipsis itself
(on the same side that neutral characters on the line
would have otherwise been clipped with the ''clip'' value).
</ul>

<h4 id="ellipsis-interaction" class="no-num no-toc">user interaction with ellipsis</h4>
<ul>
<li>When the user is interacting with content
(e.g. editing, selecting, scrolling),
the user agent may treat text-overflow ''ellipsis'' or string values as ''clip''.

<li>Selecting the ellipsis should select the ellipsed text.
If all of the ellipsed text is selected,
UAs should show selection of the ellipsis.
Behavior of partially-selected ellipsed text is up to the UA.

</ul>

<div class="example"><p style="display:none">Example(s):
<h4 id="text-overflow-examples" class="no-num no-toc">text-overflow examples</h4>

These examples demonstrate setting the text-overflow of a block container element
that has text which overflows its dimensions:

sample CSS for a div:
<pre><code class="lang-css">div {
  font-family:Helvetica,sans-serif; line-height:1.1;
  width:3.1em; padding:.2em; border:solid .1em black; margin:1em 0;
}</code></pre>

sample HTML fragments, renderings, and your browser:
<table border="1" cellpadding="5" style="color:#000;background:#fff;"><tbody>
<tr><th>HTML</th><th>sample rendering</th><th>your browser</th></tr>
<tr>
<td><pre><code class="lang-markup">&lt;div&gt;
CSS IS AWESOME, YES
&lt;/div&gt;
</code></pre></td>


<td>
<object type="image/png" data="cssisawesome.png">
First, a box with text drawing outside of it.
</object>
</td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1;">CSS IS AWESOME, YES</div>
</td>
</tr>

<tr>
<td><pre><code class="lang-markup">&lt;div style="<strong>text-overflow:clip;</strong> overflow:hidden"&gt;
CSS IS AWESOME, YES
&lt;/div&gt;
</code></pre></td>

<td>
<object type="image/png" data="cssisaweso.png">
Second, a similar box with the text clipped outside the box.
</object></td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em; font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:clip;">CSS IS AWESOME, YES</div>
</td>
</tr>

<tr>
<td><pre><code class="lang-markup">&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
CSS IS AWESOME, YES
&lt;/div&gt;
</code></pre></td>

<td>
<object type="image/png" data="cssisaw.png">
Third, a similar box with an ellipsis representing the clipped text.
</object>
</td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">CSS IS AWESOME, YES</div>
</td>
</tr>


<tr>
<td><pre><code class="lang-markup">&lt;div style="<strong>text-overflow:ellipsis;</strong> overflow:hidden"&gt;
NESTED
 &lt;p&gt;PARAGRAPH&lt;/p&gt;
WON'T ELLIPSE.
&lt;/div&gt;
</code></pre></td>

<td>
<object type="image/png" data="nes.png">
Fourth, a box with a nested paragraph demonstrating anonymous block boxes equivalency and non-inheritance into a nested element.
</object>
</td>

<td>
<div style="width:3.1em; border:solid .1em black; margin:1em 0; padding:.2em;  font-family:Helvetica,sans-serif; line-height:1.1; overflow:hidden;text-overflow:ellipsis;">NESTED
 <p>PARAGRAPH
WON'T ELLIPSE.</div>
</td>

</tr>
</tbody></table>

</div>

Note: the side of the line that the ellipsis is placed depends on the 'direction' of the block.
E.g. an overflow hidden right-to-left
(<code class="lang-css">direction: rtl</code>)
block clips inline content on the <a>left</a> side,
thus would place a text-overflow ellipsis on the <a>left</a>
to represent that clipped content.

<!-- insert RTL example diagram here to illustrate note. -->

<h4 id="ellipsis-scrolling" class="no-num no-toc">ellipsis interaction with scrolling interfaces</h4>

This section applies to elements with text-overflow other than ''clip''
(non-clip text-overflow)
and overflow:scroll.

When an element with non-clip text-overflow has overflow of scroll
in the inline progression dimension of the text,
and the browser provides a mechanism for scrolling
(e.g. a scrollbar on the element,
or a touch interface to swipe-scroll, etc.),
there are additional implementation details that provide a better user experience:

When an element is scrolled (e.g. by the user, DOM manipulation),
more of the element's content is shown.
The value of text-overflow should not affect
whether more of the element's content is shown or not.
If a non-clip text-overflow is set,
then as more content is scrolled into view,
implementations should show whatever additional content fits,
only truncating content which would otherwise be clipped
(or is necessary to make room for the ellipsis/string),
until the element is scrolled far enough
to display the edge of the content
at which point that content should be displayed
rather than an ellipsis/string.

As some content is scrolled into view,
it is likely that other content may scroll out of view on the other side.
If that content's block container element is the same
that's doing the scrolling,
then implementations should render an ellipsis/string in place of
the clipped content,
with the same details as described in the value definition above,
except that the ellipsis/string is drawn in the <a>start</a>
(rather than <a>end</a>) of
the block's direction (per the direction property).

While the content is being scrolled,
implementations may adjust their rendering of ellipses/strings
(e.g. align to the box edges rather than line edges).

If there is insufficient space for both start
and end ellipses/strings,
then only the end ellipsis/string should be rendered.

<h2 id="pointing-keyboard">Pointing Devices and Keyboards</h2>

<h3 id="pointer-interaction">Pointer interaction</h3>

<h4 id="cursor">'cursor' property</h4>
<table class="propdef"><tbody>
<tr><th>Name:</th><td><dfn>cursor</dfn></td></tr>
<tr><th>Value:</th><td>
[ [&lt;uri&gt; [&lt;x&gt; &lt;y&gt;]?,]* <br>
[ auto | default | none |<br>
 context-menu | help | pointer | progress | wait | <br>
 cell | crosshair | text | vertical-text | <br>
 alias | copy | move | no-drop | not-allowed | <br>
 e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize |
 ew-resize | ns-resize | nesw-resize | nwse-resize |
 col-resize | row-resize |
 all-scroll
| zoom-in | zoom-out
<br>
] ] | inherit </td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>all elements</td></tr>
<tr><th>Inherited:</th><td>yes</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>visual, interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>as specified, except with any relative URLs converted to absolute</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<!-- got this far reformatting lines -->
This property specifies the type of cursor to be displayed for the pointing device
when over the element's border, padding, and content.
Values have the following meanings:

image cursors
<dl>
<dt>&lt;uri&gt;</dt>
<dd>The user agent retrieves the cursor from the resource designated by the URI.
If the user agent cannot handle the first cursor of a list of cursors,
it must attempt to handle the second, etc.
If the user agent cannot handle any user-defined cursor,
it must use the cursor keyword at the end of the list.
The optional &lt;x&gt; and &lt;y&gt; coordinates
identify the exact position within the image which is the pointer position (i.e., the hotspot).
</dd>
<dt>&lt;x&gt;</dt>
<dt>&lt;y&gt;</dt>
<dd>
Each is a &lt;number&gt;.
The x-coordinate and y-coordinate of the position
in the cursor's coordinate system (left/top relative)
which represents the precise position that is being pointed to.
If the values are unspecified,
then the intrinsic hotspot defined inside the image resource itself is used.
If both the values are unspecific and the referenced cursor has no defined hotspot,
the effect is as if a value of "0 0" were specified.
</dd>
</dl>

general purpose cursors
<dl>
<dt style="cursor:auto">auto</dt>
<dd>The UA determines the cursor to display based on the current
context.
</dd>
<dt style="cursor:default">default</dt>
<dd>The platform-dependent default cursor. Often rendered as an arrow.
</dd>
<dt style="cursor:none">none</dt>
<dd>No cursor is rendered for the element.</dd>
</dl>

links and status cursors
<dl>
<dt style="cursor:context-menu">context-menu</dt>
<dd>A context menu is available for the object under the cursor.
Often rendered as an arrow with a small menu-like graphic next to it.</dd>
<dt style="cursor:help">help</dt>
<dd>Help is available for the object under the cursor.
Often rendered as a question mark or a balloon.
</dd>
<dt style="cursor:pointer">pointer</dt>
<dd>The cursor is a pointer that indicates a link.
</dd>
<dt style="cursor:progress">progress</dt>
<dd>A progress indicator.  The program is performing some processing,
but is different from ''wait'' in that the user may still interact
with the program. Often rendered as a spinning beach ball,
or an arrow with a watch or hourglass.</dd>
<dt style="cursor:wait">wait</dt>
<dd>Indicates that the program is busy and the user should wait.
Often rendered as a watch or hourglass.
</dd>
</dl>

selection cursors
<dl>
<dt style="cursor:cell">cell</dt>
<dd>Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.</dd>
<dt style="cursor:crosshair">crosshair</dt>
<dd>A simple crosshair (e.g., short line segments resembling a "+" sign).
Often used to indicate a two dimensional bitmap selection mode.
</dd>
<dt style="cursor:text">text</dt>
<dd>Indicates text that may be selected. Often rendered as a vertical I-beam.
User agents may automatically display a horizontal I-beam/cursor
(e.g. same as the ''vertical-text'' keyword)
for vertical text, or for that matter,
any angle of I-beam/cursor for text that is rendered at any particular angle.
</dd>
<dt style="cursor:vertical-text">vertical-text</dt>
<dd>Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.</dd>
</dl>

drag and drop cursors
<dl>
<dt style="cursor:alias">alias</dt>
<dd>Indicates an alias of/shortcut to something is to be created.
Often rendered as an arrow with a small curved arrow next to it.</dd>

<dt style="cursor:copy">copy</dt>
<dd>Indicates something is to be copied.
Often rendered as an arrow with a small plus sign next to it.</dd>

<dt style="cursor:move">move</dt>
<dd>Indicates something is to be moved.
</dd>
<dt style="cursor:no-drop">no-drop</dt>
<dd>Indicates that the dragged item cannot be dropped at the current cursor location.
Often rendered as a hand or pointer with a small circle with a line through it.
</dd>
<dt style="cursor:not-allowed">not-allowed</dt>
<dd>Indicates that the requested action will not be carried out.
Often rendered as a circle with a line through it.
</dd>
</dl>

resizing and scrolling cursors
<dl>
<dt>
<span style="cursor:e-resize">e-resize</span>,
<span style="cursor:n-resize">n-resize</span>,
<span style="cursor:ne-resize">ne-resize</span>,
<span style="cursor:nw-resize">nw-resize</span>,
<span style="cursor:s-resize">s-resize</span>,
<span style="cursor:se-resize">se-resize</span>,
<span style="cursor:sw-resize">sw-resize</span>,
<span style="cursor:w-resize">w-resize</span>
</dt>
<dd>Indicates that some edge is to be moved. For example, the
''se-resize'' cursor is used when the movement starts from the
south-east corner of the box.
</dd>
<dt>
<span style="cursor:ew-resize">ew-resize</span>,
<span style="cursor:ns-resize">ns-resize</span>,
<span style="cursor:nesw-resize">nesw-resize</span>,
<span style="cursor:nwse-resize">nwse-resize</span>
</dt>
<dd>Indicates a bidirectional resize cursor.</dd>
<dt style="cursor:col-resize">col-resize</dt>
<dd>Indicates that the item/column can be resized horizontally.
Often rendered as arrows pointing left and right with a vertical bar separating them.</dd>
<dt style="cursor:row-resize">row-resize</dt>
<dd>Indicates that the item/row can be resized vertically.
Often rendered as arrows pointing up and down with a horizontal bar separating them.
</dd>
<dt style="cursor:all-scroll">all-scroll</dt>
<dd>Indicates that the something can be scrolled in any direction.
Often rendered as arrows pointing up, down, left, and right with a dot in the middle.
</dd>
</dl>

zooming cursors
<dl>
<dt>
<span style="cursor:zoom-in"> zoom-in</span>,
<span style="cursor:zoom-out"> zoom-out</span>
</dt>
<dd>
Indicates that something can be zoomed (magnified) in or out, and
often rendered as a magnifying glass with a "+" or "-" in the center of the glass, for ''zoom-in'' and ''zoom-out'' respectively.
</dd>
</dl>

The UA may treat unsupported values as ''auto''.
E.g. on platforms that do not have a concept of a ''context-menu'' cursor,
the UA may render ''default'' or whatever is appropriate.

<div class="example">

Example: cursor fallback

Here is an example of using several cursor values.
<pre><code class="lang-css">
:link,:visited {
    cursor: url(example.svg#linkcursor),
            url(hyper.cur),
            url(hyper.png) 2 3,
            pointer
}
</code></pre>

This example sets the cursor on all hyperlinks (whether visited or not)
to an external <a href="http://www.w3.org/TR/SVG/interact.html#CursorElement">SVG cursor</a> ([[SVG10]], section 16.8.3).
User agents that don't support SVG cursors would simply skip
to the next value and attempt to use the "hyper.cur" cursor.
If that cursor format was also not supported,
the UA could attempt to use the "hyper.png" cursor with the explicit hot spot.
Finally if the UA does not support any of those image cursor formats, the UA would skip to the last value
and simply render the ''pointer'' cursor.
</div>



<h3 id="keyboard">Keyboard control</h3>

<h4 id="nav-index">Sequential navigation order: the 'nav-index' property</h4>

The 'nav-index' property is an input-method-neutral way of specifying the sequential navigation order (also known as "tabbing order").
<table class="propdef">
<tr><th>Name:</th><td><dfn>nav-index</dfn></td></tr>
<tr><th>Value: </th><td>auto | &lt;number&gt; | inherit</td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>all enabled elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>n/a</td></tr>
<tr><th>Media:</th><td>interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>specified value.</td></tr>
<tr><th>Animatable:</th><td>as <a href="http://dev.w3.org/csswg/css3-transitions/#animtype-number">number</a></td></tr>
</table>
<dl>
<dt>auto</dt>
<dd>The element's sequential navigation order is assigned automatically by the user agent.</dd>
<dt>&lt;number&gt;</dt>
<dd>The number (which is non-zero and positive) indicates
the sequential navigation order for the element.
''1'' means first.
Elements with the same nav-index value are navigated
in document order when that nav-index value is being navigated.
</dd>
</dl>

This property is a replacement for the HTML4/XHTML1 attribute
'<a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.11.1">tabindex</a>' ([[HTML401]], section 17.11.1).
Borrowed and slightly rephrased from the HTML4 Recommendation:

This property specifies the position of the current element in the sequential navigation order for the current document.

The sequential navigation order defines the order
in which elements will receive focus when navigated by the user via the keyboard.
The sequential navigation order may include elements nested within other elements.

Elements that may receive focus should be navigated by user agents according to the following rules:
<ol>
<li>Those elements that support the nav-index property
and assign a positive value to it are navigated first.
Navigation proceeds from the element with the lowest nav-index value
to the element with the highest value.
Values need not be sequential nor must they begin with any particular value.
Elements that have identical nav-index values should be navigated in document order.
<li>Those elements that do not support the nav-index property
or support it and assign it a value of ''auto''
are navigated next.
These elements are navigated in document order.
<li>Elements that are disabled do not participate in the sequential navigation order.
</ol>

The actual key sequence that causes sequential navigation or element activation
depends on the configuration of the user agent
(e.g., the "tab" key is often used for sequential navigation,
and the "enter" key is used to activate a selected element).

User agents may also define key sequences to navigate the sequential navigation order in reverse.
When the end (or beginning) of the tabbing order is reached,
user agents may circle back to the beginning (or end).
The key combination "shift-tab" is often used for reverse sequential navigation.

Note: The 'nav-index' property is at risk.

<h4 id="nav-dir">Directional focus navigation: the 'nav-up', 'nav-right', 'nav-down', 'nav-left' properties</h4>
<table class="propdef"><tbody>
<tr><th>Name: </th><td><dfn>nav-up</dfn>, <dfn>nav-right</dfn>, <dfn>nav-down</dfn>, <dfn>nav-left</dfn></td></tr>
<tr><th>Value: </th><td>auto | &lt;id&gt; [ current | root | &lt;target-name&gt; ]?  | inherit</td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>all enabled elements</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>as specified</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

<dl>
<dt>auto</dt>
<dd>The user agent automatically determines which element to navigate the focus to in response to directional navigational input.</dd>
<dt>&lt;id&gt;</dt>
<dd><p>The &lt;id&gt; value consists of a ''#'' character followed by an identifier,
similar to a fragment identifier in a URL.
It indicates the element to which the focus is navigated to in response to directional navigation input respective to the specific property.

If the &lt;id&gt; refers to the currently focused element,
the directional navigation input respective to the nav- property is ignored &mdash;
there is no need to refocus the same element.
</dd>
<dt>&lt;target-name&gt;</dt>
<dd>
The &lt;target-name&gt; parameter indicates the target frame for the focus navigation.
It is a string and it cannot start with the underscore "_" character.
If the specified target frame does not exist,
the parameter will be treated as the keyword ''current'',
which means to simply use the frame that the element is in.
The keyword ''root'' indicates that the user agent should target the full window.
</dd>
</dl>

User agents for devices with directional navigation keys
respond by navigating the focus according to four respective nav-* directional navigation properties
(nav-up, nav-right, nav-down, nav-left).
This specification does not define which keys of a device are directional navigational keys.

Note: Typical personal computers have keyboards with four arrow keys.
One possible implementation would be to use those four arrow keys for directional navigation.
For accessibility and user convenience,
user agents should allow configuration of which keys on a keyboard are used for directional navigation.

<div class="example">

Example: positioned buttons

Here is an example of buttons positioned in a diamond shape
whose navigation order and directional focus navigation is set in such a way
to navigate the focus clockwise (or counter-clockwise) around the diamond shape
when the user chooses to navigate sequentially or directionally.
<pre><code class="lang-css">
button { position:absolute }

button#b1 {
	top:0; left:50%;
	nav-index:1;
	nav-right:#b2; nav-left:#b4;
	nav-down:#b2; nav-up:#b4;
}

button#b2 {
	top:50%; left:100%;
	nav-index:2;
	nav-right:#b3; nav-left:#b1;
	nav-down:#b3; nav-up:#b1;
}

button#b3 {
	top:100%; left:50%;
	nav-index:3;
	nav-right:#b4; nav-left:#b2;
	nav-down:#b4; nav-up:#b2;
}

button#b4 {
	top:50%; left:0;
	nav-index:4;
	nav-right:#b1; nav-left:#b3;
	nav-down:#b1; nav-up:#b3;
}
</code></pre>

Whatever markup sequence the buttons may have
(which is not specified in this example)
is irrelevant in this case because they are positioned, and yet,
it is still important to ensure focus navigation behaviors which relate reasonably to the specified layout.
</div>

<h4 id="input-method-editor">Input method editor: the 'ime-mode' property</h4>

<table class="propdef"><tbody>
<tr><th>Name: </th><td><dfn>ime-mode</dfn></td></tr>
<tr><th>Value: </th><td>auto | normal | active | inactive | disabled | inherit</td></tr>
<tr><th>Initial:</th><td>auto</td></tr>
<tr><th>Applies to:</th><td>text fields</td></tr>
<tr><th>Inherited:</th><td>no</td></tr>
<tr><th>Percentages:</th><td>N/A</td></tr>
<tr><th>Media:</th><td>interactive</td></tr>
<tr><th>Computed&nbsp;value:</th><td>as specified</td></tr>
<tr><th>Animatable:</th><td>no</td></tr>
</tbody></table>

The 'ime-mode' CSS property controls the state of the input method editor for text fields.

<dl>
<dt>auto</dt>
<dd>
No change is made to the current input method editor state. This is the default.
</dd>
<dt>normal</dt>
<dd>
The IME state should be normal;
this value can be used in a user style sheet to override the page setting.
</dd>
<dt>active</dt>
<dd>
The input method editor is initially active;
text entry is performed using it unless the user specifically dismisses it.
</dd>
<dt>inactive</dt>
<dd>
The input method editor is initially inactive,
but the user may activate it if they wish.
</dd>
<dt>disabled</dt>
<dd>
The input method editor is disabled and may not be activated by the user.
</dd>
</dl>

<div class="example">
<p>Example: disabling input method support
<pre><code class="lang-markup">&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;initial value&quot; style=&quot;ime-mode: disabled&quot;&gt;
</code></pre>

This example disables input method support for a field;
this might be necessary for fields that enter data
into a database that doesn't support extended character sets,
for example.
</div>

<div class="example">
<p>Example: user preference
<pre><code class="lang-css">input[type=password] {
    ime-mode: auto&nbsp;!important;
}
</code></pre>

This example CSS may be placed into a user style sheet file to force password input fields to behave in a default manner.
</div>

Note: In general, it's not appropriate for a public web site
to manipulate the IME mode setting.
This property should be used for web applications and the like.
Authors should not rely on disabling IME
to prevent extended characters from passing through a form.
Even with IME disabled, users can still paste extended characters
into a form's fields.

Note: The 'ime-mode' property is at risk.

<hr title="Separator from footer">


<h2 class="no-num" id="acknowledgments">Appendix A. Acknowledgments</h2>

This appendix is <em>informative</em>.

Thanks to feedback and contributions from
L. David Baron,
Bert Bos,
Matthew Brealey,
Ada Chan,
Michael Day,
Micah Dubinko,
Elika E.,
Steve Falkenburg,
Al Gilman,
Ian Hickson,
Bjoern Hoehrmann,
David Hyatt,
Richard Ishida,
Sho Kuwamoto,
Susan Lesch,
Peter Linss,
Brad Pettit,
Alexander Savenkov,
Sebastian Schnitzenbaumer,
Etan Wexler,
David Woolley
and Domel.

<h2 class="no-num" id="changes">Appendix B. Changes</h2>

This appendix is <em>informative</em>.

In general this draft contains numerous
editorial/grammatical/spelling corrections,
and several new informative examples.
This appendix describes minor functional changes from the
<a href="http://www.w3.org/TR/2004/CR-css3-ui-20040511/"
   >Candidate Recommendation (CR) of 11 May 2004</a>
that were made to reflect implementer adoption (or lack thereof)
in the seven years since.
In particular, changes since the CR fall into one of
three categories:

<ul>
<li>Minor refinements to features based on implementation experience.
 <!-- e.g. cursor applying to border, padding, content areas -->
 
<li>Dropping features that were not implemented,
or were insufficiently implemented to exit CR.
 <!-- e.g. System Appearance -->
<li>Adding a small number of new but already interoperably
implemented features.
 <!-- e.g. text-overflow, ime-mode -->
 
</ul>

<h3 class="no-num" id="changes-list">List of substantial changes</h3>

<ul>
<li>System Appearance has been dropped,
including appearance values &amp; property,
and system fonts / extension of the 'font' property shorthand.


<li>The ::selection pseudo-element has been dropped since
it was dropped from Selectors after testing found
interoperability problems and further details to explore/define.


<li>'box-sizing' property. Added ''padding-box'' value.

<li>'cursor' property. Added detail about applying to the border, padding, and content areas of the element.

<li>'ime-mode' property - new!

<li>'text-overflow' property - new!

<li>2013-nov-28: 'nav-up', 'nav-right', 'nav-down', and 'nav-left' properties removed from the "at risk" list

</ul>



<h2 class="no-num" id="default-style-sheet">Appendix C. Default style sheet additions for HTML</h2>

This appendix is <em>informative</em>.

Potential additions to the base style sheet to express HTML form controls, and a few dynamic presentation attributes:

<pre class="lang-css">

:enabled:focus {
 outline: 2px inset;
}

button,
input[type=button],
input[type=reset],
input[type=submit],
input[type=checkbox],
input[type=radio],
textarea,
input,
input[type=text],
input[type=hidden],
input[type=password],
input[type=image]
{
 display: inline-block;
 white-space: nowrap;
}

button
{
/* white space handling of BUTTON tags in particular */
 white-space:normal;
}

input[type=reset]
{
/* default content of HTML4/XHTML1 input type=reset button */
 content: "Reset";
}

input[type=submit]
{
/* default content of HTML4/XHTML1 input type=submit button */
 content: "Submit";
}

input[type=button],
input[type=reset][value],
input[type=submit][value]
{
/* text content/labels of HTML4/XHTML1 "input" buttons */
 content: attr(value);
}

textarea
{
/* white space handling of TEXTAREA tags in particular */
 white-space:pre-wrap;
}

input[type=hidden]
{
/* appearance of the HTML4/XHTML1 hidden text field in particular */
 display: none;
}

input[type=image]
{
 display: inline-block;
 content: attr(src,url);
 border: none;
}

select[size]
{
/* HTML4/XHTML1 &lt;select&gt; w/ size more than 1 - appearance of list */
 display: inline-block;
 height: attr(size,em);
}

select,select[size=1]
{
/* HTML4/XHTML1 &lt;select&gt; without size, or size=1 - popup-menu */
 display: inline-block;
 height: 1em;
 overflow: hidden;
}

select[size]:active
{
/* active HTML4/XHTML &lt;select&gt; w/ size more than 1 - appearance of active list */
 display: inline-block;
}

optgroup,option
{
 display: block;
 white-space: nowrap;
}

optgroup[label],option[label]
{
 content: attr(label);
}

option[selected]::before
{
 display: inline;
 content: check;
}

*[tabindex] { nav-index:attr(tabindex,number) }


/* Though FRAME resizing is not directly addressed by this specification,
   the following rules may provide an approximation of reasonable behavior. */

/*

frame { resize:both }
frame[noresize] { resize:none }

*/

</pre>


<h2 class="no-num" id="test-suite">Appendix D: Test Suite</h2>

This appendix is <em>informative</em>.

This specification shall refer to a test suite
written according to the <a href="http://www.w3.org/Style/CSS/Test/testsuitedocumentation">CSS Test Suite Documentation</a>
and following the <a href="http://www.w3.org/Style/CSS/Test/guidelines.html">CSS2.1 Test Case Authoring Guidelines</a>.
The test suite shall allow user agents to verify their basic conformance to the specification.
This test suite does not pretend to be exhaustive and does not cover all possible combinations of user interface related features.
These tests will be made available from the <a href="http://www.w3.org/Style/CSS/Test/">CSS Test Suites</a> home page.

Related issue:
 <a href="http://wiki.csswg.org/spec/css3-ui#issue-1">1</a>.
