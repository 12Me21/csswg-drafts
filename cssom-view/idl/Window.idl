
partial interface Window {

  [Documentation=
   "<p>When the {@name} {@type} is invoked these steps must be run:</p>\
    <ol>\
     <li><p>Let <var title>parsed_media_query_list</var> be the result of\
     <span title='parse a media query list' data-anolis-spec=cssom>parsing</span>\
     <var title>media_query_list</var>.</p></li>\
     <li><p>Return a <em>new</em> <code>MediaQueryList</code> object,\
     associated with the <code data-anolis-spec=html>Window</code> object, with\
     <var title>parsed_media_query_list</var> as its associated\
     media query list.</p></li>\
    </ol>"
  ]
  MediaQueryList matchMedia(DOMString query);

  [Documentation=
   "<p>The {@name} {@type}  must return the {@name} object\
    associated with the <code data-anolis-spec=html>Window</code> object. It always returns the same\
    object.</p>\
    <p class='note'>Accessing {@name} through a <code data-anolis-spec=html>WindowProxy</code> object might yield different results\
    when the <code data-anolis-spec=dom>Document</code> is navigated.</p>"
  ]
  readonly attribute Screen screen;

  // viewport
  [Documentation=
   "<p>The {@name} {@type} must return the <span>viewport</span> width including the size of a rendered scroll bar (if any).</p>\
    <div class='example'>\
     <p>The following snippet shows how to obtain the width of the viewport:</p>\
     <pre><code>var viewportWidth = innerWidth</code></pre>\
    </div>"
  ]
  readonly attribute long innerWidth;

  [Documentation=
   "<p>The {@name} {@type} must return the <span>viewport</span> height including the size of a rendered scroll bar (if any).</p>"
  ]
  readonly attribute long innerHeight;

  // viewport scrolling
  [Documentation=
   "<p>The {@name} {@type} attribute must return the x-coordinate, relative to the <span>initial containing block</span> origin, of the left of the <span>viewport</span>.</p>"
  ]
  readonly attribute long scrollX;

  [Documentation=
   "<p>The {@name} {@type} attribute must return the value returned by the <code>scrollX</code> attribute.</p>"
  ]
  readonly attribute long pageXOffset;

  [Documentation=
   "<p>The {@name} {@type} attribute must return the y-coordinate, relative to the <span>initial containing block</span> origin, of the top of the <span>viewport</span>.</p>"
  ]
  readonly attribute long scrollY;

  [Documentation=
   "<p>The {@name} {@type} attribute must return the value returned by the <code>scrollY</code> attribute.</p>"
  ]
  readonly attribute long pageYOffset;

  [Documentation=
   "<p>When the {@name} {@type} is invoked these steps must be run:</p>\
    <ol>\
     <li>\
      <dl>\
       <dt>If <span>document content</span> can have overflow to the right\
       <dd><p>Let <var title>x</var> be max(0, min(<var title>x</var>,\
       <span>content</span> width - <span>content edge</span>\
       width)).</p></dd>\
       <dt>If <span>document content</span> can have overflow to the left\
       (under right-to-left conditions)\
       <dd><p>Let <var title>x</var> be min(0, max(<var title>x</var>,\
       <span>content edge</span> width - <span>content</span>\
       width)).</p></dd>\
      </dl>\
     </li>\
     <li><p>Let <var title>y</var> be max(0, min(<var title>y</var>,\
     <span>document content</span> height - <span>viewport</span>\
     height excluding the size of a rendered scroll bar (if any))).</p></li>\
     <li><p>Align the x-coordinate <var title>x</var> of the\
     <span>document content</span> with the left of the <span>viewport</span>\
     and align the y-coordinate <var title>y</var> of the <span>document\
     content</span> with the top of the <span>viewport</span>.</p></li>\
     <li><p>If the aligning caused content to move <span data-anolis-spec=html>queue a task</span> to\
     <span data-anolis-spec=dom title=concept-event-fire>fire an event</span>\
     named <code title='event-scroll'>scroll</code> that bubbles at the\
     <code data-anolis-spec=dom>Document</code> object, unless a\
     <span data-anolis-spec=html title=concept-task>task</span> to fire that event at the <code data-anolis-spec=dom>Document</code> object\
     was already <span data-anolis-spec=html title='queue a task'>queued</span>.</p></li>\
    </ol>"
  ]
  void scroll(long x, long y);

  [Documentation=
   "<p>When the {@name} {@type} is invoked, the user agent must act as if the\
    <code title=dom-Window-scroll>scroll()</code> method was invoked with the same arguments.</p>"
  ]
  void scrollTo(long x, long y);

  [Documentation=
   "<p>When the {@name} {@type} is invoked, the user agent must act as if the\
    <code title=dom-Window-scroll>scroll()</code> method was invoked with\
    <var title>x</var> plus <code title='dom-Window-scrollX'>scrollX</code>\
    as first argument and <var title>y</var> plus\
    <code title='dom-Window-scrollY'>scrollY</code> as second argument.</p>"
  ]
  void scrollBy(long x, long y);

  // client
  [Documentation=
   "<p>The {@name} {@type} must return the x-coordinate,\
    relative to the origin of the screen of the output device, of the left of\
    the client window as number of pixels, or zero if there is no such\
    thing.</p>"
  ]
  readonly attribute long screenX;

  [Documentation=
   "<p>The {@name} {@type} must return the y-coordinate,\
    relative to the origin of the screen of the output device, of the top of\
    the client window as number of pixels, or zero if there is no such\
    thing.</p>"
  ]
  readonly attribute long screenY;

  [Documentation=
   "<p>The {@name} {@type} must return the width of the\
    client window. If there is no client window this\
    attribute must return zero.</p>"
  ]
  readonly attribute long outerWidth;

  [Documentation=
   "<p>The {@name} {@type} must return the height of the\
    client window. If there is no client window this\
    attribute must return zero.</p>"
  ]
  readonly attribute long outerHeight;

};
