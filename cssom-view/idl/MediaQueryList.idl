
[Documentation=
 "<p>A {@name} {@type} has an associated media query list set on creation and an associated\
  <dfn>list of media query list listeners</dfn>, which is initially empty.</p>\
  <p>If the associated media query list changes in evaluation then, for each\
  listener in the <span>list of media query list listeners</span> &mdash; in\
  appending order, <span data-anolis-spec=html>queue a task</span> that invokes the listener,\
  passing as argument the <code>MediaQueryList</code> object.</p>\
  <div class='example'>\
  <p>A simple piece of code that detects changes in the orientation of the viewport can be written as follows:</p>\
  <pre><code>function handleOrientationChange(mql) {\
    if(mql.matches) // landscape\
      &hellip;\
    else\
      &hellip;\
  }\
  var mql = matchMedia(&quot;(orientation:landscape)&quot;)\
  mql.addListener(handleOrientationChange)</code></pre>\
  </div>"
]
interface MediaQueryList {

  [Documentation=
   "<p>The {@name} {@type} must return the\
    <span title='serialize a media query list' data-anolis-spec=cssom>serialized</span> form of the associated media query list.</p>"
  ]
  readonly attribute DOMString media;

  [Documentation=
   "<p>The {@name} {@type} must return true if the associated media query list\
    matches the state of the rendered <code data-anolis-spec=dom>Document</code> and false if it does not.</p>"
  ]
  readonly attribute boolean matches;

  [Documentation=
   "<p>When the {@name} {@type} is invoked <var title>listener</var> must be\
    appended to the <span>list of media query list listeners</span>, unless\
    it is already in the <span>list of media query list listeners</span>.</p>"
  ]
  void addListener(MediaQueryListListener listener);

  [Documentation=
   "<p>When the {@name} {@type} is invoked <var title>listener</var> must be\
    removed from the <span>list of media query list listeners</span>.</p>"
  ]
  void removeListener(MediaQueryListListener listener);

};
