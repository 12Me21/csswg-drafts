<h1>CSS Inline Layout Module Level 3</h1>

<style media="print" type="text/css">
    img#edge { width: 80%; height: 70%;}
    dt.label { display: run-in; }
</style>

<pre class='metadata'>
Shortname: css-inline
Level: 3
Status: ED
Group: csswg
TR: http://www.w3.org/TR/css-inline/
ED: http://dev.w3.org/csswg/css-inline/
Previous version: http://www.w3.org/TR/2002/WD-css3-linebox-20020515/
!Issues list: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&product=CSS&component=Linebox&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED">CSS3 Line Layout issues in Bugzilla</a>
Editor: Dave Cramer, Hachette Livre, dauwhe@gmail.com
Editor: Elika J. Etemad, Invited Expert, http://fantasai.inkedblade.net/contact
Editor: Steve Zilles, Adobe, szilles@adobe.com
Abstract: The CSS formatting model provides for a flow of elements and text inside of a container to be wrapped into lines.  The formatting of elements and text within a line, its positioning in the inline progression direction, and the breaking of lines are described in [[CSS3TEXT]].  This module describes the positioning in the block progression direction both of elements and text within lines and of the lines themselves.  This positioning is often relative to a baseline.  It also describes special features for formatting of first lines and drop caps.  It extends on the model in [[CSS2]].
Ignored Terms: guru, ji, line-height-shift-adjustment, text-script, after, before
Link Defaults: css-fonts-3 (property) font-family
</pre>



<h2>Line Heights and Baseline Alignment</h2>

<p class="issue">This section is being rewritten. Refer to <a href="http://www.w3.org/TR/CSS21/visudet.html#line-height">section 10.8</a> of [[CSS21]] for the normative CSS definition or the <a href="http://www.w3.org/TR/2002/WD-css3-linebox-20020515/">2002 Working Draft</a> if you want pretty pictures. (But ignore the old text, half of it's wrong. We're not specifying which half, that's to be determined.)</p>



<h2 id="Initial">Initial Lines and Initial Letters</h2>


 
 
 <h3 id="DropInitial">An Introduction to Initial Letters</h3>

Large, decorative letters have been used to start new sections of text since before the invention of printing. In fact, their use predates lowercase letters entirely. 

A <dfn>drop initial</dfn> is a larger-than-usual letter at the start of a paragraph, with a baseline at least one line lower than the first baseline of the paragraph. The size of the drop initial is usually indicated by how many lines it occuppies. Two- and three-line drop initials are very common.




<figure>
<img alt="3-line drop cap with E Acute"  src="Dropcap-E-acute-3line.png" width="480">

<p class="caption">Three-line drop initial with E acute. Since the cap-height of the drop initial aligns with the cap-height of the main text, the accent extends above the paragraph.</p>

</figure>


 

</div>

Drop initials are all about alignment. Reference points on the drop cap must align precisely with reference points in the text. In Western scripts, the top reference points are the cap height of the initial letter and of the first line of text. The bottom reference points are the baseline of the initial letter and the baseline of the Nth line of text. <a href="#f2">Figure 2</a> shows a simple two-line drop cap, with the relevant reference lines marked. 



<figure id="f2">
<img src="Dropcap-lines.png" width="600" alt="drop cap showing alignment"/>

<p class="caption">Two-line drop cap showing baselines (green lines), cap-height (red line), and ascender (cyan line).</p>

</figure>



<div class="note">
<p>The size of a drop initial is determined by the need to satisfy the required alignment. For an N-line drop initial in a Western script, the cap-height of the letter needs to be (N – 1) times the line-height, plus the cap-height of the surrounding text. Note this height is <b>not</b> the font size of the drop initial.</p>


<p>Actually calculating this font size is tricky. For an N-line drop initial, we find the drop initial font size to be:</p>


<figure>
<img src="InitialCapEquation.png" width="604" alt="Equation to calcuate drop initial font size"/>
</figure>

<!--
<pre>
Font size of drop cap = ((N-1) * line-height + [cap-height of para] * [font size of paragraph])/[cap-height ratio of drop initial font]
</pre>
-->

<!--

<div>

<math display="block"><mrow><mi>Font size of drop initial</mi><mo>=</mo></mrow><mfrac><mrow><mo>(</mo><mi>N</mi><mo>-</mo><mn>1</mn><mo>)</mo><mo>&#x00D7;</mo><mi>line-height</mi><mo>+</mo><mo>(</mo><mi>cap-height ratio of para font</mi><mo>&#x00D7;</mo><mi>font size of para</mi><mo>)</mo></mrow><mrow><mi>cap-height ratio of drop initial font</mi></mrow></mfrac></math>
</div>

-->


A three-line drop initial in Adobe Minion Pro would have a font size of 61.2pt, given 12pt text, 16pt line-height and a cap-height of 651/1000 (from the font’s OS/2 table).
</div>


The alignment constraints depend on the script used. In Japanese vertical writing mode, it appears that the initial letter extends from the start edge of the first line to the end edge of the Nth line. 

<figure>
<img src="CJK-Initial.001.png" width="480" alt="Diagram of Japanese initial letter in vertical writing mode"/>
<p class="caption">Diagram of Japanese initial letter in vertical writing mode</p>
</figure>



<figure>
<img src="Initial-2line-JapaneseVertical六.png" width="480" alt="Japanese Vertical Initial"/>
<p class="caption">Two-line drop initial in vertical writing mode</p>
</figure>
<p class="issue">This figure is probably incorrect.</p>



<p class="issue">Add content describing constraint that the block container have a baseline grid (or fixed line-height?).</p>


<h3 id="selecting-drop-initials">Selecting Initial Letters</h3>

Initial letters are typically a single letter, which can be selected by the <code>::first-letter</code> pseudo-element, as defined in [[SELECT]].

<p>Authors who need more control over which characters are included in an initial letter, or who want to apply initial-letter formatting to replaced elements or multiple words can also apply the 'initial-letter' property to the first inline-level child of a block container.

<div class="example">
  <pre>
    &lt;p>This paragraph has a dropped “T”.
    &lt;p>&lt;img alt="H" src="illuminated-h.svg">ere we have an illuminated “H”.
    &lt;p>&lt;span>Words may also&lt;/span> be given initial letter styling at the beginning of a paragraph.
  </pre>

  <pre>
    ::first-letter, /* style first paragraph's T */
    img, /* style illuminated H */
    span /* drop Words may also */
    { initial-letters: 2; }
  </pre>
</div>

<h3 id="sizing-drop-initials">Creating Initial Letters: the 'initial-letter' property</h3>

This property takes two arguments. The first argument defines the size of the initial letter, in terms of how many lines it occupies. The optional second argument argument defines the number of lines the initial letter should sink. An N-line initial letter sinks to the Nth text baseline. If not specified, it duplicates the first argument. 

<pre class="propdef">
Name: <dfn id="propdef-initial-letter">initial-letter</dfn>
Value: normal | [<<integer>> <<integer>>?]
Initial: normal
Applies to: <code>::first-letter</code> pseudo elements and inline level first child of a block container
Inherited: no
Percentages: N/A
Media: visual
Computed value: as described
</pre>


<div class="example">

<figure>
<img alt="3-line drop cap with C"  src="Dropcap-C-3line.png" width="480">

<p class="caption">Three-line drop initial.</p>

</figure>
<pre>
p::first-letter {
  initial-letter: 3;
}
</pre>
</div>






Some styles of drop initials do not align with the first line of text. For example, “sunken caps” both sink below the first baseline, and extend above the first line of text. In these cases, the size of the initial cap needs to be defined. The optional second argument of 'initial-letter' specifies the size of an initial letter, as if it were an n-line drop cap.




<div class="example">

<figure>
<img src="SunkenCapA.png" width="480" alt="sunken drop initial"/>
<p class="caption">Sunken cap. The letter drops two lines, but is the size of a three-line initial letter.</p>
</figure>
<pre>

p::first-letter {
  initial-letter: 3 2;
}

</pre>

</div>


If the second argument is ''1'', that creates a pure raised initial letter (often called “raised cap” or “stick-up cap.” It “sinks” to the first text baseline.


<div class="example">

<figure>
<img src="RaisedCap.png" width="480" alt="raised cap"/>
<p class="caption">Raised cap. The initial letter is the size of a 3-line initial, but does not drop.</p>
</figure>
<pre>

p::first-letter {
  initial-letter: 3 1;
}

</pre>

</div>





<h3 id="aligning-initial-letter">Alignment of Initial Letters</h3>

As mentioned earlier, the alignment of initial letters depends on the script used. The 'initial-letter-align' property can be used to specify the proper alignment.

<pre class="propdef" id="initial-letter-align">
Name: <dfn id="propdef-initial-letter-align">initial-letter-align</dfn>
Value: [ auto | alphabetic | hanging | ideographic ]
Initial: auto
Applies to: <code>::first-letter</code> pseudo elements and inline level first child of a block container
Inherited: no
Percentages: N/A
Media: visual
Computed value: ???
</pre>


<dl dfn-type="value" dfn-for="initial-letter-align"> 
<dt>auto</dt>
<dd>The user agent selects the value which corresponds to the language of the text. Western languages would default to ''alphabetic'', CJK languages to ''ideographic'', and some Indic languages to ''hanging''. </dd>
<dt>alphabetic</dt>
<dd>As described above, the cap height of the initial letter aligns with the cap height of the first line of text. The baseline of the initial letter aligns with the baseline of the Nth text baseline.</dd>

<dt>hanging</dt>
<dd>The hanging baseline of the initial letter aligns with the hanging baseline of the first line of text.  </dd>

<dt>ideographic</dt>
<dd>The initial letter is centered in the N-line area. </dd>
</dl>

<p class="issue">Input from those knowledgeable about non-Western  typographic traditions would be very helpful in describing the appropriate alignments. More values may be required for this property.</p>

<div class="example">
The vertical writing mode example from <a href="#f2">Figure 2</a> could be coded as:

<pre>
span.initial {
  initial-letter: 2;
  initial-letter-alignment: ideographic;
}
</pre>


</div>

If 'initial-letter' is applied to an image or other atomic element that does not provide the necessary alignment information, the alignment points for the image must be synthesized from the content edges.

Issue: Need to decide whether using margin edges or content edges for alignment. Writing Modes uses the margin edges for baseline alignment of replaced elements. There are cases for both content-alignment and margin-alignment for text. In both cases the margin box needs to be excluded.




<h3 id="initial-letter-exclusions">Space Around Initial Letters</h3>

If an initial letter has a descender, it could crash into the (n+1)th line of text. This is not desirable.

<figure>
<img alt="3-line drop cap with J, with descender crashing into fourth line of text"  src="Dropcap-J-3line-crash.png" width="480">
<p class="caption">Incorrect: three-line initial letter with descender</p>
</figure>

Text should be excluded around the glyph bounding boxes of the initial letters:



<figure>
<img alt="3-line drop cap with J, but four-line exclusion"  src="Dropcap-J-3line-exclude.png" width="480">
<p class="caption">Correct: text excluded around glyph bounding box</p>
</figure>


<h3 id="initial-letter-paragraphs">Interactions of initial letters with surrounding paragraphs</h3>

<h4 id="raised-sunken-caps">Raised and sunken caps</h4>

An initial letter does not affect the position of its containing element. For “raised caps” or “sunken caps,” the effect is created as if the text around the initial letter was pushed down, rather than the letter extending up into previous elements. 


<figure>
<img src="initial-letter-drop-para-compare.png" alt="raised cap para after normal para" width="600"/>
<p class="caption">Raised cap (<code>initial-letter: 3 1</code>) on right; note that the position of the “C” is the same in both cases, but on the right all text is moved down relative to the initial letter.</p>
</figure>


<h4 id="short-para-initial-letter">Short paragraphs with initial letters</h4>

A paragraph with an initial letter may have fewer lines of text than the initial letter occupies. The initial letter acts as if it is a float, and the subsequent para must wrap around it.

<figure>
<img src="initial-letter-short-para.png" alt="short para with initial letter" width="600"/>
<p class="caption">The red text is a short paragraph with an initial letter. Note the subsequent paragraph wraps around the initial letter just as text in the paragraph with the initial letter does.</p>
</figure>

If the subsequent paragraph starts with an initial letter, then it must clear the previous paragraph’s initial letter.

<figure>
<img src="initial-letter-short-para-initial.png" alt="short para with initial letter followed by para with initial" width="600"/>
<p class="caption">The red text is a short paragraph with an initial letter. The subsequent paragraph clears because it also has an initial letter.</p>
</figure>





<p class="issue">Define appropriate behavior for non-western scripts. The editors would appreciate any examples of drop initials in such scripts.</p>


<h2 id="properties">Properties index</h2>

<p>In addition to the specified values, all properties take the
initial and inherit values.</p>
<!-- properties -->

<p>The following properties are mentioned in this module, but are defined
elsewhere:</p>
<ul>
  <li><dfn id="script">text-script</dfn>,
      <dfn id="direction">direction</dfn>,
      <dfn id="text-align">text-align</dfn>,
      <dfn id="writing-mode">writing-mode</dfn>,
      see the Text module.
  <li><dfn id="font-size">font-size</dfn>,
      see the Fonts module.
</ul>

<h2 id="profiles">Profiles</h2>

<p>There are 3 modules defined by this chapter:

<p>CSS1 line model:

<p>CSS2 line model:

<p>CSS3 line model:

<p>The CSS1 line module is made of the following properties/values:

<table class="proptable">
<tbody>
<tr>
<th>Name

<th>Values

<th>Initial

<th>Applies to

<th>Inherited

<th>Percentages

<th>Media groups

<tr>
<td>'line-height'

<td>normal | &lt;number&gt; | <<length>>| <<percentage>>

<td>normal

<td> all elements

<td>yes

<td> relative to the font-size of the element itself<td>N/A

<tr>
<td>'vertical-align'

<td>baseline | sub | super | top | text-top | middle | bottom | text-bottom |
<<percentage>>

<td>baseline

<td>inline-level elements

<td>no

<td> N/A

<td>N/A

</table>

<p>The following table describes the CSS2 text module. Because all properties 
have added the ''inherit'' value and have a media type, all CSS1 properties have 
been specified below as well. In
addition, the 'vertical-align' has a new value:

&lt;length&gt;. Properties that applies to all
elements also applies to generated content. Finally, 'vertical-align' also
applies to table-cell elements.

<table class="proptable">
<tbody>
<tr>
<th>.Name

<th>Values

<th>Initial

<th>Applies to

<th>Inherited

<th>Percentages

<th>Media groups

<tr>
<td>'line-height'

<td>normal | &lt;number&gt; | <<length>>| <<percentage>> <td>normal

<td> all elements and generated content<td>yes

<td> relative to the font-size of the element itself<td>N/A

</tr>

<tr>
<td>'vertical-align'

<td>baseline | sub | super | top | text-top | central | middle | bottom |
text-bottom | &lt;percentage&gt; | &lt;length&gt; | inherit

<td>baseline

<td>inline-level and table-cell elements

<td>no

<td> N/A

<td><a class="noxref"
href="/TR/REC-CSS2/media.html#visual-media-group">visual</a>

</table>

<p>The CSS3 module adds the following properties:

<ul>

<li>Line stacking and content height:
'line-stacking-strategy',
'line-stacking-ruby',
'line-stacking-shift',
'line-stacking',
'text-height'</li>

<li>Baseline alignment:
'alignment-adjust',
'alignment-baseline',
'baseline-shift',
'dominant-baseline',
'inline-box-align'</li>

<li>Drop initial letter:
'initial-letter', 'initial-letter-align'</li>
</ul>

<p>It also modifies the following properties as described:

<ul>
<li>'vertical-align' has one new value: ''auto'', and has its
initial value changed to ''auto''.

<li>all properties take the value ''initial''.
</ul>


<h2 class="no-num" id="BaselineUsage">Appendix A: Usage of baseline alignment
(informative)</h2>

<p>The following appendix shows some examples of baseline alignment,
exercising the related properties .

<p>A simple example of alignment is shown in the following figure. The figure
shows the presentation of two inline elements, one inside the other. These
inline elements make up the content of a line in a block where the
writing-mode is "lr-tb" and the font is "Helvetica". The structure of the
example is as follows:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Apex &lt;span class=&quot;inner&quot;&gt;Top&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the style being defined as:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }</pre>

<p>The other baseline alignment initial values apply. Since a horizontal
writing-mode is in use, the dominant-baseline-identifier is set to
"alphabetic" and the baseline-table is taken from the nominal-font for the
block in which the line appears, which, in this case, is Helvetica.

<p>In the figure, the positions of the baselines relative to the current font
size are shown as red (staff) lines. These lines are labeled with
abbreviations of the names of the baselines (e.g., TBE for
"text-over-edge"). The baseline identified by the
dominant-baseline-identifier (A) is shown in blue. There is a break in the
staff lines to separately show the inner inline element. This is not
necessary for this example, but this distinction will become important in
subsequent examples.

<p>The "alignment-baseline" property is the primary control on the
positioning of an inner element with respect to its parent. The initial value
of the "alignment-baseline" property is "baseline". This aligns the
dominant-baseline of the inner inline element with the dominant baseline of
the outer inline element. This is shown by the short blue line that connects
the two separated staffs (A) in the figure.

<p>The glyphs that are in the content of the two elements are aligned based
on the script to which the glyph belongs. Since this example only has Latin
glyphs, they are aligned to the "alphabetic" baseline.

<div class="figure">
<p><img alt="alphabetic baseline" height="98" src="AlignIntro-1.gif"
width="385">

<p>An inner inline element containing Latin characters aligned to an outer
inline element also containing Latin characters.
</div>

<p>In the next figure, the content of the inner inline element is in
Gurmukhi, the script of the Punjabi language. The Gurmukhi syllables are read
as “guru”. Rather than use Unicode values for these characters, they are
symbolized by placing the Latin transliteration in italic type. The structure
of the example becomes (assuming the same style):

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Apex &lt;span class=&quot;inner&quot;&gt;<i>guru</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>The only change from the previous example is that the glyphs of the
Gurmukhi script are aligned to the "hanging" baseline of the inner inline
element. The alignment of that element itself, with respect to the outer
inline element, is unchanged. The "hanging" baseline position is computed
from the font-table part of the dominant-baseline set of the parent element
(in this case the outer inline element which is getting itself the set from
its parent, the block element).

<div class="figure">
<p><img alt="alphabetic alignment" height="98" src="AlignIntro-2.gif"
width="387">

<p>An inner inline element containing Gurmukhi characters aligned to an outer
inline element containing Latin characters.
</div>

<p>In the next figure, fragments of the text of the previous examples make up
the content of the outer inline element. The inner inline element has a
change of font-size, however. The structure is:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Ap<i>guru</i> &lt;span class=&quot;inner&quot;&gt;Ex<i>ji</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the following style:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }
span.inner { font-size: .75em; }</pre>

<p>In this example, the alignment of the inner inline element itself does not
change, nor does the alignment of the smaller glyphs inside the inner
element. The Latin glyphs are still aligned to the "alphabetic" baseline and
the Gurmukhi glyphs, which are pronounced "ji" are aligned to the "hanging"
baseline. Note also that just changing the "font-size" property did not
change the baseline-table in effect in the inner inline element.

<div class="figure">
<p><img alt="baselines and font size" height="98" src="AlignIntroB-2FS.gif"
width="391">

<p>The inner inline element has a reduced font-size.
</div>

<p>The next figure is equivalent to the previous example with the Gurmukhi
character replaced by ideographic characters. These are aligned to the
"ideographic" baseline.

<div class="figure">
<p><img alt="baselines and font size" height="98" src="AlignIntroB-4FS.gif"
width="391">

<p>The previous figure redone with ideographic glyphs instead of Gurmukhi
glyphs. The EM boxes are shown for the ideograms to clarify the alignment of
these glyphs.
</div>

<p>To change the scaling of the lines of the baseline table, it is necessary
to use the "dominant-baseline" property on the inner inline element. The
value of "reset-size" causes the baseline-table font-size to be reset from
the font-size of the element on which the "dominant-baseline" property
appears. The next figure shows the effect of this, using the structure:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Ap<i>guru</i> &lt;span class=&quot;inner&quot;&gt;Ex<i>ji</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the following style:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }
span.inner { font-size: .75em; dominant-baseline: reset-size; }</pre>

<p>The alignment of the inner inline element, with respect to the outer
inline element, is still determined by aligning the dominant baselines
(alphabetic). But, the baseline-table of the inner inline element has been
rescaled to the font-size of the inner inline element. Hence the smaller
glyphs align with each other.

<div class="figure">
<p><img alt="baseline tables" height="98" src="AlignIntroB-3RS.gif"
width="351">

<p>The baseline-table of the inner inline element has been resized to match
the font-size of the inner inline element.
</div>

<p>But, what if it is more important that the small Gurmukhi glyphs align
with the large Gurmukhi glyphs than having the Latin glyphs align. There are
at least two ways to achieve this. The structure:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Ap<i>guru</i> &lt;span class=&quot;inner&quot;&gt;Ex<i>ji</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the following style:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }
span.outer {dominant-baseline: hanging }
span.inner { font-size: .75em; dominant-baseline: reset-size; }</pre>

<p>is illustrated in the next figure. The "hanging" baseline becomes the
dominant baseline and the initial value of the "alignment-baseline" property
causes the (newly) dominant "hanging" baselines to be aligned as is shown by
the connection of the blue baselines.

<div class="figure">
<p><img alt="dominant baseline" height="98" src="AlignIntroB-3DH.gif"
width="351">

<p>Changing the dominant baseline to the "hanging" baseline causes the inner
inline element to be aligned on its parent's "hanging" baseline.
</div>

<p>It is also possible to achieve the effect of the above figure without
changing the dominant baseline. Instead it is sufficient to explicitly
specify that the inner inline element is aligned on its "hanging" baseline.
This is done by:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Ap<i>guru</i> &lt;span class=&quot;inner&quot;&gt;Ex<i>ji</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the following style:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }
span.inner { font-size: .75em; dominant-baseline: reset-size; alignment-baseline: hanging; }</pre>

<p>The only change this approach would make in the above figure is to color
the "hanging" baseline red and keep the "alphabetic" baseline as the (blue)
dominant baseline. This baseline in the inner inline element would not (as it
does not in the above figure) align with the "alphabetic" baseline in the
outer inline element.

<p>Another baseline alignment property is the "baseline-shift" property. Like
the properties other than the "dominant-baseline" property, this property
does not change the baseline-table or the baseline-table font-size. It does
shift the whole baseline table of the parent element so that when an inner
inline element is aligned to one of the parents baselines, the position of
the inner inline element is shifted. This is illustrated in the next figure.
The structure which creates this figure is:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Apex &lt;span class=&quot;inner&quot;&gt;1<i>ji</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the following style:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }
span.inner { baseline-shift: super; }</pre>

<p>Because the whole set of baseline-table staff lines are shifted to the
position of the superscript baseline: it does not matter to which baseline
the glyphs in the superscript are aligned. The European number "1" is aligned
to the "alphabetic" baseline and the Gurmukhi syllable "ji" is aligned to the
"hanging" baseline.

<div class="figure">
<p><img alt="baseline shift" height="120" src="AlignIntroB-5.gif"
width="385">

<p>Using a "baseline-shift" for a superscript (or a subscript).
</div>

<p>It is more common for the font-size of the superscript text to be smaller
than the font-size of the text to which it is appended. Consider:

<pre>&lt;p&gt;&lt;span class=&quot;outer&quot;&gt;Apex &lt;span class=&quot;inner&quot;&gt;1<i>ji</i>&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</pre>

<p>with the following style:

<pre>p { writing-mode: lr-tb; font: Helvetica; }
span { alignment-baseline: use-script; }
span.inner { baseline-shift: super; font-size: .75em; }</pre>

<p>Because changing the font-size on a superscript (or subscript) is common,
this is the one case where changing the font-size does cause the
baseline-table font-size to be reset when the "dominant-baseline" property
has its initial value. After the rescaling, the default alignment to the
dominant baseline positions the inline element for the superscript to the
dominant baseline position in the shifted baseline-table of the parent
element.

<div class="figure">
<p><img alt="baseline shift" height="114" src="AlignIntroB-5FS.gif"
width="372">

<p>Reducing the font-size of the superscript automatically resets the
baseline-table size so that mixed languages in the superscript stay mutually
aligned.
</div>


<h2 class="no-num" id="ack">Acknowledgments</h2>

<p>Special thanks goes to the initial authors,
Eric A. Meyer and Michel Suignard.

<p>In additions to the authors, this specification would not have been possible without the help from:

<p>David Baron, John Daggett, Stephen Deach, Sujal Parikh, Grzegorz Zygmunt, Chris Wilson, David M Brown.
