<pre class='metadata'>
Title: CSS Box Sizing Module Level 4
Shortname: css-sizing
Level: 4
Status: ED
Warning: not ready
Work Status: Exploring
Group: csswg
ED: https://drafts.csswg.org/css-sizing
TR: https://www.w3.org/TR/css-sizing/
Editor: Tab Atkins, Google, http://xanthir.com/contact/, w3cid 42199
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Editor: Jen Simmons, Mozilla, http://jensimmons.com/
Previous version: https://www.w3.org/TR/2012/WD-css3-sizing-20120927/
Abstract: This is a delta spec over CSS Sizing Level 3.
Ignored Terms: block-level box
</pre>

<pre class='link-defaults'>
spec:css-display-3; type:dfn; text:box
spec:css-align-3; type:property; text:column-gap
spec:css2; type: property
	text: min-width
	text: min-height
	text: max-width
	text: max-height
</pre>


<!-- Notes on stuff to do... [copy/pasted from etherpad, probably out-of-date, evaluate later]
  Swap definition of preferred size in for max-content.
  Define current max-content as super-max-content.
  Mark an isssue about whether it's a necessary concept;
  I'm unsure, but I think it will show up in orthogonal flow sizing.
-->

<h2 id="intro">
Introduction</h2>

	ISSUE: This is a diff spec from <a href="https://www.w3.org/TR/css-sizing-3/">CSS Sizing Level 3</a>.
	It is currently an Exploratory Working Draft:
	if you are implementing anything, please use Level 3 as a reference.
	We will merge the Level 3 text into this draft once it reaches CR.

<h3 id="placement">
Module interactions</h3>

	<p>This module extends the 'width', 'height', 'min-width', 'min-height', 'max-width', 'max-height', and 'column-width'
	features defined in [[!CSS2]] chapter 10 and in [[!CSS3COL]]

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> keywords as their property value.
	For readability they have not been repeated explicitly.

<!--
████████ ████████ ████████  ██     ██  ██████
   ██    ██       ██     ██ ███   ███ ██    ██
   ██    ██       ██     ██ ████ ████ ██
   ██    ██████   ████████  ██ ███ ██  ██████
   ██    ██       ██   ██   ██     ██       ██
   ██    ██       ██    ██  ██     ██ ██    ██
   ██    ████████ ██     ██ ██     ██  ██████
-->

<h2 id="terms">
Terminology</h2>


<h3 id='auto-box-sizes'>
Auto Box Sizes</h3>


<h3 id='contributions'>
Intrinsic Size Contributions</h3>


<h3 id='constraints' dfn export lt="intrinsic size constraint">
Intrinsic Size Constraints</h3>


<!--
████████  ████████   ███████  ████████  ████████  ████████ ████████  ██████
██     ██ ██     ██ ██     ██ ██     ██ ██     ██ ██       ██       ██    ██
██     ██ ██     ██ ██     ██ ██     ██ ██     ██ ██       ██       ██
████████  ████████  ██     ██ ████████  ██     ██ ██████   ██████    ██████
██        ██   ██   ██     ██ ██        ██     ██ ██       ██             ██
██        ██    ██  ██     ██ ██        ██     ██ ██       ██       ██    ██
██        ██     ██  ███████  ██        ████████  ████████ ██        ██████
-->

<h2 id="specifying-sizes" oldids='size-keywords'>
Specifying Box Sizes</h2>

<h3 id="sizing-properties">
Sizing Properties</h3>


<h4 id="preferred-size-properties" dfn export lt="preferred size property">
Preferred Size Properties: the 'width' and 'height' properties</h4>


<h4 id="min-size-properties" dfn export lt="min size property">
Minimum Size Properties: the 'min-width' and 'min-height' properties</h4>


<h4 id="max-size-properties" dfn export lt="max size property">
Maximum Size Properties: the 'max-width' and 'max-height' properties</h4>



<h3 id="sizing-values" oldids='width-height-keywords'>
Sizing Values: the <<length-percentage>>, ''width/auto'' | ''max-width/none'', ''width/min-content'', ''width/max-content'', and ''width/fit-content()'' values</h3>


<h4 id="behave-auto">
“Behaving as ''width/auto''”</h4>


<h4 id='the-contain-floats-value'>
Containing or Excluding Floats</h4>


<!--
████████   ███████  ██     ██          ██████  ████ ████████ ████ ██    ██  ██████
██     ██ ██     ██  ██   ██          ██    ██  ██       ██   ██  ███   ██ ██    ██
██     ██ ██     ██   ██ ██           ██        ██      ██    ██  ████  ██ ██
████████  ██     ██    ███    ███████  ██████   ██     ██     ██  ██ ██ ██ ██   ████
██     ██ ██     ██   ██ ██                 ██  ██    ██      ██  ██  ████ ██    ██
██     ██ ██     ██  ██   ██          ██    ██  ██   ██       ██  ██   ███ ██    ██
████████   ███████  ██     ██          ██████  ████ ████████ ████ ██    ██  ██████
-->

<h3 id="box-sizing" caniuse="css3-boxsizing">
Box Edges for Sizing: the 'box-sizing' property</h3>

<!--
 ██████   ███████  ██       ██     ██ ██     ██ ██    ██
██    ██ ██     ██ ██       ██     ██ ███   ███ ███   ██
██       ██     ██ ██       ██     ██ ████ ████ ████  ██
██       ██     ██ ██       ██     ██ ██ ███ ██ ██ ██ ██
██       ██     ██ ██       ██     ██ ██     ██ ██  ████
██    ██ ██     ██ ██       ██     ██ ██     ██ ██   ███
 ██████   ███████  ████████  ███████  ██     ██ ██    ██
-->

<h3 id='column-sizing'>
New Column Sizing Values: the ''column-width/min-content'', ''column-width/max-content'', and ''column-width/fit-content()'' values</h3>


<!--
   ███     ██████  ████████  ████████  ██████  ████████       ████████     ███    ████████ ████  ███████
  ██ ██   ██    ██ ██     ██ ██       ██    ██    ██          ██     ██   ██ ██      ██     ██  ██     ██
 ██   ██  ██       ██     ██ ██       ██          ██          ██     ██  ██   ██     ██     ██  ██     ██
██     ██  ██████  ████████  ██████   ██          ██          ████████  ██     ██    ██     ██  ██     ██
█████████       ██ ██        ██       ██          ██          ██   ██   █████████    ██     ██  ██     ██
██     ██ ██    ██ ██        ██       ██    ██    ██          ██    ██  ██     ██    ██     ██  ██     ██
██     ██  ██████  ██        ████████  ██████     ██          ██     ██ ██     ██    ██    ████  ███████
-->

<h2 id="ratios">
Aspect Ratios</h2>

ISSUE: This section is a rough draft proposal.
See discussion in <a href="https://github.com/w3c/csswg-drafts/issues/333">Issue 333</a>
and <a href="https://github.com/w3c/csswg-drafts/issues/1173">Issue 1173</a>.

<h3 id="aspect-ratio">
Intrinsic Aspect Ratios: the 'aspect-ratio' property</h3>

	<pre class="propdef">
	Name: aspect-ratio
	Value: auto | <<ratio>>
	Initial: auto
	Inherited: no
	Applies to: all elements except <a>inline boxes</a> and internal ruby or table boxes
	Computed value: specified keyword or a pair of numbers
	</pre>

	This property sets a <dfn export>preferred aspect ratio</dfn> for the box,
	which will be used in the calculation of ''height/auto'' sizes
	and some other layout functions.
	The box’s <a>automatic sizes</a>
	are calculated the same as for
	a <a>replaced element</a> with an <a>intrinsic aspect ratio</a>
	and no <a>intrinsic dimension</a> in that axis,
	see e.g. <a href="https://www.w3.org/TR/CSS2/visudet.html">CSS2 &sect;&#x202F;10</a>
	and <a href="https://www.w3.org/TR/css-flexbox-1/#algo-main-item">CSS Flexible Box Model Level 1 &sect;&#x202F;9.2</a>.
	The axis in which the <a>preferred size</a> calculation
	depends on this aspect ratio
	is called the <dfn>ratio-dependent axis</dfn>,
	and the resulting size is <a>definite</a>
	if its input sizes are also <a>definite</a>.

	<dl dfn-for="aspect-ratio" dfn-type="value">
		<dt><dfn>auto</dfn>
		<dd>
			<a>Replaced elements</a> with an <a>intrinsic aspect ratio</a>
			use that aspect ratio;
			otherwise the box has no <a>preferred aspect ratio</a>.
			Size calculations involving <a>intrinsic aspect ratio</a>
			work with the <a>content box</a> dimensions always.

		<dt><dfn><<ratio>></dfn>
		<dd>
			The box’s <a>preferred aspect ratio</a> is the specified ratio
			of ''<var>width</var> / <var>height</var>''.
			Size calculations involving <a>preferred aspect ratio</a>
			work with the dimensions of the box specified by 'box-sizing'.

	</dl>

	Note: If a box has both a 'width' and a 'height'
	that are not <a lt="automatic size">automatic</a>
	(or, in the case of a <a>flex item</a>,
	both a ''flex-basis/content'' flex basis and
	a non-<a lt="automatic size">automatic</a> preferred <a>cross size</a>),
	then the <a>preferred aspect ratio</a> has no effect:
	at least one of these sizes must be ''width/auto'' (/''flex-basis/content'')
	for the <a>preferred aspect ratio</a> to have an impact on sizing.

	<div class="example">
		This example sets each item in the grid to render as a square,
		determining the number of items and their widths by the available space.

		<xmp highlight="html">
		  <ul>
		    <li>…
		    <li>…
		    <li>…
		    <li>…
		  </ul>
		</xmp>
		<pre highlight="css">
			ul {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(12em, 1fr));
			}
			li {
				aspect-ratio: 1/1;
				overflow: auto;
			}
		</pre>
	</div>

	<div class="example">
		This example uses the <{iframe}> element’s
		<code>width</code> and <code>height</code> attributes
		to set the 'aspect-ratio' property,
		giving the iframe an aspect ratio to use for sizing
		so that it behaves exactly like an image with that aspect ratio.
		<!-- https://twitter.com/ausi/status/1053013616239288320 -->
		<pre highlight="html">
			&lt;iframe
			  src="https://www.youtube.com/embed/0Gr1XSyxZy0"
			  width=560
			  height=315>
		</pre>
		<pre highlight="css">
			@supports (aspect-ratio: attr(width) / 1) {
			  iframe {
			    aspect-ratio: attr(width) / attr(height);
			    width: 100%;
			    height: auto;
			  }
			}
		</pre>
	</div>

	On non-replaced elements with an ''width/auto'' <a>inline size</a>
	(or any replaced element whose intrinsic <a>block size</a>
	depends on its <a>inline size</a>),
	the intrinsic <a>block sizes</a> of the box
	are assumed to be zero
	when applying 'min-block-size' to the aspect ratio calculations,
	and assumed to be infinity
	when applying 'max-block-size' to the aspect ratio calculations.
	These limits take effect as usual for non-replaced elements
	once the <a>inline size</a> is resolved.

	<div class="example">
		For example, given a (<a>horizontal writing mode</a>) element with
		<pre>
		  width: auto;
		  min-height: min-content;
		  aspect-ratio: 1/1;
		</pre>

		using the aspect ratio to resolve the width
		would require knowing the min-content height of the element.

		Since for a non-replaced element,
		this value is not known until the width is resolved,
		we assume the 'min-height' value is zero
		while resolving the width.

		Then, once the width is known, we resolve the height,
		taking into account the ''height/min-content'' minimum.
	</div>

<h4 id="aspect-ratio-minimum">
Automatic Content-based Minimum Sizes</h4>

	In order to avoid unintentional overflow,
	the <a>automatic minimum size</a> in the <a>ratio-dependent axis</a>
	of a box with a <a>preferred aspect ratio</a>
	that is neither a <a>replaced element</a> nor a <a>scroll container</a>
	is the minimum of
	its <a>min-content size</a> and its <a>maximum size</a>.

	<div class="example">
		In the following example,
		the box is as wide as the container (as usual),
		and its height is as tall as needed to contain its content
		but at least as tall as it is wide.

		<pre>
		  div {
		    aspect-ratio: 1/1;
		    /* 'width' and 'height' both default to 'auto' */
		  }
		</pre>

		<pre class="figure">
		+----------+  +----------+  +----------+
		| ~~~~~~~~ |  | ~~~~~~~~ |  | ~~~~~~~~ |
		| ~~~~~~~~ |  | ~~~~~~~~ |  | ~~~~~~~~ |
		| ~~~~~~~  |  | ~~~~~~~~ |  | ~~~~~~~~ |
		|          |  | ~~~      |  | ~~~~~~~~ |
		+----------+  +----------+  | ~~~~~~~~ |
		                            | ~~~~~~   |
		                            +----------+
		</pre>

		When ''overflow: auto'' is specified, however,
		even the box with excess content maintains the 1:1 aspect ratio.

		<pre>
		  div {
		    overflow: auto;
		    aspect-ratio: 1/1;
		  }
		</pre>

		<pre class="figure">
		+----------+  +----------+  +----------+
		| ~~~~~~~~ |  | ~~~~~~~~ |  | ~~~~~~~~^|
		| ~~~~~~~~ |  | ~~~~~~~~ |  | ~~~~~~~~ |
		| ~~~~~~~  |  | ~~~~~~~~ |  | ~~~~~~~~ |
		|          |  | ~~~      |  | ~~~~~~~~v|
		+----------+  +----------+  +----------+
		</pre>

		Overriding the 'min-height' property also maintains the 1:1 aspect ratio,
		but will result in content overflowing the box
		if it is not otherwise handled.

		<pre>
		  div {
		    aspect-ratio: 1/1;
		    min-height: 0;
		  }
		</pre>

		<pre class="figure">
		+----------+  +----------+  +----------+
		| ~~~~~~~~ |  | ~~~~~~~~ |  | ~~~~~~~~ |
		| ~~~~~~~~ |  | ~~~~~~~~ |  | ~~~~~~~~ |
		| ~~~~~~~  |  | ~~~~~~~~ |  | ~~~~~~~~ |
		|          |  | ~~~      |  | ~~~~~~~~ |
		+----------+  +----------+  +-~~~~~~~~-+
		&nbsp;                             ~~~~~~   &nbsp;
		</pre>
	</div>



<!--
████ ██    ██ ████████ ████████  ████ ██    ██  ██████  ████  ██████
 ██  ███   ██    ██    ██     ██  ██  ███   ██ ██    ██  ██  ██    ██
 ██  ████  ██    ██    ██     ██  ██  ████  ██ ██        ██  ██
 ██  ██ ██ ██    ██    ████████   ██  ██ ██ ██  ██████   ██  ██
 ██  ██  ████    ██    ██   ██    ██  ██  ████       ██  ██  ██
 ██  ██   ███    ██    ██    ██   ██  ██   ███ ██    ██  ██  ██    ██
████ ██    ██    ██    ██     ██ ████ ██    ██  ██████  ████  ██████
-->

<h2 id='intrinsic'>
Intrinsic Size Determination</h2>


<h3 id='intrinsic-size-override'>
Overriding Contained Intrinsic Sizes: the 'contain-intrinsic-size' property</h3>

	<pre class="propdef">
	Name: contain-intrinsic-size
	Value: none | <<length>>{1,2}
	Initial: none
	Inherited: no
	Applies to: elements with [=size containment=]
	Computed value: as specified, with <<length>> values computed
	Percentages: n/a
	Animation type: by computed value type
	</pre>
	
	This property allows elements with [=size containment=] to specify
	an <dfn export>explicit intrinsic inner size</dfn>,
	causing the box to size as if its content
	totals to a width and height
	matching the specified [=explicit intrinsic inner size=]
	(rather than sizing as if it were empty).

	Note: This is not always equivalent
	to laying out as if the element had one child of the specified [=explicit intrinsic inner size=].

	Note: An element with [=size containment=] is laid out as if it had no contents [[!CSS-CONTAIN-1]],
	which in many cases this will cause the element to collapse to zero inner height.
	This can be corrected with an explicit 'height' chosen to show the expected contents,
	but that can have unintended effects in some layout systems,
	such as Flex and Grid Layout,
	which treat an explicit 'height' as a stronger command
	than an implicit content-based height.
	The element thus might lay out substantially differently than it would have
	were it simply filled with content up to that height.
	Providing an [=explicit intrinsic inner size=] for the element
	preserves the performance benefits of ignoring its contents for layout
	while still allowing it to size as if it had content.

	Values are defined as:
	
	<dl dfn-type=value dfn-for="contain-intrinsic-size">
		: <dfn>none</dfn>
		::
			Does not specify an [=explicit intrinsic inner size=]
			for elements with [=size containment=].

		: <dfn><<length>>{2}</dfn>
		::
			If the element has [=size containment=],
			specifies an [=explicit intrinsic inner size=].
			The first <<length>> provides the inner width of the element,
			the second provides the inner height.
			If the second <<length>> is omitted,
			it defaults to the same value as the first.
	</dl>


<!--
 ██████   ███████  ██    ██ ████████ ████████  ████ ████████   ██████
██    ██ ██     ██ ███   ██    ██    ██     ██  ██  ██     ██ ██    ██
██       ██     ██ ████  ██    ██    ██     ██  ██  ██     ██ ██
██       ██     ██ ██ ██ ██    ██    ████████   ██  ████████   ██████
██       ██     ██ ██  ████    ██    ██   ██    ██  ██     ██       ██
██    ██ ██     ██ ██   ███    ██    ██    ██   ██  ██     ██ ██    ██
 ██████   ███████  ██    ██    ██    ██     ██ ████ ████████   ██████
-->

<h2 id="intrinsic-contribution">
Intrinsic Size Contributions</h2>

	A box’s <a>min-content contribution</a>/<a>max-content contribution</a> in each axis
	is the size of the content box
	of a hypothetical ''width/auto''-sized float
	that contains only that box,
	if that hypothetical float's containing block is zero-sized/infinitely-sized.

	Note: This specification does not define precisely how to determine these sizes.
	Please refer to [[CSS2]],
	the relevant CSS specification for that display type,
	the <a href="#percentage-sizing">rules for handling percentages</a> (below),
	and/or existing implementations
	for further details.



<!--
████████ ██     ██ ████████ ████████  ████ ██    ██  ██████  ████  ██████
██        ██   ██     ██    ██     ██  ██  ███   ██ ██    ██  ██  ██    ██
██         ██ ██      ██    ██     ██  ██  ████  ██ ██        ██  ██
██████      ███       ██    ████████   ██  ██ ██ ██  ██████   ██  ██
██         ██ ██      ██    ██   ██    ██  ██  ████       ██  ██  ██
██        ██   ██     ██    ██    ██   ██  ██   ███ ██    ██  ██  ██    ██
████████ ██     ██    ██    ██     ██ ████ ██    ██  ██████  ████  ██████
-->

<h2 id='extrinsic'>
Extrinsic Size Determination</h2>

	…

<h3 id="stretch-fit-sizing">
Stretch-fit Sizing</h3>

	…

<h3 id="contain-fit-sizing">
Contain-fit Sizing: stretching while maintaining an aspect ratio</h3>

	Contain-fit sizing essentially applies stretch-fit sizing,
	but reduces the size of the box in one axis
	to maintain the box’s intrinsic aspect ratio,
	similar to the ''object-fit/contain'' keyword of the 'object-fit' and 'background-size' properties.

	First, a target rectangle is determined:

	<ol>
		<li>
			The initial target rectangle is the size of the box’s containing block,
			with any indefinite size assumed as infinity.
			If both dimensions are indefinite,
			the initial target rectangle is set
			to match the outer edges of the box were it <a>stretch-fit sized</a>.

		<li>
			Next, if the box has a non-''max-width/none'' 'max-width' or 'max-height',
			the target rectangle is clamped in the affected dimension
			to less than or equal to the “maximum size” of the box’s margin box,
			i.e. the size its margin box would be
			if the box was sized at its max-width/height.
			(Note that, consistent with normal <a href="http://www.w3.org/TR/CSS2/visuren.html">box-sizing rules</a>,
			this “maximum size” is floored by the effects of the box’s 'min-width'/'min-height'.)

		<li>
			Last, the target rectangle is reduced in one dimension
			by the minimum necessary for it to match the box's intrinsic aspect ratio.
	</ol>

	The contain-fit size in each dimension is
	the size that would result from stretch-fitting into the target rectangle.

	Issue: Copy whatever stretch-fit ends up doing wrt margin collapsing.

	Issue: If there is a minimum size in one dimension
	that would cause overflow of the target rectangle if the aspect ratio were honored,
	do we honor the aspect ratio or skew the image?
	If the former, we need a step similar to #2 that applies the relevant minimums.

<h3 id="percentage-sizing">
Percentage Sizing</h3>

	…

<h2 class=no-num id="changes">
Changes</h2>

	<p>
		Changes since the <a href="https://www.w3.org/TR/2012/WD-css3-sizing-20120927/">September 2012 Working Draft</a> include:

	<ul>
		<li>Changed <code>fill</code> keyword to <code>stretch-fit</code>.
		<li>Hooked up intrinsic sizes of replaced elements to the <a>default sizing algorithm</a> in [[!CSS3-IMAGES]].
		<li>Specified that <a>extrinsic sizing</a> treates ''margin/auto'' margins as zero.
		<li>Clarified definition of <a>available space</a>.
		<li>Specified that percentages resolved against an intrinsic size of the parent computes falls back to auto sizing.
		<li>Fixed bad wording wrt containing blocks in <a>stretch-fit inline size</a> definition,
		    and specified that it is calculated <em>after</em> margin collapsing.
		<li>Specified that an absolutely-positioned box's containing block is always considered definite.
		<li>Improved section on intrinsic sizing of multi-column containers.
		<li>Cleaned up some terminology (“min-size” to “min-content size”, “measure” to “inline-size, “extent” to “block-size”).
	</ul>

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	<p>Special thanks go to Aaron Gustafson, L. David Baron
	for their contributions to this module.

<h2 class=no-num id=priv-sec>
Privacy and Security Considerations</h2>

This specification introduces no new privacy or security considerations.
