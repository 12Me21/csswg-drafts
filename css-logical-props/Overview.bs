<h1>CSS Logical Properties Level 1</h1>

<pre class='metadata'>
Shortname: css-logical-props
Level: 1
Status: ED
Work Status: Revising
Group: csswg
ED: https://drafts.csswg.org/css-logical-props/
Editor: Rossen Atanassov, Microsoft, ratan@microsoft.com
Editor: Elika J. Etemad / fantasai, Invited Expert, http://fantasai.inkedblade.net/contact, w3cid 35400
Abstract: This module introduces logical properties and values that provide the author with the ability to control layout through logical, rather than physical, direction and dimension mappings. The module defines logical properties and values for the features defined in [CSS21]. These properties are writing-mode relative equivalents of their corresponding physical properties.
Ignored Terms: div, dl, dfn
Ignored Vars: *
Link Defaults: css21 (property) width/height/min-width/min-height/max-width/max-height
</pre>

<h1 id="intro">
Introduction</h1>

  Note: See [[!CSS3-WRITING-MODES]] for a proper introduction to writing modes;
  this module assumes familiarity with its terminology.

  Because different writing systems are written in different directions,
  a variety of <a>writing modes</a> exist:
  left to right, top to bottom;
  right to left, top to bottom;
  bottom to top, right to left;
  etc.
  logical concepts like the “start” of a page or line
  map differently to physical concepts like the “top” of a line or “left edge” of a paragraph.
  Some aspects of a layout are actually relative to the writing directions,
  and thus will vary when the page is translated to a different system;
  others are inherently relative to the page's physical orientation.

  <div class="example">
    For example,
    lists, headings, and paragraphs are typically left-aligned in English;
    but actually they are start-aligned, because in Arabic the same constructs are right-aligned,
    and a multilingual document will need to accommodate both writing systems accordingly.
    However the drop shadows on buttons on a page must remain consistent throughout,
    so their offset will be chosen based on visual considerations and physical directions,
    and not vary by writing system.
  </div>

  Since CSS was originally designed with only physical coordinates in its controls,
  this module introduces text-flow&ndash;relative equivalents
  so that declarations in a CSS style sheet can be expressed
  in <a>flow-relative</a> terms.
  It defines the mapping and cascading of equivalent properties,
  some new properties and values equivalent to those in CSS2.1,
  and the principles used to derive their syntaxes.
  Future CSS specifications are expected to incorporate both sets of coordinates
  in their property and value definitions,
  so this module will not track the introduction of <a>flow-relative</a> variants
  of newer CSS features.

  <a href="http://www.w3.org/TR/css-writing-modes/">CSS Writing Modes</a>’ <a href="https://www.w3.org/TR/css-writing-modes-3/#abstract-box">Abstract Box Terminology</a> section
  defines how to map between flow-relative and physical terms.
  This mapping controls the interpretation of flow-relative keywords and properties.

<div class="issue">
  <strong>Things That Are Unstable</strong>
  Since implementation of parts of this module is effectively required
  for shipping an implementation of CSS Writing Modes on the Web
  (in order to correctly implement the default HTML styles),
  The CSSWG resolved that although the draft is not very stable overall,
  the requisite features in
  <a href="#logical-controls"></a> and <a href="#logical-box-props"></a>
  are approved for shipping.
  However, there are a number of unstable features in this draft
  (which are not required for implementing the HTML default style sheet, incidentally),
  and these are:
  <ul>
    <li><del>The 'float' and 'clear' keywords,
        because it is not yet clear what the upcoming 2-dimensional syntax of 'float' will be.</del>
        (This has been resolved as of April 2017.)
    <li>The 'inset-*' properties,
        because the name of the prefix is undecided.
        (It used to be 'offset-*', but ended up conflicting with another CSS feature.)
    <li>The ''margin/logical'' keyword on shorthands,
        because the name of the keyword may change or it may be replaced by some other syntactic marker.
    <li>The 'background-image-transform' and 'border-image-transform' properties,
        because they have, as far as the editor is aware,
        received no review from anyone and may or may not be well-designed.
  </ul>
  Comments and suggestions are welcome on these issues.
  Please file them in GitHub, tweet them to @csswg, or send them to www-style@w3.org.
</div>

<h2 id="logical-controls">
Flow-Relative Values: <css>block-start</css>, <css>block-end</css>, <css>inline-start</css>, <css>inline-end</css></h2>

  Properties that accept physical directional keyword values
  ('top', 'bottom', 'left', or 'right') are redefined
  to also accept the appropriate <a>flow-relative</a> directional keywords.
  In such cases,
  the flow-relative values can be used in place of the corresponding physical values.
  For properties that take multiple keywords,
  combinations of flow-relative and physical values are not allowed
  (unless otherwise specified in a future specification).

  Properties can be either 1-dimensional or 2-dimensional.
  When contextually constrained to one dimension,
  the flow-relative keywords are abbreviated.

<h3 id="caption-side">
Logical Values for the 'caption-side' Property</h3>

  <pre class="propdef partial">
    Name: caption-side
    New values: inline-start | inline-end
  </pre>

  These two values are added only for implementations that support
  ''caption-side/left'' and ''caption-side/right'' values for 'caption-side'.
  The existing ''caption/top'' and ''caption/bottom'' values are idiosyncratically redefined
  as assigning to the <a>block-start</a> and <a>block-end</a> sides of the table, respectively.
  The mapping on this property uses the <a>writing mode</a> of the element’s <a>containing block</a>
  (that is, the table wrapper box).

<h3 id="float-clear">
Flow-Relative Values for the 'float' and 'clear' Properties</h3>

  <pre class="propdef partial">
    Name: float, clear
    New values: inline-start | inline-end
  </pre>

  The mapping on this property uses the <a>writing mode</a> of the element’s <a>containing block</a>.

  Note: These properties are 1-dimensional in CSS2,
  but are planned to be expanded to two dimensions,
  and therefore are given unabbreviated <a>flow-relative</a> keywords.

<h3 id="text-align">
Flow-Relative Values for the 'text-align' Property</h3>

  <pre class="propdef partial">
    Name: text-align
    New values: start | end
  </pre>

  These values are normatively defined in [[!CSS3TEXT]].

<h3 id="resize">
Flow-Relative Values for the 'resize' Property</h3>

  <pre class="propdef partial">
    Name: resize
    New values: block | inline
  </pre>

<h2 id="logical-page">
Flow-Relative Page Classifications</h2>

  In CSS, all pages are classified by user agents as either left pages or right pages. [[!CSS21]]
  Which page is first in a spread, however,
  depends on whether the page progression is left-to-right or right-to-left.

  To allow control of page breaking to the page
  that is on the earlier or later side of a spread,
  rather than to the left or right side of a spread,
  this module introduces the following additional keywords
  for the 'page-break-after' and 'page-break-before' properties [[!CSS21]]:

  <dl dfn-type="value" dfn-for="logical-page">
    <dt><dfn>recto</dfn>
      <dd>
        Equivalent to 'right' in left-to-right page progressions
        and 'left' in right-to-left page progressions.

    <dt><dfn>verso</dfn>
      <dd>
        Equivalent to 'left' in left-to-right page progressions
        and 'right' in right-to-left page progressions.
  </dl>

  These values are further defined in [[!CSS3-BREAK]].

  Although authors typically place page numbers using physical placements,
  the contents of headers often follows conventions depending
  on which page in the spread is earlier.
  Therefore the following flow-relative <a href="https://www.w3.org/TR/CSS21/page.html#page-selectors">page selectors</a>
  are also added to support flow-relative page selection:

  <dl dfn-type="value" dfn-for="logical-page-selector">
    <dt><dfn>:recto</dfn>
      <dd>
        Equivalent to ':right' in left-to-right page progressions
        and ':left' in right-to-left page progressions.

    <dt><dfn>:verso</dfn>
      <dd>
        Equivalent to ':left' in left-to-right page progressions
        and ':right' in right-to-left page progressions.
  </dl>

  The flow-relative page selectors have specificity equal to
  the ':left' and ':right' page selectors.

<h2 id="logical-box-props">
Flow-Relative Box Model Properties</h2>

  This specification introduces new CSS properties
  that are flow-relative equivalents
  of physical box model properties.

  The specified values of these properties are separate from
  the specified values of the parallel physical properties,
  but the flow-relative and physical properties share computed values.
  Which pairs of properties share computed values
  depends on the element’s computed values of
  'writing-mode', 'direction', and 'text-orientation'.

  Issue: Depending on the element’s own writing mode
  simplifies the cascading calculations
  and gives a straightforward model for authors to reason about.
  However, it is problematic in many cases,
  see for example <a href="https://www.w3.org/mid/20161108202634.GA7235@mail.internode.on.net">this discussiona</a>.

  A computed value that has flow-relative and physical properties as input
  is determined by applying the CSS cascade to declarations of both.
  Overriding is not determined by whether a declaration is flow-relative or physical,
  but only by the rules of the CSS cascade [[!CSS3-CASCADE]].

  <p class="note">
    Note that this requires implementations to maintain
    relative order of declarations within a CSS declaration block,
    which was not previously required for CSS cascading.
  </p>

  <div class="example">
    For example, given the following rule:

    <pre class="lang-css">
      p {
        margin-inline-start: 1px;
        margin-left: 2px;
        margin-inline-end: 3px;
      }
    </pre>

    In a paragraph with computed 'writing-mode' being ''horizontal-tb''
    and computed 'direction' being ''ltr'',
    the computed value of 'margin-left' is ''2px'',
    since for that 'writing-mode' and 'direction',
    'margin-inline-start' and 'margin-left' share a computed value,
    and the declaration of 'margin-left'
    is after the declaration of 'margin-inline-start'.
    However, if the computed 'direction' were instead ''rtl'',
    the computed value of 'margin-left' is ''3px'',
    since 'margin-inline-end' and 'margin-left' share a computed value,
    and the declaration of 'margin-inline-end'
    is after the declaration of 'margin-left'.
  </div>

  [[CSSOM!]] APIs that return computed values
  (such as <code>getComputedStyle()</code>)
  must return the same value for equivalent pairs of such properties.

<h3 id="logical-dimension-properties">
Logical Height and Logical Width: the 'block-size' and 'inline-size' properties</h3>

  <pre class="propdef">
  Name: block-size, inline-size
  Value: <<'width'>>
  Initial: auto
  Applies to: same as 'width' and 'height'
  Inherited: no
  Percentages: <a>block size</a>/<a>inline-size</a>, respectively, of containing block
  Media: visual
  Computed value: same as 'width' and 'height'
  </pre>

  These properties correspond to the
  'width' and 'height' properties.
  The mapping depends on the element's 'writing-mode'.

  <pre class="propdef">
  Name: min-block-size, min-inline-size
  Value: <<'min-width'>>
  Initial: 0
  Applies to: same as 'width' and 'height'
  Inherited: no
  Percentages: <a>block size</a>/<a>inline-size</a>, respectively, of containing block
  Media: visual
  Computed value: same as 'min-width' and 'min-height'
  </pre>

  These properties correspond to the
  'min-width' and 'min-height' properties.
  The mapping depends on the element's 'writing-mode'.

  <pre class="propdef">
  Name: max-block-size, max-inline-size
  Value: <<'max-width'>>
  Initial: none
  Applies to: same as 'width' and 'height'
  Inherited: no
  Percentages: <a>block size</a>/<a>inline-size</a>, respectively, of containing block
  Media: visual
  Computed value: same as 'max-width' and 'max-height'
  </pre>

  These properties correspond to the
  'max-width' and 'max-height' properties.
  The mapping depends on the element's 'writing-mode'.

<h3 id="logical-prop">
Flow-relative Margins and Offsets:
the margin- and inset-block-start/block-end/inline-start/inline-end properties</h3>

  <pre class="propdef">
  Name: margin-block-start, margin-block-end, margin-inline-start, margin-inline-end
  Value: <<'margin-left'>>
  Initial: 0
  Applies to: same as 'margin'
  Inherited: no
  Percentages: depends on layout model
  Media: visual
  Computed value: the percentage as specified or the absolute length or auto (see text)
  </pre>

  These properties correspond to the 'margin-top', 'margin-bottom', 'margin-left', and 'margin-right' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.

  <pre class="propdef">
  Name: inset-block-start, inset-block-end, inset-inline-start, inset-inline-end
  Value: <<'top'>>
  Initial: auto
  Applies to: positioned elements
  Inherited: no
  Percentages: <a>block size</a>/<a>inline-size</a> of containing block
  Media: visual
  Computed value: same as box offsets: 'top', 'right', 'bottom', 'left' properties except that directions are flow-relative
  </pre>

  These properties correspond to the
  'top', 'bottom', 'left', and 'right' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.

  <pre class="propdef shorthand">
  Name: inset
  Value: <<'top'>>{1,4}
  </pre>

  This <a>shorthand property</a> sets the
  'top', 'right', 'bottom', and 'left' properties.
  Values are assigned to its <a>sub-properties</a> as for 'margin'.

<h3 id="border-padding">
Logical Padding and Border: the padding- and border-<var>*</var>-block-start/block-end/inline-start/inline-end properties</h3>

  <pre class="propdef">
  Name: padding-block-start, padding-block-end, padding-inline-start, padding-inline-end
  Value: <<'padding-left'>>
  Initial: 0
  Applies to: all elements
  Inherited: no
  Percentages: <a>inline size</a> of containing block
  Media: visual
  Computed value: length (see text)
  </pre>

  These properties correspond to the
  'padding-top', 'padding-bottom', 'padding-left', and 'padding-right' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.

  <pre class="propdef">
  Name: border-block-start-width, border-block-end-width, border-inline-start-width, border-inline-end-width
  Value: border-width
  Initial: medium
  Applies to: all elements
  Inherited: no
  Percentages: <a>inline size</a> of containing block
  Media: visual
  Computed value: absolute length; 0 if the border style is none or hidden (see text)
  </pre>

  These properties correspond to the
  'border-top-width', 'border-bottom-width', 'border-left-width', and 'border-right-width' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.

  <pre class="propdef">
  Name: border-block-start-style, border-block-end-style, border-inline-start-style, border-inline-end-style
  Value: border-style
  Initial: none
  Applies to: all elements
  Inherited: no
  Percentages: n/a
  Media: visual
  Computed value: specified value (see text)
  </pre>

  These properties correspond to the
  'border-top-style', 'border-bottom-style', 'border-left-style', and 'border-right-style' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.

  <pre class="propdef">
  Name: border-block-start-color, border-block-end-color, border-inline-start-color, border-inline-end-color
  Value: color
  Initial: currentcolor
  Applies to: all elements
  Inherited: no
  Percentages: n/a
  Media: visual
  Computed value: computed color (see text)
  </pre>

  These properties correspond to the
  'border-top-color', 'border-bottom-color', 'border-left-color', and 'border-right-color' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.


  <pre class="propdef">
  Name: border-block-start, border-block-end, border-inline-start, border-inline-end
  Value: border-width || border-style || color
  Initial: (see individual properties)
  Applies to: all elements
  Inherited: no
  Percentages: see individual properties
  Media: visual
  Computed value: see individual properties
  </pre>

  These properties correspond to the
  'border-top', 'border-bottom', 'border-left', and 'border-right' properties.
  The mapping depends on the element's 'writing-mode', 'direction', and 'text-orientation'.

<h3 id="logical-shorthand-keyword">
Shorthand Properties with <css>logical</css> Keyword</h3>

  The shorthand properties for margin, padding, and border
  set values for physical properties by default.
  But authors can specify
  the <dfn value for="margin, padding, border-color, border-style, border-width">logical</dfn> keyword
  at the beginning of the property value
  to indicate that the values map to the flow-relative properties instead of the physical ones.

  <p class="issue">
    other candidates of the keyword are: ''relative'', ''script'',
    ''writing-mode'', ''beas'', or the value itself (e.g., ''vertical-lr-ltr'')

  The following [[!CSS21]] shorthand properties
  (and additionally the new 'inset' shorthand defined above)
  accept the ''margin/logical'' keyword:
  <ul>
    <li>'margin'
    <li>'padding'
    <li>'border-color'
    <li>'border-style'
    <li>'border-width'
  </ul>

  The syntax for these properties is effectively changed by replacing
    <pre class="prod">&lt;<var>value-type</var>&gt;{1,4}</pre>

  with
    <pre class="prod">logical? &lt;<var>value-type</var>&gt;{1,4}</pre>

  When the ''margin/logical'' keyword is present in the value, the values that follow are
  assigned to the flow-relative properties as follows:

  <ul>
    <li>If only one value is set, the value applies to all four flow-relative <a>longhands</a>.
    <li>If two values are set, the first is for block-start and block-end,
      the second is for inline-start and inline-end.
    <li>If three values are set, the first is for block-start,
      the second is for inline-start and inline-end,
      and the third is for block-end.
    <li>If four values are set, they apply to
      the block-start, inline-start, block-end, and inline-end sides
      in that order.
  </ul>

  <div class="example">
    In the following example, the two rules are equivalent:

    <pre class="lang-css">
      blockquote {
        margin: logical 1em 2em 3em 4em;
      }
      blockquote {
        margin-block-start:  1em;
        margin-inline-start: 2em;
        margin-block-end:    3em;
        margin-inline-end:   4em;
      }
    </pre>
  </div>

<h2 id="background-and-borders">
Logical Background and Border Images</h2>

  [[!CSS3BG]] is handled separately because it can fill an area with specified images,
  and the area to fill can be rotated or flipped depending on the text flow.

<h3 id="background-image-transform-prop">
Background Image Transform: The ''background-image-transform'' property</h3>

  <pre class="propdef">
  Name: background-image-transform
  Value: logical | physical | rotate
  Initial: physical
  Applies to: all elements
  Inherited: yes
  Percentages: n/a
  Media: visual
  Computed value: as specified
  </pre>

  <p class="issue">
    is this the right default? we need to investigate which is more common

  This property defines whether background images are transformed
  to match to the value of 'writing-mode' property,
  and whether 'background-size' widths and heights are flow-relative or physical.
  Values have the following meanings:

  <dl dfn-type="value" dfn-for="background-image-transform">
    <dt><dfn>logical</dfn></dt>
    <dd>
      The values for the 'background-size' property are flow-relative.
      The background images are transformed to match to the flow-relative axis.

    <dt><dfn>physical</dfn></dt>
    <dd>
      The values for the 'background-size' property are physical.
      The background images remain unchanged.

    <dt><dfn>rotate</dfn></dt>
    <dd>
      Similar to ''background-image-transform/logical'', except that the <a>inline base direction</a> is ignored.
      The result is affected only by the <a>block flow direction</a>.
  </dl>

<h3 id="background-repeat-prop">
The 'background-repeat' property</h3>

  The ''repeat-x'' and ''repeat-y'' values are physical,
  but in CSS3 this property can also accept double values
  to specify horizontal and vertical behaviors separately.
  The double values are considered flow-relative
  if the ''background-image-transform/logical'' keyword is specified,
  otherwise physical.

  <p class="issue">
    should also add repeat-horizontal and repeat-vertical for the physical value?

<h3 id="border-image-transform-prop">
Border Image Transform: The 'border-image-transform' property</h3>

  <pre class="propdef">
  Name: border-image-transform
  Value: logical | physical | rotate
  Initial: rotate
  Applies to: All elements, except internal table elements when 'border-collapse' is ''collapse''
  Inherited: yes
  Percentages: n/a
  Media: visual
  Computed value: as specified
  </pre>

  <p class="issue">
    is this the right initial default?

  This property defines whether border images are transformed
  to match to the value of 'writing-mode' property,
  with the reference writing mode being
  ''writing-mode: horizontal-tb; direction: ltr''.
  Values have the following meanings:

  <dl dfn-type="value" dfn-for="border-image-transform">
    <dt><dfn>logical</dfn></dt>
    <dd>
      The values for the border-image-* properties are flow-relative.
      The border images are transformed to match to the flow-relative axis.

    <dt><dfn>physical</dfn></dt>
    <dd>
      The values for the border-image-* properties are physical.
      The border images remain unchanged.

    <dt><dfn>rotate</dfn></dt>
    <dd>
      Similar to ''border-image-transform/logical'',
      except that the <a>inline base direction</a> is ignored.
      The result is affected only by the <a>block flow direction</a>.
  </dl>

  The following properties use the value of this property
  to determine how directional mappings are done:
  <ul>
    <li>'border-image-slice'
    <li>'border-image-width'
    <li>'border-image-outset'
    <li>'border-image-repeat'
    <li>'border-image'
  </ul>

<h2 id="changes">
Changes</h2>

  Changes since the last Working Draft include:
  <ul>
    <li>Making all properties cascade using the <a>writing mode</a> specified on the element, not on its parent.
    <li>Making the ordering of longhands within 'margin'-like shorthands put inline-start before inline-end.
    <li>Renaming the <css>outset-*</css> properties to 'inset-*' and marking an issue for discussion.
    <li>Adding an Introduction section.
    <li>Updating to current terminology of CSS Writing Modes.
    <li>Miscellaneous prose cleanup.
  </ul>
