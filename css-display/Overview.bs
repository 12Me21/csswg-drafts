<h1>CSS Display Module Level 3</h1>

<pre class='metadata'>
Status: ED
ED: http://dev.w3.org/csswg/css-display
Shortname: css-display
Group: csswg
Level: 3
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Abstract: This module contains the features of CSS relating to the 'display' property and other box-generation details.
Ignored Terms: show, display-model, display-role
Link Defaults: css-lists-3 (property) counter-increment
</pre>

<h2 id="intro">
Introduction</h2>

	<p><em>This section is not normative.</em>

	The 'display' property, introduced in CSS 2.1,
	defines what kind of boxes an element generates
	(and whether it generates boxes at all),
	and how it lays out its contents.

	These concepts are actually rather independent,
	though they're conflated by the 'display' property.
	This causes some pain when a property value intended to affect one aspect
	(such as setting an element to ''display:none'' to suppress box generation)
	affects another aspect
	(such as losing the memory of what it was <em>before</em> ''display:none'',
	so that it can be set back to that value later).

	This specification subsumes the CSS 2.1 definition of the 'display' property,
	and redefines it to be a shorthand property for a small family of longhands,
	each controlling an independent aspect of an element's "display".


<h3 id="placement">
Module interactions</h3>

	This specification transforms the 'display' property into a shorthand property,
	and defines several longhand properties that it expands into or effects.

	This module replaces and extends the definition of the 'display' property defined in [[!CSS21]] section 9.2.4.

	None of the properties in this module apply to the <code>::first-line</code> or <code>::first-letter</code> pseudo-elements.

<h3 id="values">
Values</h3>

	This specification follows the
	<a href="http://www.w3.org/TR/CSS21/about.html#property-defs">CSS property
	definition conventions</a> from [[!CSS21]]. Value types not defined in
	this specification are defined in CSS Level 2 Revision 1 [[!CSS21]].
	Other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification also accept the
	<a href="http://www.w3.org/TR/css3-values/#common-keywords">CSS-wide keywords</a>
	as their property value. For readability it has not been repeated explicitly.

<h2 id='the-display-properties'>
The Display Properties</h2>

	The 'display' shorthand and its associated family of properties control the layout mode of elements
	(how the element determines the sizes and positions of itself and its descendants),
	and what boxes they and their descendants generate.


<h3 id='the-display-inside'>
Setting the layout mode: the 'display-inside' property</h3>

	<pre class="propdef">
	Name: display-inside
	Value: auto | block | table | flex | grid | ruby
	Initial: auto
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Computed value: a keyword
	Media: all
	</pre>

	<dl dfn-type="value" dfn-for="display-inside">
		<dt><dfn>auto</dfn>
		<dd>
			If the element's computed 'display-outside' value is ''inline-level'',
			the element is an inline element,
			and lays out its contents using inline layout. [[!CSS21]]
			If the element's computed 'display-outside' value is an <a>layout-specific display role</a>,
			this elements acts as normal for its given 'display-outside' value.
			Otherwise, this value computes to ''display-inside/block''.

		<dt><dfn>block</dfn>
		<dd>
			The element lays out its contents using block layout. [[!CSS21]]

		<dt><dfn>table</dfn>
		<dd>
			The element lays out its contents using table layout. [[!CSS21]]

		<dt><dfn>flex</dfn>
		<dd>
			The element lays out its contents using flex layout. [[!CSS3-FLEXBOX]]

		<dt><dfn>grid</dfn>
		<dd>
			The element lays out its contents using grid layout. [[!CSS3-GRID-LAYOUT]]

		<dt><dfn>ruby</dfn>
		<dd>
			The element lays out its contents using ruby layout. [[!CSS3RUBY]]
	</dl>


<h3 id='the-display-outside'>
Interacting with the layout mode: the 'display-outside' property</h3>

	<pre class="propdef">
	Name: display-outside
	Value: block-level | inline-level | run-in | contents | none | table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container
	Initial: inline-level
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Computed value: as specified
	Media: all
	</pre>

	<dl dfn-type="value" dfn-for="display-outside">
		<dt><dfn>block-level</dfn>
		<dd>
			The element is block-level,
			and participates in a block formatting context.
			Other formatting contexts,
			such as flex formatting contexts,
			may also work with block-level elements. [[!CSS21]]

		<dt><dfn>inline-level</dfn>
		<dd>
			The element is inline-level,
			and participates in an inline formatting context. [[!CSS21]]

		<dt><dfn>contents</dfn>
		<dd>
			The element itself does not generate any boxes,
			but its children and pseudo-elements still generate boxes as normal.
			For the purposes of box generation and layout,
			the element must be treated as if it had been replaced with its children and pseudo-elements in the document tree.
			<p class='issue'>
				''contents'' currently only has an effect on box generation and layout.
				Other things that care about the document tree are unaffected, like counter scopes.
				Is this what we want?

		<dt><dfn>none</dfn>
		<dd>
			The element generates no boxes,
			and does not participate in any formatting context.

			Note: This value exists for legacy reasons,
			and interacts with the separate 'box-suppress' property.
			It is recommended that 'box-suppress' be used to suppress an element,
			so that the element's display type is automatically preserved
			for when it's no longer suppressed.

		<dt><dfn>table-row-group</dfn>, <dfn>table-header-group</dfn>, <dfn>table-footer-group</dfn>, <dfn>table-row</dfn>, <dfn>table-cell</dfn>, <dfn>table-column-group</dfn>, <dfn>table-column</dfn>, <dfn>table-caption</dfn>
		<dd>
			The element is an <dfn>internal table element</dfn>,
			and participates in a table layout context. [[!CSS21]]
			These values are all <a>layout-specific display roles</a>.

		<dt><dfn>ruby-base</dfn>, <dfn>ruby-text</dfn>, <dfn>ruby-base-container</dfn>, <dfn>ruby-text-container</dfn>
		<dd>
			The element is an <dfn>internal ruby element</dfn>,
			and participates in a ruby layout context. [[!CSS3RUBY]]
			These values are all <a>layout-specific display roles</a>.

		<dt><dfn>run-in</dfn>
		<dd>
			The element is a <a>run-in element</a>.
			Run-in elements act like inlines or blocks,
			depending on the surrounding elements.
			This is described more fully in a later section.
	</dl>

	Some values of 'display-outside' are specialized for particular formatting contexts,
	and don't have meaning outside of those specific contexts.
	These values are called <dfn title="layout-specific display role">layout-specific display roles</dfn>.
	Generally, a <a>layout-specific display role</a> will generate wrapper boxes around itself
	to ensure that it ends up in the correct formatting context,
	if it's not placed in an appropriate formatting context;
	the details of this are specified by each layout mode.

	<p class='issue'>
		Is <a href="http://lists.w3.org/Archives/Public/www-style/2012Jul/0450.html">fantasai's proposal for a run-in model</a> sane enough to include in this spec?


<h3 id='display-list'>
Creating a list item: the 'display-list' property</h3>

	<pre class="propdef">
	Name: display-list
	Value: none | list-item
	Initial: none
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Computed value: as specified
	Media: all
	</pre>

	<dl dfn-type="value" dfn-for="display-list">
		<dt><dfn>list-item</dfn>
		<dd>
			The element generates a <code>::marker</code> pseudo-element
			and is considered a <a>list item</a>.
	</dl>

<h3 id='the-display'>
The 'display' shorthand property</h3>

	<pre class="propdef">
	Name: display
	Value: inline | block | list-item | inline-list-item | inline-block | table | inline-table | table-cell | table-caption | flex | inline-flex | grid | inline-grid | [ <<'display-inside'>> || <<'display-outside'>> || <<'display-list'>> ]
	Initial: see individual properties
	Applies to: see individual properties
	Inherited: see individual properties
	Computed value: see individual properties
	Animatable: see individual properties
	Media: see individual properties
	</pre>

	The single-keyword values listed explicitly in the grammar above are handled specially,
	for legacy reasons.
	All other single-keyword values,
	and all other values in general,
	are handled as normal for shorthands.

	<dl dfn-type="value" dfn-for="display">
		<dt><dfn>inline</dfn>
		<dd>
			Expands identically to ''inline-level auto''.

		<dt><dfn>block</dfn>
		<dd>
			Expands identically to ''block-level block''.

		<dt><dfn>list-item</dfn>
		<dd>
			Expands identically to ''block-level block list-item''.

		<dt><dfn>inline-list-item</dfn>
		<dd>
			Expands identically to ''inline-level block list-item''.

		<dt><dfn>inline-block</dfn>
		<dd>
			Expands identically to ''inline-level block''.

		<dt><dfn>table</dfn>
		<dd>
			Expands identically to ''block-level table''.

		<dt><dfn>inline-table</dfn>
		<dd>
			Expands identically to ''inline-level table''.

		<dt><dfn>table-caption</dfn>
		<dd>
			Expands identically to ''table-caption block''.

		<dt><dfn>table-cell</dfn>
		<dd>
			Expands identically to ''table-cell block''.

		<dt><dfn>flex</dfn>
		<dd>
			Expands identically to ''block-level flex''.

		<dt><dfn>inline-flex</dfn>
		<dd>
			Expands identically to ''inline-level flex''.

		<dt><dfn>grid</dfn>
		<dd>
			Expands identically to ''block-level grid''.

		<dt><dfn>inline-grid</dfn>
		<dd>
			Expands identically to ''inline-level grid''.

		<dt><dfn>none</dfn>
		<dd>
			Expands identically to ''block none none''.
	</dl>


<h2 id='box-suppress'>
Controlling box generation: the 'box-suppress' property</h2>

	<pre class="propdef">
	Name: box-suppress
	Value: show | discard | hide
	Initial: normal
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Computed value: see prose
	Media: all
	</pre>

	If the computed value of 'display-outside' is ''display-outside/none'',
	the computed value of 'box-suppress' is ''discard''.
	Otherwise, the computed value is the specified value.

	<dl dfn-type="value" dfn-for="box-suppress">
		<dt><dfn>show</dfn>
		<dd>
			The element generates boxes as normal,
			per its 'display-*' properties.

		<dt><dfn>discard</dfn>
		<dd>
			The element generates no boxes at all.

		<dt><dfn>hide</dfn>
		<dd>
			The element generates boxes as normal,
			but those boxes do not participate in layout in any way,
			and must not be displayed.

			For the purpose of any layout-related information,
			such as querying for the computed value of the element's 'width' property,
			it must be treated as if it did not generate any boxes.

			Properties that rely on boxes but do not rely on layout,
			such as animations, 'counter-increment', etc.,
			must work as normal on this element and its descendants.
	</dl>


<h2 id='run-in'>
Run-In Layout</h2>

	A <dfn>run-in element</dfn> is an element with ''display-outside: run-in''.
	A <a>run-in element</a> acts differently based on whether its siblings are inlines or blocks;
	if it precedes a block, it <em>merges into</em> the block.
	This is useful for formatting compact headlines, definitions, and other similar things,
	where the appropriate DOM structure is to have a headline preceding the following prose,
	but the desired display is an inline headline laying out with the text.

	<div class="example">
		For example, dictionary definitions are often formatted so that the word is inline with the definition:

		<pre>
		&lt;dl class='dict'>
			&lt;dt>dictionary
			&lt;dd>a book that lists the words of a language in alphabetical
			    order and gives their meaning, or that gives the equivalent
			    words in a different language.
			&lt;dt>glossary
			&lt;dd>an alphabetical list of terms or words found in or relating
			    to a specific subject, text, or dialect, with explanations; a
			    brief dictionary.
		&lt;/dl>
		&lt;style>
		.dict > dt {
			display: run-in;
		}
		.dict > dt::after {
			display: run-in;
			content: ": "
		}
		&lt;/style>
		</pre>

		Which is formatted as:

		<pre>
		<b>dictionary:</b> a book that lists the words of a language
		in alphabetical order and explains their meaning.

		<b>glossary:</b> an alphabetical list of terms or words found
		in or relating to a specific subject, text, or dialect,
		with explanations; a brief dictionary.
		</pre>
	</div>

	Whenever there is a sequence of one or more contiguous sibling <a>run-in elements</a>,
	if the sequence is followed by an element with ''display-inside: block'' and ''display-outside: block-level'',
	all of the elements in the sequence generate inline-level boxes inside the following block,
	as if they were ''display-outside: inline-level'',
	after its ''::marker'' pseudo-element's boxes (if any),
	but preceding any other boxes generates by the contents of the block
	(including the box generated by the ''::before'' pseudo-element, if any).

	Otherwise, the behavior depends on how many sibling <a>run-in elements</a> are in the sequence:

	<dl>
		<dt>only one
		<dd>
			The <a>run-in element</a> generates a block-level box,
			as if it were ''display-outside: block-level''.

		<dt>more than one
		<dd>
			Each <a>run-in element</a> generates an inline-level box,
			as if it were ''display-outside: inline-level''.
			An anonymous block box is generated around the entire sequence of boxes thus generated.
	</dl>


<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	We would like to thank the many people who have attempted to separate out the disparate details of box generation over the years,
	most particularly Bert Bos,
	whose last attempt with 'display-model' and 'display-role' didn't get anywhere,
	but primed us for the current spec.

	We would also like to thank the many JavaScript libraries such as jQuery
	which have hacked around the "what 'display' should I give it when you call .show()?" problem,
	making it extremely clear that something needed to be done on our part.
