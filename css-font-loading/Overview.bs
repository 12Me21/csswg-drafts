<h1>CSS Font Loading Module Level 3</h1>

<pre class='metadata'>
Shortname: css-font-loading
Level: 3
Group: csswg
Status: ED
ED: http://dev.w3.org/csswg/css-font-loading/
TR: http://w3.org/TR/css-font-loading/
Previous Version: http://www.w3.org/TR/2014/WD-css-font-loading-3-20140522/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Former Editor: John Daggett, Mozilla, jdaggett@mozilla.com
Abstract: This CSS module describes events and interfaces used for dynamically loading font resources.
Link Defaults: css-fonts-3 (descriptor) src, dom-core-ls (interface) event
Ignored Terms: domstring, eventinit, cssfontfacerule, eventtarget, workerglobalscope, document, canvasproxy, iterator, unsigned long, set
</pre>

<h2 id="introduction">
Introduction</h2>

	CSS allows authors to load custom fonts from the web via the ''@font-face'' rule.
	While this is easy to use when authoring a stylesheet,
	it's much more difficult to use dynamically via scripting.

	Further, CSS allows the user agent to choose when to actually load a font;
	if a font face isn't <em>currently</em> used by anything on a page,
	most user agents will not download its associated file.
	This means that later use of the font face will incur a delay
	as the user agent finally notices a usage and begins downloading and parsing the font file.

	This specification defines a scripting interface to font faces in CSS,
	allowing font faces to be easily created and loaded from script.
	It also provides methods to track the loading status of an individual font,
	or of all the fonts on an entire page.

	Issue: Several things in this spec use normal ES objects to define behavior,
	such as various things using Promises internally,
	and FontFaceSet using a Set internally.
	I believe the intention here is that these objects
	(and their prototype chains) are pristine,
	unaffected by anything the author has done.
	Is this a good intention?
	If so, how should I indicate this in the spec?

<h3 id="values">
Values</h3>

	This specification uses <dfn interface title="Promise">Promises</dfn>,
	which are defined in <a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">ECMAScript 6</a>.
	HTML5Rocks has some <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">good tutorial material introducing Promises</a>.

<h3 id='task-source'>
Task Sources</h3>

	Whenever this specification queues a task,
	it queues it onto the "font loading" task source.

<!--
████████  ███████  ██    ██ ████████ ████████    ███     ██████  ████████
██       ██     ██ ███   ██    ██    ██         ██ ██   ██    ██ ██
██       ██     ██ ████  ██    ██    ██        ██   ██  ██       ██
██████   ██     ██ ██ ██ ██    ██    ██████   ██     ██ ██       ██████
██       ██     ██ ██  ████    ██    ██       █████████ ██       ██
██       ██     ██ ██   ███    ██    ██       ██     ██ ██    ██ ██
██        ███████  ██    ██    ██    ██       ██     ██  ██████  ████████
-->

<h2 id="fontface-interface">
The <code>FontFace</code> Interface</h2>

	The {{FontFace}} interface represents a single usable font face.
	CSS ''@font-face'' rules implicitly define FontFace objects,
	or they can be constructed manually from a url or binary data.

	<pre class="idl">
		typedef (ArrayBuffer or ArrayBufferView) BinaryData;

		dictionary FontFaceDescriptors {
			DOMString style = "normal";
			DOMString weight = "normal";
			DOMString stretch = "normal";
			DOMString unicodeRange = "U+0-10FFFF";
			DOMString variant = "normal";
			DOMString featureSettings = "normal";
		};

		enum FontFaceLoadStatus { "unloaded", "loading", "loaded", "error" };

		[Constructor(DOMString family, (DOMString or BinaryData) source,
			         optional FontFaceDescriptors descriptors),
		 Exposed=Window,Worker]
		interface FontFace {
			attribute DOMString family;
			attribute DOMString style;
			attribute DOMString weight;
			attribute DOMString stretch;
			attribute DOMString unicodeRange;
			attribute DOMString variant;
			attribute DOMString featureSettings;

			readonly attribute FontFaceLoadStatus status;

			Promise&lt;FontFace> load();
			readonly attribute Promise&lt;FontFace> loaded;
		};
	</pre>

	Issue: Other APIs use other names for .loaded, like .readyState. Can we align?

	Issue: "unloaded" is usually used for things that start loaded and then become not loaded.
	Can we rename that value?
	Media stuff uses "none", other APIs use "empty", "idle", "nothing".

	<dl dfn-type=attribute dfn-for=FontFace>
		<dt><dfn>family</dfn>, <span attribute-info for=family></span>
		<dt><dfn>style</dfn>, <span attribute-info for=style></span>
		<dt><dfn>weight</dfn>, <span attribute-info for=weight></span>
		<dt><dfn>stretch</dfn>, <span attribute-info for=stretch></span>
		<dt><dfn>unicodeRange</dfn>, <span attribute-info for=unicodeRange></span>
		<dd>
			These attributes all represent the corresponding aspects of a font face,
			as defined by the descriptors defined in the CSS ''@font-face'' rule.
			They are parsed the same as the corresponding ''@font-face'' descriptors.
			They are used by the font matching algorithm,
			but otherwise have no effect.

			For example, a {{FontFace}} with a {{FontFace/style}} of <code>"italic"</code>
			<em>represents</em> an italic font face;
			it does not <strong>make</strong> the font face italic.

			On getting, return the string associated with this attribute.

			On setting, parse the string according to the grammar for the CSS ''@font-face'' rule.
			If it does not match the grammar,
			throw a SyntaxError;
			otherwise, set the attribute to the serialization of the parsed value.

		<dt><dfn>variant</dfn>, <span attribute-info for=variant></span>
		<dt><dfn>featureSettings</dfn>, <span attribute-info for=featureSettings></span>
		<dd>
			These attributes have the same meaning,
			and are parsed the same as,
			the corresponding descriptors in the CSS ''@font-face'' rules.

			They turn on or off specific features in fonts that support them.
			Unlike the previous attributes,
			these attributes actually affect the font face.

			On getting, return the string associated with this attribute.

			On setting, parse the string according to the grammar for the CSS ''@font-face'' rule.
			If it does not match the grammar,
			throw a SyntaxError;
			otherwise, set the attribute to the serialization of the parsed value.

		<dt><dfn>status</dfn>, <span attribute-info for=FontFace/status></span>
		<dd>
			This attribute reflects the current status of the font face.
			It must be "unloaded" for a newly-created {{FontFace}}.

			It can change due to an author explicitly requesting a font face to load,
			such as through the {{FontFace/load()}} method on {{FontFace}},
			or implicitly by the user agent,
			due to it detecting that the font face is needed to draw some text on the screen.

		<dt><dfn>loaded</dfn>, <span attribute-info for=loaded></span>
		<dd>
			This attribute reflects the {{[[FontStatusPromise]]}} of the font face.
	</dl>

	All {{FontFace}} objects contain an internal <dfn attribute for=FontFace>\[[FontStatusPromise]]</dfn> slot,
	which tracks the status of the font.
	It starts out pending,
	and fulfills or rejects when the font is successfully loaded and parsed, or hits an error.

	All {{FontFace}} objects also contain
	internal <dfn attribute for=FontFace>\[[Urls]]</dfn> and <dfn attribute for=FontFace>\[[Data]]</dfn> slots,
	of which one is <code>null</code> and the other is not <code>null</code>
	(the non-null one is set by the constructor,
		based on which data is passed in).

<!--
 ██████   ███████  ██    ██  ██████  ████████ ████████  ██     ██  ██████  ████████  ███████  ████████
██    ██ ██     ██ ███   ██ ██    ██    ██    ██     ██ ██     ██ ██    ██    ██    ██     ██ ██     ██
██       ██     ██ ████  ██ ██          ██    ██     ██ ██     ██ ██          ██    ██     ██ ██     ██
██       ██     ██ ██ ██ ██  ██████     ██    ████████  ██     ██ ██          ██    ██     ██ ████████
██       ██     ██ ██  ████       ██    ██    ██   ██   ██     ██ ██          ██    ██     ██ ██   ██
██    ██ ██     ██ ██   ███ ██    ██    ██    ██    ██  ██     ██ ██    ██    ██    ██     ██ ██    ██
 ██████   ███████  ██    ██  ██████     ██    ██     ██  ███████   ██████     ██     ███████  ██     ██
-->

<h3 id='font-face-constructor'>
The Constructor</h3>

	A {{FontFace}} can be constructed either
	from a URL pointing to a font face file,
	or from an ArrayBuffer (or ArrayBufferView) containing the binary representation of a font face.

	When the <dfn method title='FontFace()' for=FontFace>FontFace</dfn>(DOMString <dfn argument for="FontFace/FontFace()">family</dfn>, (DOMString or {{BinaryData}}) <dfn argument for="FontFace/FontFace()">source</dfn>, {{FontFaceDescriptors}} <dfn argument for="FontFace/FontFace()">descriptors</dfn>) method is called,
	execute these steps:

	1. Let <var>font face</var> be a fresh {{FontFace}} object.
		Set <var>font face's</var> {{FontFace/status}} attribute to <code>"unloaded"</code>,
		Set its internal {{[[FontStatusPromise]]}} slot to a fresh pending {{Promise}} object.

		Parse the {{family!argument}} argument,
		and the members of the {{descriptors!argument}} argument,
		according to the grammars of the corresponding descriptors of the CSS ''@font-face'' rule.
		If any of them fail to parse correctly,
		reject <var>font face's</var> {{[[FontStatusPromise]]}} with a DOMException named "SyntaxError",
		set <var>font face’s</var> corresponding attributes to the empty string,
		and set <var>font face’s</var> {{FontFace/status}} attribute to "error".
		Otherwise, set <var>font face's</var> corresponding attributes to the serialization of the parsed values.

		Return <var>font face</var>.
		If <var>font face’s</a> {{FontFace/status}} is "error",
		terminate this algorithm;
		otherwise,
		complete the rest of these steps asynchronously.

	2. If the {{source!argument}} argument was a {{DOMString}},
		parse it according to the grammar of the 'src' descriptor of the CSS ''@font-face'' rule.
		If it fails to parse correctly,
		reject <var>font face's</var> {{[[FontStatusPromise]]}} with a DOMException named "SyntaxError" exception,
		queue a task to set <var>font face’s</var> {{FontFace/status}} attribute to "error",
		and abort these steps;
		otherwise, set <var>font face's</var> internal {{[[Urls]]}} slot to the string.

		Note: Note that this means that passing a naked url as the source argument,
		like <code>"http://example.com/myFont.woff"</code>,
		won't work - it needs to be at least wrapped in a ''url()'' function,
		like <code>"url(http://example.com/myFont.woff)"</code>.
		In return for this inconvenience,
		you get to specify multiple fallbacks,
		specify the type of font each fallback is,
		and refer to local fonts easily.

		Issue: Need to define the base url,
		so relative urls can resolve.
		Should it be the url of the document?
		Is that correct for workers too,
		or should they use their worker url?
		Is that always defined?

		If the {{source}} argument was a {{BinaryData}},
		set <var>font face's</var> internal {{[[Data]]}} slot to the passed argument.

	3. If <var>font face's</var> {{[[Data]]}} slot is not <code>null</code>,
		queue a task to set <var>font face's</var> {{FontFace/status}} attribute to "loading".
		Attempt to parse the data in it as a font.
		When this is completed,
		successfully or not,
		queue a task to run the following steps synchronously:

		1. If the load was successful,
			<var>font face</var> now represents the parsed font;
			fulfill <var>font face's</var> {{[[FontStatusPromise]]}} with <var>font face</var>,
			and set its {{FontFace/status}} attribute to "loaded".

		2. Otherwise,
			reject <var>font face's</var> {{[[FontStatusPromise]]}} with a DOMException named "SyntaxError"
			and set <var>font face's</var> {{FontFace/status}} attribute to "error".

	Note: Newly constructed FontFace objects are not automatically added
	to the FontFaceSet associated with a document
	or a context for a worker thread.
	This means that while newly constructed fonts can be preloaded,
	they cannot actually be used until they are explicitly added to a FontFaceSet.
	See the following section for a more complete description of FontFaceSet.

<!--
██        ███████     ███    ████████    ███ ███
██       ██     ██   ██ ██   ██     ██  ██     ██
██       ██     ██  ██   ██  ██     ██ ██       ██
██       ██     ██ ██     ██ ██     ██ ██       ██
██       ██     ██ █████████ ██     ██ ██       ██
██       ██     ██ ██     ██ ██     ██  ██     ██
████████  ███████  ██     ██ ████████    ███ ███
-->

<h3 id='font-face-load'>
The <code>load()</code> method</h3>

	The {{FontFace/load()}} method of {{FontFace}}
	forces a url-based font face to request its font data and load.
	For fonts constructed from binary data,
	or fonts that are already loading or loaded,
	it does nothing.

	When the <dfn method for=FontFace>load()</dfn> method is called,
	execute these steps:

	<ol link-type=idl>
		<li>
			Let <var>font face</var> be the {{FontFace}} object on which this method was called.

		<li>
			If <var>font face's</var> {{[[Urls]]}} slot is <code>null</code>,
			or its {{FontFace/status}} attribute is anything other than <code>"unloaded"</code>,
			return <var>font face's</var> {{[[FontStatusPromise]]}}
			and abort these steps.

		<li>
			Otherwise,
			set <var>font face's</var> {{FontFace/status}} attribute to "loading",
			return <var>font face's</var> {{[[FontStatusPromise]]}},
			and continue executing the rest of this algorithm asynchronously.

		<li>
			Using the value of <var>font face's</var> {{[[Urls]]}} slot,
			attempt to load a font as defined in [[!CSS3-FONTS]],
			as if it was the value of a ''@font-face'' rule's 'src' descriptor.

		<li>
			When the load operation completes,
			successfully or not,
			queue a task to run the following steps synchronously:

			<ol>
				<li>
					If the attempt to load fails,
					reject <var>font face's</var> {{[[FontStatusPromise]]}} with
					a DOMException whose name is "NetworkError"
					and set <var>font face's</var> {{FontFace/status}} attribute to "error".

				<li>
					Otherwise,
					<var>font face</var> now represents the loaded font;
					fulfill <var>font face's</var> {{[[FontStatusPromise]]}} with <var>font face</var>
					and set <var>font face's</var> {{FontFace/status}} attribute to "loaded".
			</ol>
	</ol>

	User agents can initiate font loads on their own,
	whenever they determine that a given font face is necessary to render something on the page.
	When this happens,
	they must act as if they had called the corresponding {{FontFace}}’s {{FontFace/load()}} method described here.

	Note: Some UAs utilize a "font cache"
	which avoids having to download the same font multiple times
	on a page or on multiple pages within the same origin.
	Multiple {{FontFace}} objects can be mapped to the same entry in the font cache,
	which means that a {{FontFace}} object might start loading unexpectedly,
	even if it's not in a {{FontFaceSet}},
	because some other {{FontFace}} object pointing to the same font data
	(perhaps on a different page entirely!)
	has been loaded.

<h3 id='font-face-css-connection'>
Interaction with CSS’s ''@font-face'' Rule</h3>

	A CSS ''@font-face'' rule automatically defines a corresponding {{FontFace}} object,
	which is automatically placed in the document's <a>font source</a>
	when the rule is parsed.
	This {{FontFace}} object is <dfn>CSS-connected</dfn>.

	The {{FontFace}} object corresponding to a ''@font-face'' rule
	has its {{FontFace/family}}, {{FontFace/style}}, {{FontFace/weight}}, {{FontFace/stretch}}, {{FontFace/unicodeRange}}, {{FontFace/variant}}, and {{FontFace/featureSettings}} attributes
	set to the same value as the corresponding descriptors in the ''@font-face'' rule.
	There is a two-way connection between the two:
	any change made to a ''@font-face'' descriptor is immediately reflected in the corresponding {{FontFace}} attribute,
	and vice versa.

	The internal {{[[Urls]]}} slot of the {{FontFace}} object is set to the value of the ''@font-face'' rule's 'src' descriptor,
	and reflects any changes made to the 'src' descriptor.

	Otherwise, a {{FontFace}} object created by a CSS ''@font-face'' rule is identical to one created manually.

	If a ''@font-face'' rule is removed from the document, its corresponding {{FontFace}} object is no longer <a>CSS-connected</a>.
	The connection is not restorable by any means
	(but adding the ''@font-face'' back to the stylesheet will create a brand new {{FontFace}} object which <em>is</em> <a>CSS-connected</a>).

<!--
████████  ███████  ██    ██ ████████ ████████    ███     ██████  ████████  ██████  ████████ ████████
██       ██     ██ ███   ██    ██    ██         ██ ██   ██    ██ ██       ██    ██ ██          ██
██       ██     ██ ████  ██    ██    ██        ██   ██  ██       ██       ██       ██          ██
██████   ██     ██ ██ ██ ██    ██    ██████   ██     ██ ██       ██████    ██████  ██████      ██
██       ██     ██ ██  ████    ██    ██       █████████ ██       ██             ██ ██          ██
██       ██     ██ ██   ███    ██    ██       ██     ██ ██    ██ ██       ██    ██ ██          ██
██        ███████  ██    ██    ██    ██       ██     ██  ██████  ████████  ██████  ████████    ██
-->

<h2 id="FontFaceSet-interface">
The <code>FontFaceSet</code> Interface</h2>

	<pre class="idl">
		dictionary FontFaceSetLoadEventInit : EventInit {
			sequence&lt;FontFace> fontfaces = [];
		};

		[Constructor(DOMString type, optional FontFaceSetLoadEventInit eventInitDict),
		 Exposed=Window,Worker]
		interface FontFaceSetLoadEvent : Event {
			readonly attribute sequence&lt;FontFace> fontfaces;
		};

		enum FontFaceSetLoadStatus { "loading", "loaded" };

		callback ForEachCallback = void (FontFace font, long index, FontFaceSet self);

		[Exposed=Window,Worker,
		 Constructor(sequence<FontFace> initialFaces)]
		interface FontFaceSet : EventTarget {
			// Emulate the Set interface, until we can extend Set correctly.
			readonly attribute unsigned long size;
			void add(FontFace font);
			boolean has(FontFace font);
			boolean delete(FontFace font);
			void clear();
			Iterator entries();
			Iterator keys();
			Iterator values();
			void forEach(ForEachCallback cb, optional any thisArg);
			FontFace iterator;

			// -- events for when loading state changes
			attribute EventHandler onloading;
			attribute EventHandler onloadingdone;
			attribute EventHandler onloadingerror;

			// check and start loads if appropriate
			// and fulfill promise when all loads complete
			Promise&lt;sequence&lt;FontFace>> load(DOMString font, optional DOMString text = " ");

			// return whether all fonts in the fontlist are loaded
			// (does not initiate load if not available)
			boolean check(DOMString font, optional DOMString text = " ");

			// async notification that font loading and layout operations are done
			readonly attribute Promise&lt;FontFaceSet> ready;

			// loading state, "loading" while one or more fonts loading, "loaded" otherwise
			readonly attribute FontFaceSetLoadStatus status;
		};
	</pre>

	<dl dfn-type=attribute dfn-for="FontFaceSet">
		<dt><dfn>ready</dfn> <span attribute-info for=FontFaceSet/ready></span>
		<dd>
			This attribute reflects the {{FontFaceSet}}'s {{[[ReadyPromise]]}} slot.

			See [[#font-face-set-ready]] for more details on this {{Promise}} and its use.

		<dt><dfn>size</dfn> <span attribute-info for=FontFaceSet/size></span>
		<dd>
			This attribute reflects the <code>size</code> attribute of the {{FontFaceSet}}'s {{[[ContainedFonts]]}} slot.

		<dt><dfn attribute for="FontFaceSet">status</dfn> <span attribute-info for="FontFaceSet/status"></span>
		<dd>
			If there are <a>possibly pending font loads</a>,
			the {{FontFaceSet/status}} attribute must have the value <code>"loading"</code>.
			Otherwise, it must have the value <code>"loaded"</code>.
	</dl>

	<dl dfn-type=method dfn-for="FontFaceSet">
		<dt><dfn title="FontFaceSet()" constructor>FontFaceSet</dfn>(sequence&lt;{{FontFace}}> <dfn argument for="FontFaceSet/FontFaceSet()">initialFaces</dfn>)
		<dd>
			The {{FontFaceSet}} constructor, when called,
			must construct a new {{Set}} object
			by passing its {{initialFaces}} argument
			to the {{Set}} constructor,
			then assigning that {{Set}} object to the {{FontFaceSet}}'s {{[[ContainedFonts]]}} slot.

		<dt><dfn title=add()>add</dfn>({{FontFace}} font)
		<dt><dfn title=has()>has</dfn>({{FontFace}} font)
		<dt><dfn title=delete()>delete</dfn>({{FontFace}} font)
		<dt><dfn title=entries()>entries</dfn>()
		<dt><dfn title=keys()>keys</dfn>()
		<dt><dfn title=values()>values</dfn>()
		<dt><dfn title=forEach()>forEach</dfn>({{ForEachCallback}} cb, optional any thisArg)
		<dd>
			If {{add()}} or {{delete()}} are called
			with an argument that is a <a>CSS-connected</a> {{FontFace}} object,
			they must throw an InvalidModificationError exception.

			All of these methods call the corresponding method of the {{FontFaceSet}}'s {{[[ContainedFonts]]}} slot
			with the same arguments as were passed to them,
			and return the value returned by the called method.

		<dt><dfn title=clear()>clear</dfn>()
		<dd>
			This must remove all non-<a>CSS-connected</a> {{FontFace}} objects
			from the {{FontFaceSet}}'s {{[[ContainedFonts]]}} slot.

		<dt><dfn iterator title="iterator">iterator behavior</dfn>
		<dd>
			The <a spec=webidl>iterator behavior</a> is the iterator behavior of the {{FontFaceSet}}'s {{[[ContainedFonts]]}} slot.
	</dl>

	{{FontFaceSet}} objects also have internal
	<dfn attribute for=FontFaceSet>\[[LoadingFonts]]</dfn>,
	<dfn attribute for=FontFaceSet>\[[LoadedFonts]]</dfn>,
	and <dfn attribute for=FontFaceSet>\[[FailedFonts]]</dfn> slots,
	all of which are initialized to the empty list,
	a <dfn attribute for=FontFaceSet>\[[ReadyPromise]]</dfn> slot,
	which is initialized to a fresh pending {{Promise}},
	and a <dfn attribute for=FontFaceSet>\[[ContainedFonts]]</dfn> slot,
	which is initialized by the <a constructor title="FontFaceSet()">FontFaceSet constructor</a> to a {{Set}} object
	(though see [[#document-font-face-set]] for information on how the Set may be pre-filled
	for {{FontFaceSet}} objects created by the user agent).

	Because font families are loaded only when they are used,
	content sometimes needs to understand when the loading of fonts occurs.
	Authors can use the events and methods defined here to allow greater control over actions
	that are dependent upon the availability of specific fonts.

	There are <dfn>no pending font loads</dfn> for a given {{FontFaceSet}} whenever
	none of its contained {{FontFace}} objects have a {{FontFace/status}} of <code>"loading"</code>.

	For {{FontFaceSet}}s that are <a>font sources</a>,
	in addition to the above constriant,
	the following must all be true
	for them to be considered as having <a>no pending font loads</a>:

	<ul>
		<li>
			The document has finished loading.

		<li>
			There are no pending stylesheet requests.

		<li>
			There are no pending layout operations which might cause the user agent to request a font.
	</ul>

	If a {{FontFaceSet}} can't be considered to have <a>no pending font loads</a>,
	it instead has <dfn>possibly pending font loads</dfn>.

<!--
████████ ██     ██ ████████ ██    ██ ████████  ██████
██       ██     ██ ██       ███   ██    ██    ██    ██
██       ██     ██ ██       ████  ██    ██    ██
██████   ██     ██ ██████   ██ ██ ██    ██     ██████
██        ██   ██  ██       ██  ████    ██          ██
██         ██ ██   ██       ██   ███    ██    ██    ██
████████    ███    ████████ ██    ██    ██     ██████
-->

<h3 id='FontFaceSet-events'>
Events</h3>

	Font load events make it easy to respond to the font-loading behavior of the entire document,
	rather than having to listen to each font specifically.
	The <dfn event for="FontFaceSet">loading</dfn> event
	fires when the document begins loading fonts,
	while the <dfn event for="FontFaceSet">loadingdone</dfn>
	and <dfn event for="FontFaceSet">loadingerror</dfn> events
	fire when the document is done loading fonts,
	containing the fonts that successfully loaded
	or failed to load,
	respectively.

	The following are the event handlers (and their corresponding event handler event types)
	that must be supported by <code>FontFaceSet</code> objects as IDL attributes:

	<table class="data" id="eventhandlers">
		<thead>
			<tr>
				<th>Event handler
				<th>Event handler event type
		<tbody>
			<tr>
				<th>{{onloading}}
				<td>{{loading}}
			<tr>
				<th>{{onloadingdone}}
				<td>{{loadingdone}}
			<tr>
				<th>{{onloadingerror}}
				<td>{{loadingerror}}
	</table>

	To <dfn>fire a font load event</dfn> named <var>e</var>
	at a {{FontFaceSet}} <var>target</var>
	with optional <var>font faces</var>
	means to
	<a href="http://www.w3.org/TR/html5/webappapis.html#event-firing">fire a simple event</a> named <var>e</var>
	using the {{FontFaceSetLoadEvent}} interface that also meets these conditions:

	<ol>
		<li>
			The {{FontFaceSetLoadEvent/fontfaces}} attribute is initialized to the given list of {{FontFace}} objects.
	</ol>

	Whenever one or more {{FontFace}} objects within a given {{FontFaceSet}}
	change their {{FontFace/status}} attribute to "loading",
	the user agent must run the following steps:

	<ol>
		<li>
			Let <var>font face set</var> be the given {{FontFaceSet}},
			and <var>loading fonts</var> be the {{FontFace}} objects
			that have newly switched to "loading" status,
			in the same order as they appear in <var>font face set</var>.

		<li>
			Set the {{FontFaceSet/status}} attribute of <var>font face set</var> to "loading".

		<li>
			If <var>font face set's</var> {{[[LoadingFonts]]}} slot is currently empty,
			<a>fire a font load event</a> named {{loading}} at <var>font face set</var>.

		<li>
			Append the <var>loading fonts</var> to <var>font face set's</var> {{[[LoadingFonts]]}} slot.

		<li>
			If <var>font face set's</var> {{[[ReadyPromise]]}} slot currently holds a fulfilled promise,
			replace it with a fresh pending promise.
	</ol>

	Whenever one or more <a>available font faces</a> for a given {{FontFaceSet}}
	change their {{FontFace/status}} attribute to "loaded" or "error",
	the user agent must run the following steps:

	<ol>
		<li>
			Let <var>font face set</var> be the given {{FontFaceSet}},
			and <var>loaded fonts</var> be the {{FontFace}} objects
			that have newly switched to "loaded" or "error" status,
			in the same order as they appear in <var>font face set</var>.

		<li>
			For each font in the <var>loaded fonts</var>,
			if their {{FontFace/status}} attribute is "loaded",
			append them to <var>font face set's</var> {{[[LoadedFonts]]}} slot;
			if it's "error",
			append them to <var>font face set's</var> {{[[FailedFonts]]}} slot.
	</ol>

	Whenever a {{FontFaceSet}} goes from having <a>possibly pending font loads</a>
	to having <a>no pending font loads</a>,
	user agents must run these steps:

	<ol>
		<li>
			If this is not the first time the {{FontFaceSet}} has had <a>no pending font loads</a>,
			and none of its contained {{FontFace}} objects began loading
			since the last time it had <a>no pending font loads</a>,
			abort this algorithm.

		<li>
			Set <var>font face set's</var> {{FontFaceSet/status}} attribute to "loaded".

		<li>
			<a>Fire a font load event</a> named {{loadingdone}} at <var>font face set</var>
			with the (possibly empty) contents of <var>font face set's</var> {{[[LoadedFonts]]}} slot.
			Reset the {{[[LoadedFonts]]}} slot to an empty list.

		<li>
			If <var>font face set's</var> {{[[FailedFonts]]}} slots is non-empty,
			<a>fire a font load event</a> named {{loadingerror}} at <var>font face set</var>
			with the contents of <var>font face set's</var> {{[[FailedFonts]]}} slot.
			Reset the {{[[FailedFonts]]}} slot to an empty list.

		<li>
			Fulfill <var>font face set's</var> {{[[ReadyPromise]]}} attribute's value with <var>font face set</var>.
	</ol>


	If asked to <dfn export>find the matching font faces</dfn>
	from a FontFaceSet <var>source</var>,
	for a given font string <var>font</var>
	optionally some sample text <var>text</var>,
	and optionally an <var>allow system fonts</var> flag,
	run the following steps:

	<ol>
		<li>
			Parse <var>font</var>
			using the CSS value syntax of the 'font' property.
			If a syntax error occurs,
			return a syntax error.

		<li>
			If <var>text</var> was not explicitly provided,
			let it be a string containing a single space character (U+0020 SPACE).

		<li>
			Let <var>font family list</var> be the list of font families parsed from <var>font</var>,
			and <var>font style</var> be the other font style attributes parsed from <var>font</var>.

		<li>
			Let <var>available font faces</var> be the font faces within <var>source</var>.
			If the <var>allow system fonts</var> flag is specified,
			add all system fonts to <var>available font faces</var>.

		<li>
			Let <var>matched font faces</var> initially be an empty list.

		<li>
			For each family in <var>font family list</var>,
			use the font matching rules to select the font faces from <var>available font faces</var>
			that match the <var>font style</var>,
			and add them to <var>matched font faces</var>.
			The use of the {{FontFace/unicodeRange}} attribute means that this may be more than just a single font face.

		<li>
			For each font face in <var>matched font faces</var>,
			if its defined 'unicode-range' does not include the codepoint of at least one character in <var>text</var>,
			remove it from the list.

		<li>
			Return <var>matched font faces</var>.
	</ol>

<!--
██        ███████     ███    ████████    ███ ███
██       ██     ██   ██ ██   ██     ██  ██     ██
██       ██     ██  ██   ██  ██     ██ ██       ██
██       ██     ██ ██     ██ ██     ██ ██       ██
██       ██     ██ █████████ ██     ██ ██       ██
██       ██     ██ ██     ██ ██     ██  ██     ██
████████  ███████  ██     ██ ████████    ███ ███
-->

<h3 id='font-face-set-load'>
The <code>load()</code> method</h3>

	The {{FontFaceSet/load() method of {{FontFaceSet}} will determine whether all fonts in the given font list
	have been loaded and are available.
	If any fonts are downloadable fonts and have not already been loaded,
	the user agent will initiate the load of each of these fonts.
	It returns a Promise,
	which is fulfilled when all of the fonts are loaded and ready to be used,
	or rejected if any font failed to load properly.

	When the <dfn method for="FontFaceSet" title="load()">load</dfn>(<dfn argument for="FontFaceSet/load()">font</dfn>, <dfn argument for="FontFaceSet/load()">text</dfn>) method is called,
	execute these steps:

	<ol>
		<li>
			Let <var>font face set</var> be the {{FontFaceSet}} object this method was called on.
			Let <var>promise</var> be a newly-created promise object.

		<li>
			Return <var>promise</var>.
			Complete the rest of these steps asynchronously.

		<li>
			<a>Find the matching font faces</a> from <var>font face set</var>
			using the {{FontFaceSet/load()/font}} and {{FontFaceSet/load()/text}} arguments passed to the function,
			and let <var>font face list</var> be the return value.
			If a syntax error was returned,
			reject <var>promise</var> with a SyntaxError exception
			and terminate these steps.

		<li>
			Queue a task to run the following steps synchronously:

			<ol>
				<li>
					For all of the font faces in the <var>font face list</var>,
					call their {{FontFace/load()}} method.

				<li>
					Resolve <var>promise</var> with the result of
					waiting for all of the {{[[FontStatusPromise]]}}s of each font face in the <var>font face list</var>, in order.
			</ol>
	</ol>

<!--
 ██████  ██     ██ ████████  ██████  ██    ██   ███ ███
██    ██ ██     ██ ██       ██    ██ ██   ██   ██     ██
██       ██     ██ ██       ██       ██  ██   ██       ██
██       █████████ ██████   ██       █████    ██       ██
██       ██     ██ ██       ██       ██  ██   ██       ██
██    ██ ██     ██ ██       ██    ██ ██   ██   ██     ██
 ██████  ██     ██ ████████  ██████  ██    ██   ███ ███
-->

<h3 id='font-face-set-check'>
The <code>check()</code> method</h3>

	The {{check()}} method of {{FontFaceSet}} will determine whether all fonts in the given font list
	have been loaded and are available.
	If all fonts are available,
	it returns true;
	otherwise, it returns false.

	When the <dfn method for="FontFaceSet" title="check()">check</dfn>(<dfn argument for="FontFaceSet/check()">font</dfn>, <dfn argument for="FontFaceSet/check()">text</dfn>) method is called,
	execute these steps:

	<ol>
		<li>
			Let <var>font face set</var> be the {{FontFaceSet}} object this method was called on.

		<li>
			<a>Find the matching font faces</a> from <var>font face set</var>
			using the {{FontFaceSet/check()/font}} and {{FontFaceSet/check()/text}} arguments passed to the function,
			and including system fonts,
			and let <var>font face list</var> be the return value.
			If a syntax error was returned,
			throw a SyntaxError exception
			and terminate these steps.

		<li>
			If the <var>font face list</var> contains no font faces,
			return <code>false</code>.

		<li>
			If all fonts in the <var>font face list</var> have a {{FontFace/status}} attribute of "loaded",
			or are system fonts,
			return <code>true</code>.
			Otherwise, return <code>false</code>.
	</ol>

<!--
████████  ████████    ███    ████████  ██    ██
██     ██ ██         ██ ██   ██     ██  ██  ██
██     ██ ██        ██   ██  ██     ██   ████
████████  ██████   ██     ██ ██     ██    ██
██   ██   ██       █████████ ██     ██    ██
██    ██  ██       ██     ██ ██     ██    ██
██     ██ ████████ ██     ██ ████████     ██
-->

<h3 id='font-face-set-ready'>
The <code>ready</code> attribute</h3>

	Because the number of fonts loaded depends on the how many fonts are used for a given piece of text,
	in some cases whether fonts need to be loaded or not may not be known.
	The {{FontFaceSet/ready}} attribute contains a {{Promise}} which is resolved when the document is done loading fonts,
	which provides a way for authors to avoid having to keep track of which fonts have or haven't been loaded
	before examining content which may be affected by loading fonts.

	Note: Authors should note that a given <var>ready promise</var> is only fulfilled once,
	but further fonts may be loaded after it fulfills.
	This is similar to listening for a {{loadingdone}} event to fire,
	but the callbacks passed to the {{FontFaceSet/ready}} promise will <strong>always</strong> get called,
	even when no font loads occur because the fonts in question are already loaded.
	It's a simple, easy way to synchronize code to font loads
	without the need to keep track of what fonts are needed and precisely when they load.

	Note: Note that the user agent may need to iterate over multiple font loads before the <var>ready promise</var> is fulfilled.
	This can occur with font fallback situations,
	where one font in the fontlist is loaded
	but doesn't contain a particular glyph
	and other fonts in the fontlist need to be loaded.
	The <var>ready promise</var> is only fulfilled after layout operations complete
	and no additional font loads are necessary.

	Note: Note that the Promise returned by this {{FontFaceSet/ready}} attribute is only ever fulfilled,
	never rejected,
	unlike the Promise returned by the {{FontFace}} {{FontFace/load()}} method.

<h3 id='font-face-set-css'>
Interaction with CSS Font Loading and Matching</h3>

	When the font matching algorithm in [[CSS3-FONTS]] is run automatically by the user-agent,
	the set of font faces it matches over must be precisely the set of fonts in the <a>font source</a> for the document,
	plus any local font faces.

	When a user-agent needs to load a font face,
	it must do so by calling the {{FontFace/load()}} method
	of the corresponding {{FontFace}} object.

	(This means it must run the same algorithm,
	not literally call the value currently stored in the <code>load</code> property of the object.)

	<div class="example">
		Fonts are available when they are added to a {{FontFaceSet}}.
		Adding a new ''@font-face'' rule to a stylesheet
		also adds a new {{FontFace}} to the {{FontFaceSet}} of the {{Document}} object.

		Adding a new ''@font-face'' rule:

		<pre>
		document.styleSheets[0].insertRule(
			"@font-face { font-family: newfont; src: url(newfont.woff); }", 0);
		document.body.style.fontFamily = "newfont, serif";
		</pre>

		Constructing a new {{FontFace}} object and adding it to <code>document.fonts</code>:

		<pre>
		var f = new FontFace("newfont", "url(newfont.woff)");
		document.fonts.add(f);
		document.body.style.fontFamily = "newfont, serif";
		</pre>

		In both cases, the loading of the font resource “newfont.woff” will be initiated by the layout engine,
		just as other ''@font-face'' rule fonts are loaded.

		Omitting the addition to <code>document.fonts</code> means the font would never be loaded
		and text would be displayed in the default serif font:

		<pre>
		var f = new FontFace("newfont", "url(newtest.woff)", {});

		/* new {{FontFace}} not added to {{FontFaceSet}},
		   so the 'font-family' property can't see it,
		   and serif will be used instead */
		document.body.style.fontFamily = "newfont, serif";
		</pre>

		To explicitly preload a font before using it,
		authors can defer the addition of a new {{FontFace}} to a {{FontFaceSet}} until the load has completed:

		<pre>
		var f = new FontFace("newfont", "url(newfont.woff)", {});
		f.load().then(function (loadedFace) {
			document.fonts.add(loadedFace);
			document.body.style.fontFamily = "newfont, serif";
		});
		</pre>

		In this case, the font resource “newfont.woff” is first downloaded.
		Once the download completes,
		the font is added to the document's {{FontFaceSet}},
		the body font is changed,
		and the layout engine uses the new font resource.
	</div>

<!--
████████  ███████  ██    ██ ████████ ████████    ███     ██████  ████████  ██████   ███████  ██     ██ ████████   ██████  ████████
██       ██     ██ ███   ██    ██    ██         ██ ██   ██    ██ ██       ██    ██ ██     ██ ██     ██ ██     ██ ██    ██ ██
██       ██     ██ ████  ██    ██    ██        ██   ██  ██       ██       ██       ██     ██ ██     ██ ██     ██ ██       ██
██████   ██     ██ ██ ██ ██    ██    ██████   ██     ██ ██       ██████    ██████  ██     ██ ██     ██ ████████  ██       ██████
██       ██     ██ ██  ████    ██    ██       █████████ ██       ██             ██ ██     ██ ██     ██ ██   ██   ██       ██
██       ██     ██ ██   ███    ██    ██       ██     ██ ██    ██ ██       ██    ██ ██     ██ ██     ██ ██    ██  ██    ██ ██
██        ███████  ██    ██    ██    ██       ██     ██  ██████  ████████  ██████   ███████   ███████  ██     ██  ██████  ████████
-->

<h2 id='font-face-source'>
The <code>FontFaceSource</code> interface</h2>

	<pre class='idl'>
		[NoInterfaceObject]
		interface FontFaceSource {
			readonly attribute FontFaceSet fonts;
		};

		Document implements FontFaceSource;
		WorkerGlobalScope implements FontFaceSource;
	</pre>

	Any document, workers, or other context which can use fonts in some manner must implement the {{FontFaceSource}} interface.
	The value of the context’s {{fonts}} attribute is its <dfn>font source</dfn>,
	which provides all of the fonts used in font-related operations,
	unless defined otherwise.
	Operations referring to “the font source” must be interpreted as referring to the <a>font source</a> of the relevant context in which the operation is taking place.

	For any font-related operation that takes place within one of these contexts,
	the {{FontFace}} objects within the <a>font source</a> are its <dfn>available font faces</dfn>.

<h3 id="fontfacesource-workers">
Worker FontFaceSources</h3>

	Within a Worker document, the <a>font source</a> is initially empty.

	Note: {{FontFace}} objects can be constructed and added to it as normal,
	which affects CSS font-matching within the worker
	(such as, for example, drawing text into a {{CanvasProxy}}).

<h3 id="document-font-face-set">
Interaction with CSS’s ''@font-face'' Rule</h3>

	The set entries for a document's <a>font source</a>
	must be initially populated with all the <a>CSS-connected</a> {{FontFace}} objects
	from all of the CSS ''@font-face'' rules in the document's stylesheets,
	in document order.
	As ''@font-face'' rules are added or removed from a stylesheet,
	or stylesheets containing ''@font-face'' rules are added or removed,
	the corresponding <a>CSS-connected</a> {{FontFace}} objects
	must be added or removed from the document's <a>font source</a>,
	and maintain this ordering.

	All non-<a>CSS-connected</a> {{FontFace}} objects must be sorted after the <a>CSS-connected</a> ones,
	in insertion order.

	Note: It is expected that a future version of this specification
	will define ways of interacting with and querying local fonts as well.

<!--
   ███    ████████  ████       ████████ ██     ██    ███    ██     ██ ████████  ██       ████████  ██████
  ██ ██   ██     ██  ██        ██        ██   ██    ██ ██   ███   ███ ██     ██ ██       ██       ██    ██
 ██   ██  ██     ██  ██        ██         ██ ██    ██   ██  ████ ████ ██     ██ ██       ██       ██
██     ██ ████████   ██        ██████      ███    ██     ██ ██ ███ ██ ████████  ██       ██████    ██████
█████████ ██         ██        ██         ██ ██   █████████ ██     ██ ██        ██       ██             ██
██     ██ ██         ██        ██        ██   ██  ██     ██ ██     ██ ██        ██       ██       ██    ██
██     ██ ██        ████       ████████ ██     ██ ██     ██ ██     ██ ██        ████████ ████████  ██████
-->

<h2 id="font-load-event-examples">
API Examples</h2>

	<div class="example">
		To show content only after all font loads complete:

		<pre>
			document.fonts.ready().then(function() {
				var content = document.getElementById("content");
				content.style.visibility = "visible";
			});
		</pre>
	</div>

	<div class="example">
		Drawing text in a canvas with a downloadable font, explicitly
		initiating the font download and drawing upon completion:

		<pre>
			function drawStuff() {
				var ctx = document.getElementById("c").getContext("2d");

				ctx.fillStyle = "red";
				ctx.font = "50px MyDownloadableFont";
				ctx.fillText("Hello!", 100, 100);
			}

			document.fonts.load("50px MyDownloadableFont")
			              .then(drawStuff, handleError);
		</pre>
	</div>

	<div class="example">
		A rich text editing application may need to measure text elements
		after editing operations have taken place.  Since style changes may
		or may not require additional fonts to be downloaded, or the fonts
		may already have been downloaded, the measurement procedures need to
		occur after those font loads complete:

		<pre>
			function measureTextElements() {
				// contents can now be measured using the metrics of
				// the downloadable font(s)
			}

			function doEditing() {
				// content/layout operations that may cause additional font loads
				document.fonts.ready().then(measureTextElements);
			}
		</pre>
	</div>

	<div class="example">
		The {{loadingdone}} event only fires after all font related loads have completed
		<strong>and</strong> text has been laid out without causing additional font loads:

		<pre>
			&lt;style>
			@font-face {
				font-family: latin-serif;
				src: url(latinserif.woff) format("woff"); /* contains no kanji/kana */
			}
			@font-face {
				font-family: jpn-mincho;
				src: url(mincho.woff) format("woff");
			}
			@font-face {
				font-family: unused;
				src: url(unused.woff);
			}

			body { font-family: latin-serif, jpn-mincho; }
			&lt;/style>
			&lt;p>納豆はいかがでしょうか
		</pre>

		In this situation, the user agent first downloads “latinserif.woff”
		and then tries to use this to draw the Japanese text.
		But because no Japanese glyphs are present in that font,
		fallback occurs and the font “mincho.woff” is downloaded.
		Only after the second font is downloaded and the Japanese text laid out does the {{loadingdone}} event fire.

		The "unused" font isn't loaded,
		but no text is using it,
		so the UA isn't even <em>trying</em> to load it.
		It doesn't interfere with the {{loadingdone}} event.
	</div>


<h2 class="no-num" id="changes">Changes</h2>

	Changes from the <a href="http://www.w3.org/TR/2014/WD-css-font-loading-3-20140522/">May 2014 CSS Font Loading Last Call Working Draft</a>:

	<ol>
		<li>
			Corrected the async algorithms to use "queue a task" language,
			to ensure that side-effect timing is well-defined.
	</ol>

<h2 class=no-num id=acknowledgments>
Acknowledgments</h2>

	Several members of the Google Fonts team provided helpful feedback on font load events,
	as did Boris Zbarsky, Jonas Sicking and ms2ger.
