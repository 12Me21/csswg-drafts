<h1>CSS Font Loading Module Level 3</h1>

<pre class='metadata'>
Shortname: css-font-loading
Level: 3
Group: csswg
Status: LCWD
Date: 2014-05-22
Deadline: 2014-06-30
ED: http://dev.w3.org/csswg/css-font-loading/
TR: http://w3.org/TR/css-font-loading/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Former Editor: John Daggett, Mozilla, jdaggett@mozilla.com
Abstract: This CSS module describes events and interfaces used for dynamically loading font resources.
Link Defaults: css-fonts-3 (descriptor) src, dom-core-ls (interface) event
Ignored Terms: domstring, eventinit, cssfontfacerule, eventtarget, workerglobalscope, document, canvasproxy
</pre>

<h2 id="introduction">
Introduction</h2>

	CSS allows authors to load custom fonts from the web via the ''@font-face'' rule.
	While this is easy to use when authoring a stylesheet,
	it's much more difficult to use dynamically via scripting.

	Further, CSS allows the user agent to choose when to actually load a font;
	if a font face isn't <em>currently</em> used by anything on a page,
	most user agents will not download its associated file.
	This means that later use of the font face will incur a delay
	as the user agent finally notices a usage and begins downloading and parsing the font file.

	This specification defines a scripting interface to font faces in CSS,
	allowing font faces to be easily created and loaded from script.
	It also provides methods to track the loading status of an individual font,
	or of all the fonts on an entire page.

<h3 id="values">
Values</h3>

	This specification uses <dfn interface title="Promise">Promises</dfn>.
	Promises are currently defined by <a href="https://github.com/domenic/promises-unwrapping">Domenic Denicola's spec</a>,
	but when TC39 is finished adding them to ECMAScript 6 their definition should be used instead.
	HTML5Rocks has some <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">good tutorial material introducing Promises</a>.

<h2 id="fontface-interface">
The <code>FontFace</code> Interface</h2>

	The <a interface>FontFace</a> interface represents a single usable font face.
	CSS ''@font-face'' rules implicitly define FontFace objects,
	or they can be constructed manually from a url or binary data.

	<pre class="idl">
		typedef (ArrayBuffer or ArrayBufferView) BinaryData;

		dictionary FontFaceDescriptors {
			DOMString style = "normal";
			DOMString weight = "normal";
			DOMString stretch = "normal";
			DOMString unicodeRange = "U+0-10FFFF";
			DOMString variant = "normal";
			DOMString featureSettings = "normal";
		};

		enum FontFaceLoadStatus { "unloaded", "loading", "loaded", "error" };

		[Constructor(DOMString family, (DOMString or BinaryData) source,
			         FontFaceDescriptors descriptors)]
		interface FontFace {
			attribute DOMString family;
			attribute DOMString style;
			attribute DOMString weight;
			attribute DOMString stretch;
			attribute DOMString unicodeRange;
			attribute DOMString variant;
			attribute DOMString featureSettings;

			readonly attribute FontFaceLoadStatus status;

			Promise&lt;FontFace> load();
			attribute Promise&lt;boolean> loaded;
		};
	</pre>

	<dl dfn-type=attribute dfn-for=FontFace>
		<dt><dfn>family</dfn>, of type <a interface>DOMString</a>
		<dt><dfn>style</dfn>, of type <a interface>DOMString</a>
		<dt><dfn>weight</dfn>, of type <a interface>DOMString</a>
		<dt><dfn>stretch</dfn>, of type <a interface>DOMString</a>
		<dt><dfn>unicodeRange</dfn>, of type <a interface>DOMString</a>
		<dd>
			These attributes all represent the corresponding aspects of a font face,
			as defined by the descriptors defined in the CSS ''@font-face'' rule.
			They are parsed the same as the corresponding ''@font-face'' descriptors.
			They are used by the font matching algorithm,
			but otherwise have no effect.

			For example, a <a interface>FontFace</a> with a <a attribute>style</a> of <code>"italic"</code>
			<em>represents</em> an italic font face;
			it does not <strong>make</strong> the font face italic.

		<dt><dfn>variant</dfn>, of type <a interface>DOMString</a>
		<dt><dfn>featureSettings</dfn>, of type <a interface>DOMString</a>
		<dd>
			These attributes have the same meaning,
			and are parsed the same as,
			the corresponding descriptors in the CSS ''@font-face'' rules.

			They turn on or off specific features in fonts that support them.
			Unlike the previous attributes,
			these attributes actually affect the font face.

		<dt><dfn>status</dfn>, of type <a enum>FontFaceLoadStatus</a>
		<dd>
			This attribute reflects the current status of the font face.
			It must be "unloaded" for a newly-created <a interface>FontFace</a>.

			It can change due to an author explicitly requesting a font face to load,
			such as through the <a method for=FontFace>load()</a> method on <a interface>FontFace</a>,
			or implicitly by the user agent,
			due to it detecting that the font face is needed to draw some text on the screen.

		<dt><dfn>loaded</dfn>, of type <a interface>Promise</a>
		<dd>
			This attribute reflects the <a idl>[<!---->[FontStatusPromise]]</a> of the font face.
	</dl>

	All <a interface>FontFace</a> objects contain an internal <dfn attribute for=FontFace>[<!---->[FontStatusPromise]]</dfn> slot,
	which tracks the status of the font.
	It starts out pending,
	and fulfills or rejects when the font is successfully loaded and parsed, or hits an error.

	All <a interface>FontFace</a> objects also contain
	internal <dfn attribute for=FontFace>[<!---->[Urls]]</dfn> and <dfn attribute for=FontFace>[<!---->[Data]]</dfn> slots,
	of which one is not <code>null</code> and the rest are <code>null</code>.

<h3 id='font-face-constructor'>
The Constructor</h3>

	A <a interface>FontFace</a> can be constructed either
	from a URL pointing to a font face file,
	or from an ArrayBuffer (or ArrayBufferView) containing the binary representation of a font face.

	When the <dfn method title='FontFace()' for=FontFace>FontFace</dfn>(DOMString <dfn argument for="FontFace/FontFace()">family</dfn>, (DOMString or <a idl>BinaryData</a>) <dfn argument for="FontFace/FontFace()">source</dfn>, <a idl>FontFaceDescriptors</a> <dfn argument for="FontFace/FontFace()">descriptors</dfn>) method is called,
	execute these steps:

	<ol link-type=idl>
		<li>
			Let <var>font face</var> be a fresh <a>FontFace</a> object.
			Set <var>font face's</var> <a for=FontFace>status</a> argument to <code>"unloaded"</code>.
			Set its internal <a>[<!---->[FontStatusPromise]]</a> slot to a newly-created <a idl>Promise</a> object.
			Return <var>font face</var>,
			and complete the rest of these steps asynchronously.

		<li>
			Parse the <a argument>family</a> argument,
			and the members of the <a argument for='FontFace/FontFace()'>descriptors</a> argument,
			according to the grammars of the corresponding descriptors of the CSS ''@font-face'' rule.
			If any of them fail to parse correctly,
			reject <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a> with a SyntaxError exception and abort these steps.
			Otherwise, set <var>font face's</var> corresponding attributes to the serialization of the parsed values.

		<li>
			If the <a>source</a> argument was a <a>DOMString</a>,
			parse it according to the grammar of the 'src' descriptor of the CSS ''@font-face'' rule.
			If it fails to parse correctly,
			reject <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a> with a SyntaxError exception and abort these steps;
			otherwise, set <var>font face's</var> internal <a>[<!---->[Urls]]</a> slot to the string.

			Note: Note that this means that passing a naked url as the source argument,
			like <code>"http://example.com/myFont.woff"</code>,
			won't work - it needs to be at least wrapped in a ''url()'' function,
			like <code>"url(http://example.com/myFont.woff)"</code>.
			In return for this inconvenience,
			you get to specify multiple fallbacks,
			specify the type of font each fallback is,
			and refer to local fonts easily.

			If the <a>source</a> argument was a <a>BinaryData</a>,
			set <var>font face's</var> internal <a>[<!---->[Data]]</a> slot to the passed argument.

		<li>
			If <var>font face's</var> <a>[<!---->[Data]]</a> slot is not <code>null</code>,
			set <var>font face's</var> <a for=FontFace>status</a> attribute to "loading",
			and attempt to parse the data in it as a font.
			If this is successful,
			<var>font face</var> now represents the parsed font;
			fulfill <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a> with <var>font face</var>,
			and set its <a for=FontFace>status</a> attribute to "loaded".
			If it is unsuccessful,
			reject <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a> with a SyntaxError
			and set <var>font face's</var> <a for=FontFace>status</a> attribute to "error".
	</ol>

	Note: Newly constructed FontFace objects are not automatically added
	to the FontFaceSet associated with a document
	or a context for a worker thread.
	This means that while newly constructed fonts can be preloaded,
	they cannot actually be used until they are explicitly added to a FontFaceSet.
	See the following section for a more complete description of FontFaceSet.

<h3 id='font-face-load'>
The <code>load()</code> method</h3>

	The <a method for=FontFace>load()</a> method of <a interface>FontFace</a>
	forces a url-based font face to request its font data and load.
	For fonts constructed from binary data,
	or fonts that are already loading or loaded,
	it does nothing.

	When the <dfn method for=FontFace>load()</dfn> method is called,
	execute these steps:

	<ol link-type=idl>
		<li>
			Let <var>font face</var> be the <a>FontFace</a> object on which this method was called.

		<li>
			If <var>font face's</var> <a>[<!---->[Urls]]</a> slot is <code>null</code>,
			or its <a for=FontFace>status</a> attribute is anything other than <code>"unloaded"</code>,
			return <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a>
			and abort these steps.

		<li>
			Otherwise,
			set <var>font face's</var> <a for=FontFace>status</a> attribute to "loading",
			return <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a>,
			and continue executing the rest of this algorithm asynchronously.

		<li>
			Using the value of <var>font face's</a> <a>[<!---->[Urls]]</a> slot,
			attempt to load a font as defined in [[!CSS3-FONTS]],
			as if it was the value of a ''@font-face'' rule's 'src' descriptor.

		<li>
			If the attempt to load fails,
			reject <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a> with a NetworkError
			and set <var>font face's</var> <a for=FontFace>status</a> attribute to "error".

		<li>
			Otherwise,
			<var>font face</var> now represents the loaded font;
			fulfill <var>font face's</var> <a>[<!---->[FontStatusPromise]]</a> with <var>font face</var>
			and set <var>font face's</var> <a for=FontFace>status</a> attribute to "loaded".
	</ol>

	User agents can initiate font loads on their own,
	whenever they determine that a given font face is necessary to render something on the page.
	When this happens,
	they must act as if they had called the corresponding <a interface>FontFace</a>’s <a method for=FontFace>load()</a> method described here.

<h3 id='font-face-css-connection'>
Interaction with CSS’s ''@font-face'' Rule</h3>

	A CSS ''@font-face'' rule automatically defines a corresponding <a interface>FontFace</a> object,
	which is automatically placed in the document's <a>font source</a>
	when the rule is parsed.
	This <a interface>FontFace</a> object is <dfn>CSS-connected</dfn>.

	The <a interface>FontFace</a> object corresponding to a ''@font-face'' rule
	has its <a attribute>family</a>, <a attribute>style</a>, <a attribute>weight</a>, <a attribute>stretch</a>, <a attribute>unicodeRange</a>, <a attribute>variant</a>, and <a attribute>featureSettings</a> attributes
	set to the same value as the corresponding descriptors in the ''@font-face'' rule.
	There is a two-way connection between the two:
	any change made to a ''@font-face'' descriptor is immediately reflected in the corresponding <a interface>FontFace</a> attribute,
	and vice versa.

	The internal <a attribute>[<!---->[Urls]]</a> slot of the <a interface>FontFace</a> object is set to the value of the ''@font-face'' rule's 'src' descriptor,
	and reflects any changes made to the 'src' descriptor.

	Otherwise, a <a interface>FontFace</a> object created by a CSS ''@font-face'' rule is identical to one created manually.

	If a ''@font-face'' rule is removed from the document, its corresponding <a interface>FontFace</a> object is no longer <a>CSS-connected</a>.
	The connection is not restorable by any means
	(but adding the ''@font-face'' back to the stylesheet will create a brand new <a interface>FontFace</a> object which <em>is</em> <a>CSS-connected</a>).



<h2 id="FontFaceSet-interface">
The <code>FontFaceSet</code> Interface</h2>

	<pre class="idl">
		dictionary CSSFontFaceLoadEventInit : EventInit {
			sequence&lt;CSSFontFaceRule> fontfaces = null;
		};

		[Constructor(DOMString type, optional CSSFontFaceLoadEventInit eventInitDict)]
		interface CSSFontFaceLoadEvent : Event {
			readonly attribute sequence&lt;CSSFontFaceRule> fontfaces;
		};

		enum FontFaceSetLoadStatus { "loading", "loaded" };

		[SetClass(FontFace)]
		interface FontFaceSet {

			// -- events for when loading state changes
			attribute EventHandler onloading;
			attribute EventHandler onloadingdone;
			attribute EventHandler onloadingerror;

			// check and start loads if appropriate
			// and fulfill promise when all loads complete
			Promise&lt;sequence&lt;FontFace>> load(DOMString font, optional DOMString text = " ");

			// return whether all fonts in the fontlist are loaded
			// (does not initiate load if not available)
			boolean check(DOMString font, optional DOMString text = " ");

			// async notification that font loading and layout operations are done
			Promise&lt;FontFaceSet> ready();

			// loading state, "loading" while one or more fonts loading, "loaded" otherwise
			readonly attribute FontFaceLoadStatus status;
		};

		FontFaceSet implements EventTarget;
	</pre>

	Note: The use of [SetClass] is controversial,
	so this will be rewritten to instead be just a Set look-alike,
	without use of [SetClass],
	at least until we figure out how to do this kind of thing correctly.

	The set entries for a <a interface>FontFaceSet</a> is initially an empty list.
	A <a interface>FontFaceSet</a> attached to a document may have some initial <a interface>FontFace</a> objects prefilled in it;
	see the section on <a href="#document-font-face-set">Interactions with CSS's @font-face Rule</a> for details.

	Because font families are loaded only when they are used,
	content sometimes needs to understand when the loading of fonts occurs.
	Authors can use the events and methods defined here to allow greater control over actions
	that are dependent upon the availability of specific fonts.

	There are <dfn>no pending font loads</dfn> whenever all of the following are true:

	<ul>
		<li>
			The document has finished loading.

		<li>
			There are no pending stylesheet requests.

		<li>
			There are no <a>available font faces</a>
			with a <a attribute for=FontFace>status</a> of "loading".

		<li>
			There are no pending layout operations which might cause the user agent to request a font.
	</ul>

	If any of the above conditions are false,
	there are <dfn>possibly pending font loads</dfn>.

	<dl>
		<dt><dfn attribute for="FontFaceSet">status</dfn>, of type <a interface>DOMString</a>
		<dd>
			If there are <a>possibly pending font loads</a>,
			the <a attribute for=FontFaceSet>status</a> attribute must have the value <code class="idl-code">"loading"</code>.
			Otherwise, it must have the value <code class="idl-code">"loaded"</code>.
	</dl>

	<a interface>FontFaceSet</a> objects also have internal
	<dfn attribute for=FontFaceSet>[<!---->[LoadingFonts]]</dfn>,
	<dfn attribute for=FontFaceSet>[<!---->[LoadedFonts]]</dfn>,
	<dfn attribute for=FontFaceSet>[<!---->[FailedFonts]]</dfn>,
	and <dfn attribute for=FontFaceSet>[<!---->[PendingReadyPromises]]</dfn> slots,
	all of which are initialized to the empty list.

<h3 id='set-modifications'>
Modifications of normal Set methods</h3>

	The <a interface>FontFaceSet</a> methods <code>add()</code> and <code>delete()</code>
	must throw an InvalidModificationError exception
	if their argument is a <a>CSS-connected</a> <a interface>FontFace</a> object.

	The <a interface>FontFaceSet</a> method <code>clear()</code>
	must only remove the manually-added <a interface>FontFace</a> objects;
	the <a>CSS-connected</a> <a interface>FontFace</a> objects are unaffected.


<h3 id='FontFaceSet-events'>
Events</h3>

	Font load events make it easy to respond to the font-loading behavior of the entire document,
	rather than having to listen to each font specifically.
	The <dfn event for="FontFaceSet">loading</dfn> event
	fires when the document begins loading fonts,
	while the <dfn event for="FontFaceSet">loadingdone</dfn>
	and <dfn event for="FontFaceSet">loadingerror</dfn> events
	fire when the document is done loading fonts,
	containing the fonts that successfully loaded
	or failed to load,
	respectively.

	The following are the event handlers (and their corresponding event handler event types)
	that must be supported by <code>FontFaceSet</code> objects as IDL attributes:

	<table class="data" id="eventhandlers">
		<thead>
			<tr>
				<th>Event handler
				<th>Event handler event type
		<tbody>
			<tr>
				<th><a attribute>onloading</a>
				<td><a event>loading</a>
			<tr>
				<th><a attribute>onloadingdone</a>
				<td><a event>loadingdone</a>
			<tr>
				<th><a attribute>onloadingerror</a>
				<td><a event>loadingerror</a>
	</table>

	To <dfn>fire a font load event</dfn> named <var>e</var>
	at a <a interface>FontFaceSet</a> <var>target</var>
	with optional <var>font faces</var>
	means to
	<a href="http://www.w3.org/TR/html5/webappapis.html#event-firing">fire a simple event</a> named <var>e</var>
	using the <a interface>CSSFontFaceLoadEvent</a> interface that also meets these conditions:

	<ol>
		<li>
			The <a attribute>fontfaces</a> attribute is initialized to the given list of <a interface>FontFace</a> objects.
	</ol>

	Whenever a <a interface>FontFace</a> in a given <a interface>FontFaceSet</a> <var>font face set</var>
	changes its <a attribute for=FontFace>status</a> attribute to

	Whenever one or more <a>available font faces</a> for a given <a interface>FontFaceSet</a>
	change their <a attribute for=FontFace>status</a> attribute to "loading",
	the user agent must run the following steps:

	<ol>
		<li>
			Let <var>font face set</var> be the given <a interface>FontFaceSet</a>,
			and <var>loading fonts</var> be the <a interface>FontFace</a> objects
			that have newly switched to "loading" status,
			in the same order as they appear in <var>font face set</var>.

		<li>
			Set the <a attribute for=FontFaceSet>status</a> attribute of <var>font face set</var> to "loading".

		<li>
			If <var>font face set's</var> <a attribute>[<!---->[LoadingFonts]]</a> slot is currently empty,
			<a>fire a font load event</a> named <a event>loading</a> at <var>font face set</var>.

		<li>
			Append the <var>loading fonts</var> to <var>font face set's</var> <a attribute>[<!---->[LoadingFonts]]</a> slot.
	</ol>

	Whenever one or more <a>available font faces</a> for a given <a interface>FontFaceSet</a>
	change their <a attribute for=FontFace>status</a> attribute to "loaded" or "error",
	the user agent must run the following steps:

	<ol>
		<li>
			Let <var>font face set</var> be the given <a interface>FontFaceSet</a>,
			and <var>loaded fonts</var> be the <a interface>FontFace</a> objects
			that have newly switched to "loaded" or "error" status,
			in the same order as they appear in <var>font face set</var>.

		<li>
			For each font in the <var>loaded fonts</var>,
			if their <a attribute for=FontFace>status</a> attribute is "loaded",
			append them to <var>font face set's</var> <a attribute>[<!---->[LoadedFonts]]</a> slot;
			if it's "error",
			append them to <var>font face set's</var> <a attribute>[<!---->[FailedFonts]]</a> slot.
	</ol>

	If there are ever <a>no pending font loads</a>
	and either of <var>font face set's</var> <a attribute>[<!---->[LoadedFonts]]</a> or <a attribute>[<!---->[FailedFonts]]</a> slots are not empty,
	user agents must run these steps:

	<ol>
		<li>
			Set <var>font face set's</var> <a attribute for=FontFaceSet>status</a> attribute to "loaded".

		<li>
			<a>Fire a font load event</a> named <a event>loadingdone</a> at <var>font face set</var>
			with the contents of <var>font face set's</var> <a attribute>[<!---->[LoadedFonts]]</a> slots, if any.

		<li>
			If <var>font face set's</var> <a attribute>[<!---->[FailedFonts]]</a> slots is non-empty,
			<a>fire a font load event</a> named <a event>loadingerror</a> at <var>font face set</var>
			with the contents of <var>font face set's</var> <a attribute>[<!---->[FailedFonts]]</a> slot.

		<li>
			If <var>font face set's</var> <a attribute>[<!---->[PendingReadyPromises]]</a> attribute is non-empty,
			fulfill each promise in the attribute's value with <var>font face set</var>.

		<li>
			Empty <var>font face set's</var> <a attribute>[<!---->[LoadingFonts]]</a>, <a attribute>[<!---->[LoadedFonts]]</a>, <a attribute>[<!---->[FailedFonts]]</a>, and <a attribute>[<!---->[PendingReadyPromises]]</a> slots.
	</ol>


	If asked to <dfn export>find the matching font faces</dfn>
	from a FontFaceSet <var>source</var>,
	for a given font string <var>font</var>
	and optionally some sample text <var>text</var>,
	run the following steps:

	<ol>
		<li>
			Parse <var>font</var>
			using the CSS value syntax of the 'font' property.
			If a syntax error occurs,
			return a syntax error.

		<li>
			If <var>text</var> was not explicitly provided,
			let it be a string containing a single space character (U+0020 SPACE).

		<li>
			Let <var>font family list</var> be the list of font families parsed from <var>font</var>,
			and <var>font style</var> be the other font style attributes parsed from <var>font</var>.

		<li>
			Let <var>available font faces</var> be the font faces within <var>source</var>.

		<li>
			Let <var>matched font faces</var> initially be an empty list.

		<li>
			For each family in <var>font family list</var>,
			use the font matching rules to select the font faces from <var>available font faces</var>
			that match the <var>font style</var>,
			and add them to <var>matched font faces</var>.
			The use of the <a attribute>unicodeRange</a> attribute means that this may be more than just a single font face.

		<li>
			For each font face in <var>matched font faces</var>,
			if its defined 'unicode-range' does not include the codepoint of at least one character in <var>text</var>,
			remove it from the list.

		<li>
			Return <var>matched font faces</var>.
	</ol>


<h3 id='font-face-set-load'>
The <code>load()</code> method</h3>

	The <a for=FontFaceSet>load()</a> method of <a interface>FontFaceSet</a> will determine whether all fonts in the given font list
	have been loaded and are available.
	If any fonts are downloadable fonts and have not already been loaded,
	the user agent will initiate the load of each of these fonts.
	It returns a Promise,
	which is fulfilled when all of the fonts are loaded and ready to be used,
	or rejected if any font failed to load properly.

	When the <dfn method for="FontFaceSet" title="load()">load</dfn>(<dfn argument for="FontFaceSet/load()">font</dfn>, <dfn argument for="FontFaceSet/load()">text</dfn>) method is called,
	execute these steps:

	<ol>
		<li>
			Let <var>font face set</var> be the <a interface>FontFaceSet</a> object this method was called on.
			Let <var>promise</var> be a newly-created promise object.

		<li>
			Return <var>promise</var>.
			Complete the rest of these steps asynchronously.

		<li>
			<a>Find the matching font faces</a> from <var>font face set</var>
			using the <a argument for="FontFaceSet/load()">font</a> and <a argument for="FontFaceSet/load()">text</a> arguments passed to the function,
			and let <var>font face list</var> be the return value.
			If a syntax error was returned,
			reject <var>promise</var> with a SyntaxError exception
			and terminate these steps.

		<li>
			For all of the font faces in the <var>font face list</var>,
			call their <a method for=FontFace>load()</a> method.

		<li>
			Resolve <var>promise</var> with the result of
			waiting for all of the <a attribute>[<!---->[FontStatusPromise]]</a>s of each font face in the <var>font face list</var>, in order.
	</ol>

<h3 id='font-face-set-check'>
The <code>check()</code> method</h3>

	The <a>check()</a> method of <a interface>FontFaceSet</a> will determine whether all fonts in the given font list
	have been loaded and are available.
	If all fonts are available,
	it returns true;
	otherwise, it returns false.

	When the <dfn method for="FontFaceSet" title="check()">check</dfn>(<dfn argument for="FontFaceSet/check()">font</dfn>, <dfn argument for="FontFaceSet/check()">text</dfn>) method is called,
	execute these steps:

	<ol>
		<li>
			Let <var>font face set</var> be the <a interface>FontFaceSet</a> object this method was called on.

		<li>
			<a>Find the matching font faces</a> from <var>font face set</var>
			using the <a argument for="FontFaceSet/check()">font</a> and <a argument for="FontFaceSet/check()">text</a> arguments passed to the function,
			and let <var>font face list</var> be the return value.
			If a syntax error was returned,
			throw a SyntaxError exception
			and terminate these steps.

		<li>
			If the <var>font face list</var> contains no font faces,
			return <code class="idl-code">true</code>.

		<li>
			If all fonts in the <var>font face list</var> have a <a attribute for=FontFace>status</a> attribute of "loaded",
			return <code>true</code>.
			Otherwise, return <code>false</code>.
	</ol>

<h3 id='font-face-set-ready'>
The <code>ready()</code> method</h3>

	Because the number of fonts loaded depends on the how many fonts are used for a given piece of text,
	in some cases whether fonts need to be loaded or not may not be known.
	The <a for=FontFaceSet>ready()</a> method returns a Promise which is resolved when the document is done loading fonts,
	which provides a way for authors to avoid having to keep track of which fonts have or haven't been loaded
	before examining content which may be affected by loading fonts.

	When the <dfn method for=FontFaceSet>ready()</dfn> method is called,
	execute these steps:

	<ol>
		<li>
			Let <var>font face set</var> be the <a interface>FontFaceSet</a> object this method was called on.
			Let <var>ready promise</var> be a fresh Promise which is initially pending.

		<li>
			If <var>font face set's</var> <a attribute for=FontFaceSet>status</a> attribute is "loaded",
			fulfill <var>ready promise</var> with <var>font face set</var>.
			Otherwise, append <var>ready promise</var>
			to <var>font face set's</var> <a attribute>[<!---->[PendingReadyPromises]]</a> slot.

		<li>
			Return <var>ready promise</var>.
	</ol>

	Note: Authors should note that a given <var>ready promise</var> is only fulfilled once,
	but further fonts may be loaded after it fulfills.
	This is similar to listening for a <a event>loadingdone</a> event to fire,
	but the callbacks passed to the <a method for=FontFaceSet>ready()</a> promise will <strong>always</strong> get called,
	even when no font loads occur because the fonts in question are already loaded.
	It's a simple, easy way to synchronize code to font loads
	without the need to keep track of what fonts are needed and precisely when they load.

	Note: Note that the user agent may need to iterate over multiple font loads before the <var>ready promise</var> is fulfilled.
	This can occur with font fallback situations,
	where one font in the fontlist is loaded
	but doesn't contain a particular glyph
	and other fonts in the fontlist need to be loaded.
	The <var>ready promise</var> is only fulfilled after layout operations complete
	and no additional font loads are necessary.

	Note: Note that the Promise returned by this <a method for=FontFaceSet>ready()</a> method is only ever fulfilled,
	never rejected,
	unlike the Promise returned by the <a interface>FontFace</a> <a method for=FontFace>load()</a> method.

<h3 id='font-face-set-css'>
Interaction with CSS Font Loading and Matching</h3>

	When the font matching algorithm in [[CSS3-FONTS]] is run automatically by the user-agent,
	the set of font faces it matches over must be precisely the set of fonts in the <a>font source</a> for the document,
	plus any local font faces.

	When a user-agent needs to load a font face,
	it must do so by calling the <a method for=FontFace>load()</a> method
	of the corresponding <a interface>FontFace</a> object.

	(This means it must run the same algorithm,
	not literally call the value currently stored in the <code>load</code> property of the object.)

	<div class="example">
		Fonts are available when they are added to a <a idl>FontFaceSet</a>.
		Adding a new ''@font-face'' rule to a stylesheet
		also adds a new <a idl>FontFace</a> to the <a idl>FontFaceSet</a> of the <a interface>Document</a> object.

		Adding a new ''@font-face'' rule:

		<pre>
		document.styleSheets[0].insertRule(
			"@font-face { font-family: newfont; src: url(newfont.woff); }", 0);
		document.body.style.fontFamily = "newfont, serif";
		</pre>

		Constructing a new <a idl>FontFace</a> object and adding it to <code>document.fonts</code>:

		<pre>
		var f = new FontFace("newfont", "url(newfont.woff)");
		document.fonts.add(f);
		document.body.style.fontFamily = "newfont, serif";
		</pre>

		In both cases, the loading of the font resource “newfont.woff” will be initiated by the layout engine,
		just as other ''@font-face'' rule fonts are loaded.

		Omitting the addition to <code>document.fonts</code> means the font would never be loaded
		and text would be displayed in the default serif font:

		<pre>
		var f = new FontFace("newfont", "url(newtest.woff)", {});

		/* new <a idl>FontFace</a> not added to <a idl>FontFaceSet</a>,
		   so the 'font-family' property can't see it,
		   and serif will be used instead */
		document.body.style.fontFamily = "newfont, serif";
		</pre>

		To explicitly preload a font before using it,
		authors can defer the addition of a new <a idl>FontFace</a> to a <a idl>FontFaceSet</a> until the load has completed:

		<pre>
		var f = new FontFace("newfont", "url(newfont.woff)", {});
		f.load().then(function (loadedFace) {
			document.fonts.add(loadedFace);
			document.body.style.fontFamily = "newfont, serif";
		});
		</pre>

		In this case, the font resource “newfont.woff” is first downloaded.
		Once the download completes,
		the font is added to the document's <a idl>FontFaceSet</a>,
		the body font is changed,
		and the layout engine uses the new font resource.
	</div>

<h2 id='font-face-source'>
The <code>FontFaceSource</code> interface</h2>

	<pre class='idl'>
		[NoInterfaceObject]
		interface FontFaceSource {
			readonly attribute FontFaceSet fonts;
		};

		Document implements FontFaceSource;
		WorkerGlobalScope implements FontFaceSource;
	</pre>

	Any document, workers, or other context which can use fonts in some manner must implement the <a interface>FontFaceSource</a> interface.
	The value of the context’s <a attribute>fonts</a> attribute is its <dfn>font source</dfn>,
	which provides all of the fonts used in font-related operations,
	unless defined otherwise.
	Operations referring to “the font source” must be interpreted as referring to the <a>font source</a> of the relevant context in which the operation is taking place.

	For any font-related operation that takes place within one of these contexts,
	the <a interface>FontFace</a> objects within the <a>font source</a> are its <dfn>available font faces</dfn>.

<h3 id="fontfacesource-workers">
Worker FontFaceSources</h3>

	Within a Worker document, the <a>font source</a> is initially empty.

	Note: <a interface>FontFace</a> objects can be constructed and added to it as normal,
	which affects CSS font-matching within the worker
	(such as, for example, drawing text into a <a interface>CanvasProxy</a>).

<h3 id="document-font-face-set">
Interaction with CSS’s ''@font-face'' Rule</h3>

	The set entries for a document's <a>font source</a>
	must be initially populated with all the <a>CSS-connected</a> <a interface>FontFace</a> objects
	from all of the CSS ''@font-face'' rules in the document's stylesheets,
	in document order.
	As ''@font-face'' rules are added or removed from a stylesheet,
	or stylesheets containing ''@font-face'' rules are added or removed,
	the corresponding <a>CSS-connected</a> <a interface>FontFace</a> objects
	must be added or removed from the document's <a>font source</a>,
	and maintain this ordering.

	All non-<a>CSS-connected</a> <a interface>FontFace</a> objects must be sorted after the <a>CSS-connected</a> ones,
	in insertion order.

	Note: It is expected that a future version of this specification
	will define ways of interacting with and querying local fonts as well.

<h2 id="font-load-event-examples">
API Examples</h2>

	<div class="example">
		To show content only after all font loads complete:

		<pre>
			document.fonts.ready().then(function() {
				var content = document.getElementById("content");
				content.style.visibility = "visible";
			});
		</pre>
	</div>

	<div class="example">
		Drawing text in a canvas with a downloadable font, explicitly
		initiating the font download and drawing upon completion:

		<pre>
			function drawStuff() {
				var ctx = document.getElementById("c").getContext("2d");

				ctx.fillStyle = "red";
				ctx.font = "50px MyDownloadableFont";
				ctx.fillText("Hello!", 100, 100);
			}

			document.fonts.load("50px MyDownloadableFont")
			              .then(drawStuff, handleError);
		</pre>
	</div>

	<div class="example">
		A rich text editing application may need to measure text elements
		after editing operations have taken place.  Since style changes may
		or may not require additional fonts to be downloaded, or the fonts
		may already have been downloaded, the measurement procedures need to
		occur after those font loads complete:

		<pre>
			function measureTextElements() {
				// contents can now be measured using the metrics of
				// the downloadable font(s)
			}

			function doEditing() {
				// content/layout operations that may cause additional font loads
				document.fonts.ready().then(measureTextElements);
			}
		</pre>
	</div>

	<div class="example">
		The <a event>loadingdone</a> event only fires after all font related loads have completed
		<strong>and</strong> text has been laid out without causing additional font loads:

		<pre>
			&lt;style>
			@font-face {
				font-family: latin-serif;
				src: url(latinserif.woff) format("woff"); /* contains no kanji/kana */
			}
			@font-face {
				font-family: jpn-mincho;
				src: url(mincho.woff) format("woff");
			}
			@font-face {
				font-family: unused;
				src: url(unused.woff);
			}

			body { font-family: latin-serif, jpn-mincho; }
			&lt;/style>
			&lt;p>納豆はいかがでしょうか
		</pre>

		In this situation, the user agent first downloads “latinserif.woff”
		and then tries to use this to draw the Japanese text.
		But because no Japanese glyphs are present in that font,
		fallback occurs and the font “mincho.woff” is downloaded.
		Only after the second font is downloaded and the Japanese text laid out does the <a event>loadingdone</a> event fire.

		The "unused" font isn't loaded,
		but no text is using it,
		so the UA isn't even <em>trying</em> to load it.
		It doesn't interfere with the <a event>loadingdone</a> event.
	</div>


<h2 class="no-num" id="changes">Changes</h2>

<h3 class="no-num" id="changes-since-20130212">
Changes from the <a href="http://www.w3.org/TR/2013/WD-css3-fonts-20130212/">February 2013 CSS3 Fonts Working Draft</a></h3>

	Major changes include:

	<ul>
		<li>Add details of font load errors.

		<li>Switched to a promise-based design for load() and ready().

		<li>Renamed notifyWhenFontsReady() to ready().

		<li>Added a FontFace interface, to directly represent the individual font faces, and allow manual construction of font faces without having to indirect through a @font-face rule.

		<li>Dropped the per-font events, in favor of promise-based methods on FontFace.
	</ul>

<h2 class=no-num id=acknowledgments>
Acknowledgments</h2>

	Several members of the Google Fonts team provided helpful feedback on font load events,
	as did Boris Zbarsky, Jonas Sicking and ms2ger.
