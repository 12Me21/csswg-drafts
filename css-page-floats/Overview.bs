<h1>CSS Page Floats</h1>

<pre class='metadata'>
Shortname: css-page-floats
Level: 3
Group: csswg
Status: ED
ED: http://dev.w3.org/csswg/css-page-floats/
Previous Version: https://hg.csswg.org/drafts/raw-file/108d7e3ff204/css-page-floats/Overview.html
Editor: Johannes Wilm, Vivliostyle, johanneswilm@vivliostyle.com
Former Editor: H&aring;kon Wium Lie, Opera Software, howcome@opera.com
Abstract: This module describes features often used in printed publications.
Abstract: Figures and photos are often moved to the top or bottom of columns and
Abstract: pages, along with their captions. Some elements (e.g., call-outs) push
Abstract: aside other content in the flow of text, and sometimes one column is
Abstract: given a different styling than others. This draft describes how to
Abstract: achieve these effects, both on paper and screens.
Ignored Terms: near, 3em, intrude, top-corner, bottom-corner
</pre>


<h2 id="intro">
Introduction</h2>

  <em>This section is not normative.</em>

  This module describes features often used in printed publications.
  Figures and photos are often moved to the top or bottom of columns and
  pages, along with their captions. Some elements (e.g., call-outs) push
  aside other content in the flow of text, and sometimes one column is
  given a different styling than others. This draft describes how to
  achieve these effects, both on paper and screens.


<h2 id="overview">Overview</h2>

  In page-based layouts, images and figures are often displayed at
  the top or bottom of pages. This specificaton adds new keywords on the
  'float' property to create <em>page floats</em>. A page float can
  float inside its natural column/page, or its placement can be deferred
  to a following column/page with the <em>float-defer</em> properties.
  Page floats can be set to span several columns, thereby supporting
  commonly used newspaper layouts. New values on the 'clear' property
  adds further ways of refining layouts with page floats.

  <p class="note">
    Not all multicol elements are constrained by the page
    box. Therefore, a more accurate term for page floats may be <em>column
    floats</em> as all of them are constrained by the column box. However,
    in most cases, page floats seems like a better term.

<h2 id="floating">
Floating to the top/bottom: top, bottom, snap</h2>

  <p>
    These new keywords on 'float' have been added:

  <dl dfn-for="float" dfn-type=value>

    <dt><dfn>top</dfn>
    <dd>The float is floated to the top of the column

    <dt><dfn>bottom</dfn>
    <dd>The float is floated to the bottom of the column

    <dt><dfn>snap(&lt;length> &lt;length>? [, top | bottom | near ]?)</dfn>
    <dd>
        Makes the element float to the top or bottom if it naturally appears within
        a certain distance from the top or bottom. The length value(s) specifies
        the maxium distance from the top/bottom that an element must be within in
        order to be floated; one length value specifies the distance from both the
        top and the bottom, two length values specify the distance from the top and
        bottom, respectively.

        The optional keyword value specifies where the element is floated: top,
        bottom, or the nearest of the two. The initial value is 'near'. If 'near'
        is in effect and the element is within the specified distance both from the
        top and the bottom, bottom wins.

        An element is considered to be a float if it has a snap() value, even if
        the element does not appear within the specified distance. This way, it can
        be determined whether an element is float or not without laying out the
        document.

    <dt><dfn>snap</dfn>
    <dd>same as <tt>snap(2em, near)</tt>

  </dl>

  These new keywords only apply in paged media; in continous media declarations
  with these keywords are ignored.

  Elements with any of these new keywords are called 'page floats'. Each page float
  has a <em>natural column</em>, which is the column where the element would have
  started to appears it it was not a float.

  Also, each page float has a <em>natural page</em>, which is the page where the
  element would have started if the was not a float. Unless other constrained by
  lack of space or other float-* properties, page floats should appear in their
  natural column on the natural page.

  <div class="example">
    Float figure to top of natural column:

<pre>
.figure { float: top }
</pre>

    <img alt="sample rendering" src="images/7.png">
  </div>

  <div class="example">

<pre>
.figure { float: top; width: 50% }
</pre>

    <img alt="sample rendering" src="images/7b.png">
  </div>

  <div class="example">
    In this example, a figure naturally appears close to a column break. There is
    not enough space for the figure in the first column, and it is therefore placed
    in the second column, leaving white space at the bottom of the first column.

    <img alt="sample rendering" src="images/23.png">

    To avoid the white space, the image can be floated to the nearest edge (in the
    block direction):

<pre>
.figure { float: snap }
</pre>

    In this example, the figure is already at the nearest edge, so it does not
    move. However, page floats allow subsequent content to be displayed before the
    page float and the white space can therefore be filled:

    <img alt="sample rendering" src="images/7.png">
  </div>

  <div class="example">

    In this example, two figures naturally appear in the text flow:

    <img alt="sample rendering" src="images/20.png">

    A typographer would typically try to avoid single lines of text above/below
    figures, which can be achieved with:

<pre>
div.figure { float: snap(1.5em) }
</pre>

    The length value specifies the reach of the snap function; in this example the
    second figure is affected, but not the first.
  </div>

  <div class="example">

    In this example, two figures naturally appear in the text flow:

    <img alt="sample rendering" src="images/20.png">

    To make the figures snap to the nearest edges, this code can be applied:

<pre>
div.figure { float: snap(2.5em) }
</pre>

    The resultant rendering is:

    <img alt="sample rendering" src="images/22.png">

  </div>

  <div class="example">

    Float figure to top of the natural column, spanning all columns:

<pre>
.figure { float: top; column-span: all }
</pre>

    <img alt="sample redering" src="images/15.png">

  </div>


  <div class="example">
    In this example, tables will snap to the top/bottom if the top/bottom of the
    border box is closer than '3em' from the top/bottom of the page/column.

<pre>
table { float: snap }
table { float: snap(3em) }
table { float: snap(3em, bottom) }
table { float: snap(3em 2em, bottom) }
</pre>

  </div>


  <p class="issue">
    Do numeric values, to represent line numbers, make sense, like for
    orphans/widows?


<h2 id="spannings_columns">Spanning columns</h2>

  The 'column-span' property is extended with integer values so that elements can
  span several columns. If the specified integer value is equal to, or larger
  than the number of columns in the multicol element, the number of columns
  spanned will be the same as if 'column-span: all' had been specified.

  <div class="example">
    In this example, a commonly used newspaper layout is easily described:

<pre>
body { columns: 3 }
img.A { column-span: 2; width: 100% }  /* image spans two columns */
.one { column-span: 2 }                /* lead paragraph spans two columns */
</pre>

    <img alt="sample rendering" src="images/regions.png">
  </div>

  Further, the 'page' value is added to 'column-span' so that the page (and not the
  column or element) becomes the reference.

  <div class="example">
    In this example, the footer is floated to the bottom of the last page (and not
    the bottom of the article element):

<pre>
footer { float: bottom; column-span: page }

&lt;article>
  ...
  &lt;footer>...&lt;.footer>
&lt;/article>
</pre>

  </div>

  <p class="issue">
    An alternative way to express this would be to add a separate propertye, e.g.,
    <code>float-reference: column | multicol | page</code>


<h2 id="deferring_floats">Deferring floats: float-defer-column, float-defer-page</h2>

  A page float can be deferred to a following column/page with these new properties:

  <h3 id="float_defer_column">'float-defer-column'</h3>

    <table class="propdef">
      <tr>
        <td><em>Name:</em>
        <td><dfn>float-defer-column</dfn>
      <tr>
        <td><em>Value:</em>
        <td>&ltinteger> | last | none
      <tr>
        <td><em>Initial:</em>
        <td>none
      <tr>
        <td><em>Applies to:</em>
        <td>page floats
      <tr>
        <td><em>Inherited:</em>
        <td>no
      <tr>
        <td><em>Percentages:</em>
        <td>N/A
      <tr>
        <td><em>Media:</em>
        <td>visual
      <tr>
        <td><em>Computed&nbsp;value:</em>
        <td>specified value
    </table>


  <h3 id="float_defer_page">'float-defer-page'</h3>

    <table class="propdef">
      <tr>
        <td><em>Name:</em>
        <td><dfn>float-defer-page</dfn>
      <tr>
        <td><em>Value:</em>
        <td>&ltinteger> | last | none
      <tr>
        <td><em>Initial:</em>
        <td>none
      <tr>
        <td><em>Applies to:</em>
        <td>page floats
      <tr>
        <td><em>Inherited:</em>
        <td>no
      <tr>
        <td><em>Percentages:</em>
        <td>N/A
      <tr>
        <td><em>Media:</em>
        <td>visual
      <tr>
        <td><em>Computed&nbsp;value:</em>
        <td>specified value
    </table>


    These properties specify whether page floats should appear in their natural
    column/page, or in a following column/page. Values are:

    <dl>
      <dt>none
      <dd>the page float appears in the natural column/page

      <dt>&lt;integer>
      <dd>
        A positive integer value indicates that the page float should be
        displayed in a following column/page. A negative integer value indicates
        that the page float should be displayed in a following column/page, counted
        from the last column/page. When counting columns, the starting point is the
        last column of the multicol element on the natural page. When counting
        pages, the starting point is the last page of the multicol element.


        <div class="example">
          Float figure to the top of the column that follows the natural column:

<pre>
.figure { float: top }
.figure { float-defer-column: 1 }
</pre>

        </div>

        <div class="example">
          Float figure to the top of the next-to-last column:

<pre>
.figure { float: top; float-defer-column: -1 }
</pre>

          <img alt="sample rendering" src="images/7.png">
        </div>

        <div class="example">
          Float figure to top of the last column of the multicol element on the current page:

<pre>
.figure { float: top; float-defer-column: last }
</pre>

          <img alt="sample rendering" src="images/6.png">
        </div>


        <div class="example">
          In combination with 'column-span', the figure is floated to the top
          corner of the multicol element on that page:

<pre>
.figure { float: top; column-span: 2; float-defer-column: last; width: 100% }
</pre>

          <img alt="sample rendering" src="images/8.png">
        </div>


        <div class="example">
          Float figure to the top of the second column, spanning two columns:

<pre>
.figure {
  float: top; column-span: 2;
  float-defer-column: 1;
}
</pre>

          <img alt="sample rendering" src="images/18.png">
        </div>

        <div class="example">
          Float figure to the top right, leaving one full column:

<pre>
.figure {
  float: top; column-span: 2;
  float-defer-column: -1;
}
</pre>

          <img alt="sample rendering" src="images/18.png">

          Given that there are four columnn, the same layout would be achived with this code:

<pre>
.figure {
  float: top; column-span: 2;
  float-defer-column: 1;
}
</pre>


        </div>



        <div class="example">
          Float figure to the top of the first column on the next-to-last page:

<pre>
.figure { float: top }
.figure { float-defer-page: -1 }
</pre>
        </div>

        <div class="example">
          Float figure to the top of the next-to-last column on the next-to-last page:

<pre>
.figure { float: top }
.figure { float-defer-column: -1 }
.figure { float-defer-page: -1 }
</pre>

        </div>

      <dt>last
      <dd>
        The page float should be displayed in the last colum, or on the last page.

        <div class="example">
        Float figure to the top of the last column on the natural page:

<pre>
.figure { float: top }
.figure { float-defer-column: last }
</pre>

          <img alt="sample rendering" src="images/6.png">
        </div>

        <div class="example">
          Float figure to the last column on the last page:

<pre>
.figure { float: top }
.figure { float-defer-column: last }
.figure { float-defer-page: last }
</pre>

        </div>

      <dt>none
      <dd>The page floats should appear in their natural column/page, if possible.

    </dl>

    Zero is not a legal value.




<h2 id="clearing_page_floats">Clearing page floats</h2>

  Page floats may request to not be stacked, or to be the only page float on a
  page/column through new values on the 'clear' property:

  <dl>

    <dt>top/bottom

    <dd>
      The page float requests to be the only page float at the top/bottom of the
      column. If there is already a page float at the requested position, the page
      float is moved to the next column which does not have a page float in the
      requested position.

    <dt>column

    <dd>
      The page float requests to be the only page float in the column. If there is
      already another page float on the page, the page float is moved to the next
      page which does not have a page float.

    <dt>page

    <dd>
      The page float requests to be the only page float on the page. If there is
      already another page float on the page, the page float is moved to the next
      page which does not have a page float.

  </dl>


  <div class="example">
    In this example, the two figures may appear in the same column:

<pre>
.figure { float: bottom; clear: none }

&ltdiv class=figure>&lt;/div>
&ltdiv class=figure>&lt;/div>
</pre>
    <img src="images/16.png">
  </div>

  <div class="example">
    In this example, the two figures will appear in different columns:

<pre>
.figure { float: bottom; clear: column }

&ltdiv class=figure>&lt;/div>
&ltdiv class=figure>&lt;/div>
</pre>

    <img src="images/17.png">
  </div>


  <div class="example">
    In this example, the two figures may appear at the bottom of the same column due to clearing only at the top:

<pre>
.figure { float: bottom; clear: top }

&ltdiv class=figure>&lt;/div>
&ltdiv class=figure>&lt;/div>
</pre>

    <img src="images/16.png">
  </div>

  <div class="example">
    In this example, the two figures will appear in different columns due to clearing at the bottom:

<pre>
.figure { float: bottom; clear: bottom }

&ltdiv class=figure>&lt;/div>
&ltdiv class=figure>&lt;/div>
</pre>

    <img src="images/17.png">
  </div>


  <div class="example">
    In this example, the two figures end up the top corner of two different pages:

<pre>
.figure { float: top; float-defer-column: last; clear: page }

&ltdiv class=figure>&lt;/div>
&ltdiv class=figure>&lt;/div>
</pre>

  </div>

  <div class="example">
    In this example, the two figures request different positions, and they may
    therefore end up in the same column:

<pre>
.figure.one { float: top; clear: top }
.figure.two { float: bottom; clear: bottom }

&ltdiv class="figure one">&lt;/div>
&ltdiv class="figure two">&lt;/div>
</pre>

  </div>

<h2 id="floating_inside_and_outside_pages">Floating inside and outside pages</h2>

  Two allow content to flow to the inside and outside of a page, these keywords are added to the 'float' property:

  <dl>
    <dt>inside
    <dd>
      On a right page, this value is synonymous with 'left'. On a left page, this
      value is synonymous with 'right'.

    <dt>outside
    <dd>
      On a left page, this value is synonymous with 'left', On a right page, this
      value is synonymous with 'right'.
  </dl>

  These new values do not create page floats, the are simply aliases for 'left' and
  'right'.

  <div class="example">

<pre>
.figure { float: outside }
</pre>

  </div>


  <p class="issue">
    Should there be a way to combine float: top/bottom with left/right?

  <p class="issue">
    Should there be a way to delete page floats that end up lonesome on pages?

<h2 id="wrapping-around-page-floats">Wrapping around page floats</h2>

  <table class="propdef">
    <tr>
      <td><em>Name:</em>
      <td><dfn>float-wrap</dfn>
    <tr>
      <td><em>Value:</em>
      <td>none | wrap
    <tr>
      <td><em>Initial:</em>
      <td>none
    <tr>
      <td><em>Applies to:</em>
      <td>page floats
    <tr>
      <td><em>Inherited:</em>
      <td>no
    <tr>
      <td><em>Percentages:</em>
      <td>N/A
    <tr>
      <td><em>Media:</em>
      <td>visual
    <tr>
      <td><em>Computed&nbsp;value:</em>
      <td>specified value
  </table>

  This property indicates whether other content may wrap around a page float:

  <dl>
    <dt>none
    <dd>other content may not wrap around the page float

    <dt>wrap
    <dd>other content may wrap around the page float
  </dl>

  The 'intrude' value only works in combination with one of these keywords:
  'left'/'right'/'top'/'bottom'/'top-corner'/'bottom-corner'.


  <div class="example">

<pre>
img { float: top; column-span: 2; float-wrap: wrap; width: 120%;  }
</pre>

    In this example, the image is wider than the column and will therefore intrude
    into the neighboring column. At the bottom of the middle column is a long word
    that is clipped in the middle of the column gap.

    <img alt="sample rendering" src="images/1.png">

  </div>

<h2 id="the-float_offset-property">The 'float-offset' property</h2>

  <table class="propdef">
    <tr>
      <td><em>Name:</em>
      <td><dfn>float-offset</dfn>
    <tr>
      <td><em>Value:</em>
    <td>&lt;length> &lt;length> ?
    <tr>
      <td><em>Initial:</em>
      <td>0 0
    <tr>
      <td><em>Applies to:</em>
      <td>floated elements
    <tr>
      <td><em>Inherited:</em>
      <td>no
    <tr>
      <td><em>Percentages:</em>
      <td>see prose
    <tr>
      <td><em>Media:</em>
      <td>visual, paged
    <tr>
      <td><em>Computed&nbsp;value:</em>
      <td>one or two absolute lengths
  </table>

  This property pushes a float in opposite direction of the where it has been
  floated with 'float'. If one value is specified, it is the horizontal offset. If
  two values are specified, the first is the horizontal and the second is the
  vertical offset. If no vertical value has been specified, the vertical offset is
  set to zero.

  This property can only influence a float along an axis it has been floated.

  <div class="example">

<pre>
img {
  float: left;
  float-offset: 2em 3em;
}
</pre>

    In this example, the image is floated to the left. Therefore, 'float-offset'
    may only push the element in the horizontal direction, and the vertical value
    is ignored.

  </div>

  Negative values are allowed; a negative values will push the float in the same
  direction as it has been floated with 'float'

  This property may move floats into other column than where they naturally appear.

  <div class="example">

<pre>img {
  float: right;
  float-offset: 5px;
}
</pre>

    <img alt="sample rendering" src="images/14.png">

  </div>

  Percentage values are computed according to this formula:

<pre>
  (containing-block-width - float-width) * percentage
  (containing-block-height - float-height) * percentage
</pre>


  <div class="example">
    Pull quotes are often centered in a column. In this example, the pull quote is
    floated to the right, and then pushed back into the center.

    <img width=213 src="images/exclusion_wrap_side_left.png">

<pre>
.pullquote {
  float: right;
  float-offset: 50%; /* 50% centers the box */
}
</pre>

  </div>


  When negative values are set on this property, the column gap is also part of the calculation:

<pre>
  ((containing-block-width + 2 * column-gap) - float-width) * percentage
</pre>

  <div class="example">

<pre>img {
  float: top right;
  float-offset: -50% 3em;  /* 50% centers the box */
  width: 120%;
}
</pre>

    <img alt="sample rendering" src="images/11.png">

  </div>


  <div class="example">

<pre>
img {
  float: top right;
  float-offset: -80% 2em;
  width: 100%;
}
</pre>

    <img alt="sample rendering" src="images/12.png">

  </div>


<h2 id="overconstrained-page-floats">Overconstrained page floats</h2>

  In many cases, the specified values on these properties cannot be honored.

  <div class="example">

    The number of columns is limited, and high values therefore cannot be honored:

<pre>
.figure { float: top; float-defer-column: 1000 }
</pre>

  </div>

  <div class="example">
    A narrow screen may only have room for one column, in which case this request
    cannot be honored:

<pre>
.figure { float: top; float-defer-column: -5 }
</pre>

  </div>

  <div class="example">
    In long documents, all content cannot fit on the last page, and this rule
    therefore cannot be honored:

<pre>
p { float: top; float-defer-page: last }
</pre>

  </div>

  Page floats are processed in the order they appear in the source. However, the
  visual order of page floats may not ne the same as the source order.

  <div class="example">
    Consider this code:

<pre>
.one { float: top; float-defer-page: last; column-span: all }
.two { float: top; clear: column }

&lt;div class=one>&lt;/div>
&lt;div class=two>&lt;/div>
</pre>

    In this example, the first element requests to appear on the last page, while
    the second element requests to appear in the natural column. If the natural
    column of the second element appears on a page before the last page, the second
    element will appear visually before the first.

  </div>


  <div class="example">

    Consider this code:

<pre>
.one { float: top; float-defer-page: last; column-span: all }
.two { float: top; clear: column }

&lt;div class=one>&lt;/div>
&lt;div class=two>&lt;/div>
</pre>

    If all content can fit on one page, the first page will also be the last page.
    The first element is processed first and is placed on top of the first page.
    Then the second element is processed. It reqests a clear top, somthing which is
    not possible on the first page. Therefore, a second page is created and the
    first element is moved there. Even if the first element requests to be on the
    last page, it will not appear there.

  </div>

  When resolving over-constrained layouts, the order of importance for defined
  goals are:

  <ol>
    <li>
      honor basic multi-column layout ('columns', 'column-span: all',
      'column-gap' etc)
    <li>honor 'column-span: &lt;integer>'
    <li>honor 'clear: top/bottom/pcolumn/page'
    <li>honor 'float-defer-page'
    <li>honor 'float-defer-column'
    <li>honor 'float: top/bottom'
    <li>display all content (as described by other CSS properties)
    <li>keep the number of pages to a minimum
  </ol>



<h2 class="no-num" id="changes">Changes</h2>

  Changes from the <a href="https://hg.csswg.org/drafts/raw-file/108d7e3ff204/css-page-floats/Overview.html">24 September 2013 CSS Page Floats Editor's Draft</a>:

  <ol>
    <li>
      Removed sections on Regions and Exclusions
    <li>
      Changed editor
  </ol>

<h2 class="no-num" id="acks">
Acknowledgments</h2>

  This specification is made possible by input from
  Tab Atkins Jr.,
  David Baron,
  Lars Erik Bolstad,
  Bert Bos,
  Mike Bremford,
  Michael Day,
  Werner Donn&eacute;,
  Brady Duga,
  James Elmore,
  Elika Etemad,
  Michel Fortin,
  Daniel Glazman,
  Melinda Grant,
  Ian Hickson,
  Laurens Holst,
  Brad Kemper,
  Toru Kawakubo,
  Rune Lillesveen,
  Peter Linss,
  Cameron McCormack,
  Paul E. Merrell,
  Del Merritt,
  Markus Mielke,
  Kelly Miller,
  Alex Mogilevsky,
  Peter Moulder,
  Shinyu Murakami,
  Michel Onoff,
  Anton Prowse,
  Liam R E Quin,
  Jacob Grundtvig Refstrup,
  Florian Rivoal,
  Christian Roth,
  Allan Sandfeld Jensen,
  Simon Sapin,
  Morten Stenshorne,
  Philip Taylor,
  Ian Tindale,
  Ladd Van Tol,
  Tarquin (Mark) Wilton-Jones,
  Steve Zilles,
  Tantek &#xC7;elik
  and the CSS Working Group members.
