<pre class=metadata>
Title: CSS Containment Module Level 3
Level: 3
Shortname: css-contain
Status: ED
Work Status: Exploring
Group: csswg
ED: https://drafts.csswg.org/css-contain-3/
TR: https://www.w3.org/TR/css-contain-3/
Editor: Tab Atkins, Google, http://xanthir.com/contact/, w3cid 42199
Editor: Florian Rivoal, On behalf of Bloomberg, https://florian.rivoal.net/, w3cid 43241
Editor: Miriam E. Suzanne, Invited Expert, http://miriamsuzanne.com/contact, w3cid 117151
Abstract: This CSS module describes the 'contain' property, which indicates that the element's subtree is independent of the rest of the page. This enables heavy optimizations by user agents when used well.
Test Suite: https://test.csswg.org/harness/results/css-contain-1_dev/
</pre>
<pre class=link-defaults>
spec:css2; type:dfn; text:stacking context
spec:css2; type:property; text:content
spec:css-display-3; type:property; text:display
spec:css2; type:property; text:counter-increment
spec:css-ui-3; type:property; text:text-overflow
spec:css-grid-1; type:property; text:grid
spec:css-break-3; type:dfn; text:forced break
spec:css-break-3; type:dfn; text:fragmentation
spec:css-break-3; type:dfn; text:fragmentation container
spec:css-break-3; type:dfn; text:fragmentation context
spec:css-break-3; type:dfn; text:fragmented flow
spec:css-sizing-4; type:property; text:contain-intrinsic-size
spec:css-sizing-4; type:property; text:aspect-ratio
spec:intersection-observer; type:dfn; text:intersection root
spec:css-sizing-3; type:value; for:height; text:auto
spec:css-sizing-3; type:property; text:width
spec:css-sizing-3; type:property; text:height
spec:css-sizing-3; type:value; for:width; text:min-content
spec:css-sizing-3; type:value; for:width; text:max-content
spec:css-syntax-3; type:dfn; text:identifier
</pre>

<h2 id='intro'>
Introduction</h2>

	ISSUE: This is a diff spec over <a href="https://www.w3.org/TR/css-contain-2/">CSS Containment Level 2</a>.
	It is currently an Exploratory Working Draft:
	if you are implementing anything, please use Level 2 as a reference.
	We will merge the Level 2 text into this draft once it reaches CR.

<h3 id="interaction">
Module Interactions</h3>

	This document defines new features not present in earlier specifications.
	In addition, it aims to replace and supersede [[!CSS-CONTAIN-1]]
	once stable.

<h3 id="values">
Value Definitions</h3>

	This specification follows the <a href="https://www.w3.org/TR/CSS2/about.html#property-defs">CSS property definition conventions</a> from [[!CSS2]]
	using the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
	Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
	Combination with other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification
	also accept the <a>CSS-wide keywords</a> as their property value.
	For readability they have not been repeated explicitly.

<h2 id='contain-property'>
Strong Containment: the 'contain' property</h2>

	Issue: [[css-contain-2#contain-property]]

	<pre class='propdef partial'>
		Name: contain
		New Values: layout || style || paint || [ size | [ inline-size || block-size ]]
	</pre>

	<dl dfn-type=value dfn-for=contain>
		<dt><dfn>inline-size</dfn>
		<dd>
			The value turns on <a>inline-size containment</a> for the element.
			This ensures that the inline [=size containment box|containment box=] can be laid out
			without needing to examine its descendants.
		<dt><dfn>block-size</dfn>
		<dd>
			The value turns on <a>block-size containment</a> for the element.
			This ensures that the block [=size containment box|containment box=] can be laid out
			without needing to examine its descendants.
	</dl>

	<span id="contain-applies">This property generally applies to all elements (including [[css-pseudo-4#generated-content]])</span>,
	although some types of containment have no effect on some elements,
	as detailed in [[#containment-types]].
	In addition, in the case of [[SVG2]],
	the 'contain' property only applies to <{svg}> elements that have an associated CSS layout box.


<h2 id='containment-types'>
Types of Containment</h2>

	Issue: [[css-contain-2#containment-types]]

<h3 id='containment-inline-size'>
Inline-Size Containment</h3>

	<dfn export>inline-size containment</dfn>
	<dfn export>block-size containment</dfn>

	Issue: Define inline/block-size containment, maybe as a sub-section of size containment?
	Need feedback from implementors on what edge-cases need to be more clearly outlined here.


<h2 id="container-query">
Container Queries</h2>

	While [=media queries=] provide a method to query
	aspects of the user agent or device environment
	that a document is being displayed in
	(such as viewport dimensions or user preferences),
	[=container queries=] allow testing aspects of elements within the document
	(such as box dimensions or computed styles).

	A [=query container=] is established by specifying
	the possible query types using the 'container-type' property
	(or the 'container' [=shorthand=]).
	Style rules applying to its descendants can then be conditioned
	by querying against it,
	using the ''@container'' [=conditional group rule=].


<h3 id="container-type">
Creating Query Containers: the 'container-type' property</h2>

	<pre class='propdef'>
		Name: container-type
		Value: none | style || state || [ size | [ inline-size || block-size ]]
		Initial: none
		Inherited: no
		Applies to: all elements
		Computed value: the keyword ''container-type/none'' or one or more of ''container-type/size'', ''container-type/inline-size'', ''container-type/style'', ''container-type/state''
		Animation type: not animatable
	</pre>

	The 'container-type' property establishes the [=principal box=]
	as a <dfn export>query container</dfn> for the purpose of [=container queries=],
	allowing [=style rules=] styling its descendants
	to query various aspects of its sizing, layout, and style
	and respond accordingly.

	ISSUE: Bikeshed terms/property names to avoid confusion
	with other usage of “contain” and “container”?
	(consider "query" or "context"?)

	Values have the following meanings:

	<dl dfn-type=value dfn-for=container-type>
		<dt><dfn>size</dfn>
		<dd>
			Establishes a [=query container=] for [=dimensional queries=]
			on both the [=inline axis|inline=] and [=block axis=].
			Applies [=layout containment=],
			[=style containment=],
			and [=size containment=]
			to this box.
		<dt><dfn>inline-size</dfn>
		<dd>
			Establishes a [=query container=] for [=dimensional queries=]
			on the container’s own [=inline axis=].
			Applies [=layout containment=],
			[=style containment=],
			and [=inline-size containment=]
			to this box.
		<dt><dfn>block-size</dfn>
		<dd>
			Establishes a [=query container=] for [=dimensional queries=]
			on the container’s own [=block axis=].
			Applies [=layout containment=],
			[=style containment=],
			and [=block-size containment=]
			to this box.
		<dt><dfn>style</dfn>
		<dd>
			Establishes a [=query container=] for [=style queries=].
		<dt><dfn>state</dfn>
		<dd>
			Establishes a [=query container=] for [=state queries=].
	</dl>

	<div class=example>
		Many layouts rely on external sizing for the inline axis,
		while allowing the block axis to auto-size based on content.
		Establishing an ''container/inline-size'' container makes that behavior explicit,
		so that the inline-dimension can be queried,
		without impacting normal layout of the block dimensions:

		<pre class=lang-css>
		section {
		  container: inline-size;
		}

		h2 { font-size: 1.2em; }

		@container (width > 40em) {
		  h2 { font-size: 1.5em; }
		}
		</pre>

		The ''em'' value is relative to the <a>computed value</a> of 'font-size'
		on the ''section'' container.
	</div>

	<div class=example>
		Containers can also expose computed style values for querying.
		This can be useful for toggling behavior across multiple properties:

		<pre class=lang-css>
		section {
		  container: style;
		}

		@container (--cards == true) {
		  article {
		    border: thin solid silver;
		    border-radius: 0.5em;
		    padding: 1em;
		  }
		}
		</pre>
	</div>


<h3 id="container-name">
Naming Query Containers: the 'container-name' property</h2>

	<pre class='propdef'>
		Name: container-name
		Value: none | [ <<custom-ident>> | <<string>> ]+
		Initial: none
		Inherited: no
		Applies to: all elements
		Computed Value: a set of unique [=identifiers=]
		Animation type: not animatable
	</pre>

	The 'container-name' property
	specifies a list of <dfn export lt="query container name">query container names</dfn>
	that apply to the box if it is a [=query container=].
	These names can be used by ''@container'' rules
	to filter which [=query containers=] are targeted.

	<dl dfn-for=container-name dfn-type=value>
	<dt><dfn>none</dfn>
	<dd>
		The [=query container=] has no [=query container name=].
	<dt><dfn><<custom-ident>></dfn>
		Specifies a [=query container name=] as an [=identifier=].
	<dt><dfn><<string>></dfn>
		Specifies a [=query container name=] as a <<string>> value;
		this computes to an [=identifier=]
		with the same value as the given <<string>>.
	</dl>

	The keyword <css>none</css> and the string "none"
	are invalid as <<custom-ident>> or <<string>> values.

	<div class=example>
		In some cases, we want to query aspects of a specific container,
		even if it's not the nearest ancestor container.
		For example, we might want to query the height of a main content area,
		and the width of a more nested inline-container.

		<pre class=lang-css>
		main {
		  container-type: size;
		  container-name: layout;
		}

		.grid-item {
		  container-type: inline-size;
		  container-name: component;
		}

		@container layout (block-size > 12em) {
		  .card { margin-block: 2em; }
		}

		@container component (inline-size > 30em) {
		  .card { margin-inline: 2em; }
		}
		</pre>
	</div>

	Issue: TODO: Implicit names based on container-type?
	Or a new syntax to query a specific container-type?


<h3 id="container-shorthand">
Creating Named Containers: the 'container' shorthand</h2>

	Issue: TODO: Define the container shorthand


<h3 id="container-rule">
Container Queries: the ''@container'' rule</h2>

	The <dfn at-rule id="at-ruledef-container">@container</dfn> rule
	is a [=conditional group rule=] whose condition is a [=container query=].

	The syntax of the ''@container'' rule is:

	<pre class="prod def">
	@container <<container-name>>? <<container-query-list>> {
	  <<stylesheet>>
	}
	</pre>

	The <dfn>&lt;container-query-list></dfn> represents the <dfn export>container query</dfn>
	and has the same syntax, parsing, and boolean interpretation as
	<<media-condition>> in [[MEDIAQUERIES-4]],
	but with [=container features=] instead of [=media features=].

	Styles in the <<stylesheet>> block of the ''@container'' rule
	are [[css-cascade-4#filtering|filtered]] by its condition
	to only match when the [=container query=]
	is true for the element’s [=query container=].

	For each element,
	the [=query container=] being queried
	is its nearest [=query container=] ancestor
	The optional <dfn><<container-name>></dfn>
	filters the set of [=query containers=] considered
	to just those with a matching [=query container name=].
	If no ancestor is an eligible [=query container=],
	then the [=container query=] is false for that element.

<h3 id="dimensional-container">
Dimensional Container Features</h2>

	<dfn export>Dimensional queries</dfn> allow querying
	the size of the [=query container=].

	Issue: TODO: Width queries

	Issue: TODO: Height queries

	Issue: TODO: Inline queries

	Issue: TODO: Block queries

	Issue: TODO: Aspect-ratio queries

	Issue: TODO: Orientation queries


<h3 id="style-container">
Style Container Features</h2>

	<dfn export>Style queries</dfn> allow querying
	the [=computed values=] of the [=query container=] element.

	Issue: TODO: Custom property queries

	Issue: TODO: Property queries (conflict with eg min/max-width dimensional queries?)


<h3 id="state-container">
State Container Features</h2>

	<dfn export>State queries</dfn> allow querying
	miscellaneous states such as
	whether a ''position: sticky'' box is displaced from its in-flow position,
	or whether the box is visible on screen.

	Issue: TODO: Stuck?

	Issue: TODO: Visible?


Suppressing An Element's Contents Entirely: the 'content-visibility' property {#content-visibility}
=================

	Issue: [[css-contain-2#content-visibility]]

Privacy and Security Considerations {#priv-sec}
==============================================

	Issue: [[css-contain-2#priv-sec]]

<!--
████████ ████████  ██████
██          ██    ██    ██
██          ██    ██
██████      ██    ██
██          ██    ██
██          ██    ██    ██
████████    ██     ██████
-->

<h2 class="no-num non-normative" id="changes">Appendix A. Changes</h2>

This appendix is <em>informative</em>.

<h3 id="l3-changes">
Changes from <a href="https://www.w3.org/TR/css-contain-2/">CSS Containment Level 2</a>
</h3>

None yet.

Issue: [[css-contain-2#changes]]

