<h1>CSS Box Alignment Module Level 3</h1>

<pre class='metadata'>
Shortname: css-align
Level: 3
Group: csswg
Status: ED
ED: http://dev.w3.org/csswg/css-align/
TR: http://www.w3.org/TR/css3-align/
Editor: fantasai, http://fantasai.inkedblade.net/contact
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Previous Version: http://www.w3.org/TR/2012/WD-css3-align-20120612/
Abstract: This module contains the features of <a href="http://www.w3.org/TR/CSS/">CSS</a> relating to the alignment of boxes within their containers in the various CSS box layout models: block layout, table layout, flex layout, and grid layout. (The alignment of text and inline-level content is defined in [[CSS3TEXT]] and [[CSS3LINE]].)
!Issue Tracking: <a href="http://www.w3.org/Style/CSS/Tracker/products/39">http://www.w3.org/Style/CSS/Tracker/products/39</a>
Link Defaults: selectors-3 (dfn) first formatted line, css-flexbox-1 (dfn) flex line/flex lines, css-multicol-1 (dfn) multi-column element
Ignored Terms: orthogonal, block container, table cell
</pre>

<style type="text/css">
	.issue th:first-child { text-align: left !important; }
	[rowspan] > img { float: right; }
	[rowspan] { vertical-align: middle; }
	small { display: block; }
</style>

<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	CSS Levels 1 and 2 allowed for the alignment of text via 'text-align' and
	the alignment of blocks by balancing ''margin/auto'' margins. However, except in
	table cells, vertical alignment was not possible. As CSS3 adds further
	capabilities, the ability to align boxes in various dimensions becomes more
	critical. This module attempts to create a cohesive and common box alignment
	model to share among all of CSS.

	Note: The alignment of text and inline-level content is defined in [[CSS3TEXT]] and [[CSS3LINE]].

	Inspiration for this document:

	<ul>
		<li><a href="http://wiki.csswg.org/ideas/centering#alignment-property">summary of a discussion for implementing &lt;CENTER&gt;</a>
		<li><a href="https://lists.w3.org/Archives/Member/w3c-css-wg/2008AprJun/0015.html">Minutes from March 2008 F2F</a>
		<li><a href="http://lists.w3.org/Archives/Public/www-style/2012Feb/0743.html">fantasai's attempt to merge all alignment properties</a>
	</ul>

<h3 id="placement">
Module interactions</h3>

	This module adds some new alignment capabilities to the block layout
	model described in [[!CSS21]] chapters 9 and 10 and defines the interaction
	of these properties with the alignment of table cell content using
	'vertical-align', as defined in [[!CSS21]] chapter 17.
	The interaction of these properties with
	Grid Layout [[!CSS3-GRID-LAYOUT]]
	and Flexible Box Layout [[!CSS3-FLEXBOX]]
	is defined in their respective modules.

	No properties in this module apply to the <code>::first-line</code> or
	<code>::first-letter</code> pseudo-elements.

<h3 id="values">
Values</h3>

	This specification follows the
	<a href="http://www.w3.org/TR/CSS21/about.html#property-defs">CSS property
	definition conventions</a> from [[!CSS21]]. Value types not defined in
	this specification are defined in CSS Level 2 Revision 1 [[!CSS21]].
	Other CSS modules may expand the definitions of these value types: for
	example [[CSS3VAL]], when combined with this module, adds the
	''initial'' keyword as a possible property value.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification also accept the
	<a href="http://www.w3.org/TR/CSS21/cascade.html#value-def-inherit">inherit</a>
	keyword as their property value. For readability it has not been repeated
	explicitly.


<h2 id="overview">
Overview of Alignment Properties</h2>

	The alignment properties in CSS can be described along two axes:

	<ul>
		<li>which dimension they apply to (inline vs. stacking), and
		<li>whether they control the position of the box within its parent, or the box's content within itself.
	</ul>

	Note: This proposal uses the terms “justify” and “align” to distinguish
	between alignment in the inline and stacking dimensions, respectively.
	The choice is somewhat arbitrary, but having the two terms allows for
	a consistent naming scheme that works across all of CSS's layout models.

	The following table summarizes the proposed alignment properties
	and the display types they can apply to.

	<table class=data>
	<colgroup span=1></colgroup>
	<colgroup span=2></colgroup>
	<colgroup span=1></colgroup>
	<thead>
		<tr>
			<th>Common
			<th>Axis
			<th>Aligns
			<th>Applies to
	</thead>
	<tbody>
		<tr>
			<th>'justify-content'
			<td>inline
			<td rowspan=2>
				<img src="images/content-example.svg" width=106 height=106 alt="">
				content within element
				<small>(effectively adjusts padding)</small>
			<td>block containers and flex containers
		<tr>
			<th>'align-content'
			<td>stacking
			<td>block containers and flex containers
	<tbody>
		<tr>
			<th>'justify-self'
			<td>inline
			<td rowspan=2>
				<img src="images/self-example.svg" width=106 height=106 alt="">
				element within parent
				<small>(effectively adjusts margins)</small>
			<td>block-level elements and grid items
		<tr>
			<th>'align-self'
			<td>stacking
			<td>flex items and grid items
	<tbody>
		<tr>
			<th>'justify-items'
			<td>inline
			<td rowspan=2>
				<img src="images/items-example.svg" width=106 height=106 alt="">
				items inside element
				<small>(controls child items&rsquo; ''align/justify-self: auto'')</small>
			<td>grid containers
		<tr>
			<th>'align-items'
			<td>stacking
			<td>flex containers and grid containers
	</table>

	<p class=issue>
		The exact definition of these properties
		outside what's <a href="http://www.w3.org/TR/css3-flexbox">what's defined in Flexbox</a>
		is still <strong>being worked out</strong>.
		This is a <strong>second Working Draft</strong>
		and is <strong>NOT STABLE</strong>.

	Note: The '*-items' values don't affect the element itself.
	When set on a flex container or grid container,
	they specify the interpretation of any ''align/justify-self: auto'' used on the items in the container element.

<h2 id='alignment-values'>
Alignment Values</h2>

	All of the alignment properties use a common set of values,
	defined below.

	<dl>
		<dt><dfn export>alignment subject</dfn>
		<dd>
			The <a>alignment subject</a> is the thing or things being aligned by the property.
			For 'justify-self' and 'align-self',
			the <a>alignment subject</a> is the margin box of the box the property is set on.
			For 'justify-content' and 'align-content',
			the <a>alignment subject</a> is defined by the layout mode.

		<dt><dfn export>alignment container</dfn>
		<dd>
			The <a>alignment container</a> is the rectangle that the <a>alignment subject</a> is aligned within.
			This is defined by the layout mode,
			but is usually the <a>alignment subject</a>’s containing block.
	</dl>

<h3 id='positional-values'>
Positional Alignment: the ''center'', ''stretch'', ''start'', ''end'', ''self-start'', ''self-end'', ''flex-start'', ''flex-end'', ''left'', and ''right'' keywords</h3>

	The positional alignment keywords specify a position for an <a>alignment subject</a>
	with respect to its <a>alignment container</a>.

	The <<item-position>> set of values is used by 'justify-self' and 'align-self'
	to align the box within its <a>alignment container</a>,
	and also by 'justify-items' and 'align-items'
	(to specify default values for 'justify-self' and 'align-self').
	The <<content-position>> set of values is used by 'justify-content' and 'align-content'
	to align the box's contents within itself.

	<pre class='prod'>
		<dfn>&lt;item-position></dfn> = center | start | end | self-start | self-end |
		                   flex-start | flex-end | left | right;
		<dfn>&lt;content-position></dfn> = center | start | end | flex-start | flex-end | left | right;
	</pre>


	Values have the following meanings:

	<dl dfn-type="value">
		<dt><dfn for="<item-position>, <content-position>">center</dfn>
		<dd>Centers the <a>alignment subject</a> within its <a>alignment container</a>.
<!--
		<dt><dfn>stretch</dfn>
		<dd>If the 'width' or 'height' (as appropriate) of the <a>alignment subject</a> is ''auto'',
			its used value is the length necessary to make the <a>alignment subject</a>’s outer size
			as close to the size of the <a>alignment container</a> as possible,
			while still respecting the constraints imposed by 'min/max-width/height'.
			Otherwise, this is equivalent to ''start''.
-->
		<dt><dfn for="<item-position>, <content-position>">start</dfn>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s start edge.

		<dt><dfn for="<item-position>, <content-position>">end</dfn>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s end edge.

		<dt><dfn for="<item-position>">self-start</dfn>
		<dd>Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>alignment subject</a>’s start side.
			If the <a>writing modes</a> of the <a>alignment subject</a> and the <a>alignment container</a> are <a>orthogonal</a>,
			this value computes to ''start''.

		<dt><dfn for="<item-position>">self-end</dfn>
		<dd>Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>alignment subject</a>’s end side.
			If the <a>writing modes</a> of the <a>alignment subject</a> and the <a>alignment container</a> are <a>orthogonal</a>,
			this value computes to ''end''.

		<dt><dfn for="<item-position>, <content-position>">flex-start</dfn>
		<dd><strong>Only used in flex layout.</strong> [[!CSS3-FLEXBOX]]
			Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>flex container</a>’s main-start or cross-start side, as appropriate.
			When used in layout modes other than Flexbox,
			this value computes to ''start''.

		<dt><dfn for="<item-position>, <content-position>">flex-end</dfn>
		<dd><strong>Only used in flex layout.</strong>
			Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>flex container</a>’s main-end or cross-end side, as appropriate.
			When used in layout modes other than Flexbox,
			this value computes to ''end''.

		<dt><dfn for="<item-position>, <content-position>">left</dfn>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s <a href="http://www.w3.org/TR/css3-writing-modes/#line-left">line-left</a> edge.
			If the property's axis is not parallel with the inline axis,
			this value computes to ''start''.

		<dt><dfn for="<item-position>, <content-position>">right</dfn>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s <a href="http://www.w3.org/TR/css3-writing-modes/#line-right">line-right</a> edge.
			If the property's axis is not parallel with the inline axis,
			this value computes to ''start''.
	</dl>

	<p class='issue'>
		Add example images.

<h3 id='baseline'>
Baseline Alignment: the ''baseline'' keyword</h3>

	Baseline alignment is a form of positional alignment
	that relies on aligning the baselines of related <a>alignment subjects</a>
	to each other.

	<dl>
		<dt><dfn value for="justify-content, justify-self, justify-items, align-content, align-self, align-items">baseline</dfn>
		<dd>
			For table cells, grid items, and flex items, aligns the
			cell/item's <a>first formatted line</a>&apos;s baseline, if any,
			with the same baseline in other ''baseline''-aligned cells/items in the row/column (as appropriate for the axis).

			In the case of 'align-content'/'justify-content',
			this shifts the content of the box within it,
			and may also affect its sizing.
			In the case of 'align-self'/'justify-self'
			this shifts the entire box within its container,
			and may affect the sizing of its container.

			If the <a>alignment subject</a>’s position is not fully determined by baseline alignment,
			the content is start-aligned insofar as possible while preserving the baseline alignment.
			(Content that has no first-line baseline is thus start-aligned.)
	</dl>

	<p class='issue'>Add example images.

<h4 id='baseline-rules'>
Determining the Baseline of a Box</h4>

	The baseline of a box is determined differently based on the layout model, as follow:

	<dl>
		<dt>''block''
		<dt>''list-item''
		<dd>
			The inline-axis baseline of a block is the baseline of the first in-flow line box in the block,
			or the first in-flow block-level child in the block that has a baseline,
			whichever comes first.
			If there is no such line box or child,
			then the block has no baseline.
			For the purposes of finding a baseline,
			in-flow boxes with a scrolling mechanisms (see the 'overflow' property)
			must be considered as if scrolled to their origin position.

			A block has no block-axis baseline.

		<dt>''table''
		<dd>
			The inline-axis baseline of a table box is the baseline of its first row.
			However, when calculating the baseline of an inline-block,
			table boxes must be skipped.

			The block-axis baseline of a table is undefined.

			<p class='issue'>
				Or does it have no baseline?
				Or is it based on its first column?

		<dt>''table-row''
		<dd>
			If any cells in the row participate in its baseline alignment,
			the inline-axis baseline of the row is their baseline,
			after baseline alignment has been performed.
			Otherwise, the inline-axis baseline of the row is the bottom content edge of the lowest cell in the row.
			[[!CSS21]]

			A table row has no block-axis baseline.

		<dt>''table-cell''
		<dd>
			The inline-axis baseline of a table cell is the baseline of the first in-flow line box in the cell,
			or the first in-flow element that contributes a baseline in that axis,
			whichever comes first.

			A table cell has no block-axis baseline.

		<dt>''flex''
		<dd>
			See <a href="http://www.w3.org/TR/css3-flexbox/#flex-baselines">Flex Baselines</a> in [[!CSS3-FLEXBOX]].

		<dt>''grid''
		<dd>
			See <a href="http://www.w3.org/TR/css3-grid-layout/#grid-baselines">Grid Baselines</a> in [[!CSS3-GRID-LAYOUT]].
	</dl>

	<p class='issue'>
		Maybe these things are wrong?
		CSS 2.1 is really weird about baseline alignment.
		This whole section needs to be better defined and reviewed.

<h3 id='distribution-values'>
Distributed Alignment: the ''space-between'', ''space-around'', and ''space-evenly'' keywords</h3>

	The distribution values are used by 'justify-content' and 'align-content'
	to distribute the items in the <a>alignment subject</a>
	evenly between the start and end edges of the <a>alignment container</a>.
	When the <a>alignment subject</a> cannot be distributed in this way,
	they behave as their <dfn export>fallback alignment</dfn>.
	Each distribution value has an associated <<content-position>> as a <a>fallback alignment</a>,
	but one can alternatively be explicitly specified in the property.

	<pre class='prod'> <dfn>&lt;content-distribution></dfn> = space-between | space-around | space-evenly | stretch</pre>

	<dl dfn-type="value" dfn-for="<content-distribution>">
		<dt><dfn>space-between</dfn>
		<dd>
			The items are evenly distributed in the <a>alignment container</a>.
			The first item is placed flush with the start edge of the <a>alignment container</a>,
			the last item is placed flush with the end edge of the <a>alignment container</a>,
			and the remaining items are distributed so that the spacing between any two adjacent items is the same.
			Unless otherwise specified,
			this value falls back to ''start''.

		<dt><dfn>space-around</dfn>
		<dd>
			The items are evenly distributed in the <a>alignment container</a>,
			with a half-size space on either end.
			The items are distributed so that the spacing between any two adjacent items is the same,
			and the spacing before the first and after the last item is half the size of the other spacing.
			Unless otherwise specified,
			this value falls back to ''center''.

		<dt><dfn>space-evenly</dfn>
		<dd>
			The items are evenly distributed in the <a>alignment container</a>,
			with a full-size space on either end.
			The items are distributed so that the spacing between any two adjacent items,
			before the first item,
			and after the last item
			is the same.
			Unless otherwise specified,
			this value falls back to ''center''.

		<dt><dfn>stretch</dfn>
		<dd>
			If the combined size of the items is less than the size of the <a>alignment container</a>,
			any ''width/auto''-sized items have their size increased equally so that the combined size exactly fills the <a>alignment container</a>.
			Otherwise,
			or if there are no ''width/auto''-sized items,
			this value is identical to ''flex-start''.
			<span class='note'>(For layout modes other than flex layout, ''flex-start'' is identical to ''start''.)</span>
	</dl>

	<p class='issue'>
		Add example images.

<h3 id='overflow-values'>
Overflow Alignment: the ''safe'' and ''true'' keywords</h3>

	When the <a>alignment subject</a> is larger than the <a>alignment container</a>,
	it will overflow.
	Some alignment modes, if honored in this situation,
	may cause data loss:
	for example, if the contents of a sidebar are centered,
	when they overflow they may send part of their boxes past the viewport's start edge,
	which can't be scrolled to.

	To help combat this problem,
	an <dfn export>overflow alignment</dfn> mode can be explicitly specified.
	"True" alignment honors the specified alignment mode in overflow situations, even if it causes data loss,
	while "safe" alignment changes the alignment mode in overflow situations in an attempt to avoid data loss.

	If the <a>overflow alignment</a> isn't explicitly specified,
	the default <a>overflow alignment</a> is determined by the layout mode.
	Document-centric layout modes, such as block layout, default to "safe" <a>overflow alignment</a>,
	while design-centric layout modes, such as flex layout, default to "true" <a>overflow alignment</a>.

	<pre class='prod'><dfn>&lt;overflow-position></dfn> = true | safe</pre>

	<dl dfn-type="value" dfn-for="<overflow-position>">
		<dt><dfn>safe</dfn>
		<dd>
			If the size of the <a>alignment subject</a> overflows the <a>alignment container</a>,
			the <a>alignment subject</a> is instead aligned as if the alignment mode were ''start''.

		<dt><dfn>true</dfn>
		<dd>
			Regardless of the relative sizes of the <a>alignment subject</a> and <a>alignment container</a>,
			the given alignment value is honored.
	</dl>

	<p class='issue'>
		Transplant example 10 from flexbox.

<h2 id='content-distribution'>
Content Distribution: the 'justify-content' and 'align-content' properties</h2>

	The 'justify-content' and 'align-content' properties control alignment of the box's content within the box.

	<div class="figure">
		<img alt="Diagram showing that the alignment of the content within the element is affected." src="images/content-example.svg" width=212 height=212>
	</div>

	<pre class="propdef">
	Name: justify-content, align-content
	Value: auto | ''baseline'' | [ <<item-position>> <<content-position>>? | <<content-position>> ] && <<overflow-position>>?
	Initial: auto
	Applies to: block containers, flex containers, and grid containers
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	Aligns the contents of the box as a whole along the box's inline/row/main axis.
	Values other than <dfn value for="justify-content, align-content">auto</dfn> are <a href="#alignment-values">defined above</a>.
	If both a <<item-position>> and <<content-position>> are given,
	the second value represents an explicit <a>fallback alignment</a>.

	<dl>
		<dt>Block Containers:
		<dd>
			The <a>alignment container</a> is the <a>block container</a>’s content box.
			The <a>alignment subject</a> is the entire contents of the block.

			The 'align-content' property applies along the <a>block axis</a>,
			but if a <var>&lt;content-distribution></var> is specified
			the <a>fallback alignment</a> is used instead.
			The 'justify-content' property does not apply to and has no effect on block containers.

			All values other than ''justify-content/auto'' force the block container to establish a new formatting context.
			For table cells, the behavior of the ''justify-content/auto'' depends on the computed value of 'vertical-align':
			''top'' makes it behave as ''start'',
			''middle'' makes it behave as ''center'',
			''bottom'' makes it behave as ''end'',
			and all other values make it behave as ''baseline''.
			''justify-content/auto'' otherwise behaves as ''start''.

		<dt>Multicol Layout:
		<dd>
			The <a>alignment container</a> is the <a>multi-column element</a>’s content box.
			The <a>alignment subject</a> is the column boxes, as a unit.

			The 'align-content' property applies along the <a>block axis</a>,
			but if a <var>&lt;content-distribution></var> is specified
			the <a>fallback alignment</a> is used instead.
			The 'justify-content' property does not apply to and has no effect on multi-column elements.

			''justify-content/auto'' behaves as ''start''.

		<dt>Flex Containers:
		<dd>
			''justify-content/auto'' computes to ''stretch''.

			The <a>alignment container</a> is the <a>flex container</a>’s content box.
			For 'justify-content', the <a>alignment subject</a> is the <a>flex items</a> in each <a>flex line</a>;
			for 'align-content', the <a>alignment subject</a> is the <a>flex lines</a>.

			The 'align-content' property applies along the <a>cross axis</a>.
			The 'justify-content' property applies along the <a>main axis</a>,
			but ''stretch'' behaves as ''start''.

			See [[!CSS3-FLEXBOX]] for details.

		<dt>Grid Containers:
		<dd>
			''justify-content/auto'' computes to ''start'', and ''stretch'' behaves like ''start''.

			The <a>alignment container</a> is the <a>grid container</a>’s content box.
			The <a>alignment subject</a> is the bounds of the <a>grid</a>.
			<span class='issue'>Need to dfn a better term for this in Grid.</span>

			The 'align-content' property applies along the <a title="block axis">block (column) axis</a>.
			The 'justify-content' property applies along the <a title="inline axis">inline (row) axis</a>.
			In both properties, if a <var>&lt;content-distribution></var> is specified,
			the <a>fallback alignment</a> is used instead.
	</dl>

<h3 id="baseline-align-content">
Baseline Content-Alignment</h3>

	The content of boxes participating in row-like layout contexts can be baseline-aligned to each other.
	The <a>alignment subject</a> of a box participating in <a>baseline content-alignment</a>
	is shifted such that the baseline of the <a>first formatted line</a> of all participating boxes align,
	and the intrinsic size of each box is increased
	by the distance the content needed to shift
	in order to thus align the baselines.

	The set of boxes that participate in <dfn export>baseline content-alignment</dfn> together depends on the layout model:

	<dl>
		<dt>Table Cells:
		<dd>
			A <a>table cell</a> participates in <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its computed 'align-content' is ''baseline''.

		<dt>Flex Items:
		<dd>
			A <a>flex item</a> participates in <a>baseline content-alignment</a>
			in its flex line if
			its computed 'align-content' is ''baseline'',
			its computed 'align-self' is ''stretch'' or ''start'',
			and its <a>inline axis</a> is parallel to the <a>main axis</a>.

		<dt>Grid Items:
		<dd>
			A <a>grid item</a> participates in <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its computed 'align-content' is ''baseline'',
			and its computed 'align-self' or 'justify-self' (whichever affects its <a>block axis</a>) is ''stretch'' or ''start''.
	</dl>


	If a cell/item spans multiple rows or columns,
	it participates in alignment within its start-most row/column only.

<h2 id='self-alignment'>
Self-Alignment: Aligning the Box within its Parent</h2>

	The 'justify-self' and 'align-self' properties control alignment of the box within its containing block.

	<div class="figure">
		<img alt="Diagram showing that the alignment of the element within its containing block is affected." src="images/self-example.svg" width=212 height=212>
	</div>

<h3 id='justify-self-property'>
Inline/Main-Axis Alignment: the 'justify-self' property</h3>

	<pre class="propdef">
	Name: justify-self
	Value: auto | ''stretch'' | ''baseline'' | [ <<item-position>> && <<overflow-position>>? ]
	Initial: auto
	Applies to: block-level boxes, absolutely-positioned boxes, and grid items
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	Justifies the box within its parent along the inline/row/main axis:
	the box's outer edges are aligned within its <a>alignment container</a>
	<a href="#alignment-values">as described by its alignment value</a>.

	The <dfn value for="justify-self">auto</dfn> keyword computes to
	''stretch'' on absolutely-positioned elements,
	and to the computed value of 'justify-items' on the parent
	(minus any ''legacy'' keywords) on all other boxes.

	<dl>
		<dt>Block-level Boxes:
		<dd>
			The 'justify-self' property applies along its containing block's <a>inline axis</a>.

			The <a>alignment container</a> is the block's containing block
			except that for block-level elements that establish a block formatting context
			and are placed next to a float,
			the <a>alignment container</a> is reduced by the space taken up by the float.
			(Note: This is the legacy behavior of HTML <code>align</code>.)
			The <a>alignment subject</a> is the block's margin box.

			The default <a>overflow alignment</a> is ''safe''.
			In terms of CSS2.1 block-level formatting [[!CSS21]],
			the rules for "over-constrained" computations in <a href="http://www.w3.org/TR/CSS21/visudet.html#blockwidth">section 10.3.3</a>
			are ignored in favor of alignment as specified here
			and the used value of the offset properties are not adjusted to correct for the over-constraint.

			The ''stretch'' value is equivalent to ''start'' on block-level boxes.

			This property does not apply to floats.


		<dt>Absolutely-positioned Boxes:
		<dd>
			The 'justify-self' property applies along its containing block's <a>inline axis</a>.

			When neither margin in this dimension is ''margin/auto''
			and neither offset property in this dimension is ''top/auto'',
			values other than ''stretch'' cause <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">non-replaced absolutely-positioned boxes</a>
			to use shrink-to-fit sizing for calculating ''width/auto'' measures,
			and 'justify-self' dictates alignment as follows:

			The <a>alignment container</a> is the box's containing block
			as modified by the offset properties ('top'/'right'/'bottom'/'left').
			The <a>alignment subject</a> is the box's margin box.

			The default <a>overflow alignment</a> is ''safe''.
			In terms of CSS2.1 formatting [[!CSS21]],
			the rules for "over-constrained" computations in <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">section 10.3.7</a>
			are ignored in favor of alignment as specified here
			and the used value of the offset properties are not adjusted to correct for the over-constraint.

			The ''stretch'' keyword is equivalent to ''start'' on replaced absolutely-positioned boxes.
			(This is because CSS 2.1 does not stretch replaced elements to fit into fixed offsets.)

		<dt>Table Cells:
		<dd>
			This property does not apply to table cells,
			because their position and size is fully constrained by table layout.

		<dt>Flex Items:
		<dd>
			This property does not apply to <a>flex items</a>,
			because there is more than one item in the <a>main axis</a>.
			See 'flex' for stretching and 'justify-content' for <a>main-axis</a> alignment. [[!CSS3-FLEXBOX]]

		<dt>Grid Items:
		<dd>
			The 'justify-self' property applies along the grid's <a>row axis</a>.

			The <a>alignment container</a> is the <a>grid cell</a>.
			The <a>alignment subject</a> is the <a>grid item</a>’s margin box.
			The default <a>overflow alignment</a> is ''true''.
	</dl>

	<p class='issue'>
		Should we make ''stretch'' actually work on block-level/abspos replaced boxes?
		To maintain legacy compat, this requires adding a new value (named ''normal''?)
		which has the current behavior of stretching non-replaced boxes and start-aligning replaced ones.

	<div class="example">
		The effect of these rules is that an auto-sized block-level table,
		for example, can be aligned while still having side margins.
		If the table's max-content size is narrower than its containing block,
		then it is shrink-wrapped to that size and aligned as specified.
		If the table's max-content size is wider, then it fills its containing block,
		and the margins provide appropriate spacing from the containing block edges.
	</div>

<h3 id='align-self-property'>
Block/Cross-Axis Alignment: the 'align-self' property</h3>

	<pre class="propdef">
	Name: align-self
	Value: auto | ''stretch'' | ''baseline'' | [ <<item-position>> && <<overflow-position>>? ]
	Initial: auto
	Applies to: block-level boxes
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	Aligns the box within its parent along the block/column/cross axis:
	the box's outer edges are aligned within its <a>alignment container</a>
	<a href="#alignment-values">as described by its alignment value</a>.

	The <dfn value for="align-self">auto</dfn> keyword computes to
	''stretch'' on absolutely-positioned elements,
	and to the computed value of 'align-items' on the parent
	(minus any ''legacy'' keywords) on all other boxes.

	<dl>
		<dt>Block-level Boxes:
		<dd>
			The 'align-self' property does not apply to block-level boxes
			(including floats),
			because there is more than one item in the <a>block axis</a>.

		<dt>Absolutely-positioned Boxes:
		<dd>
			The 'justify-self' property applies along its containing block's <a>inline axis</a>.

			When neither margin in this dimension is ''margin/auto''
			and neither offset property in this dimension is ''top/auto'',
			values other than ''stretch'' cause <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-height">non-replaced absolutely-positioned boxes</a>
			to use shrink-to-fit sizing for calculating ''width/auto'' measures,
			and 'align-self' dictates alignment as follows:

			The <a>alignment container</a> is the box's containing block
			as modified by the offset properties ('top'/'right'/'bottom'/'left').
			The <a>alignment subject</a> is the box's margin box.

			The default <a>overflow alignment</a> is ''safe''.
			In terms of CSS2.1 formatting [[!CSS21]],
			the rules for "over-constrained" computations in <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-height">section 10.6.4</a>
			are ignored in favor of alignment as specified here
			and the used value of the offset properties are not adjusted to correct for the over-constraint.

			The ''stretch'' keyword is equivalent to ''start'' on replaced absolutely-positioned boxes.
			(This is because CSS 2.1 does not stretch replaced elements to fit into fixed offsets.)

		<dt>Table Cells:
		<dd>
			This property does not apply to table cells,
			because their position and size is fully constrained by table layout.

		<dt>Flex Items:
		<dd>
			The 'align-self' property applies along the flexbox's <a>cross axis</a>.

			The <a>alignment container</a> is the <a>flex line</a> the item is in.
			The <a>alignment subject</a> is the <a>flex item</a>’s margin box.
			The default <a>overflow alignment</a> is ''true''.
			See [[!CSS3-FLEXBOX]] for details.

		<dt>Grid Items:
		<dd>
			The 'align-self' property applies along the grid's <a>column axis</a>.

			The <a>alignment container</a> is the <a>grid cell</a>.
			The <a>alignment subject</a> is the <a>grid item</a>’s margin box.
			The default <a>overflow alignment</a> is ''true''.
	</dl>

<h3 id="baseline-align-self">
Baseline Self-Alignment</h3>

	Boxes participating in row-like layout contexts can be baseline-aligned to each other.
	An <a>alignment subject</a> participating in <a>baseline content-alignment</a>
	is shifted such that the baseline of the <a>first formatted line</a> of all participating boxes align,
	and the intrinsic size of its <a>alignment container</a> is increased
	by the largest distance a box needed to shift
	in order to thus align the baselines.

	The set of boxes that participate in <dfn>baseline self-alignment</dfn> together depends on the layout model:

	<dl>
		<dt>Flex Items:
		<dd>
			A <a>flex item</a> participates in <a>baseline content-alignment</a>
			if its <a>inline axis</a> is parallel to the <a>main axis</a>.
			See [[!CSS3-FLEXBOX]] for details.

		<dt>Grid Items:
		<dd>
			A <a>grid item</a> participates in <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its 'justify-self' or 'align-self' property (whichever matches its <a>inline axis</a>)
			computes to ''baseline''.
	</dl>

	If a cell/item spans multiple rows or columns,
	it participates in alignment within its start-most row/column only.


<h2 id='default-alignment'>
Default Alignment</h2>

	The 'align-items' and 'justify-items' properties set the default 'align-self' and 'justify-self' behavior of the items contained by the element.

	<div class="figure">
		<img alt="Diagram showing that the alignment of grid items within the element is affected." src="images/items-example.svg" width=212 height=212>
	</div>

<h3 id='justify-items-property'>
Inline/Main-Axis Alignment: the 'justify-items' property</h3>

	<pre class="propdef">
	Name: justify-items
	Value: auto | ''stretch'' | ''baseline'' | [ <<item-position>> && <<overflow-position>>? ] | [ legacy && [ ''left'' | ''right'' | ''center'' ] ]
	Initial: auto
	Applies to: block containers, flex containers, and grid containers
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	This property specifies the default 'justify-self' for all of the boxes
	(including anonymous boxes)
	participating in this box's formatting context.
	Values have the following meanings:

	<dl dfn-type="value" dfn-for="justify-items">
		<dt><dfn>auto</dfn>
		<dd>
			If the <a>inherited value</a> of ''justify-items'' includes the ''legacy'' keyword,
			''justify-items/auto'' computes to the the <a>inherited value</a>.

			Otherwise, ''justify-items/auto'' computes to:

			<ul>
				<li>''stretch'' for flex containers and grid containers
				<li>''start'' for everything else
			</ul>

		<dt><dfn>legacy</dfn>
		<dd>
			This keyword causes the value to effectively inherit into descendants.
			It can only be combined with the ''center'', ''left'', and ''right'' positions.
			The alignment keyword, but not the ''legacy'' keyword, is passed to 'justify-self'.
			It exists to implement the legacy alignment behavior of HTML's <code>&lt;center></code> element and <code>align</code> attribute.
	</dl>

	Other values have no special handling and are merely passed to 'justify-self'.

<h3 id='align-items-property'>
Block/Cross-Axis Alignment: the 'align-items' property</h3>

	<pre class="propdef">
	Name: align-items
	Value: auto | ''stretch'' | ''baseline'' | [ <<item-position>> && <<overflow-position>>? ]
	Initial: auto
	Applies to: block-level elements
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	This property specifies the default 'align-self' for all of the boxes
	(including anonymous boxes)
	participating in this box's formatting context.
	Values have the following meanings:

	<dl dfn-type="value" dfn-for="align-items">
		<dt><dfn>auto</dfn>
		<dd>
			Computes to:

			<ul>
				<li>''stretch'' for flex containers and grid containers
				<li>''start'' for everything else
			</ul>
	</dl>

	Other values have no special handling and are merely passed to 'align-self'.


<h2 id="changes">
Changes</h2>

	Changes since the <a href="http://www.w3.org/TR/2012/WD-css3-align-20120612/">First Public Working Draft</a> include:

	<ul>
		<li>
			Defined terms <a>alignment container</a> and <a>alignment subject</a>
			to make it easier to define alignment.
		<li>
			Pulled out all value definitions into a general section on <a href="#alignment-values">Alignment Values</a>.
		<li>
			Added both ''safe'' and ''true'' as <a href="#overflow-values">overflow alignment keywords</a>
			and made the default layout-mode-dependent.
		<li>
			Removed ''head'' and ''foot'' keywords,
			defined ''start'' and ''end'' keywords as relative to the <a>alignment container</a>'s <a>writing mode</a>,
			and added ''self-start'' and ''self-end'' to be relative to the <a>alignment subject</a>.
		<li>
			Filled out details on <a href="#baseline">baseline alignment</a>.
		<li>
			Made 'justify-items' handle the <code>&lt;CENTER&gt;></code>/<code>align</code> attribute requirements
			by adding ''legacy'' keyword.
		<li>
			Added <a>fallback alignment</a> ability for 'justify-content' and 'align-content'.
		<li>
			Defined alignment behavior of absolutely-positioned elements.
		<li>
			Improved details on alignment behavior of other layout modes.
	</ul>

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	Special thanks goes to Markus Mielke, Alex Mogilevsky, and the
	participants in the CSSWG's March 2008 F2F alignment discussions.
