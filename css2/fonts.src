<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: fonts.src,v 2.29 1998-03-21 21:22:14 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Fonts</TITLE>
</HEAD>
<BODY>
<H1 align="center">Fonts</H1>

<!-- Make sure 10-point is used where appropriate -IJ -->

<h2>Introduction</h2>

<P>When a document's text is to be displayed visually, <span
class="index-inst" title="character">characters</span> (abstract
information elements) must be mapped to <span class="index-def"
title="glyph"><dfn>glyphs</dfn></span> (concrete representations that
may be drawn on the screen, paper, etc). One or more characters may be
depicted by one or more glyphs, in a possibly context-dependent
fashion. A <span class="index-def" title="glyph
representation"><dfn>glyph representation</dfn></span> is the actual
artistic representation of an abstract glyph, in some typographic
style, in the form of outlines or bitmaps. A <span class="index-def"
title="font"><dfn>font</dfn></span> is a set of glyph representations,
all observing the same basic motif according to design, size,
appearance, and other attributes associated with the entire set and a
mapping from characters to glyphs.

<P>A visual user agent must address the following issues before actually
	rendering a character:</p>

<ul>
<li>Is there, directly or by inheritance, a font specified for this character?

<li>Does the user agent have this font available?

<li>If so, what glyph representation(s) does this character or sequence of
characters map to?

<li>If not, what should be done? Should a different font be substituted?
Can the font be synthesized? Can it be retrieved from the Web?
</ul>

<P>In both CSS1 and CSS2, authors specify font characteristics
via a series of font properties.

<P>How the user agent handles with properties, when there is no matching font on the client, has expanded
between CSS1 and CSS2. In CSS1, all fonts were assumed to be present
on the client system and were identified solely by name. Alternate
fonts could be specified through the properties, but beyond that, user
agents had no way to propose other fonts to the user (even
stylistically similar fonts that the user agent had available) other
than generic default fonts.

<P>CSS2 changes all that, and allows much greater liberty for:</p>

<ul>
<li>style sheet authors, to describe the fonts they want to be used
<li>user agents, in selecting a font when an author's requested font
is not immediately available.
</ul>

<p>CSS2 improves client-side font matching, enables font
synthesis and progressive rendering, and enables fonts to be
downloaded over the Web.


<P>In the CSS2 font model, as in CSS1, each user agent has a "font
database" at its disposition. CSS2 defined the information in that database and allows style sheet authors to contribute to that
database. When asked to display a character with a particular font,
the user agent first identifies the font in the database that "best
fits" the specified font (according to the <a href="#algorithm">font
matching algorithm)</a> Once it has identified a font, it retrieves
the font data locally or from the Web, and may display the character
using those glyph representations.

<P>In light of this simple model, we have organized the specification
into two sections. The first concerns the <a
href="#font-specification">font specification mechanism</a>, whereby
authors specify which fonts they would like to have used.  The
second concerns the <a href="#font-selection">font selection
mechanism</a>, whereby the client's user agent identifies and loads a
font that best fits the author's specification.

<P>How the user agent constructs  the font database lies
outside the scope of this specification since the database's
implementation depends on such factors as the operating system, the windowing system, and the client.

<H2><a name="font-specification">Font specification</a></h2>

<P> The first phase of the CSS font mechanism concerns how authors
specify which fonts should be used by a user
agent. The obvious way to specify a font is by it's name, a single string which at first appears to be separated into distinct parts such as

<div class="example"><p>
"Swiss 721 Heavy Italic"
</div>

<p>Unfortunately, there exists no well-defined and universally
accepted taxonomy for classifying fonts based on their names, and terms that apply to one font family name may not be appropriate for others. For example, the term 'italic' is commonly used to label slanted text, but slanted text may also be labeled <EM>Oblique, Slanted, Incline, Cursive</EM> or
<EM>Kursiv</EM>. This lack of systematic naming makes it impossible, in the general case, to generate a modified font face name that differs in a particular way such as being bolder.

<P>Because of this, CSS uses a different model. Fonts are requested not through a single font name but through setting a series of font properties. These property values form the
basis of the user agent's <a href="#font-selection">font
selection</a> mechanism. The font properties can be individually modified, for example to increase the boldness, and the new set of font property values will then be used to select from the font database again. The result is an increase in regularity for style sheet authors and implementors, and an increase in robustness.

<h3><a name="font-properties">Font specification properties</a></h3>
<P>CSS2 specifies fonts according to these characteristics:</p>

<dl>
<dt><strong><a name="font-family">Font family</a></strong>

      <dd>The <span class="index-def" title="font family"> font
      family</span> specifies which font family is to be used to render the text. A font family is a group of fonts,designed to be used in combination and exhibiting similarities in design.  One member of the
      family may be italic, another bold, another condensed or using small caps. Font family names include Helvetica, New
      Century Schoolbook, and Kyokasho ICA L. Font family names are
      not restricted to Latin characters.  Font families may be
      grouped into different categories: those with or without serifs,
      those whose characters are or are not proportionally spaced,
      those that resemble handwriting, those that are fantasy fonts,
      etc.


<dt><strong><a name="font-style">Font style</a></strong>

      <dd>The font style specifies whether the text is to be rendered
      using a normal, italic, or oblique face. Italic is a more
      cursive companion face to the normal face, but not so cursive as
      to make it a script face. Oblique is a slanted form of the
      normal face, and is more commonly used as a companion face to
      sans-serif. This avoids having to label slightly slanted normal
      faces as oblique, or Greek faces as italic.

<dt><strong><a name="font-variant">Font variant</a></strong>

      <dd>The font variant indicates whether the text is to be
      rendered using the normal glyphs for lowercase characters or
      using small-caps glyphs for lowercase characters. (A particular
      font may contain only normal, only small-caps, or both types of
      glyph)

<dt><strong><a name="font-weight">Font weight</a></strong>

      <dd>The font weight refers to the boldness or lightness of the glyphs used to render the text, relative to other fonts in the same font family.

<dt><strong><a name="font-stretch">Font stretch</a></strong>

      <dd>The font stretch indicates the desired amount of condensing or expansion in the glyphs used to render the text, relative to other fonts in the same font family.<-- new to CSS2, CL -->

<dt><strong><a name="font-size">Font size</a></strong>

      <dd>The font size refers to the size of the font from baseline
      to baseline, when set solid (in CSS terms, this is when the
      <span class="propinst-font-size">'font-size'</span> and <span
      class="propinst-line-height">'line-height'</span> properties
      have the same value).

</dl>


<P> On all properties except <span
class="propinst-font-size">'font-size'</span>, 'em' and 'ex' length
values refer to the font size of the current element. For <span
class="propinst-font-size">'font-size'</span>, these length units
refer to the font size of the parent element. Please consult the
section on <a href="./syndata.html#length-units">length units</a> for
more information.

<p>The font properties in CSS are used to describe the desired
appearance of text in the document. The font descriptors, in contrast,
are used to describe the characteristics of fonts, so that a suitable
font can be chosen to create the desired appearance. For information
about the classification of fonts, please consult the section on <a
href="#font-descriptors">font descriptors</a>.


<H3><a name="font-family">Font family</a>: the <span
class="propinst-font-family">'font-family'</span> property</H3>

<!-- #include src=properties/font-family.srb -->

<P>This property specifies a prioritized list of font family names
and/or generic family names. To deal with the problem that a single
font may not contain glyphs to display all the characters in a
document, or that not all fonts are available on all systems, this
property allows authors to specify a list of fonts, all of the same
style and size, that are tried in sequence to see if they contain a
glyph for a certain character. This list is called a <span
class="index-def" title="font set"><dfn>font set</dfn></span>.

<div class="example"><P>
For example, text that contains English text mixed with
mathematical symbols may need a font set of two fonts, one containing
letters and digits, the other containing mathematical symbols. Here
is an example of a font set suitable for a text that is expected to
contain text with Latin characters, Japanese characters, and
mathematical symbols:

<PRE>
  BODY { font-family: Baskerville, "Heisi Mincho W3", Symbol, serif }
</PRE>

<P> The characters available in the Baskerville font (a font with only
Latin characters) will be taken from that font, Japanese will be taken
from Heisi Mincho W3, and the mathematical symbols will come from
Symbol. Any other characters will (hopefully) come from the generic
font family 'serif'. The generic font family 'serif' will also be used if one
or more of the other fonts is unavailable.
</div>

<P>  There are two types of font family names:</p>
  <DL>
    <DT><span class="index-def"
title="&lt;family-name&gt;::definition of"><a name="value-def-family-name" class="value-def"><strong>&lt;family-name&gt;</strong></a></span>
    <DD>
      The name of a font family of choice. In the last example, "Baskerville",
      "Heisi Mincho W3", and "Symbol" are font families. Font
      family names containing
      <a href="syndata.html#whitespace">whitespace</a> should be
quoted. If quoting is omitted, any <a
href="syndata.html#whitespace">whitespace</a> characters before and
after the font name are <span class="index-inst" title="ignore"><a
href="syndata.html#ignore">ignored</a></span> and any sequence of
whitespace characters inside the font name is converted to a single
space.

<div class="example"><p>The richer selector syntax of CSS2 may be used to create language-sensitive typography. For example, some Chinese and Japanese characters are unified to have the same Unicode codepoint, although the glyphs are not the same in the two languages.

<pre>
  *[lang="ja-jp"] { font: 900 14pt/16pt "Heisei Mincho W9", serif }
  *[lang="zh-tw"] { font: 800 14pt/16.5pt "Li Sung", serif }
</pre>
<!-- need to check tw for traditional chinese as used in taiwan -->

<p>The * selects any element and the square brackets select elements
which have the lang attribute set to Japanese or to Traditional Chinese
and selects the appropriate font

</div>
    <DT><span class="index-def"
title="&lt;generic-family&gt;::definition of"><a name="value-def-generic-family" class="value-def"><strong>&lt;generic-family&gt;</strong></a></span>
    <DD>
      The following
      generic families are defined: 'serif', 'sans-serif', 'cursive',
      'fantasy' and 'monospace'. Please see the section on
      <a href="#generic-font-families">generic font families</a> for
      descriptions of these families. Generic font family names
      are keywords and therefore must not be quoted.

<P>Authors are encouraged to offer a generic font family as a
      last alternative, for improved robustness.</p>
  </DL>

<P>
<div class="html-example"><P>
For example:

<PRE>
  &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
  &lt;HTML&gt;
    &lt;HEAD&gt;
      &lt;TITLE&gt;Font test&lt;/TITLE&gt;
      &lt;STYLE type="text/css"&gt;
        BODY { font-family: "new century schoolbook", serif }
      &lt;/STYLE&gt;
    &lt;/HEAD&gt;
    &lt;BODY style="font-family: 'My own font', fantasy"&gt;
      &lt;P&gt;What's up, Doc?
    &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>
</div>


<H3><a name="font-style">Font style</a>: the
<span class="propinst-font-style">'font-style'</span>,
<span class="propinst-font-variant">'font-variant'</span>,
<span class="propinst-font-weight">'font-weight'</span> and
<span class="propinst-font-stretch">'font-stretch'</span> properties
</H3>

<!-- #include src=properties/font-style.srb -->

<P> The <span class="propinst-font-style">'font-style'</span> property selects
between normal (sometimes referred to as "roman" or "upright"), italic,
and oblique faces within a font family. Values have the following
meanings:</p>

<dl>
<dt><strong>normal</strong>
<dd>Selects a font that is classified as 'normal'
in the UA's font database.
<dt><strong>oblique</strong>
<dd>Selects a font that is classified as 'oblique' in the UA's font
database.  Fonts with Oblique, Slanted or Incline in their names will
typically be labeled 'oblique' in the font database.
A font that is labeled 'oblique' in the UA's font database
may actually have been generated by electronically slanting a normal
font.
<dt><strong>italic</strong>
<dd>Selects a font that is classified
as 'italic' in the UA's font database, or, if that is not available,
one labeled 'oblique'.  Fonts with
<EM>Italic, Cursive</EM> or <EM>Kursiv</EM> in their names will
typically be labeled 'italic'.
</dl>

<div class="example"><P>
In this example, normal text in an H1, H2, or H3 element will
be displayed with an italic font.
However, emphasized text (EM) within an H1 will appear in a normal face.

<PRE>
  H1, H2, H3 { font-style: italic }
  H1 EM { font-style: normal }
</PRE>
</div>

<!-- #include src=properties/font-variant.srb -->

<P>In a small-caps font, the glyphs for lowercase letters look similar
to the uppercase ones, but in a smaller size and with slightly
different proportions. The <span
class="propinst-font-variant">'font-variant'</span> property selects
that font. This property has no visible effect for scripts which are
unicameral (having only one case). Values have the following
meanings:</p>

<dl>
<dt><strong>normal</strong>
<dd>Selects a font that is not labeled as a
small-caps font.
<dt><strong>small-caps</strong>
<dd>Selects a font that is labeled as a
small-caps font. If a genuine
small-caps font is not available, user agents may
simulate a small-caps font by taking a normal font
and replacing the lowercase letters by scaled uppercase
characters. As a last resort, unscaled uppercase letter glyphs in
a normal font may replace glyphs in a small-caps font
so that the text appears in all uppercase letters.
</dl>

<div class="example"><P>
<P> The following example results in an H3 element in small-caps,
with emphasized words (EM) in oblique small-caps:

<PRE>
  H3 { font-variant: small-caps }
  EM { font-style: oblique }
</PRE>
</div>

<!-- There may be other variants in the font family as well, such as
fonts with old-style numerals, small-caps numerals, etc. CSS2 does not offer 'font-variant' values that select
those variants. -->

<P>Insofar as this property causes text to be transformed to
uppercase, the same considerations as for <span
class="propinst-text-transform">'text-transform'</span> apply.

<!-- #include src=properties/font-weight.srb -->

<P> The <span class="propinst-font-weight">'font-weight'</span>
property selects the weight of the font. Values have the following
meanings:</p>

<dl>
<dt><strong>100 to 900</strong>
<dd>These values
form an ordered sequence, where each number indicates a weight that is
at least as dark as its predecessor.
<dt><strong>normal</strong>
<dd>Same as '400'.
<dt><strong>bold</strong>
<dd>Same as '700'.
<dt><strong>bolder</strong>
<dd>Selects the next weight that is assigned to a font that is darker
than the inherited one. If there is no such weight, it simply results
in the next darker numerical value (and the font remains unchanged),
unless the inherited value was '900', in which case the resulting
weight is also '900'.
<dt><strong>lighter</strong>
<dd>Selects the next weight that is assigned to a font that is lighter
than the inherited one. If there is no such weight, it simply results
in the next lighter numerical value (and the font remains unchanged),
unless the inherited value was '100', in which case the resulting
weight is also '100'.
</dl>

<div class="example"><P>
<PRE>
  P { font-weight: normal }   /* 400 */
  H1 { font-weight: 700 }     /* bold */
  BODY { font-weight: 400 }
  STRONG { font-weight: bolder } /* 500 if available */
</PRE>
</div>

<!-- I added the above example, please verify IJ
    seems fine, CL -->

<P>Child elements inherit the <a href="cascade.html#computed-value">
computed value</a> of the weight.



<h4>Mapping font weight values to font names</h4>

<P>Font information typically includes names that describe the
"weight" of a font. The primary role of these names is to distinguish
faces of differing darkness within a single font family.  There is no
accepted, universal meaning to these weight names and usage varies
widely.  For example a font that you might think of as being bold
might be described as being <EM>Regular, Roman, Book, Medium,
Semi-</EM> or <EM>DemiBold, Bold,</EM> or <EM>Black,</EM> depending on
how black the "normal" face of the font is within the design. Because
there is no standard for these names, the <span
class="propinst-font-weight">'font-weight'</span> property values are
given on a numerical scale in which the value '400' (or 'normal')
corresponds to the "normal" text face for that family. The weight name
associated with that face will typically be <EM>Book, Regular, Roman,
Normal</EM> or sometimes <EM>Medium</EM>.

<P> The association of other weights within a family to the numerical
weight values is intended only to preserve the ordering of weights
within that family. User agents must map names to values in a way that
preserves visual order; a face mapped to a value must not be lighter
than faces mapped to lower values.  There is no guarantee on how a user
agent will map font faces within a family to weight values.  However,
the following heuristics tell how the assignment is done in typical
cases:</p>

<UL>
    <LI>
      If the font family already uses a numerical scale with nine
      values (as e.g. <EM>OpenType</EM> does), the font weights
      should be mapped directly.
    <LI>
      If there is both a face labeled <EM>Medium</EM> and one labeled
      <EM>Book, Regular, Roman</EM> or <EM>Normal,</EM> then the
      <EM>Medium</EM> is normally assigned to the '500'.
    <LI>
      The font labeled "Bold" will often correspond to the weight value '700'.
    <LI>
      If there are fewer then 9 weights in the family, the default
      algorithm for filling the "holes" is as follows. If '500' is
      unassigned, it will be assigned the same font as '400'. If any
      of the values '600', '700', '800', or '900' remains unassigned,
      they are assigned to the same face as the next darker assigned
      keyword, if any, or the next lighter one otherwise. If any of
      '300', '200', or '100' remains unassigned, it is assigned to the
      next lighter assigned keyword, if any, or the next darker
      otherwise.
</UL>

<P> There is no guarantee that there will be a darker face for each of
the <span class="propinst-font-weight">'font-weight'</span> values;
for example, some fonts may have only a normal and a bold face, others
may have eight different face weights.

<P>The following two examples show typical mappings.</P>

<div class="html-example">
<P>Assume four weights in the "Rattlesnake" family, from lightest to
darkest: <EM>Regular, Medium, Bold, Heavy.</EM></p>
<TABLE border summary="Example of font-weight mapping">
<CAPTION>First example of font-weight mapping</CAPTION>
<!-- rattlesnake, ostrich and more at the Austin meeting -->
<THEAD>
<TR><TH>Available faces <TH>Assignments <TH>Filling the holes
</THEAD>
<TR><TD>"Rattlesnake Regular"    <TD> 400          <TD> 100, 200, 300
<TR><TD>"Rattlesnake Medium"     <TD> 500          <TD>&nbsp;
<TR><TD>"Rattlesnake Bold"       <TD> 700          <TD> 600
<TR><TD>"Rattlesnake Heavy"      <TD> 800          <TD> 900
</TABLE>
</div>

<div class="html-example">
<P>Assume six weights in the
"Ice Prawn" family: <EM>Book, Medium, Bold, Heavy, Black,
ExtraBlack.</EM> Note that in this instance the user agent
has decided <EM>not</EM> to assign a numeric
value to "Example2 ExtraBlack".</p>

<TABLE border summary="Example of font-weight mapping. Note
                that ExtraBlack is not mapped to a value.">
<CAPTION>Second example of font-weight mapping</CAPTION>
<THEAD>
<TR><TH>Available faces <TH>Assignments <TH>Filling the holes
</THEAD>
<TR><TD>"Ice Prawn Book"       <TD> 400          <TD> 100, 200, 300
<TR><TD>"Ice Prawn Medium"     <TD> 500          <TD>&nbsp;
<TR><TD>"Ice Prawn Bold"       <TD> 700          <TD> 600
<TR><TD>"Ice Prawn Heavy"      <TD> 800          <TD>&nbsp;
<TR><TD>"Ice Prawn Black"      <TD> 900          <TD>&nbsp;
<TR><TD>"Ice Prawn ExtraBlack" <TD> (none)       <TD>&nbsp;
</TABLE>
</div>



<!-- #include src=properties/font-stretch.srb -->

<P> The <span class="propinst-font-stretch">'font-stretch'</span> property
selects between normal, condensed and extended faces within a font family. Absolute keyword values have the following ordering, from narrowest to widest :</p>

<ol>
	<li>ultra-condensed
	<li>extra-condensed
	<li>condensed
	<li>semi-condensed
	<li>normal
	<li>semi-expanded
	<li>expanded
	<li>extra-expanded
	<li>ultra-expanded
</ol>

<p>The relative keyword 'wider' sets the value to the next more expanded value more than the inherited value (while not increasing it above ultra-expanded); the relative keyword 'narrower' sets the value to the next more condensed value than the inherited value (while not decreasing it below ultra-condensed).
<!-- should this go to next more condensed/expanded face in that family as the computed value? like bolder/lighter -CL  -->

<H3><a name="font-size">Font size</a>: the <span
class="propinst-font-size">'font-size'</span>
and <span class="propinst-font-size-adjust">'font-size-adjust'</span>
properties</H3>

<!-- #include src=properties/font-size.srb -->


<P>This property describes the size of the font when set solid.
Values have the following meanings:</p>

<DL>
    <DT><span class="index-def" title="&lt;absolute-size&gt;::definition of">
           <strong>&lt;absolute-size&gt;</strong></span>
    <DD> An <a name="value-def-absolute-size"
class="value-def">&lt;absolute-size&gt;</a> keyword refers to an entry
in a table of font sizes computed and kept by the user agent. Possible values
are:

    <P> [ xx-small | x-small | small | medium | large | x-large | xx-large ]

    <P>On a computer screen a scaling factor of 1.2 <!-- changed from
    1.5 which was widely criticised as far too much, CL -->is
    suggested between adjacent indexes; if the 'medium' font is 10pt,
    the 'large' font could be 12pt. Different media may need different
    scaling factors. Also, the user agent should take the quality and
    availability of fonts into account when computing the table. The
    table may be different from one font family to another.


<p class="note">Note: In CSS1, the suggested scaling factor between
adjacent indexes was 1.5 which user experience proved too large.</P>



    <DT><span class="index-def" title="&lt;relative-size&gt;::definition
of"><strong>&lt;relative-size&gt;</strong></span>

    <DD> A <a name="value-def-relative-size"
    class="value-def">&lt;relative-size&gt;</a> keyword is interpreted
    relative to the table of font sizes and the font size of the
    parent element. Possible values are:

    <P> [ larger | smaller ]

    <P> For example, if the parent element has a font size of
    'medium', a value of 'larger' will make the font size of the
    current element be 'large'.  If the parent element's size is not
    close to a table entry, the user agent is free to interpolate
    between table entries or round off to the closest one. The user
    agent may have to extrapolate table values if the numerical value
    goes beyond the keywords.

    <DT><span class="index-inst" title="&lt;length&gt;"><span
    class="value-inst-length"><strong>&lt;length&gt;</strong></span></span>
    <DD>A length value specifies an absolute font size
        (that is independent of the user agent's font table).
        Negative lengths are illegal.
    <DT><span class="index-inst" title="&lt;percentage&gt;"><span
    class="value-inst-percentage"><strong>&lt;percentage&gt;</strong>
    </span></span>
    <DD>A percentage value specifies an absolute font size relative
        to the parent element's font size.
  </DL>

<P>The <a href="cascade.html#computed-value">computed value</a> of
this property may differ from the <a
href="cascade.html#specified-value">specified value</a> according to
context. <!-- bad example: For example, inside a virtual reality scene
the user agent may compute a different size because of perspective
distortion.-->


<div class="example"><P>
<P> Examples:

<PRE>
  P { font-size: 12pt; }
  BLOCKQUOTE { font-size: larger }
  EM { font-size: 150% }
  EM { font-size: 1.5em }
</PRE>
</div>

<!-- #include src=properties/font-size-adjust.srb -->

<P>In bicameral scripts, the subjective apparent size (and general
character of a font on screen) is less dependent on its <span class="propinst-font-size">'font-size'</span> than on the value of its <span class="descinst-x-height">'x-height'</span>, or, more usefully, on the
ratio of these two values, called the <span class="index-def" title="z
value"><dfn>z value</dfn></span> (font size divided by x-height). The
lower the z value, the more likely it is that a font at smaller em
sizes will be legible. Inversely, faces with a higher z value will
become illegible more rapidly below a given threshold size than faces
with a lower z value. Straightforward font substitution that relies on
font size alone may lead to illegible characters.

<P>For example, the popular font Verdana has a z value of 1.72; in an
instance of Verdana with <span class="propinst-font-size">'font-size'</span> 100 points, the <span class="descinst-x-height">'x-height'</span> is 58
pt (100/58=1.72). For comparison, Times New Roman has a z value of
2.17. As the z value increases, a font for a bicameral script becomes less legible at a given point size.

<P>This property allows authors to specify a z value for an element
that preserves the <span class="index-inst" title="x-height"><span
class="descinst-x-height">'x-height'</span></span> of the first choice
substitute font. Values have the following meanings:</P>

<dl>
<dt><strong>none</strong>
<dd>Do not preserve the font's x-height.
<dt><span class="index-inst" title="&lt;number&gt;"><span
class="value-inst-number"><strong>&lt;number&gt;</strong></span></span>
<dd>Specifies the z value. This number refers to the ratio of em- to
x-heights of the "first choice" font.  The scaling factor for
available fonts is computed according to the following formula:

<PRE>
   a(z'/z) = b
</PRE>

<P>where:</p>

<PRE>
   a = 'font-size' of first-choice font
   z' = z of available font
   b = 'font-size' to apply to available font
</PRE>
</dl>

<P>The first image below shows several typefaces as rasterized on a
Macintosh at 12-point, together with their z values. No matter what
the typographical family (or nominal base size, unit, or platform),
faces with lower z values look bigger than those with higher z values.
Faces with very high z values are illegible at the size shown.</p>

<P><img src="images/font-adjust-a.gif" alt="Comparison of 12 point fonts"></p>

<P>The next image shows the results of <span
class="propinst-font-size-adjust">'font-size-adjust'</span> with the
fonts shown in the previous image. These fonts' em sizes range all the
way up to 25-point, but appear subjectively to be about as large as
12-point Verdana, whose z value served as the base for scaling. As
adjusted, the legibility characteristics of these faces on screen are
nearly linear across faces. Note that <span
class="propinst-font-size-adjust">'font-size-adjust'</span> tends to
stabilize the horizontal metrics of lines, as well.

<P><img src="images/font-adjust-b.gif" alt="Comparison of font-adjusted fonts"></p>

<H3><a name="font-shorthand">Shorthand font property</a>: the <span class="propinst-font">'font'</span> property</H3>

<!-- #include src=properties/font.srb -->

<P> The <span class="propinst-font">'font'</span> property is
<em>almost</em> (see explanation below) a shorthand property for
setting <span class="propinst-font-style">'font-style'</span>, <span
class="propinst-font-variant">'font-variant'</span>, <span
class="propinst-font-weight">'font-weight'</span>, <span
class="propinst-font-size">'font-size'</span>, <span
class="propinst-line-height">'line-height'</span>, and <span
class="propinst-font-family">'font-family'</span>, at the same place
in the style sheet. <!-- but not font-size-adjust or font-stretch -CL --> The syntax of
this property is based on a traditional typographical shorthand
notation to set multiple properties related to fonts. 

<p>All font related properties are first reset to their initial
values, including those listed in the preceding paragraph plus <span
class="propinst-font-stretch">'font-stretch'</span> and <span
class="propinst-font-size-adjust">'font-size-adjust'</span>. Then,
those properties that are given explicit values in the <span
class="propinst-font">'font'</span> shorthand are set to those
values. For a definition of allowed and initial values, see the
previously defined properties. For reasons of backwards compatibility,
it is not possible to set <span
class="propinst-font-stretch">'font-stretch'</span> and <span
class="propinst-font-size-adjust">'font-size-adjust'</span> to other
than their initial values using the <span
class="propinst-font">'font'</span> shorthand property; instead, set
the individual properties.

<div class="example"><P>
Examples:
<PRE>
  P { font: 12pt/14pt sans-serif }
  P { font: 80% sans-serif }
  P { font: x-large/110% "new century schoolbook", serif }
  P { font: bold italic large Palatino, serif }
  P { font: normal small-caps 120%/120% fantasy }
</PRE>

<P> In the second rule, the font size percentage value ('80%') refers
to the font size of the parent element. In the third rule, the line
height percentage ('110%') refers to the font size of the element
itself.

<P>The first three rules do not specify the <span
class="propinst-font-variant">'font-variant'</span> and <span
class="propinst-font-weight">'font-weight'</span> explicitly, so these
properties receive their initial values ('normal'). Notice that the font family name "new century schoolbook", which contains spaces, is enclosed in quotes. The fourth rule
sets the <span class="propinst-font-weight">'font-weight'</span> to
'bold', the <span class="propinst-font-style">'font-style'</span> to
'italic', and implicitly sets <span
class="propinst-font-variant">'font-variant'</span> to 'normal'.

<P> The fifth rule sets the <span
class="propinst-font-variant">'font-variant'</span> ('small-caps'),
the <span class="propinst-font-size">'font-size'</span> (120% of the
parent's font size), the <span
class="propinst-line-height">'line-height'</span> (120% of the font
size) and the <span class="propinst-font-family">'font-family'</span>
('fantasy'). It follows that the keyword 'normal' applies to the two
remaining properties: <span
class="propinst-font-style">'font-style'</span> and <span
class="propinst-font-weight">'font-weight'</span>. All of these examples set <span
class="propinst-font-variant">'font-variant'</span> and <span
class="propinst-font-weight">'font-weight'</span> to their initial values.
</div>


<P>The following values refer to <span class="index-def" title="system
fonts">system fonts</span>:</p>

<dl>
<dt><strong>caption</strong><!-- strong?? you mean like, bold? -->
<dd>Used for captioned controls (e.g. buttons, drop-downs, etc.).
<dt><strong>icon</strong>
<dd> Used to label icons.
<dt><strong>menu</strong>
<dd> Used in menus (e.g., dropdown menus and menu lists).
<dt><strong>message-box</strong>
<dd> Used in dialog boxes.
<dt><strong>small-caption</strong>
<dd> Used for labeling small controls.
<dt><strong>status-bar</strong>
<dd> Used in window status bars.
</dl>

<P>System fonts may only be accessed as a whole; that is, the font
family, size, weight, style, etc. are all set at the same time.These values may then be altered individually if desired.  If no
font with the indicated characteristics exists on a given platform,
the user agent should either intelligently substitute (e.g., a smaller
version of the 'caption' font might be used for the 'smallcaption'
font), or substitute a user agent default font. As for regular fonts,
if, for a system font, any of the individual properties are not part
of the operating system's available user preferences, those properties
should be set to their initial values.

<P>That is why this property is "almost" a shorthand property: system
fonts can only be specified with this property, not with <span
class="propinst-font-family">'font-family'</span> itself, so <span
class="propinst-font">'font'</span> allows authors to do more than the
sum of its subproperties. However, the individual properties such as <span class="propinst-font-weight">'font-weight'</span> are still given values taken from the system font, which can be independently varied.</p>
<!-- strange glitch, the last two paragraphs occurred twice in slightly different forms - merged and the spare copy deleted -CL -->

<div class="example">
<p>Example:

<pre>
  BUTTON { font: 300 italic 1.3em/1.7em "FB Armada", sans-serif }
  BUTTON P { font: menu }
  BUTTON P EM { font-weight: bolder }
</pre>

<p>If the font used for dropdown menus on a particular system
happened to be 9-point Charcoal, with a weight of 600, then P
elements which were descendants of BUTTON would be displayed as if
this rule were in effect (the values for the remaining properties
being taken from the initial values):

<pre>
  BUTTON P {
    font-style: normal;
    font-variant: normal;
    font-weight: 600;
    font-size: 9pt;
    line-height: normal;
    font-family: Charcoal
  } stuff
</PRE>

</div>


<p>If no font with the indicated characteristics exists on a given
platform, the user agent should either intelligently substitute (e.g.,
a smaller version of the 'caption' font might be used for the
'smallcaption' font), or substitute a user agent default font.


<h3><a name="generic-font-families">Generic font families</a></h3>

<p>Generic font families are a fallback mechanism, a means of
preserving some of the style sheet writer's intent in the worst case
when none of the specified fonts can be selected. For optimum
typographic control, particular named fonts should be used in
style sheets.


<p>Authors may assume that all five generic font families exist in all
CSS implementations (they need not necessarily map to five distinct
actual fonts, in all cases). User agents should provide reasonable
default choices for the generic font families, which express the
characteristics of each family as well as possible within the limits
allowed by the underlying technology.

<p>User agents are encouraged to allow users to select alternative
choices for the generic fonts.

<h4>serif</h4>

<p>Glyphs of serif fonts, as the term is used in CSS, have finishing
strokes, flared or tapering ends, or have actual serifed endings
(including slab serifs). Serif fonts are typically proportionately
spaced. They often display a greater variation between thick and thin
strokes than fonts from the 'sans-serif' generic font family. CSS uses
the term 'serif' to apply to a font for any script, although other
names may be more familiar for particular scripts, such as Mincho
(Japanese), Sung or Song (Chinese), Totum or Kodig (Korean), and any
font which is so described may be used to represent the generic
'serif' family.

<p>Examples of fonts that fit this description include:</p>

<dl>
<dt>Latin fonts
  <dd>Times New Roman, Bodoni,
Garamond, Minion Web, ITC Stone Serif, MS Georgia, Bitstream Cyberbit
<dt>Greek fonts
  <dd>Bitstream Cyberbit
<dt>Cyrillic fonts
  <dd>Adobe Minion Cyrillic, Excelcior Cyrillic Upright,
Monotype Albion 70, Bitstream Cyberbit, ER Bukinst
<dt>Hebrew fonts
  <dd>New Peninim, Raanana, Bitstream Cyberbit
<dt>Japanese fonts
  <dd>Ryumin Light-KL, Kyokasho ICA, Futo Min A101
<dt>Arabic fonts
  <dd>Bitstream Cyberbit
<dt>Cherokee fonts
  <dd>Lo Cicero Cherokee
</dl>

<h4>sans-serif</h4>

<p>Glyphs in sans-serif fonts, as the term is used in CSS, have stroke
endings that are plain -- without any flaring, cross stroke, or other
ornamentation. Sans-serif fonts are typically proportionately
spaced. They often have little variation between thick and thin
strokes, compared to fonts from the 'serif' family. CSS uses the term
'sans-serif' to apply to a font for any script, although other names
may be more familiar for particular scripts, such as Gothic
(Japanese), Kai (Chinese), Pathang (Korean), and any font which is so
described may be used to represent the generic 'sans-serif' family.

<p>Examples of fonts that fit this description include:</p>

<dl>
<dt>Latin fonts
  <dd>MS Trebuchet, ITC Avant Garde Gothic, MS Arial, MS Verdana, Univers,
Futura, ITC Stone Sans, Gill Sans, Akzidenz Grotesk, Helvetica
<dt>Greek fonts
  <dd>Attika, Typiko New Era, MS Tahoma, Monotype Gill Sans 571, Helvetica Greek
<dt>Cyrillic fonts
  <dd>Helvetica Cyrillic, ER Univers, Lucida Sans Unicode, Bastion
<dt>Hebrew fonts
  <dd>Arial Hebrew, MS Tahoma
<dt>Japanese fonts
  <dd>Shin Go, Heisei Kaku Gothic W5
<dt>Arabic fonts
  <dd>MS Tahoma
</dl>

<h4>cursive</h4>

<p>Glyphs in cursive fonts, as the term is used in CSS, generally have
either joining strokes or other cursive characteristics beyond those
of italic typefaces. The glyphs are partially or completely
connected, and the result looks more like handwritten pen or brush
writing than printed letterwork. Fonts for some scripts, such as
Arabic, are almost always cursive. CSS uses the term 'cursive' to
apply to a font for any script, although other names such as Chancery,
Brush, Swing and Script are also used in font names.

<p>Examples of fonts that fit this description include:</p>

<dl>
<dt>Latin fonts
  <dd>Caflisch Script, Adobe Poetica, Sanvito, Ex Ponto, Snell Roundhand,
Zapf-Chancery
<dt>Cyrillic fonts
  <dd>ER Architekt
<dt>Hebrew fonts
  <dd>Corsiva
<dt>Arabic fonts
  <dd>DecoType Naskh, Monotype Urdu 507
</dl>

<h4>fantasy</h4>

<p>Fantasy fonts, as used in CSS, are primarily decorative while
still containing representations of characters (as opposed to Pi or
Picture fonts, which do not represent characters).

<dl>
<dt>Latin fonts
  <dd>Alpha Geometrique, Critter, Cottonwood, FB Reactor, Studz
</dl>


<h4>monospace</h4>

<p>The sole criterion of a monospace font is that all glyph
representations have the same fixed width. This can make some scripts,
such as Arabic, look most peculiar. The effect is similar to a manual
typewriter, and is often used for computer code.

<p>Examples of fonts which fit this description include:

<dl>
<dt>Latin fonts
  <dd>Courier, MS Courier New, Prestige, Everson Mono
<dt>Greek Fonts
  <dd>MS Courier New, Everson Mono
<dt>Cyrillic fonts
  <dd>ER Kurier, Everson Mono
<dt>Japanese fonts
  <dd>Osaka Monospaced
<dt>Cherokee fonts
  <dd>Everson Mono
</dl>

<H2><a name="font-selection">Font selection</a></h2>

<P>The second phase of the CSS2 font mechanism concerns the user
agent's selection of a font based on author-specified font properties,
available fonts, etc. The details of the <a href="#algorithm">font
matching algorithm</a> are provided below.

<P>There are four possible font selection actions:
matching, intelligent matching, synthesis, and download.</p>

<dl>
<dt><span class="index-def" title="name matching"><dfn><strong>font name
matching</strong></dfn></span>
<dd> In this case, the user agent uses an
existing, accessible font that has the same family name as the
requested font. (Note that the appearance and the metrics might not
necessarily match, if the font that the document author used and the
font on the client system are from different foundries). The matching
information is restricted to the CSS font properties, including the
family name.

<dt><span class="index-def" title="intelligent font
	    matching"><dfn><strong>intelligent font
matching</strong>
</dfn></span>
<dd>In this case, the user agent uses an existing, accessible font that is
the closest match in appearance to the requested font. (Note that the
metrics might not match exactly). The matching information includes
information about the kind of font (text or symbol), nature of serifs,
weight, cap height, x height, ascent, descent, slant, etc.

<dt><span class="index-def" title="font synthesis"><dfn>
<strong>font synthesis</strong></dfn></span>
<dd> In this case, the user agent creates a font that is not
only a close match in appearance, but also matches the metrics of the
requested font. The synthesizing information includes the matching
information and typically requires more accurate values for the
parameters than are used for some matching schemes. In particular,
synthesis requires accurate width metrics and character to glyph
substitution and position information if all the layout characteristics of
the specified font are to be preserved.

<dt><span class="index-def" title="font download">
<dfn><strong>font download</strong></dfn></span>
<dd>Finally, the user agent may retrieve a font
over the Web. This is similar to the process of fetching images,
sounds, or applets over the Web for display in the current document,
and likewise can cause some delay before the page can be displayed.
</DL>

<p><span class="index-def" title="progressive rendering"><dfn>Progressive
rendering</dfn></span> is a combination of download and one of the
other methods; it provides a temporary substitute font (using name
matching, intelligent matching, or synthesis) to allow content to be
read while the requested font downloads. Once the real font has been
successfully downloaded, it replaces the
temporary font, hopefully without the need to reflow.

<p>In CSS2, authors may specify which, if any, of these mechanisms
should be invoked by the user agent if a particular font is not
immediately available. Authors add font descriptions to style sheets
for this purpose.  A <span class="index-def" title="font
description"><dfn>font description</dfn></span> is a set of <span
class="index-def" title="font descriptor|descriptor::for font"><dfn>font
descriptors</dfn></span>, individual pieces of information about a
font, possibly including a URI describing the font's location on the
Web.

<div class="note"><P>
<em><strong>Note.</strong>
Progressive rendering requires metric information about the font in
order to avoid re-layout of the content when the actual font has been
loaded and rendered. This metric information is sufficiently verbose
that it should only be specified at most once per font in a document.
</em>
</div>


<h3><span class="index-inst" title="font description"> <a
name="font-descriptions">Font Descriptions</a></span> and
@font-face</h3>

<P>The font description provides the bridge between an author's font
specification and the <span class="index-def" title="font
data"><dfn>font data</dfn></span>, which is the data needed to format
text and to render the glyph representations to which the characters
map - the actual scalable outlines or bitmaps needed to render the
glyph representations to which the characters map. Fonts are
<em>referenced</em> by style sheet properties.

<P>The font description is used to select the relevant font data. The
font description contains descriptors that provide the location of the
font data on the Web, and/or characterize that font data. The font
descriptors are also needed to match the style sheet font properties
to particular font data. The level of detail of a font description can
vary from just the name of the font up to a list of glyph
representation widths. This data is a subset of the glyph
representation metrics contained in the font.

<P>Font descriptors may be classified into three types:</p>

<ol>
<li>those that provide the link between the CSS usage of the font and
the font description (these have the same names as the corresponding
CSS font properties),

<li>the URI for the location of the font data,

<li>those that further characterize the font, to provide a link
	  between the font description and the font data.
</ol>


<p>All font descriptions are specified via a <span class="index-def"
title="@font-face"><em>@font-face</em></span>
at-rule. The general form of this rule is:

<!-- check wd-font description about at-rules in general is somewhere in CSS2 -->

<P><tt>@font-face { <span class="value-inst-font-description">&lt;font-description&gt;</span> }</tt>

<p>where the <span class="index-def" title="&lt;font-description&gt;::definition of"><a name="value-def-font-description">&lt;font-description&gt;</a></span> has the form:

<pre>
descriptor: value;
descriptor: value;
[...]
descriptor: value;
</pre>

<p>Each <span class="index-inst" title="@font-face"> @font-face</span>
rule specifies a value for every font descriptor, either implicitly or
explicitly. Those not given explicit values in the rule take the
initial value listed with each descriptor in this specification. These
descriptors apply solely within the context of the @font-face rule in
which they are defined, and do not apply to document language
elements. Thus, there is no notion of which elements the descriptors
apply to, or whether the values are inherited by child elements.

<P>The available font descriptors are described in later sections of
this specification.

<div class="html-example"><P>
<p>For example, here the font 'Robson Celtic' is defined and
referenced in a style sheet contained in an HTML document.

<PRE>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Font test&lt;/TITLE&gt;
    &lt;STYLE TYPE="text/css" MEDIA="screen, print"&gt;
      @font-face {
        font-family: "Robson Celtic";
        src: url(http://site/fonts/rob-celt)
      }
      H1 { font-family: "Robson Celtic", serif }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;

  &lt;BODY&gt;
    &lt;H1&gt; This heading is displayed using Robson Celtic&lt;/H1&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<p>The style sheet (in the STYLE element) contains a CSS rule that
sets all H1 elements to use the 'Robson Celtic' font family.

<P>A CSS1 implementation will search the client for a font whose
family name and other properties match 'Robson Celtic' and, if it
fails to find it, will use the UA-specific fallback serif font (which
is <a href="#propdef-font-family">defined to exist</a>).

<p>A user agent implementing CSS2 will first examine <span
class="index-inst" title="@font-face"> @font-face</span> rules in
search of a font description defining 'Robson Celtic'. This example
contains a rule which matches. Although this rule doesn't contain much
font data, it does have a URI where the font can be retrieved for
rendering this document. Downloaded fonts should not be made available
to other applications. If no matching @font-face is found, the user
agent will attempt the same match as a user agent implementing CSS1.


<p>Note that if the font 'Robson Celtic' <em>had</em> been installed on
the client system, this would cause the UA to construct an
@font-face rule for the installed copy as described in the
section on the <a href="#algorithm">font matching
algorithm</a>. The installed copy would have been matched before the
downloadable font in the example above.
</div>

<p>CSS1 implementations, which do not understand the @font-face rule,
will encounter the opening curly brackets and will <span
class="index-inst" title="ignore"><a href="syndata.html#ignore">ignore</a></span>
forward until the matching closing curly brackets. This at-rule
conforms with the <a href="syndata.html#syntax">forward-compatible
parsing</a> requirement of CSS. Parsers may <span class="index-inst"
title="ignore"><a href="syndata.html#ignore">ignore</a></span> these rules without
error.

<p>Also, any descriptors that are not recognized or useful to the
user agent should be <span class="index-inst" title="ignore"><a
href="syndata.html#ignore">ignored</a></span>. Future versions of CSS
may allow optional descriptors for the purpose of better font
substitution, matching, or synthesis.</p>

<H3><A NAME="select">Descriptors for Selecting a Font</a>: <span
class="descinst-font-family">'font-family'</span>, <span
class="descinst-font-style">'font-style'</span>, <span
class="descinst-font-variant">'font-variant'</span>, <span
class="descinst-font-weight">'font-weight'</span>, and <span
class="descinst-font-size">'font-size'</span>
</h3>

<p>The following descriptors have the same names as the corresponding
CSS2 font properties, and take a single value or comma-separated list
of values.

<p>The values within that list are exactly the same as those specified
for CSS2. If there is a single value, that is the value that must be
matched. If there is a list, any list item constitutes a match. If the
descriptor is omitted from the @font-face, the initial value is used.

<!-- #include src=descriptors/font-family.srb -->

<p>This is the descriptor for the <a href="#font-family">font family
name</a> of a font and takes the same values as the <span
class="propinst-font-family">'font-family'</span> property.

<!-- #include src=descriptors/font-style.srb -->

<p>This is the descriptor for the style of a font and takes the same
values as the <span class="propinst-font-style">'font-style'</span>
property, except that a comma-separated list is permitted.

<!-- #include src=descriptors/font-variant.srb -->

<p>This is the CSS indication of whether this face is the small-caps
variant of a font. It takes the same values as the <span
class="propinst-font-variant">'font-variant'</span> property except
that a comma-separated list is permitted.

<div class="note"><P>
<em><strong>Note.</strong> Cyrillic <i>pryamo&#301;</i>
faces may be labeled with a <span
class="descinst-font-variant">'font-variant'</span>
of small-caps, which will give better consistency with Latin faces
(and the companion <i>kursiv</i> face labeled with <span
class="descinst-font-style">'font-style'</span> italic for the
same reason).
</em>
</div>

<!-- #include src=descriptors/font-stretch.srb -->

<p>This is the CSS indication of the condensed or expanded nature of the face relative to others in the same font family. It takes the same values as the <span class="propinst-font-stretch">'font-stretch'</span> property except that:</p>

<ul><li>relative keywords (wider, narrower) are not permitted
<li>a comma-separated list is permitted
<li>The keyword 'all' is permitted
</ul>

<!-- #include src=descriptors/font-weight.srb -->

<p>This is the descriptor for the weight of a face relative to others
in the same font family. It takes the same values as the <span
class="propinst-font-weight">'font-weight'</span> property with three
exceptions:</p>

<ol>
<li>relative keywords (bolder, lighter) are not permitted.
<li>a comma-separated list of values is permitted, for fonts which contain multiple weights.
<li>an additional keyword, 'all' is permitted, which means that the font will match for all possible weights; either because it contains multiple weights, or because that face only has a single weight.
</ol>


<!-- #include src=descriptors/font-size.srb -->

<p>This is the descriptor for the sizes provided by this font. Only <a
href="syndata.html#absrel-units">absolute length</a> units are
permitted, in contrast to the <span
class="propinst-font-size">'font-size'</span> property, which allows
both relative and absolute lengths and sizes. A comma-separated list
of absolute lengths is permitted.


<p>The initial value of 'all' is suitable for scalable fonts, so this
descriptor will only be useful in an @font-face for bitmap fonts.


<H3><A NAME="dataqual">Descriptors for Font Data Qualification</a>: <span
class="descinst-unicode-range">'unicode-range'</span></H3>

<P>
The following descriptor is optional within a font definition, but is
used to avoid checking or downloading a font that does not have
sufficient glyphs to render a particular character.

<!-- #include src=descriptors/unicode-range.srb -->

<P>This is the descriptor for the <!-- need xref to syndata for unicode range --> range of ISO 10646 characters
covered by the font.  <!-- move this part to characteristics from here down -->Since this is sparse (most fonts do not cover
the whole of ISO 10646) this descriptor lists blocks or ranges which
do have <em>some</em> coverage (no promise is made of complete
coverage). This method is extensible to future allocation of
characters in Unicode, without change of syntax and without
invalidating existing content.

<p>The values of <span class="index-def" title="&lt;urange&gt;::definition of"><a name="value-def-urange">&lt;urange&gt;</a></span>
are expressed using hexadecimal numbers prefixed by "U+",
corresponding to character code positions in ISO 10646 ([[ISO10646]]).

<!--- stop here, rest is CSS syntax so belongs here -->

<P>For example, <tt>U+05D1</tt> is the ISO 10646
character 'Hebrew letter bet'. For values outside the Basic
Multilingual Plane (BMP), additional leading digits corresponding to
the plane number are added, also in hexadecimal, like this:
<tt>U+A1234</tt> which is the character on Plane 10 at hexadecimal
code position 1234. At the time of writing no characters had been
assigned outside the BMP. Leading zeros (for example, 0000004D) are
valid, but not required.

<p>The initial value (i.e., the value used when no value is given in
the style sheet) covers not only the entire Basic Multilingual Plane
(BMP), which would be expressed as U+0-FFFF, but also the whole
repertoire of ISO 10646. Thus, the initial value says that the font
may have glyph representations for characters anywhere in ISO 10646.
Specifying a value for <span
class="descinst-unicode-range">'unicode-range'</span> provides
information to make searching efficient, by declaring a constrained
range in which the font may have glyph representations for
characters. The font need not be searched for characters outside this
range.

<p>Values may be written with any number of digits. For single
numbers,  the character '?' is assumed to mean 'any value' which
creates a <em>range</em> of character positions. Thus, using a
<em>single number</em>:</p>

<dl><dt>unicode-range: U+20A7 <dd>no wild cards - it indicates a
single character position (the Spanish peseta currency
symbol)

<dt>unicode-range: U+215? <dd>one wild card, covers the range 2150 to
215F (the fractions)

<dt>unicode-range: U+00?? <dd>two wild cards, covers the range 0000 to
00FF (Latin-1)

<dt>unicode-range: U+E?? <dd>two wild cards, covers 0E00 to 0EFF
(the Lao script)
</dl>

<p>A <em>pair of numbers</em> in this format can be combined with the
dash character to indicate larger ranges. For example:</p>

<dl>

<dt>unicode-range:  U+AC00-D7FF

<dd>the range is AC00 to D7FF   (the Hangul Syllables area)
</dl>

<p>Multiple, discontinuous ranges can be specified, separated by a
comma. As with other comma-separated lists in CSS, any <a href="syndata.html#whitespace">whitespace</a>
before or after the comma is <span class="index-inst" title="ignore"><a
href="syndata.html#ignore">ignored.</a></span> For example:</p>

<dl><dt>unicode-range:  U+370-3FF,  U+1F??

<dd> This covers the range 0370 to 03FF (Modern Greek) plus 1F00 to
1FFF (Ancient polytonic Greek).

<dt>unicode-range: U+3000-303F, U+3100-312F, U+32??, U+33??, U+4E00-9FFF,
U+F9000-FAFF, U+FE30-FE4F

<dd>Something of a worst case in terms of verbosity, this very
precisely indicates that this (extremely large) font contains only
Chinese characters from ISO 10646, without including any
characters that are uniquely Japanese or Korean. The range is 3000 to
303F (CJK symbols and punctuation) plus 3100 to 312F (Bopomofo) plus
3200 to 32FF (enclosed CJK letters and months) plus 3300 to 33FF (CJK
compatibility zone) plus 4E00 to 9FFF (CJK unified Ideographs) plus
F900 to FAFF (CJK compatibility ideographs) plus FE30 to FE4F (CJK
compatibility forms).

<p>A more likely representation for a typical Chinese font would be:

<p>unicode-range: U+3000-33FF, U+4E00-9FFF</p>

<dt>unicode-range: U+11E00-121FF

<dd>This font covers a proposed registration for Aztec pictograms,
covering the range 1E00 to 21FF in plane 1.

<dt>unicode-range: U+1A00-1A1F

<dd>This font covers a proposed registration for Irish Ogham
covering the range 1A00 to 1A1F
</dl>

<H3><A NAME="unitsperem">Descriptor for Numeric Values</a>: <span
class="descinst-units-per-em">'units-per-em'</span></H3>

<P>The following descriptor specifies the number of "units" per em;
these units may be used by several other descriptors to express
various lengths, so <span
class="descinst-units-per-em">'units-per-em'</span> is required if
other descriptors depend on it.

<!-- #include src=descriptors/units-per-em.srb -->

<!-- Is this the definition of em-width? -IJ -->
<!-- no, it is the definition of how the em-width is subdivided to form a coordinate system for describing the shape of each glyph -CL -->

<p>This is the descriptor for the number of the <a
href="#emsq">coordinate units on the em square</a>, the
size of the design grid on which glyph representations are laid out.

<H3><A NAME="referencing">Descriptor for Referencing</a>: <span
class="descinst-src">'src'</span></H3>

<p>This descriptor is required for referencing actual font data, whether
downloadable or locally installed.

<!-- #include src=descriptors/src.srb -->

<p>This is a <!-- where is the font characteristic --> prioritized, comma-separated list of URIs and/or locally
installed font face names. The URI points to the font data itself.
This is required if the WebFont is to be downloaded. The font resource
may be a subset of the source font, for example it may contain only the glyphs needed for the current page or for a set of pages.
<!-- move some of this discussion to characteristics section -->

<p>As with <a href="syndata.html#uri">other URIs in CSS</a>, the URI may be partial, in which case it is resolved relative to the location of the style sheet containing the <span class="index-inst" title="@font-face"> @font-face</span>.

<p>The URI may be followed by an optional hint regarding the format of font resource to be found at that URI, and this information should be used by clients to avoid following links to fonts in formats they are unable to use. As with any hypertext reference, there may be other formats available, but the client has a better idea of what is likely to be there, in a more robust way than trying to parse filename extensions in URIs.

<p>The format contains a comma-separated list of strings
that denote well-known font formats. The user agent will recognize the name of font formats that it supports and will avoid downloading fonts in formats that it does not recognize.

<p>An initial list of format strings defined by this specification and representing formats likely to be used by implementations on various platforms is:</p>

<table>
<tr><td>"truedoc-pfr"<td>TrueDoc&trade; Portable Font Resource (.pfr)
<tr><td>"embedded-opentype"<td>Embedded OpenType (.eot)
<tr><td>"type-1"<td>PostScript&trade; Type 1 (.pfb, .pfa)
<tr><td>"truetype"<td>TrueType (.ttf)
<tr><td>"opentype"<td>OpenType (.ttf), including TrueType Open.
<tr><td>"truetype-gx"<td>TrueType with GX extensions
<tr><td>"speedo"<td>Speedo
<tr><td>"intellifont"<td>Intellifont
</table>


<p> The <span class="index-def" title="&lt;font-face-name&gt;::definition
of"><a name="value-def-font-face-name">&lt;font-face-name&gt;</a></span>
is the full font name of a locally installed font. The <span
class="index-def" title="full font name"><dfn>full font
name</dfn></span> is the name of the font as reported by the operating
system and is the name most likely to be used in reader style sheets,
browser default style sheets or possibly author style sheets on an
intranet.  Adornments such as bold, italic, underline are often used to
select the appropriate font within a font family. For <a
href="#aname">more information about full font names</a> please consult
the notes below. <!-- only used in src on local() -->

<div class="example"><P>
Examples:

<dl>

  <dt><tt>src: url(http://foo/bar)</tt> <dd>a full URI and no
  information about the font format(s) available there

  <dt><tt>src: local(BT Century 751 No. 2 Semi Bold Italic)</tt>
  <dd>references a particular face of a locally installed font

  <dt><tt>src: url(../fonts/bar) format("truedoc-pfr")</tt> <dd>a partial URI
  which has a font available in TrueDoc format

  <dt><tt>src: url(http://cgi-bin/bar?stuff) format("opentype", "intellifont")</tt> <dd>a full URI, in this case to a script, which
  can generate two different formats - OpenType and Intellifont

  <dt><tt>src: local(T-26 Typeka Mix), url(http://site/magda-extra)
  format("type-1")</tt> <dd>two alternatives are given, firstly a locally
  installed font and secondly a downloadable font available in Type 1
  format.
</dl>
</div>

<P>Access to locally installed fonts is via the <span
class="value-inst-font-face-name">&lt;font-face-name&gt;</span>.  The
font face name is not truly unique, nor is it truly platform or font
format independent, but at the moment it is the best way to identify
font data. The use of the font face name can be made more accurate by
providing an indication of the glyph complement required. This may be
done by indicating the range of ISO 10646 character positions for
which the font provides some glyph representations (see <span
class="descinst-unicode-range">'unicode-range'</span>).

<H3><A NAME="matching">Descriptors for Matching</a>: <span
class="descinst-panose-1">'panose-1'</span>,
<span class="descinst-stemv">'stemv'</span>,
<span class="descinst-stemh">'stemh'</span>,
<span class="descinst-slope">'slope'</span>,
<span class="descinst-cap-height">'cap-height'</span>,
<span class="descinst-x-height">'x-height'</span>,
<span class="descinst-ascent">'ascent'</span>, and
<span class="descinst-descent">'descent'</span>
</h3>

<P>These descriptors are optional for a CSS2 definition,
but may be used if intelligent font matching or font size adjustment is desired by the author.

<!-- #include src=descriptors/panose-1.srb -->

<p>This is the descriptor for the <a href="#pan1">Panose-1 number</a>
and consists of ten decimal numbers, separated by <a
href="syndata.html#whitespace">whitespace</a>. A comma-separated list
is not permitted for this descriptor, because the <span
class="index-inst" title="panose-1">Panose-1</span> system can
indicate that a range of values are matched. The initial value is zero
for each PANOSE digit, which means "any"; all fonts will match the
Panose number if this value is used.


<!-- #include src=descriptors/stemv.srb -->

<p>This is the descriptor for the <a href="#stemv">vertical stem
width</a> of the font. If the value is undefined, the descriptor is
not used for matching. If this descriptor is used, the
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/stemh.srb -->

<p>This is the descriptor for the <a
href="#stemh">horizontal stem width</a> of the font. If the
value is undefined, the descriptor is not used for matching. If this
descriptor is used, the <a href="#unitsperem">'units-per-em'</a>
descriptor must also be used.

<!-- #include src=descriptors/slope.srb -->

<p>This is the descriptor for the <a href="#slope">vertical stroke
angle</a> of the font.

<!-- #include src=descriptors/cap-height.srb -->

<p>This is the descriptor for the number of the <a
href="#cap">height of uppercase glyph representations</a> of
the font. If the value is undefined, the descriptor is not used for
matching. If this descriptor is used, the <a
href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/x-height.srb -->

<p>This is the descriptor for the <a href="#xht">height of
lowercase glyph representations</a> of the font.  If the value is
undefined, the descriptor is not used for matching. If this descriptor
is used, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used. This descriptor can be very useful when using the <span class="propinst-font-size-adjust">'font-size-adjust'</span> property, because computation of the z value of candidate fonts requires both the font size and the x-height; it is therefore recommended to include this descriptor.

<!-- #include src=descriptors/ascent.srb -->

<p>This is the descriptor for the <a href="#ascent">maximum
unaccented height</a> of the font.  If the value is undefined, the
descriptor is not used for matching. If this descriptor
is used, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.

<!-- #include src=descriptors/descent.srb -->

<p>This is the descriptor for the <a href="#descent">Maximum
unaccented depth</a> of the font.  If the value is undefined, the
descriptor is not used for matching. If this descriptor
is used, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.


<H3><A NAME="synthesizing">Descriptors for Synthesis</a>: <span
class="descinst-widths">'widths'</span> and <span
class="descinst-definition-src">'definition-src'</span></H3>

<P>
Synthesizing a font means, at minimum, matching the width metrics of
the specified font. Therefore, for synthesis, this metric information
must be available. Similarly, progressive rendering requires width
metrics in order to avoid reflow of the content when the actual font
has been loaded. Although the following descriptors are optional for a
CSS2 definition, some are required if synthesizing (and progressive
rendering) is desired by the author. Should the actual font become
available, the substitute should be replaced by the actual font. Any
of these descriptors that are present will be used to provide a
better or faster approximation of the intended font.

<p>Of these descriptors, the most important are the <span
class="descinst-widths">'widths'</span> descriptor and <span
class="descinst-bbox">'bbox'</span> which are used to prevent text
reflow should the actual font become available.  In addition, the
descriptors in the <a href="#matching">set of descriptors required for
matching</a> can be used to provide a better synthesis of the actual
font appearance.

<!-- #include src=descriptors/widths.srb -->

<p> This is the descriptor for the <a href="#lrwidth">glyph
representation widths</a>.  The value is a comma-separated list of
<span class="value-inst-urange">&lt;urange&gt;</span> values each
followed by one or more glyph representation widths.  If this
descriptor is used, the <a href="#unitsperem">'units-per-em'</a>
descriptor must also be used.

<div class="example"><P>
For example:

<pre>
  widths: U+4E00-4E1F 1736 1874 1692
</pre>

<p>In this instance a range of 32 characters is given, from 4E00 to
4E1F. The glyph corresponding to the first character (4E00) has a
width of 1736, the second has a width of 1874 and the third,
1692. Because not enough widths have been provided, the last width
replicates to cover the rest of the specified range. If too many
widths are provided, the extras are <span class="index-inst"
title="ignore"><a href="syndata.html#ignore">ignored.</a></span>

</div>

<p>If the <span
class="value-inst-urange">&lt;urange&gt;</span> is omitted, a
range of U+0-7FFFFFFF is assumed which covers all characters and their
glyph representations

<p>This descriptor cannot describe multiple glyphs corresponding to a
single character, or ligatures of multiple characters. Thus, this
descriptor can <em>only</em> be used for scripts which do not have
contextual forms or mandatory ligatures. It is nevertheless useful in
those situations. Scripts which require a one-to-many or many-to-many
mapping of characters to glyphs cannot at present use this descriptor
to enable font synthesis although they can still use font downloading
or intelligent matching.

<!-- #include src=descriptors/bbox.srb -->

<P>This is the descriptor for the <a href="#bbox">maximal bounding
box</a> of the font. The value is a comma-separated list of exactly
four numbers specifying, in order, the lower left x, lower left y,
upper right x, and upper right y of the bounding box for the complete
font.

<!-- #include src=descriptors/definition-src.srb -->

<p>The font descriptors may either be within the font definition in
the style sheet, or may be provided within a separate <span
class="index-def" title="font definition resource"><em>font definition
resource</em></span> identified by a URI. The latter approach can
reduce network traffic when multiple style sheets reference the same
fonts.

<P>If a font descriptor is duplicated, the last occurring descriptor
wins and the rest must be ignored.

<P>Having the font descriptors separate from the font data has a
benefit beyond being able to do font selection and/or
substitution. The data protection and replication restrictions on the
font descriptors may be much weaker than on the full font data. Thus,
it may be possible to locally install the font definition, or at least
to have it in a local cache. This allows the abbreviated form of
font definition within documents, but would not require accessing the
full font definition over the Web more than once per named font.


<H3><A NAME="alignment">Descriptors for Alignment</a>:
<span class="descinst-baseline">'baseline'</span>,
<span class="descinst-centerline">'centerline'</span>,
<span class="descinst-mathline">'mathline'</span>,
and <span class="descinst-topline">'topline'</span>
</H3>

<p>These optional descriptors are used to align runs of different
scripts with one another.

<!-- #include src=descriptors/baseline.srb -->

<p>This is the descriptor for the <a href="#bline">lower baseline</a>
of a font.  If this descriptor is given a non-default (non-zero)
value, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.


<!-- #include src=descriptors/centerline.srb -->

<p>This is the descriptor for the <a href="#cline">central
baseline</a> of a font. If the value is undefined, the UA may employ
various heuristics such as the midpoint of the ascent and descent
values. If this descriptor is used, the
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/mathline.srb -->

<p>This is the descriptor for the <a href="#mline">mathematical
baseline</a> of a font. If undefined, the UA may use the center
baseline. If this descriptor is used, the <a
href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/topline.srb -->

<p>This is the descriptor for the <a href="#tline">top
baseline</a> of a font. If undefined, the UA may use an approximate
value such as the ascent. If this descriptor is used, the
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.</p>

<H3>Examples</h3>

<div class="example">
<p>Given the following list of fonts:

<dl><dt>Swiss 721 light        <dd>light & light italic
    <dt>Swiss 721              <dd>roman, bold, italic, bold italic
    <dt>Swiss 721 medium       <dd>medium & medium italic
    <dt>Swiss 721 heavy        <dd>heavy & heavy italic
    <dt>Swiss 721 black        <dd>black, black italic, & black #2
	<dt>Swiss 721 Condensed  <dd>roman, bold, italic, bold italic
	<dt>Swiss 721 Expanded      <dd>roman, bold, italic, bold italic
</dl>

<pre>
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721lt.pfr); <!-- Swiss 721 light -->
    font-style: normal, italic;
    font-weight: 200;
}
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721.pfr); <!-- The regular Swiss 721 -->
}
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721md.pfr); <!-- Swiss 721 medium -->
    font-style: normal, italic;
    font-weight: 500;
}
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721hvy.pfr); <!-- Swiss 721 heavy -->
    font-style: normal, italic;
    font-weight: 700;
}
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721blk.pfr); <!-- Swiss 721 black -->
    font-style: normal, italic;
    font-weight: 800,900; <!-- note the interesting problem that
                               the 900 weight italic doesn't exist -->
}
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721.pfr); <!-- The condensed Swiss 721 -->
	font-stretch: condensed;
}
@font-face {
    font-family: "Swiss 721";
    src: url(swiss721.pfr); <!-- The expanded Swiss 721 -->
	font-stretch: expanded;
}

</pre>
</div>

<H2><a name="font-descriptors">Font Characteristics</a></H2>

<h3><a name=universal>Introducing Font Characteristics</a></h3>

<p>In this section are listed the font characteristics that have been
found useful for client-side font matching, synthesis, and download
for heterogeneous platforms accessing the Web. The data may be useful
for any medium that needs to use fonts on the Web by some other means
than physical embedding of the font data inside the medium.

<p>These characteristics are used to characterize fonts. They are not
specific to CSS or to style sheets. In CSS, each characteristic is
described by a font descriptor. These definitions could also be
mapped onto VRML nodes, or CGM Application Structures, or a Java API,
or alternative style sheet languages. Fonts retrieved by one medium and
stored in a proxy cache could be re-used by another medium, saving
download time and network bandwidth.

<p>A non-exhaustive list of examples of such media includes:</p>

<ul>
<li>2-D vector formats
<ul>
  <li>Computer Graphics Metafile
  <li>Simple Vector Format
</ul>
<li>3-D graphics formats
<ul>
  <li>VRML
  <li>3DMF
</ul>
<li>Object embedding technologies
<ul>
  <li>Java
  <li>Active-X
  <li>Obliq
</ul>
</ul>


<h3><a name=aname>Full font name</a></h3>

<p>This is the full name of a particular face of a font family. It
typically includes a variety of non-standardized textual qualifiers or
<em>adornments</em> appended to the font family name. It may also
include a foundry name or abbreviation, often prepended to the font
family name. It is only used in the 'src' descriptor, to refer to
locally installed fonts, because the format of the adorned name can
vary from platform to platform.

<p>The font family name of the TrueType
font and the PostScript name may differ in the use of space
characters, punctuation, and in the abbreviation of some words (e.g.,
to meet various system or printer interpreter constraints on length of
names).  For example, spaces are not allow in a PostScript name, but
are common in full font names. The TrueType name table can also
contain the PostScript name, which has no spaces. <!-- this is not
really very satisfactory, but these strings are only used for local fonts in author and browser-default style sheets -CL -->


<h3><a name=emsq>Coordinate units on the em square</a></h3>


<p>Certain values, such as width metrics, are expressed in units that
are relative to an abstract square whose height is the intended
distance between lines of type in the same type size. This square is
called the <span class="index-def" title="em square"><a
name="em-square"><dfn>em square</dfn></a></span> and it is the design grid on which the glyph outlines are defined. The value of this
descriptor specifies how many units the EM square is divided into.
The valid range is 16 to 16384 units per EM square. Common values are
250 (Intellifont), 1000 (Type 1) and 2048 (TrueType, TrueType GX and OpenType).

<p>If this value is not specified, it becomes impossible to know what
any font metrics mean. For example, one font has lowercase glyph
representations of height 450; another has smaller ones of height 890!
The numbers are actually fractions; the first font has 450/1000 and
the second has 890/2048 which is indeed smaller.

<p>For Type 1 fonts, this value may be obtained from the
<tt>FontMatrix</tt> entry in the font dictionary. For TrueType fonts,
this value may be obtained from the <tt>unitsPerEm</tt> entry in the
<tt>head</tt> table. For Intellifont fonts, this value is contained in
the font attribute file.

<h3><a name=cline>Central Baseline</a></h3>

<p>This gives the position in the <span class="index-inst" title="em
square"><a href="#em-square">em square</a></span> of the central
baseline. The central baseline is used by ideographic scripts for
alignment, just as the bottom baseline is used for Latin, Greek and
Cyrillic scripts.

<p>For TrueType GX fonts, this value may be obtained from the TrueType
GX <tt>bsln</tt> table ([[-TRUETYPEGX]]). Within this table, the
<tt>ideographic centered baseline</tt> may be used for stretches of
predominantly ideographic characters and the <tt>ideographic low
baseline</tt> is more suitable for ideographic characters in a run of
predominantly Latin, Greek or Cyrillic characters.

<h3><a name="cmap">Font encoding tables</a></h3>


<!-- Clarify what is encoded -IJ -->
<P>Either explicitly or implicitly, each font has a table associated
with it, the <span class="index-def" title="font encoding
table"><EM>font encoding table</EM></span>, that tells what character
each glyph represents. In "Type 1 fonts", the table is referred to as
an <span class="index-def" title="encoding vector"><EM>encoding
vector</EM></span>.

<P> In fact, many fonts contain several glyphs for the same
character. Which of those glyphs should be used depends either on the
rules of the language, or on the preference of the designer.

<P> In Arabic, for example, all letters have four (or two) different
shapes, depending on whether the letter is used at the start of a
word, in the middle, at the end, or in isolation. It is the same
character in all cases, and thus there is only one character in the
HTML document, but when printed, it looks different each time.

<P> There are also fonts that leave it to the graphic designer to
choose from among various alternative shapes provided. Unfortunately,
CSS2 doesn't yet provide the means to select those
alternatives. Currently, it is always the default shape that is chosen
from such fonts.


<h3><a name=family>Font family name</a></h3>

<p>Specifies the family name portion of the font face name. For
example, the family name for Helvetica-Bold is Helvetica and the
family name of ITC Stone Serif Semibold Italic is ITC Stone
Serif. Some systems treat adornments relating to condensed or expanded
faces as if they were part of the family name. <!-- whole system is
too flat anyway - is Adobe Stone Serif the same family? Is Minion
Cyrillic the same family as Minion? -->

<p>For Type 1 fonts, this value may be obtained from the
<tt>FamilyName</tt> entry in the FontInfo dictionary. For TrueType and
OpenTypefonts, it may be obtained from the <tt>name</tt> table.

<!-- add the naming issues stuff here -->
<!-- done, here they are -CL -->


<p>The name of the font definition is important because it is the link
to any locally installed fonts. It is important that the name be
robust, both with respect to platform and application independence. For
this reason, the name should be one which is not application or
language specific.

<P>
The ideal solution would be to have a name which uniquely identifies
each collection of font data. This name does not exist in current
practice for font data. Fonts with the same face name can vary over a
number of descriptors. Some of these descriptors, such as different
complements of glyphs in the font, may be insignificant if the needed
glyphs are in the font. Other descriptors, such as different width
metrics, make fonts with the same name incompatible. It does not seem
possible to define a rule that will always identify incompatibilities,
but will not prevent the use of a perfectly suitable local copy of the
font data with a given name. Therefore, only the range of ISO 10646
characters will be used to qualify matches for the font face name.

<P>Since a prime goal of the font face name in the font definition is
to allow a user agent to determine when there is a local copy of the
specified font data, the font face name must be a name which will be
in all legitimate copies of the font data. Otherwise, unnecessary Web
traffic may be generated due to missed matches for the local copy.

<p>For TrueType and OpenType fonts, this value may be obtained from
the <tt>full font name</tt> from the <tt>name</tt> table.

<p>For Type 1 fonts, this value may be obtained from the PostScript
language name; the name which, in a PostScript language program, is
used as an operand of the findfont operator.  It is the name
associated with the font by a definefont operation.  This is usually
the value of the FontName entry in the font dictionary. For more
information, see the PostScript Language Reference
Manual ([[-POSTSCRIPT]]), Section 5.2.
</P>

<p>Multiple Master Type 1 fonts allow specifying various design
dimensions (e.g., weight, such as light to extra-bold, and width, such
as condensed to expanded). <!-- IJ: Insert link here to MMT1 -->
Coordinates along these design dimensions are specified by numbers,
and are appended as a suffix to the base font name. To specify the
appearance of the font, numeric values must be supplied for each
design dimension of the multiple master font.  A completely specified
multiple master font is referred to as an instance of the multiple
master font.

<!-- Space replacement not a strict rule -IJ -->
<!-- yes it is if we say so -CL -->
<p>The PostScript language name used for a Multiple Master Type 1 is
the name of the instance.  If the name contains spaces between the axis values (such as
&quot;MinionMM 366 465 11&quot;), these spaces are replaced with
underscores.  For example, the base font name here is TektonMM and the
two dimensions specified have values of 200 and 300:</p>

<pre> TektonMM_200_300</pre>




<h3><a name=lrwidth>Glyph Representation widths</a></h3>

<p>For Type 1 fonts, this value may be obtained from the @@???. For
TrueType fonts, the values are in the <tt>hmtx</tt> table.

<!-- What does @@ mean? -IJ -->

<h3><a name=stemh>Horizontal stem width</a></h3>

<p>For Type 1 fonts, this value may be obtained from the
<tt>StdHW</tt> entry, in the Private dictionary or the AFM or PFM file. This
value refers to the <em>dominant</em> stem of the font.  There may be
two or more designed widths. For example, the main vertical stems of
Roman characters will differ from the thin stems on serifed "M" and
"N", plus there may be different widths for uppercase and lowercase
characters in the same font. Also, either by design or by error, all
stems may have slightly different widths.

<h3><a name=cap>Height of uppercase glyph representations</a></h3>

<p>The y-coordinate of the top of flat uppercase letters in Latin, Greek
and Cyrillic scripts, measured from the baseline. This descriptor is not
useful for fonts that do not contain any glyph representations from
these scripts.

<p>For Type 1 fonts, this value may be obtained from the <tt>CapHeight</tt>
entry in the AFM or PFM file or from the <tt>Bluevalues</tt> entry in the
Private dictionary

<!-- Bluevalues not recommended -IJ -->

<h3><a name=xht>Height of lowercase glyph representations</a></h3>

<p>The y-coordinate of the top of unaccented, non-ascending lowercase
letters in Latin, Greek and Cyrillic scripts, measured from the
baseline. Flat-topped letters are used, ignoring any optical
correction zone. Usually used as a ratio of lowercase to uppercase
heights, as a means of comparison between font families.
<!-- It was recommended to drop this sentence -IJ :
The terms
large-eye and small-eye are also used to indicate the height of lowercase
glyph representations relative to the height of uppercase.
-->

<P><img src="./images/x-height.gif" alt="Illustration of x-height"></p>

<p>This descriptor is not useful for fonts that do not contain any glyph
representations from these scripts. Since the heights of lowercase and
uppercase letters are often formed into a ratio for comparing
different fonts, it may be useful to set both the lowercase and
uppercase heights to the same value for unicameral scripts such as
Hebrew, where for mixed Latin and Hebrew text the Hebrew characters
are typically set at a height midway between the uppercase and lowercase
heights of the Latin font.

<P><img src="./images/heb-height.gif" alt="Height of Hebrew characters"></p>

<p>For Type 1 fonts, this value may be obtained from the
<tt>Bluevalues</tt> entry in the Private dictionary.

<!-- Bluevalues not recommended -IJ -->

<h3><a name=bline>Lower Baseline</a></h3>

<p>This gives the position in the em square of the lower baseline. The
lower baseline is used by Latin, Greek and Cyrillic scripts for
alignment, just as the upper baseline is used for Sanscrit-derived
scripts.

<h3><a name=mline>Mathematical Baseline</a></h3>

<p>This gives the position in the em square of the mathematical
baseline.  The mathematical baseline is used by mathematical symbols
for alignment, just as the lower baseline is used for Latin, Greek, and
Cyrillic scripts.

<p>For TrueType GX fonts, this value may be obtained from the
<tt>bsln</tt> table ([[-TRUETYPEGX]]).

<h3><a name=bbox>Maximal bounding box</a></h3>

<P>The maximal bounding box is the smallest rectangle enclosing the
shape that results if all glyph representations in the font are placed
with their origins coincident, and then painted.

<!-- This example needs verification!

<P>For example,

<PRE>
   @font-face { bbox: -206, -233, 1006, 896 }
</PRE>

-IJ -->

<P>If a dynamically downloadable font has been generated by subsetting a
parent font, the bbox should be that of the parent font.

<p>For Type 1 fonts, this value may be obtained from the FontBBox
entry in the font dictionary. For TrueType fonts, the four values are
in the <tt>'xMin'</tt>, <tt>'xMax'</tt>, <tt>'yMin'</tt> and <tt>'yMax'</tt>
entries of the <tt>'head'</tt> table.<!-- Apple API to get this: http://17.126.23.20/dev/techsupport/insidemac/Text/Text-273.html#HEADING273-0 -->

<h3><a name=ascent>Maximum unaccented height</a></h3>

<p>For Type 1 fonts, this value may be obtained from the
<tt>'Ascender'</tt> value in the AFM or PFM file.  For TrueType and OpenType
fonts, this value may be obtained from the <tt>'Ascender'</tt> entry
in the OpenType
<tt>'hhea'</tt> table or (preferably) from the
	<tt>'sTypoAscender'</tt> value in the
OpenType
<tt>'OS/2'</tt> table (see [[-OPENTYPE]]).

<P>For TrueType GX fonts, the <tt>'horizontalBefore'</tt> entry in the
TrueType GX <tt>'fmtx'</tt> table is used, overriding Ascender values
in the <tt>'hhea'</tt> table (see [[-TRUETYPEGX]]).

<h3><a name=descent>Maximum unaccented depth</a></h3>

<p>For Type 1 fonts, this value may be obtained from
<tt>'descender'</tt> value in the AFM or PFM file. <!-- check Descender, sTypoDescender, horizontalAfter -->

<h3><a name="pan1">Panose-1 number</a></h3>

<p><span class="index-def" title="Panose-1"><em>Panose-1</em></span>
is an industry standard TrueType font classification and matching
technology. The PANOSE system consists of a set of ten numbers that
categorize the key attributes of a Latin typeface, a classification
procedure for creating those numbers, and Mapper software that
determines the closest possible font match given a set of
typefaces. The system <em>could</em>, with modification, also be used
for Greek and Cyrillic, but is not suitable for unicameral and
ideographic scripts (Hebrew, Armenian, Arabic,
Chinese/Japanese/Korean).  Panose-1 technology was originally
developed by Elseware Corporation and is now owned by Hewlett Packard.

<p><img src="./images/panose-16.gif" alt="Illustration of Panose-1"></p>

<p>The Family, Serif Style and Proportion numbers are used by
Windows95 for font selection and matching.

<p>The meaning of the ten numbers and the allowable values (given in
parentheses) are given in <a href="notes.html#panose">Appendix
C</a> for the most common case, where the "family" digit is <tt>2,
Text and Display</tt>. (If the first digit has a different value, the
remaining nine digits have different meanings).

<p><em>Panose-2</em> (see [[-PANOSE2]]) is a specification for a
more comprehensive font classification and matching technology which
is not limited to Latin typefaces. For example, the serif
characteristics of a Latin face may be compared with the stroke
terminations of a Kanji face.

<p><img src="./images/P2F24.gif" alt="Illustration of Panose-2"></p>

<p>The Panose-2 value is not stored inside any known font formats, but
may be measured.

<h3><a name=ucode>Range of ISO 10646 characters</a></h3>

<p>This indicates the glyph repertoire of the font, relative to the
Basic Multilingual Plane of ISO 10646, and is used to
eliminate unsuitable fonts (ones that will not have the required
glyphs). It does not indicate that the font definitely has the
required glyphs, only that it is worth downloading and looking at the
font. See [[ISO10646]] for information about useful documents.

<p>Font formats that do not include this information, explicitly or
indirectly, may still use this descriptor, but the value must be
supplied by the document or style sheet author, perhaps being obtained
by inspection.</p>

<!-- Apparently this isn't true
unless it happens that the cmap uses a Unicode encoding. It's
possible that with an additional mapping table that software could map from
CID numbers to ISO 10646, but that extra table is needed.
-IJ -->

<p>For Type 1 fonts, this value may be obtained
from the <!--@@look up spec for CID fonts --> cmap file.

<p>For TrueType and Opentype fonts with an <tt>OS/2</tt> table, see <a href="notes.html#truetype-unicode">Appendix C</a>.

<p>There are other classifications into scripts, such as the Monotype
system (see [[-MONOTYPE]]) and a proposed ISO script system.

<p>Because of this, classification of glyph repertoires by the range
of ISO 10646 characters that may be represented with a particular font
is suggested in this specification.

<h3><a name=tline>Top Baseline</a></h3>

<p>This gives the position in the em square of the top
baseline. The top baseline is used by  Sanscrit-derived scripts for
alignment, just as the bottom baseline is used for Latin, Greek and
Cyrillic scripts.

<p>For TrueType GX fonts, this value may be obtained from the TrueType
GX <tt>bsln</tt> table (see [[-TRUETYPEGX]]).

<h3><a name=stemv>Vertical stem width</a></h3>

<p>The width of vertical (or near-vertical) stems of glyph
representations. This information is often tied to hinting, and may
not be directly accessible in some font formats. For Type 1 fonts,
this may be obtained from the <tt>/StdVW</tt> entry in the Private
dictionary or the AFM or PFM file. For TrueType fonts, this may be obtained
from the <tt>cvt</tt> table.

<P>The measurement should be for the <em>dominant</em> vertical stem
in the font because there might be different groupings of vertical
stems (e.g., one main one, and one lighter weight one as for an
uppercase M or N).

<h3><a name=slope>Vertical stroke angle</a></h3>

<p>Angle, in degrees counterclockwise from the vertical, of the dominant
vertical strokes of the font. The value is negative for fonts that
slope to the right, as almost all italic fonts do. This descriptor may
also be specified for oblique fonts, slanted fonts, script fonts, and
in general for any font whose vertical strokes are not precisely
vertical. A non-zero value does not of itself indicate an italic font.


<h2><a name="algorithm">Font matching algorithm</a></h2>

<P>This specification extends the algorithm given in the CSS1
specification. This algorithm reduces down to the algorithm in the
CSS1 specification when the author and reader style sheets do not
contain any <span class="index-inst" title="@font-face">
@font-face</span> rules.

<p>Matching of descriptors to font faces must be done carefully. The
descriptors are matched in a well-defined order to insure that the
results of this matching process are as consistent as possible across
UAs (assuming that the same library of font faces and font
descriptions is presented to each of them). This algorithm may be
optimized, provided that an implementation behaves as if the algorithm
had been followed exactly.</p>

<OL>

 <LI>The user agent makes (or accesses) a database of relevant
 font-face descriptors of all the fonts of which the UA is aware. If
 there are two fonts with exactly the same descriptors, one of them is
 <span class="index-inst" title="ignore"><a
 href="syndata.html#ignore">ignored.</a></span> The UA may be aware of a
 font because:

 <ul>
   <li>it has been installed locally

    <li>it is declared using an <span class="index-inst"
    title="@font-face"> @font-face</span> rule in one of the style
    sheets linked to or contained in the current document


    <li>it is used in the UA default style sheet, which conceptually
    exists in all UAs and is considered to have full
    @font-face rules for all fonts which the UA will use for
    default presentation, plus @font-face rules for the five
    special generic font families (see
    <span class="propinst-font-family">'font-family'</span>)
    defined in CSS2
  </ul>


  <LI>At a given element and for each character in that element, the
  UA assembles the font properties applicable to that element. Using
  the complete set of properties, the UA uses the <span
  class="descinst-font-family">'font-family'</span> descriptor to
  choose a tentative font family. Thus, matching on a family name will
  succeed before matching on some other descriptor. The remaining
  properties are tested against the family according to the matching
  criteria described with each descriptor. If there are matches for
  all the remaining properties, then that is the matching font face
  for the given element.

  <LI>If there is no matching font face within the <span
  class="descinst-font-family">'font-family'</span> being
  processed by step 2, <em>UAs which implement intelligent
  matching</em> may proceed to examine other descriptors such as
  x-height, glyph representation widths, and panose-1 to identify a
  different tentative font family. If there are matches for all the
  remaining descriptors, then that is the matching font face for the
  given element. The font-family descriptor that is reflected
  into the CSS2 properties is the font family that was requested, not
  whatever name the intelligently matched font may have. UAs that do
  not implement intelligent matching are considered to fail at this
  step.

  <li>If there is no matching font face within the <span
  class="descinst-font-family">'font-family'</span> being processed by
  step 3, <em>UAs that implement font downloading</em> may proceed to
  examine the src descriptor of the tentative font face identified in
  step 2 or 3 to identify a network resource that is available, and
  of the correct format. If there are matches for all the remaining
  descriptors, then that is the matching font face for the given
  element and the UA may attempt to download this font resource. The
  UA may choose to block on this download or may choose to proceed to
  the next step while the font downloads. UAs that do not implement
  font download, or are not connected to a network, or where the user
  preferences have disabled font download, or where the requested
  resource is unavailable for whatever reason, or where the downloaded
  font cannot be used for whatever reason, are considered to fail at
  this step.

  <li>If there is no matching font face within the <span
  class="descinst-font-family">'font-family'</span> being
  processed by step 3, <em>UAs that implement font synthesis</em> may
  proceed to examine other descriptors such as x-height, glyph
  representation widths, and panose-1 to identify a different
  tentative font family for synthesis. If there are matches for all
  the remaining descriptors, then that is the matching font face for
  the given element and synthesis of the faux font may begin. UAs
  that do not implement font synthesis are considered to fail at this
  step.



  <li>If all of steps 3, 4 and 5 fail, and if there is a next
  alternative <span
  class="descinst-font-family">'font-family'</span> in the font
  set, then repeat from step 2 with the next alternative <span
  class="descinst-font-family">'font-family'</span>.

  <LI>If there is a matching font face, but it doesn't contain a glyph
  representation for the current character, and if there is a next
  alternative <span
  class="descinst-font-family">'font-family'</span> in the font
  sets, then repeat from step 2 with the next alternative <span
  class="descinst-font-family">'font-family'</span>.  The <span
  class="descinst-unicode-range">'unicode-range'</span>
  descriptor may be used to rapidly eliminate from consideration those
  font faces that do not have the correct glyph representations. If
  the <span class="descinst-unicode-range">'unicode-range'</span>
  descriptor indicates that a font contains some glyph representations
  in the correct range, it may be examined by the UA to see if it has
  that particular one.

  <LI>If there is no font within the family selected in 2, then use a
  UA-dependent default <span
  class="descinst-font-family">'font-family'</span> and repeat
  from step 2, using the best match that can be obtained within the
  default font. If a particular character cannot be displayed using
  the default font, the UA should indicate that a character is not
  being displayed (for example, using the 'missing character' glyph).

  <li>UAs that implement progressive rendering and have pending font
  downloads may, once download is successful, use the downloaded font
  as a font family. If the downloaded font is missing some glyph
  representations that the temporary progressive font did contain, the
  downloaded font is not used for that character and the temporary
  font continues to be used.

</OL>

<div class="note"><P>
<em><strong>Note.</strong>
The above algorithm can be optimized to avoid having to revisit
the CSS2 properties for each character.
</em>
</div>

<P>The per-descriptor matching rules from (2) above are as follows:</p>


<OL>
  <LI>
      <span class="descinst-font-style">'font-style'</span> is tried first. 'italic' will be satisfied
      if there is either a face in the UA's font database labeled with the CSS
      keyword 'italic' (preferred) or 'oblique'. Otherwise the values must be matched
      exactly or font-style will fail.
    <LI>
      <span class="descinst-font-variant">'font-variant'</span> is tried next. 'normal' matches
      a font not labeled as 'small-caps'; 'small-caps' matches (1) a font labeled
      as 'small-caps', (2) a font in which the small caps are synthesized, or (3)
      a font where all lowercase letters are replaced by uppercase letters. A
      small-caps font may be synthesized by electronically scaling uppercase letters
      from a normal font.
    <LI>
      <span class="descinst-font-weight">'font-weight'</span> is matched next, it will never fail.
      (See <span class="descinst-font-weight">'font-weight'</span> below.)
    <LI>
      <span class="descinst-font-size">'font-size'</span> must be matched within a UA-dependent
      margin of tolerance. (Typically, sizes for scalable fonts are rounded to
      the nearest whole pixel, while the tolerance for bitmapped fonts could be
      as large as 20%.) Further computations, e.g. by 'em' values in other properties,
      are based on the <span class="descinst-font-size">'font-size'</span> value that is used, not the one that is specified.
  </OL>

<h3>Examples of font matching</h3>

<div class="example"><P>

The following example defines a specific font face, Alabama
Italic. A panose font description and source URI for retrieving a
truetype server font are also provided. Font-weight and font-style
descriptors are provided to describe the font. The declaration says
that the weight will also match any request in the
range 300 to 500. The font family is Alabama and the adorned font
name is Alabama Italic.</P>

<PRE>
  @font-face {
    src: local(Alabama Italic),
         url(http://www.fonts.org/A/alabama-italic) format(truetype);
    panose-1: 2 4 5 2 5 4 5 9 3 3;
    font-family: Alabama, serif;
    font-weight:   300, 400, 500;
    font-style:  italic, oblique;
  }
</PRE>
</div>

<div class="example"><P>
The next example defines a family of fonts. A single URI is provided
for retrieving the font data. This data file will contain multiple
styles and weights of the named font. Once one of these
@font-face definitions has been dereferenced, the data will
be in the UA cache for other faces that use the same URI.</P>

<PRE>
  @font-face {
    src: local(Helvetica Medium),
         url(http://www.fonts.org/sans/Helvetica_family) format(truedoc);
    font-family: "Helvetica";
    font-style: normal
  }
  @font-face {
    src: local(Helvetica Oblique),
         url(http://www.fonts.org/sans/Helvetica_family) format(truedoc);
    font-family: "Helvetica";
    font-style: oblique;
    slope: -18
  }
</PRE>
</div>

<div class="example"><P>
The following example groups three physical fonts into one virtual font with
extended coverage. In each case, the adorned font name is given in the
src descriptor to allow locally installed versions to be preferentially
used if available. A fourth rule points to a font with the same coverage,
but contained in a single resource.

<PRE>
  @font-face {
    font-family: Excelsior;
    src: local(Excelsior Roman), url(http://site/er) format(intellifont);
    unicode-range: U+??; /* Latin-1 */
  }
  @font-face {
    font-family: Excelsior;
    src: local(Excelsior EastA Roman), url(http://site/ear) format(intellifont);
    unicode-range: U+100-220; /* Latin Extended A and B */
  }
  @font-face {
    font-family: Excelsior;
    src: local(Excelsior Cyrillic Upright), url(http://site/ecr) format(intellifont);
    unicode-range: U+4??; /* Cyrillic */
  }
  @font-face {
    font-family: Excelsior;
    src: url(http://site/excels) format(truedoc);
    unicode-range: U+??,U+100-220,U+4??;
  }
</PRE>
</div>

<div class="example"><P>
This next example might be found in a UA's default style sheet. It
implements the CSS2 generic font family, <tt>serif</tt> by mapping it to
a wide variety of serif fonts that might exist on various
platforms. No metrics are given since these vary between the possible
alternatives.

<PRE>
  @font-face {
    src: local(Palatino),
            local(Times New Roman),
            local(New York),
            local(Utopia),
            url(http://somewhere/free/font);
    font-family: serif;
    font-weight: 100, 200, 300, 400, 500;
    font-style: normal;
    font-variant: normal;
    font-size: all
  }
</PRE>
</div>

</BODY>
</HTML>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
