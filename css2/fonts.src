<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
        "http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html lang="en">
<!-- $Id: fonts.src,v 2.67 2002-08-02 17:37:59 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Fonts</TITLE>
<style type="text/css">
#AutoNumber2 td { text-align:center }
</style>
<!-- Changed by: Tantek Celik, 2002-06-09 -->
</HEAD>
<BODY>

<h1>Fonts</h1>

<h2>Introduction</h2>

<P>Setting font properties will be among the most common uses of style
sheets. Unfortunately, there exists no well-defined and universally
accepted taxonomy for classifying fonts, and terms that apply to one
font family may not be appropriate for others. E.g. 'italic' is
commonly used to label slanted text, but slanted text may also be
labeled as being <EM>Oblique, Slanted, Incline, Cursive</EM> or
<EM>Kursiv</EM>. Therefore it is not a simple problem to map typical
font selection properties to a specific font.

<h2><a name="algorithm">Font matching algorithm</a></h2>

<P>Because there is no accepted, universal taxonomy of font
properties, matching of properties to font faces must be done
carefully. The properties are matched in a well-defined order to
insure that the results of this matching process are as consistent as
possible across UAs (assuming that the same library of font faces is
presented to each of them).

<OL>

<LI>The User Agent makes (or accesses) a database of relevant CSS&nbsp;2.1
properties of all the fonts of which the UA is aware. The UA may be
aware of a font because it has been installed locally or it has been
previously downloaded over the web. If there are two fonts with
exactly the same properties, one of them is ignored.

<LI>At a given element and for each character in that element, the UA
assembles the font-properties applicable to that element. Using the
complete set of properties, the UA uses the 'font-family' property to
choose a tentative font family. The remaining properties are tested
against the family according to the matching criteria described with
each property. If there are matches for all the remaining properties,
then that is the matching font face for the given element.

<LI>If there is no matching font face within the 'font-family' being
processed by step 2, and if there is a next alternative 'font-family'
in the font set, then repeat step 2 with the next alternative
'font-family'.

<LI>If there is a matching font face, but it doesn't contain a glyph
for the current character, and if there is a next alternative
'font-family' in the font sets, then repeat step 2 with the next
alternative 'font-family'. See <A HREF="#appendix-c">appendix C</A>
for a description of font and character encoding.

<LI>If there is no font within the family selected in 2, then use a
UA-dependent default 'font-family' and repeat step 2, using the best
match that can be obtained within the default font.
If a particular character cannot be displayed using this font, 
then the UA has no suitable font for that character. 
The UA should map each character for which it has no suitable font 
to a visible symbol chosen by the UA, preferably a "missing character" 
glyph from one of the font faces available to the UA. 

</OL>

<P>(The above algorithm can be optimized to avoid having to revisit
the CSS&nbsp;2.1 properties for each character.)

<P>The per-property matching rules from (2) above are as follows:

<OL>

<LI><A HREF="#font-style">'font-style'</A> is tried first. 'italic'
will be satisfied if there is either a face in the UA's font database
labeled with the CSS keyword 'italic' (preferred) or 'oblique'.
Otherwise the values must be matched exactly or font-style will fail.

<LI><A HREF="#font-variant">'font-variant'</A> is tried next. 'normal'
matches a font not labeled as 'small-caps'; 'small-caps' matches (1) a
font labeled as 'small-caps', (2) a font in which the small caps are
synthesized, or (3) a font where all lowercase letters are replaced by
upper case letters. A small-caps font may be synthesized by
electronically scaling uppercase letters from a normal font.

<LI><A HREF="#font-weight">'font-weight'</A> is matched next, it will
never fail. (See 'font-weight' below.)

<LI><A HREF="#font-size">'font-size'</A> must be matched within a
UA-dependent margin of tolerance. (Typically, sizes for scalable fonts
are rounded to the nearest whole pixel, while the tolerance for
bitmapped fonts could be as large as 20%.) Further computations, e.g.
by 'em' values in other properties, are based on the 'font-size' value
that is used, not the one that is specified.

</OL>

<H2><a name="font-family-prop">Font family</a>: the <span
class="propinst-font-family">'font-family'</span> property</H2>

<!-- #include src=properties/font-family.srb -->

<P>The value is a prioritized list of font family names and/or generic
family names. Unlike most other CSS properties, values are separated
by a comma to indicate that they are alternatives:

<PRE>
body { font-family: gill, helvetica, sans-serif }
</PRE>

<P>Although many fonts provide the "missing character" glyph,
  typically an open box, as its name implies this should not be
  considered a match.

<P>There are two types of font family names:

<DL>

<dt><a name="value-def-family-name">&lt;family-name&gt;</a>

<DD>The name of a font family of choice. In the last example, "gill"
and "helvetica" are font families.

<dt><a name="value-def-generic-family">&lt;generic-family&gt;</a>

<DD>In the example above, the last value is a generic family name. The
following generic families are defined:

<UL>

<LI>'serif' (e.g. Times)

<LI>'sans-serif' (e.g. Helvetica)

<LI>'cursive' (e.g. Zapf-Chancery)

<LI>'fantasy' (e.g. Western)

<LI>'monospace' (e.g. Courier)

</UL>

<P>Style sheet designers are encouraged to offer a generic font family
as a last alternative.

</DL>

<P>Font names containing whitespace should be quoted:

<PRE>
body { font-family: "new century schoolbook", serif }
  
&lt;BODY STYLE="font-family: 'My own font', fantasy"&gt;
</PRE>

<P>If quoting is omitted, any whitespace characters before and after
the font name are ignored and any sequence of whitespace characters
inside the font name is converted to a single space.

<H2><a name="font-styling">Font styling</a>: the
<span class="propinst-font-style">'font-style'</span> property</H2>

<!-- #include src=properties/font-style.srb -->

<P>The 'font-style' property selects between normal (sometimes
referred to as "roman" or "upright"), italic and oblique faces within
a font family.

<P>A value of 'normal' selects a font that is classified as 'normal'
in the UA's font database, while 'oblique' selects a font that is
labeled 'oblique'. A value of 'italic' selects a font that is labeled
'italic', or, if that is not available, one labeled 'oblique'.

<P>The font that is labeled 'oblique' in the UA's font database may
actually have been generated by electronically slanting a normal font.

<P>Fonts with Oblique, Slanted or Incline in their names will
typically be labeled 'oblique' in the UA's font database. Fonts with
<EM>Italic, Cursive</EM> or <EM>Kursiv</EM> in their names will
typically be labeled 'italic'.

<PRE>
h1, h2, h3 { font-style: italic }
h1 em { font-style: normal }
</PRE>

<P>In the example above, emphasized text within 'H1' will appear in a
normal face.

<H2><a name="small-caps">Small-caps</a>: the
<span class="propinst-font-variant">'font-variant'</span> property</H2>

<!-- #include src=properties/font-variant.srb -->

<P>Another type of variation within a font family is the small-caps.
In a small-caps font the lower case letters look similar to the
uppercase ones, but in a smaller size and with slightly different
proportions. The 'font-variant' property selects that font.

<P>A value of 'normal' selects a font that is not a small-caps font,
'small-caps' selects a small-caps font. It is acceptable (but not
required) in CSS&nbsp;2.1 if the small-caps font is a created by taking a
normal font and replacing the lower case letters by scaled uppercase
characters. As a last resort, uppercase letters will be used as
replacement for a small-caps font.

<P>The following example results in an 'H3' element in small-caps,
with emphasized words in oblique small-caps:

<PRE>
h3 { font-variant: small-caps }
em { font-style: oblique }
</PRE>

<P>There may be other variants in the font family as well, such as
fonts with old-style numerals, small-caps numerals, condensed or
expanded letters, etc. CSS&nbsp;2.1 has no properties that select those.

<P><EM>Note:</EM> insofar as this property causes text to be
transformed to uppercase, the same considerations as for <A
href="#text-transform">'text-transform'</A> apply.

<H2><a name="font-boldness">Font boldness</a>: the
<span class="propinst-font-weight">'font-weight'</span> property</H2>

<!-- #include src=properties/font-weight.srb -->

<P>The 'font-weight' property selects the weight of the font. The
values '100' to '900' form an ordered sequence, where each number
indicates a weight that is at least as dark as its predecessor. The
keyword 'normal' is synonymous with '400', and 'bold' is synonymous
with '700'. Keywords other than 'normal' and 'bold' have been shown to
be often confused with font names and a numerical scale was therefore
chosen for the 9-value list.

<PRE>
p { font-weight: normal }   /* 400 */
h1 { font-weight: 700 }     /* bold */
</PRE>

<P>The 'bolder' and 'lighter' values select font weights that are
relative to the weight inherited from the parent:

<PRE>
strong { font-weight: bolder }
</PRE>

<P>Child elements inherit the resultant weight, not the keyword value.

<P>Fonts (the font data) typically have one or more properties whose
values are names that are descriptive of the "weight" of a font. There
is no accepted, universal meaning to these weight names. Their primary
role is to distinguish faces of differing darkness within a single
font family. Usage across font families is quite variant; for example
a font that you might think of as being bold might be described as
being <EM>Regular, Roman, Book, Medium, Semi-</EM> or <EM>DemiBold,
Bold,</EM> or <EM>Black,</EM> depending on how black the "normal" face
of the font is within the design. Because there is no standard usage
of names, the weight property values in CSS&nbsp;2.1 are given on a numerical
scale in which the value '400' (or 'normal') corresponds to the
"normal" text face for that family. The weight name associated with
that face will typically be <EM>Book, Regular, Roman, Normal</EM> or
sometimes <EM>Medium</EM>.

<P>The association of other weights within a family to the numerical
weight values is intended only to preserve the ordering of darkness
within that family. However, the following heuristics tell how the
assignment is done in typical cases:

<UL>

<LI>If the font family already uses a numerical scale with nine values
(like e.g. <EM>OpenType</EM> does), the font weights should be mapped
directly.

<LI>If there is both a face labeled <EM>Medium</EM> and one labeled
<EM>Book, Regular, Roman</EM> or <EM>Normal,</EM> then the
<EM>Medium</EM> is normally assigned to the '500'.

<LI>The font labeled "Bold" will often correspond to the weight value '700'.

<LI>If there are fewer then 9 weights in the family, the default
algorithm for filling the "holes" is as follows. If '500' is
unassigned, it will be assigned the same font as '400'. If any of the
values '600', '700', '800' or '900' remains unassigned, they are
assigned to the same face as the next darker assigned keyword, if any,
or the next lighter one otherwise. If any of '300', '200' or '100'
remains unassigned, it is assigned to the next lighter assigned
keyword, if any, or the next darker otherwise.

</UL>

<P>The following two examples show typical mappings.</P>

<div class="html-example">
<P>Assume four weights in the "Rattlesnake" family, from lightest to
darkest: <EM>Regular, Medium, Bold, Heavy.</EM></p>
<TABLE border=1 summary="Example of font-weight mapping">
<CAPTION>First example of font-weight mapping</CAPTION>
<!-- rattlesnake, ostrich and more at the Austin meeting -->
<THEAD>
<TR><TH>Available faces <TH>Assignments <TH>Filling the holes
</THEAD>
<TR><TD>"Rattlesnake Regular"    <TD> 400          <TD> 100, 200, 300
<TR><TD>"Rattlesnake Medium"     <TD> 500          <TD>&nbsp;
<TR><TD>"Rattlesnake Bold"       <TD> 700          <TD> 600
<TR><TD>"Rattlesnake Heavy"      <TD> 800          <TD> 900
</TABLE>
</div>

<div class="html-example">
<P>Assume six weights in the
"Ice Prawn" family: <EM>Book, Medium, Bold, Heavy, Black,
ExtraBlack.</EM> Note that in this instance the user agent
has decided <EM>not</EM> to assign a numeric
value to "Ice Prawn ExtraBlack".</p>

<TABLE border=1 summary="Example of font-weight mapping. Note
                that ExtraBlack is not mapped to a value.">
<CAPTION>Second example of font-weight mapping</CAPTION>
<THEAD>
<TR><TH>Available faces <TH>Assignments <TH>Filling the holes
</THEAD>
<TR><TD>"Ice Prawn Book"       <TD> 400          <TD> 100, 200, 300
<TR><TD>"Ice Prawn Medium"     <TD> 500          <TD>&nbsp;
<TR><TD>"Ice Prawn Bold"       <TD> 700          <TD> 600
<TR><TD>"Ice Prawn Heavy"      <TD> 800          <TD>&nbsp;
<TR><TD>"Ice Prawn Black"      <TD> 900          <TD>&nbsp;
<TR><TD>"Ice Prawn ExtraBlack" <TD> (none)       <TD>&nbsp;
</TABLE>
</div>


<P>Since the intent of the relative keywords 'bolder' and 'lighter' is
to darken or lighten the face <EM>within the family</EM> and because a
family may not have faces aligned with all the symbolic weight values,
the matching of 'bolder' is to the next darker face available on the
client within the family and the matching of 'lighter' is to the next
lighter face within the family. To be precise, the meaning of the
relative keywords 'bolder' and 'lighter' is as follows:

<UL>

<LI>'bolder' selects the next weight that is assigned to a font that
is darker than the inherited one. If there is no such weight, it
simply results in the next darker numerical value (and the font
remains unchanged), unless the inherited value was '900' in which case
the resulting weight is also '900'.

<LI>'lighter' is similar, but works in the opposite direction: it
selects the next lighter keyword with a different font from the
inherited one, unless there is no such font, in which case it selects
the next lighter numerical value (and keeps the font unchanged).

</UL>

<P>There is no guarantee that there will be a darker face for each of
the 'font-weight' values; for example, some fonts may have only a
normal and a bold face, others may have eight different face weights.
There is no guarantee on how a UA will map font faces within a family
to weight values. The only guarantee is that a face of a given value
will be no less dark than the faces of lighter values.

<H2><a name="font-size-props">Font size</a>: the <span
class="propinst-font-size">'font-size'</span>
property</H2>

<!-- #include src=properties/font-size.srb -->

<P>The font size corresponds to the em square, a concept used in typography.
Note that certain glyphs may bleed outside their em squares. Values
have the following meanings:</P>

<DL>
<DT><B><a name="value-def-absolute-size">&lt;absolute-size&gt;</a></B>

<DD>An &lt;absolute-size&gt; keyword is an index to a table of font
sizes computed and kept by the UA. Possible values are:
<P> [ xx-small | x-small | small | medium | large | x-large | xx-large ]
<p>The following table provides user agent guidelines for the absolute-size 
scaling factor and their mapping to HTML heading and absolute font-sizes. The 
'medium' value is used as the reference middle value. The user agent may fine 
tune these values for different fonts or different types of display devices.</p>

<table border="1" style="border-collapse: collapse" width="73%" id="AutoNumber2">
  <tr>
    <th style="width:16%">CSS absolute-size values</th>
    <td style="width:12%">xx-small</td>
    <td style="width:9%">x-small</td>
    <td style="width:10%">small</td>
    <td style="width:11%">medium</td>
    <td style="width:11%">large</td>
    <td style="width:12%">x-large</td>
    <td style="width:11%">xx-large</td>
    <td style="width:8%">&nbsp;</td>
  </tr>
  <tr>
    <th style="width:16%">scaling factor</th>
    <td style="width:12%">3/5</td>
    <td style="width:9%">3/4</td>
    <td style="width:10%">8/9</td>
    <td style="width:11%">1</td>
    <td style="width:11%">6/5</td>
    <td style="width:12%">3/2</td>
    <td style="width:11%">2/1</td>
    <td style="width:8%">3/1</td>
  </tr>
  <tr>
    <th style="width:16%">HTML headings</th>
    <td style="width:12%">h6</td>
    <td style="width:9%">&nbsp;</td>
    <td style="width:10%">h5</td>
    <td style="width:11%">h4</td>
    <td style="width:11%">h3</td>
    <td style="width:12%">h2</td>
    <td style="width:11%">h1</td>
    <td style="width:8%">&nbsp;</td>
  </tr>
  <tr>
    <th style="width:16%">HTML font sizes</th>
    <td style="width:12%">1</td>
    <td style="width:9%">&nbsp;</td>
    <td style="width:10%">2</td>
    <td style="width:11%">3</td>
    <td style="width:11%">4</td>
    <td style="width:12%">5</td>
    <td style="width:11%">6</td>
    <td style="width:8%">7</td>
  </tr>
</table>

<p>
Different media may need different scaling factors. Also, the UA
should take the quality and availability of fonts into account when
computing the table. The table may be different from one font family
to another.
</p>

<p class="note"><em><strong>Note 1.</strong> To preserve readability, a UA applying 
these guidelines should nevertheless avoid creating font-size resulting
 in less than 9 pixels per EM unit on a computer display .</em></p>
 
<p class="note"><em><strong>Note 2.</strong> In CSS1, the suggested
scaling factor between adjacent indexes was 1.5 which user experience
proved to be too large. In CSS2, the suggested scaling factor for computer 
screen between adjacent indexes was 1.2 which still created issues for the small 
sizes. The new scaling factor varies between each index to provide better 
readability.</em></p>


<DT><B><a name="value-def-relative-size">&lt;relative-size&gt;</a></B>

<DD>A &lt;relative-size&gt; keyword is interpreted relative to the
table of font sizes and the font size of the parent element. Possible
values are: [ larger | smaller ]. For example, if the parent element
has a font size of 'medium', a value of 'larger' will make the font
size of the current element be 'large'. If the parent element's size
is not close to a table entry, the UA is free to interpolate between
table entries or round off to the closest one. The UA may have to
extrapolate table values if the numerical value goes beyond the
keywords.

</DL>

<P>Length and percentage values should not take the font size table
into account when calculating the font size of the element.

<P>Negative values are not allowed.

<P>On all other properties, 'em' and 'ex' length values refer to the
font size of the current element. On the 'font-size' property, these
length units refer to the font size of the parent element.

<P>Note that an application may reinterpret an explicit size,
depending on the context. E.g., inside a VR scene a font may get a
different size because of perspective distortion.

<P>Examples:

<PRE>
p { font-size: 16px; }
@media print {
	p { font-size: 12pt; }
}
blockquote { font-size: larger }
em { font-size: 150% }
em { font-size: 1.5em }
</PRE>

<H2><a name="font-shorthand">Shorthand font property</a>: the <span class="propinst-font">'font'</span> property</H2>

<!-- #include src=properties/font.srb -->

<P>
The <span class="propinst-font">'font'</span> property is,
except as described <a href="#almost">below</a>, a shorthand property for
setting
<A HREF="#font-style">'font-style'</A> 
<A HREF="#font-variant">'font-variant'</A> 
<A HREF="#font-weight">'font-weight'</A> 
<A HREF="#font-size">'font-size'</A>, 
<A HREF="#line-height">'line-height'</A> and 
<A HREF="#font-family">'font-family'</A> at the same place in the style
sheet. The syntax of this property is based on a traditional
typographical shorthand notation to set multiple properties related to
fonts.

<P>All font-related properties are first reset to their initial values, 
including those listed in the preceding paragraph. 
Then, those properties that are given explicit values in the 
<span class="propinst-font">'font'</span> shorthand are set to those values. 
For a definition of allowed and initial values, see the previously defined properties.

<PRE>
p { font: 12px/14px sans-serif }
p { font: 80% sans-serif }
p { font: x-large/110% "new century schoolbook", serif }
p { font: bold italic large Palatino, serif }
p { font: normal small-caps 120%/120% fantasy }
</PRE>

<P>In the second rule, the font size percentage value ('80%') refers
to the font size of the parent element. In the third rule, the line
height percentage refers to the font size of the element itself.

<P>In the first three rules above, the 'font-style', 'font-variant'
and 'font-weight' are not explicitly mentioned, which means they are
all three set to their initial value ('normal'). The fourth rule sets
the 'font-weight' to 'bold', the 'font-style' to 'italic' and
implicitly sets 'font-variant' to 'normal'.

<P>The fifth rule sets the 'font-variant' ('small-caps'), the
'font-size' (120% of the parent's font), the 'line-height' (120% times
the font size) and the 'font-family' ('fantasy'). It follows that the
keyword 'normal' applies to the two remaining properties: 'font-style'
and 'font-weight'.

<P>The following values refer to <span class="index-def" title="system
fonts">system fonts</span>:</p>

<dl>
<dt>caption
<dd>The font used for captioned controls (e.g., buttons, drop-downs, etc.).
<dt>icon
<dd>The font used to label icons.
<dt>menu
<dd>The font used in menus (e.g., dropdown menus and menu lists).
<dt>message-box
<dd>The font used in dialog boxes.
<dt>small-caption
<dd>The font used for labeling small controls.
<dt>status-bar
<dd>The font used in window status bars.
</dl>

<P>System fonts may only be set as a whole; that is, the font
family, size, weight, style, etc. are all set at the same time.These values may then be altered individually if desired.  If no
font with the indicated characteristics exists on a given platform,
the user agent should either intelligently substitute (e.g., a smaller
version of the 'caption' font might be used for the 'small-caption'
font), or substitute a user agent default font. As for regular fonts,
if, for a system font, any of the individual properties are not part
of the operating system's available user preferences, those properties
should be set to their initial values.

<P id="almost">That is why this property is "almost" a shorthand property: system
fonts can only be specified with this property, not with <span
class="propinst-font-family">'font-family'</span> itself, so <span
class="propinst-font">'font'</span> allows authors to do more than the
sum of its subproperties. However, the individual properties such as <span class="propinst-font-weight">'font-weight'</span> are still given values taken from the system font, which can be independently varied.</p>

<div class="example"><p>

<pre>
button { font: 300 italic 1.3em/1.7em "FB Armada", sans-serif }
button p { font: menu }
button p em { font-weight: bolder }
</pre>

<p>If the font used for dropdown menus on a particular system
happened to be, for example, 9-point Charcoal, with a weight of 600, then P
elements that were descendants of BUTTON would be displayed as if
this rule were in effect:

<pre>
button p { font: 600 9px Charcoal }
</pre>

<p>Because the <span class="propinst-font">'font'</span> shorthand
property resets any property not explicitly given a value
to its initial value, this has the same effect as this declaration:

<pre>
button p {
  font-style: normal;
  font-variant: normal;
  font-weight: 600;
  font-size: 9px;
  line-height: normal;
  font-stretch: normal;
  font-size-adjust: none;
} 
</PRE>

</div>

</BODY>
</HTML>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
