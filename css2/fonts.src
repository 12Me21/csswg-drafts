<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
        "http://www.w3.org/TR/1998/REC-html40-19980424/loose.dtd">
<html lang="en">
<!-- $Id: fonts.src,v 2.61 2002-04-23 22:44:44 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Fonts</TITLE>
<!-- Changed by: Tantek Celik, 23-04-2002 -->
</HEAD>
<BODY>


<!--

CSS2 text just for reference until finished editing. -tc








<P>When a document's text is to be displayed visually, <span
class="index-inst" title="character">characters</span> (abstract
information elements) must be mapped to <span class="index-def"
title="abstract glyph"><dfn>abstract glyphs</dfn></span>. One or 
more characters may be depicted by one or more abstract glyphs, in 
a possibly context-dependent fashion. A <span class="index-def" title="glyph"><dfn>glyph</dfn></span> is the actual
artistic representation of an abstract glyph, in some typographic
style, in the form of outlines or bitmaps that
may be drawn on the screen or paper. A <span class="index-def"
title="font"><dfn>font</dfn></span> is a set of glyphs,
all observing the same basic motif according to design, size,
appearance, and other attributes associated with the entire set, and a
mapping from characters to abstract glyphs.

<P>A visual user agent must address the following issues before actually
	rendering a character:</p>

<ul>
<li>Is there, directly or by inheritance, a font specified for this character?

<li>Does the user agent have this font available?

<li>If so, what glyph(s) does this character or sequence of
characters map to?

<li>If not, what should be done? Should a different font be substituted?
Can the font be synthesized? Can it be retrieved from the Web?
</ul>

<P>In both CSS1 and CSS2, authors specify font characteristics
via a series of font properties.

<P>How the user agent handles these properties, when there is no matching font on the client has expanded
between CSS1 and CSS2. In CSS1, all fonts were assumed to be present
on the client system and were identified solely by name. Alternate
fonts could be specified through the properties, but beyond that, user
agents had no way to propose other fonts to the user (even
stylistically similar fonts that the user agent had available) other
than generic default fonts.

<P>CSS2 changes all that, and allows much greater liberty for:</p>

<ul>
<li>style sheet authors, to describe the fonts they want to be used
<li>user agents, in selecting a font when an author's requested font
is not immediately available.
</ul>

<p>CSS2 improves client-side font matching, enables font synthesis and
progressive rendering, and enables fonts to be downloaded over the
Web. These enhanced capabilities are referred to as 'WebFonts'.

<P>In the CSS2 font model, as in CSS1, each user agent has a "font
database" at its disposition. CSS1 referred to this database but gave no details about what was in it. CSS2 defines the information in that database and allows style sheet authors to contribute to it. When asked to display a character with a particular font,
the user agent first identifies the font in the database that "best
fits" the specified font (according to the <a href="#algorithm">font
matching algorithm)</a> Once it has identified a font, it retrieves
the font data locally or from the Web, and may display the character
using those glyphs.

<P>In light of this model, we have organized the specification
into two sections. The first concerns the <a
href="#font-specification">font specification mechanism</a>, whereby
authors specify which fonts they would like to have used.  The
second concerns the <a href="#font-selection">font selection
mechanism</a>, whereby the client's user agent identifies and loads a
font that best fits the author's specification.

<P>How the user agent constructs  the font database lies
outside the scope of this specification since the database's
implementation depends on such factors as the operating system, the windowing system, and the client.

<H2><a name="font-specification">Font specification</a></h2>

<P> The first phase of the CSS font mechanism concerns how style sheet 
authors specify which fonts should be used by a user
agent. At first, it seem that the obvious way to specify a font is by it's name, a single string - which appears to be separated into distinct parts; for example <span class="example">"BT Swiss 721 Heavy Italic"</span>.

<p>Unfortunately, there exists no well-defined and universally
accepted taxonomy for classifying fonts based on their names, and terms that apply to one font family name may not be appropriate for others. For example, the term 'italic' is commonly used to label slanted text, but slanted text may also be labeled <EM>Oblique, Slanted, Incline, Cursive</EM>, or
<EM>Kursiv</EM>. Similarly, font names typically contain terms that 
describe the "weight" of a font. The primary role of these names is to distinguish
faces of differing darkness within a single font family.  There is no
accepted, universal meaning to these weight names and usage varies
widely.  For example a font that you might think of as being bold
might be described as being <EM>Regular, Roman, Book, Medium,
Semi-</EM> or <EM>Demi-Bold, Bold,</EM> or <EM>Black,</EM> depending on
how black the "normal" face of the font is within the design. 


<p>This lack of systematic naming makes it impossible, in the general case, to generate a modified font face name that differs in a particular way, such as being bolder.

<P>Because of this, CSS uses a <a href="#font-properties">different model</a>. Fonts are requested not through a single font name but through setting a series of font properties. These property values form the
basis of the user agent's <a href="#font-selection">font
selection</a> mechanism. The font properties can be individually modified, for example to increase the boldness, and the new set of font property values will then be used to select from the font database again. The result is an increase in regularity for style sheet authors and implementors, and an increase in robustness.

<h3><a name="font-properties">Font specification properties</a></h3>
<P>CSS2 specifies fonts according to these characteristics:</p>

<dl>
<dt><a name="font-family">Font family</a>

      <dd>The <span class="index-def" title="font family"> font
      family</span> specifies which font family is to be used to
render the text. A font family is a group of fonts, designed to be used in combination and exhibiting similarities in design.  One member of the
      family may be italic, another bold, another condensed or using small caps. Font family names include "Helvetica", "New
      Century Schoolbook", and "Kyokasho ICA L". Font family names are
      not restricted to Latin characters.  Font families may be
      grouped into different categories: those with or without serifs,
      those whose characters are or are not proportionally spaced,
      those that resemble handwriting, those that are fantasy fonts,
      etc.


<dt><a name="font-style">Font style</a>

      <dd>The font style specifies whether the text is to be rendered
      using a normal, italic, or oblique face. <span class="index-def" title="Italic, definition of"><dfn>Italic</dfn></span> is a more
      cursive companion face to the normal face, but not so cursive as
      to make it a script face. Oblique is a slanted form of the
      normal face, and is more commonly used as a companion face to
      sans-serif. This definition avoids having to label slightly slanted   
      normal faces as oblique, or normal Greek faces as italic.

<dt><a name="font-variant">Font variant</a>

      <dd>The font variant indicates whether the text is to be
      rendered using the normal glyphs for lowercase characters or
      using small-caps glyphs for lowercase characters. A particular
      font may contain only normal, only small-caps, or both types of
      glyph; this property is used to request an appropriate font and, 
	if the font contains both variants, the appropriate glyphs.

<dt><a name="font-weight">Font weight</a>

      <dd>The font weight refers to the boldness or lightness of the glyphs used to render the text, relative to other fonts in the same font family.

<dt><a name="font-stretch">Font stretch</a>

      <dd>The font stretch indicates the desired amount of condensing or expansion in the glyphs used to render the text, relative to other fonts in the same font family.

<dt><a name="font-size">Font size</a>

      <dd>The font size refers to the size of the font from baseline
      to baseline, when set solid (in CSS terms, this is when the
      <span class="propinst-font-size">'font-size'</span> and <span
      class="propinst-line-height">'line-height'</span> properties
      have the same value). 
     The font size corresponds to the 
<span class="index-inst" title="em
square"><a href="#em-square">em square</a></span>, 
a concept used in typography. 
Note that certain glyphs may bleed outside their em squares.

</dl>


<P> On all properties except <span
class="propinst-font-size">'font-size'</span>, 'em' and 'ex' length
values refer to the font size of the current element. For <span
class="propinst-font-size">'font-size'</span>, these length units
refer to the font size of the parent element. Please consult the
section on <a href="./syndata.html#length-units">length units</a> for
more information.

<p>The CSS font properties are used to describe the desired
appearance of text in the document. The font descriptors, in contrast,
are used to describe the characteristics of fonts, so that a suitable
font can be chosen to create the desired appearance. For information
about the classification of fonts, please consult the section on <a
href="#font-descriptors">font descriptors</a>.


<H3><a name="font-family-prop">Font family</a>: the <span
class="propinst-font-family">'font-family'</span> property</H3>

<P>This property specifies a prioritized list of font family names
and/or generic family names. To deal with the problem that a single
font may not contain glyphs to display all the characters in a
document, or that not all fonts are available on all systems, this
property allows authors to specify a list of fonts, all of the same
style and size, that are tried in sequence to see if they contain a
glyph for a certain character. This list is called a <span
class="index-def" title="font set"><dfn>font set</dfn></span>.

<div class="example"><P>
For example, text that contains English words mixed with
mathematical symbols may need a font set of two fonts, one containing
Latin letters and digits, the other containing mathematical symbols. Here
is an example of a font set suitable for a text that is expected to
contain text with Latin characters, Japanese characters, and
mathematical symbols:

<PRE>
BODY { font-family: Baskerville, "Heisi Mincho W3", Symbol, serif }
</PRE>

<P> The glyphs available in the "Baskerville" font (a font that covers only
Latin characters) will be taken from that font, Japanese glyphs will be taken
from "Heisi Mincho W3", and the mathematical symbol glyphs will come from
"Symbol". Any others will come from the generic
font family 'serif'.
</div>

<p>The generic font family will be used if one or more of the other
fonts in a font set is unavailable. Although many fonts provide the
"missing character" glyph, typically an open box, as its name implies
this should not be considered a match.

<P>  There are two types of font family names:</p>
  <DL>
    <DT><span class="index-def"
title="&lt;family-name&gt;::definition of"><a name="value-def-family-name" class="value-def">&lt;family-name&gt;</a></span>
    <DD>
      The name of a font family of choice. In the previous example, "Baskerville",
      "Heisi Mincho W3", and "Symbol" are font families. Font
      family names containing
      <a href="syndata.html#whitespace">whitespace</a> should be
quoted. If quoting is omitted, any <a
href="syndata.html#whitespace">whitespace</a> characters before and
after the font name are <span class="index-inst" title="ignore"><a
href="syndata.html#ignore">ignored</a></span> and any sequence of
whitespace characters inside the font name is converted to a single
space.

    <DT><span class="index-def"
title="&lt;generic-family&gt;::definition of"><a name="value-def-generic-family" class="value-def">&lt;generic-family&gt;</a></span>
    <DD>
      The following
      generic families are defined: 'serif', 'sans-serif', 'cursive',
      'fantasy', and 'monospace'. Please see the section on
      <a href="#generic-font-families">generic font families</a> for
      descriptions of these families. Generic font family names
      are keywords, and therefore must not be quoted.

<P>Authors are encouraged to offer a generic font family as a
      last alternative, for improved robustness.</p>
  </DL>

<div class="html-example"><P>
For example:

<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Font test&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      BODY { font-family: "new century schoolbook", serif }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
   &lt;H1 style="font-family: 'My own font', fantasy"&gt;Test&lt;/H1&gt;
    &lt;P&gt;What's up, Doc?
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</div>

<div class="example"><p>The richer selector syntax of CSS2 may be used to create language-sensitive typography. For example, some Chinese and Japanese characters are unified to have the same Unicode codepoint, although the abstract glyphs are not the same in the two languages.

<pre>
*:lang(ja-jp) { font: 900 14pt/16pt "Heisei Mincho W9", serif }
*:lang(zh-tw) { font: 800 14pt/16.5pt "Li Sung", serif }
</pre>

<p>This selects any element that has the given language - Japanese or Traditional Chinese - and requests the appropriate font.
</div>


<H3><a name="font-styling">Font styling</a>: the
<span class="propinst-font-style">'font-style'</span>,
<span class="propinst-font-variant">'font-variant'</span>,
<span class="propinst-font-weight">'font-weight'</span> and
<span class="propinst-font-stretch">'font-stretch'</span> properties
</H3>

<P> The <span class="propinst-font-style">'font-style'</span> property requests normal (sometimes referred to as "roman" or "upright"), italic,
and oblique faces within a font family. Values have the following
meanings:</p>

<dl>
<dt>normal
<dd>Specifies a font that is classified as 'normal'
in the UA's font database.
<dt>oblique
<dd>Specifies a font that is classified as 'oblique' in the UA's font
database.  Fonts with Oblique, Slanted, or Incline in their names will
typically be labeled 'oblique' in the font database.
A font that is labeled 'oblique' in the UA's font database
may actually have been generated by electronically slanting a normal
font.
<dt>italic
<dd>Specifies a font that is classified
as 'italic' in the UA's font database, or, if that is not available,
one labeled 'oblique'.  Fonts with
<EM>Italic, Cursive</EM>, or <EM>Kursiv</EM> in their names will
typically be labeled 'italic'.
</dl>

<div class="example"><P>
In this example, normal text in an H1, H2, or H3 element will
be displayed with an italic font.
However, emphasized text (EM) within an H1 will appear in a normal face.

<PRE>
H1, H2, H3 { font-style: italic }
H1 EM { font-style: normal }
</PRE>
</div>

<P>In a small-caps font, the glyphs for lowercase letters look similar
to the uppercase ones, but in a smaller size and with slightly
different proportions. The <span
class="propinst-font-variant">'font-variant'</span> property requests
such a font for <span class="index-def" title="bicameral::definition
of">bicameral</span> (having two cases) scripts, as with Latin script. This property has no visible effect for scripts that are
<span class="index-def" title="unicameral::definition of"><dfn>unicameral</dfn></span> (having only one case), as with most of the world's writing systems. Values have the following
meanings:</p>

<dl>
<dt>normal
<dd>Specifies a font that is not labeled as a
small-caps font.
<dt>small-caps
<dd>Specifies a font that is labeled as a
small-caps font. If a genuine
small-caps font is not available, user agents should
simulate a small-caps font, for example by taking a normal font
and replacing the lowercase letters by scaled uppercase
characters. As a last resort, unscaled uppercase letter glyphs in
a normal font may replace glyphs in a small-caps font
so that the text appears in all uppercase letters.
</dl>

<div class="example">
<P> The following example results in an H3 element in small-caps,
with emphasized words (EM) in oblique small-caps:

<PRE>
H3 { font-variant: small-caps }
EM { font-style: oblique }
</PRE>
</div>

<P>Insofar as this property causes text to be transformed to
uppercase, the same considerations as for <span
class="propinst-text-transform">'text-transform'</span> apply.

<P> The <span class="propinst-font-weight">'font-weight'</span>
property specifies the <span>weight</span> of the font. Values have the following
meanings:</p>

<dl>
<dt>100 to 900
<dd>These values
form an ordered sequence, where each number indicates a weight that is
at least as dark as its predecessor.
<dt>normal
<dd>Same as '400'.
<dt>bold
<dd>Same as '700'.
<dt>bolder
<dd>Specifies the next weight that is assigned to a font that is darker
than the inherited one. If there is no such weight, it simply results
in the next darker numerical value (and the font remains unchanged),
unless the inherited value was '900', in which case the resulting
weight is also '900'.
<dt>lighter
<dd>Specifies the next weight that is assigned to a font that is lighter
than the inherited one. If there is no such weight, it simply results
in the next lighter numerical value (and the font remains unchanged),
unless the inherited value was '100', in which case the resulting
weight is also '100'.
</dl>

<div class="example">
<PRE>
P { font-weight: normal }   /* 400 */
H1 { font-weight: 700 }     /* bold */
BODY { font-weight: 400 }
STRONG { font-weight: bolder } /* 500 if available */
</PRE>
</div>

<P>Child elements inherit the <a href="cascade.html#computed-value">
computed value</a> of the weight.



<p>The relative keyword 'wider' sets the value to the next expanded
value above the inherited value (while not increasing it above
'ultra-expanded'); the relative keyword 'narrower' sets the value to
the next condensed value below the inherited value (while not
decreasing it below 'ultra-condensed').  

<H3><a name="font-size-props">Font size</a>: the <span
class="propinst-font-size">'font-size'</span>
and <span class="propinst-font-size-adjust">'font-size-adjust'</span>
properties</H3>


<P>This property describes the size of the font when set solid. The
font size corresponds to the em square, a concept used in typography.
Note that certain glyphs may bleed outside their em squares. Values
have the following meanings:</p>

<DL>
    <DT><span class="index-def" title="&lt;absolute-size&gt;::definition of">
           &lt;absolute-size&gt;</span>
    <DD> An <a name="value-def-absolute-size"
class="value-def">&lt;absolute-size&gt;</a> keyword refers to an entry
in a table of font sizes computed and kept by the user agent. Possible values
are:

    <P> [ xx-small | x-small | small | medium | large | x-large | xx-large ]

    <P>On a computer screen a scaling factor of 1.2 is
    suggested between adjacent indexes; if the 'medium' font is 12pt,
    the 'large' font could be 14.4pt. Different media may need different
    scaling factors. Also, the user agent should take the quality and
    availability of fonts into account when computing the table. The
    table may be different from one font family to another.

<p class="note"><em><strong>Note.</strong> In CSS1, the suggested
scaling factor between adjacent indexes was 1.5 which user experience
proved to be too large.</em></P>

    <DT><span class="index-def" title="&lt;relative-size&gt;::definition
of">&lt;relative-size&gt;</span>

    <DD> A <a name="value-def-relative-size"
    class="value-def">&lt;relative-size&gt;</a> keyword is interpreted
    relative to the table of font sizes and the font size of the
    parent element. Possible values are:

    <P> [ larger | smaller ]

    <P> For example, if the parent element has a font size of
    'medium', a value of 'larger' will make the font size of the
    current element be 'large'.  If the parent element's size is not
    close to a table entry, the user agent is free to interpolate
    between table entries or round off to the closest one. The user
    agent may have to extrapolate table values if the numerical value
    goes beyond the keywords.

    <DT><span class="index-inst" title="&lt;length&gt;"><span
    class="value-inst-length">&lt;length&gt;</span></span>
    <DD>A length value specifies an absolute font size
        (that is independent of the user agent's font table).
        Negative lengths are illegal.
    <DT><span class="index-inst" title="&lt;percentage&gt;"><span
    class="value-inst-percentage">&lt;percentage&gt;
    </span></span>
    <DD>A percentage value specifies an absolute font size relative
        to the parent element's font size. Use of percentage values, or 
	  values in 'em's, leads to more robust and cascadable style sheets.
  </DL>


<div class="example"><P>

<PRE>
P { font-size: 16px; }
@media print {
	P { font-size: 12pt; }
}
BLOCKQUOTE { font-size: larger }
EM { font-size: 150% }
EM { font-size: 1.5em }
</PRE>
</div>



<P>In <span class="index-inst" title="bicameral">bicameral</span>
scripts, the subjective apparent size and legibility of a font are
less dependent on their <span
class="propinst-font-size">'font-size'</span> value than on the value
of their <span class="descinst-x-height">'x-height'</span>, or, more
usefully, on the ratio of these two values, called the <span
class="index-def" title="aspect value"><dfn>aspect value</dfn></span>
(x-height divided by font size). The higher the aspect value, the more
likely it is that a font at smaller sizes will be legible. Inversely,
faces with a lower aspect value will become illegible more rapidly
below a given threshold size than faces with a higher aspect
value. Straightforward font substitution that relies on font size
alone may lead to illegible characters.

<P>For example, the popular font Verdana has an aspect value of 0.58;
when Verdana's font size is 100 units, its x-height is 58 units. For
comparison, Times New Roman has an aspect value of 0.46. Verdana will
therefore tend to remain legible at smaller sizes than Times New
Roman. Conversely, Verdana will often look 'too big' if substituted
for Times New Roman at a chosen size.

<P>This property allows authors to specify an aspect value for an
element that will preserve the x-height of the first choice font in
the substitute font. (Note, however, that this property is applied
regardless of what font is actually chosen. Even when the first choice
font is available, the value is applied. This is required to handle
cases where the value is inherited from an element with different
<span class="propinst-font-family">'font-family'</span> values.)
Values have the following meanings:



<div class="example">
<p>For example, if 14px Verdana (with an aspect value of 0.58) was
unavailable and an available font had an aspect value of 0.46, the
font-size of the substitute would be 14 * (0.58/0.46) = 17.65px.
</div>

<P>Font size adjustments take place when computing the <a
href="cascade.html#actual-value">actual value</a> of <span
class="propinst-font-size">'font-size'</span>. Since inheritance is
based on the <a href="cascade.html#computed-value">computed value</a>,
child elements will inherit unadjusted values.


<P>The first image below shows several typefaces rasterized at a
common font size (11pt. at 72 ppi), together with their aspect
values. Note that faces with higher aspect values appear larger than
those with lower. Faces with very low aspect values are illegible at
the size shown.</p>

<P><img src="images/font-adjust-a.gif" alt="Comparison of 12 point fonts"></p>


<H3><a name="font-shorthand">Shorthand font property</a>: the <span class="propinst-font">'font'</span> property</H3>

<P> The <span class="propinst-font">'font'</span> property is,
except as described <a href="#almost">below</a>, a shorthand property for
setting <span class="propinst-font-style">'font-style'</span>, <span
class="propinst-font-variant">'font-variant'</span>, <span
class="propinst-font-weight">'font-weight'</span>, <span
class="propinst-font-size">'font-size'</span>, <span
class="propinst-line-height">'line-height'</span>, and <span
class="propinst-font-family">'font-family'</span>, at the same place
in the style sheet. The syntax of
this property is based on a traditional typographical shorthand
notation to set multiple properties related to fonts. 

<p>All font-related properties are first reset to their initial values, including those listed in the preceding paragraph plus <span class="propinst-font-stretch">'font-stretch'</span> and <span class="propinst-font-size-adjust">'font-size-adjust'</span>. Then, those properties that are given explicit values in the <span class="propinst-font">'font'</span> shorthand are set to those values. For a definition of allowed and initial values, see the previously defined properties. For reasons of backwards compatibility, it is not possible to set <span class="propinst-font-stretch">'font-stretch'</span> and <span class="propinst-font-size-adjust">'font-size-adjust'</span> to other than their initial values using the <span class="propinst-font">'font'</span> shorthand property; instead, set the individual properties.

<div class="example"><P>

<PRE>
P { font: 12px/14px sans-serif }
P { font: 80% sans-serif }
P { font: x-large/110% "new century schoolbook", serif }
P { font: bold italic large Palatino, serif }
P { font: normal small-caps 120%/120% fantasy }
P { font: oblique 12px "Helvetica Nue", serif; font-stretch: condensed }
</PRE>

<P> In the second rule, the font size percentage value ('80%') refers
to the font size of the parent element. In the third rule, the line
height percentage ('110%') refers to the font size of the element
itself.

<P>The first three rules do not specify the <span
class="propinst-font-variant">'font-variant'</span> and <span
class="propinst-font-weight">'font-weight'</span> explicitly, so these
properties receive their initial values ('normal'). Notice that the font family name "new century schoolbook", which contains spaces, is enclosed in quotes. The fourth rule
sets the <span class="propinst-font-weight">'font-weight'</span> to
'bold', the <span class="propinst-font-style">'font-style'</span> to
'italic', and implicitly sets <span
class="propinst-font-variant">'font-variant'</span> to 'normal'.

<P> The fifth rule sets the <span
class="propinst-font-variant">'font-variant'</span> ('small-caps'),
the <span class="propinst-font-size">'font-size'</span> (120% of the
parent's font size), the <span
class="propinst-line-height">'line-height'</span> (120% of the font
size) and the <span class="propinst-font-family">'font-family'</span>
('fantasy'). It follows that the keyword 'normal' applies to the two
remaining properties: <span
class="propinst-font-style">'font-style'</span> and <span
class="propinst-font-weight">'font-weight'</span>. 

<p>The sixth rule sets the <span
class="propinst-font-style">'font-style'</span>, <span
class="propinst-font-size">'font-size'</span>, and <span
class="propinst-font-family">'font-family'</span>, the other font
properties being set to their initial values. It then sets <span
class="propinst-font-stretch">'font-stretch'</span> to 'condensed'
since that property cannot be set to that value using the <span
class="propinst-font">'font'</span> shorthand property.
</div>


<P>The following values refer to <span class="index-def" title="system
fonts">system fonts</span>:</p>

<dl>
<dt>caption
<dd>The font used for captioned controls (e.g., buttons, drop-downs, etc.).
<dt>icon
<dd>The font used to label icons.
<dt>menu
<dd>The font used in menus (e.g., dropdown menus and menu lists).
<dt>message-box
<dd>The font used in dialog boxes.
<dt>small-caption
<dd>The font used for labeling small controls.
<dt>status-bar
<dd>The font used in window status bars.
</dl>

<P>System fonts may only be set as a whole; that is, the font
family, size, weight, style, etc. are all set at the same time.These values may then be altered individually if desired.  If no
font with the indicated characteristics exists on a given platform,
the user agent should either intelligently substitute (e.g., a smaller
version of the 'caption' font might be used for the 'small-caption'
font), or substitute a user agent default font. As for regular fonts,
if, for a system font, any of the individual properties are not part
of the operating system's available user preferences, those properties
should be set to their initial values.

<P><a name="almost">That is why</a> this property is "almost" a shorthand property: system
fonts can only be specified with this property, not with <span
class="propinst-font-family">'font-family'</span> itself, so <span
class="propinst-font">'font'</span> allows authors to do more than the
sum of its subproperties. However, the individual properties such as <span class="propinst-font-weight">'font-weight'</span> are still given values taken from the system font, which can be independently varied.</p>

<div class="example"><p>

<pre>
BUTTON { font: 300 italic 1.3em/1.7em "FB Armada", sans-serif }
BUTTON P { font: menu }
BUTTON P EM { font-weight: bolder }
</pre>

<p>If the font used for dropdown menus on a particular system
happened to be, for example, 9-point Charcoal, with a weight of 600, then P
elements that were descendants of BUTTON would be displayed as if
this rule were in effect:

<pre>
BUTTON P { font: 600 9px Charcoal }
</pre>

<p>Because the <span class="propinst-font">'font'</span> shorthand
property resets any property not explicitly given a value
to its initial value, this has the same effect as this declaration:

<pre>
BUTTON P {
  font-style: normal;
  font-variant: normal;
  font-weight: 600;
  font-size: 9px;
  line-height: normal;
  font-stretch: normal;
  font-size-adjust: none;
} 
</PRE>

</div>

<h3><a name="generic-font-families">Generic font families</a></h3>

<p>Generic font families are a fallback mechanism, a means of
preserving some of the style sheet author's intent in the worst case
when none of the specified fonts can be selected. For optimum
typographic control, particular named fonts should be used in
style sheets.


<p><a name="defined-to-exist">All five generic font families are defined to exist</a> in all
CSS implementations (they need not necessarily map to five distinct
actual fonts). User agents should provide reasonable
default choices for the generic font families, which express the
characteristics of each family as well as possible within the limits
allowed by the underlying technology.

<p>User agents are encouraged to allow users to select alternative
choices for the generic fonts.

<h4><span class="index-def" title="serif, definition of"><a name="serif-def"><dfn>serif</dfn></a></span></h4>

<p>Glyphs of serif fonts, as the term is used in CSS, have finishing
strokes, flared or tapering ends, or have actual serifed endings
(including slab serifs). Serif fonts are typically
proportionately-spaced. They often display a greater variation between
thick and thin strokes than fonts from the 'sans-serif' generic font
family. CSS uses the term 'serif' to apply to a font for any script,
although other names may be more familiar for particular scripts, such
as Mincho (Japanese), Sung or Song (Chinese), or Pathang (Korean).
Any font that is so described may be used to represent the
generic 'serif' family.

<p>Examples of fonts that fit this description include:</p>

<table>
<tr><td>Latin fonts
  <td>Times New Roman, Bodoni,
Garamond, Minion Web, ITC Stone Serif, MS Georgia, Bitstream Cyberbit
<tr><td>Greek fonts
  <td>Bitstream Cyberbit
<tr><td>Cyrillic fonts
  <td>Adobe Minion Cyrillic, Excelsior Cyrillic Upright,
Monotype Albion 70, Bitstream Cyberbit, ER Bukinst
<tr><td>Hebrew fonts
  <td>New Peninim, Raanana, Bitstream Cyberbit
<tr><td>Japanese fonts
  <td>Ryumin Light-KL, Kyokasho ICA, Futo Min A101
<tr><td>Arabic fonts
  <td>Bitstream Cyberbit
<tr><td>Cherokee fonts
  <td>Lo Cicero Cherokee
</table>

<h4><span class="index-def" title="sans-serif, definition of">
<a name="sans-serif-def"><dfn>sans-serif</dfn></a></span></h4>

<p>Glyphs in sans-serif fonts, as the term is used in CSS, have stroke
endings that are plain  without any flaring, cross stroke, or other
ornamentation. Sans-serif fonts are typically
proportionately-spaced. They often have little variation between thick
and thin strokes, compared to fonts from the 'serif' family. CSS uses
the term 'sans-serif' to apply to a font for any script, although
other names may be more familiar for particular scripts, such as
Gothic (Japanese), Kai (Chinese), Totum or Kodig (Korean). Any font that
is so described may be used to represent the generic 'sans-serif'
family.

<p>Examples of fonts that fit this description include:</p>

<table>
<tr><td>Latin fonts
  <td>MS Trebuchet, ITC Avant Garde Gothic, MS Arial, MS Verdana, Univers,
Futura, ITC Stone Sans, Gill Sans, Akzidenz Grotesk, Helvetica
<tr><td>Greek fonts
  <td>Attika, Typiko New Era, MS Tahoma, Monotype Gill Sans 571, Helvetica Greek
<tr><td>Cyrillic fonts
  <td>Helvetica Cyrillic, ER Univers, Lucida Sans Unicode, Bastion
<tr><td>Hebrew fonts
  <td>Arial Hebrew, MS Tahoma
<tr><td>Japanese fonts
  <td>Shin Go, Heisei Kaku Gothic W5
<tr><td>Arabic fonts
  <td>MS Tahoma
</table>

<h4><span class="index-def" title="cursive, definition of">
<a name="cursive-def"><dfn>cursive</dfn></a></span></h4>

<p>Glyphs in cursive fonts, as the term is used in CSS, generally have
either joining strokes or other cursive characteristics beyond those
of italic typefaces. The glyphs are partially or completely
connected, and the result looks more like handwritten pen or brush
writing than printed letterwork. Fonts for some scripts, such as
Arabic, are almost always cursive. CSS uses the term 'cursive' to
apply to a font for any script, although other names such as Chancery,
Brush, Swing and Script are also used in font names.

<p>Examples of fonts that fit this description include:</p>

<table>
<tr><td>Latin fonts
  <td>Caflisch Script, Adobe Poetica, Sanvito, Ex Ponto, Snell Roundhand,
Zapf-Chancery
<tr><td>Cyrillic fonts
  <td>ER Architekt
<tr><td>Hebrew fonts
  <td>Corsiva
<tr><td>Arabic fonts
  <td>DecoType Naskh, Monotype Urdu 507
</table>

<h4><span class="index-def" title="fantasy, definition of">
<a name="fantasy-def"><dfn>fantasy</dfn></a></span></h4>


<p>Fantasy fonts, as used in CSS, are primarily decorative while
still containing representations of characters (as opposed to Pi or
Picture fonts, which do not represent characters). Examples include:</p>

<table>
<tr><td>Latin fonts
  <td>Alpha Geometrique, Critter, Cottonwood, FB Reactor, Studz
</table>


<h4><span class="index-def" title="monospace, definition of">
<a name="monospace-def"><dfn>monospace</dfn></a></span></h4>


<p>The sole criterion of a monospace font is that all glyphs have the same fixed width. (This can make some scripts,
such as Arabic, look most peculiar.) The effect is similar to a manual
typewriter, and is often used to set samples of computer code.

<p>Examples of fonts which fit this description include:

<table>
<tr><td>Latin fonts
  <td>Courier, MS Courier New, Prestige, Everson Mono
<tr><td>Greek Fonts
  <td>MS Courier New, Everson Mono
<tr><td>Cyrillic fonts
  <td>ER Kurier, Everson Mono
<tr><td>Japanese fonts
  <td>Osaka Monospaced
<tr><td>Cherokee fonts
  <td>Everson Mono
</table>




-->







<h1 align="center">Fonts</h1>

<h2>Introduction</h2>

<P>Setting font properties will be among the most common uses of style
sheets. Unfortunately, there exists no well-defined and universally
accepted taxonomy for classifying fonts, and terms that apply to one
font family may not be appropriate for others. E.g. 'italic' is
commonly used to label slanted text, but slanted text may also be
labeled as being <EM>Oblique, Slanted, Incline, Cursive</EM> or
<EM>Kursiv</EM>. Therefore it is not a simple problem to map typical
font selection properties to a specific font.

<h2><a name="algorithm">Font matching algorithm</a></h2>

<P>Because there is no accepted, universal taxonomy of font
properties, matching of properties to font faces must be done
carefully. The properties are matched in a well-defined order to
insure that the results of this matching process are as consistent as
possible across UAs (assuming that the same library of font faces is
presented to each of them).

<OL>

<LI>The User Agent makes (or accesses) a database of relevant CSS2.1
properties of all the fonts of which the UA is aware. The UA may be
aware of a font because it has been installed locally or it has been
previously downloaded over the web. If there are two fonts with
exactly the same properties, one of them is ignored.

<LI>At a given element and for each character in that element, the UA
assembles the font-properties applicable to that element. Using the
complete set of properties, the UA uses the 'font-family' property to
choose a tentative font family. The remaining properties are tested
against the family according to the matching criteria described with
each property. If there are matches for all the remaining properties,
then that is the matching font face for the given element.

<LI>If there is no matching font face within the 'font-family' being
processed by step 2, and if there is a next alternative 'font-family'
in the font set, then repeat step 2 with the next alternative
'font-family'.

<LI>If there is a matching font face, but it doesn't contain a glyph
for the current character, and if there is a next alternative
'font-family' in the font sets, then repeat step 2 with the next
alternative 'font-family'. See <A HREF="#appendix-c">appendix C</A>
for a description of font and character encoding.

<LI>If there is no font within the family selected in 2, then use a
UA-dependent default 'font-family' and repeat step 2, using the best
match that can be obtained within the default font.

</OL>

<P>(The above algorithm can be optimized to avoid having to revisit
the CSS2.1 properties for each character.)

<P>The per-property matching rules from (2) above are as follows:

<OL>

<LI><A HREF="#font-style">'font-style'</A> is tried first. 'italic'
will be satisfied if there is either a face in the UA's font database
labeled with the CSS keyword 'italic' (preferred) or 'oblique'.
Otherwise the values must be matched exactly or font-style will fail.

<LI><A HREF="#font-variant">'font-variant'</A> is tried next. 'normal'
matches a font not labeled as 'small-caps'; 'small-caps' matches (1) a
font labeled as 'small-caps', (2) a font in which the small caps are
synthesized, or (3) a font where all lowercase letters are replaced by
upper case letters. A small-caps font may be synthesized by
electronically scaling uppercase letters from a normal font.

<LI><A HREF="#font-weight">'font-weight'</A> is matched next, it will
never fail. (See 'font-weight' below.)

<LI><A HREF="#font-size">'font-size'</A> must be matched within a
UA-dependent margin of tolerance. (Typically, sizes for scalable fonts
are rounded to the nearest whole pixel, while the tolerance for
bitmapped fonts could be as large as 20%.) Further computations, e.g.
by 'em' values in other properties, are based on the 'font-size' value
that is used, not the one that is specified.

</OL>

<H2><a name="font-family-prop">Font family</a>: the <span
class="propinst-font-family">'font-family'</span> property</H2>

<!-- #include src=properties/font-family.srb -->

<P>The value is a prioritized list of font family names and/or generic
family names. Unlike most other CSS properties, values are separated
by a comma to indicate that they are alternatives:

<PRE>
BODY { font-family: gill, helvetica, sans-serif }
</PRE>

<P>There are two types of list values:

<DL>

<dt>&lt;family-name&gt;

<DD>The name of a font family of choice. In the last example, "gill"
and "helvetica" are font families.

<dt>&lt;generic-family&gt;

<DD>In the example above, the last value is a generic family name. The
following generic families are defined:

<UL>

<LI>'serif' (e.g. Times)

<LI>'sans-serif' (e.g. Helvetica)

<LI>'cursive' (e.g. Zapf-Chancery)

<LI>'fantasy' (e.g. Western)

<LI>'monospace' (e.g. Courier)

</UL>

<P>Style sheet designers are encouraged to offer a generic font family
as a last alternative.

</DL>

<P>Font names containing whitespace should be quoted:

<PRE>
BODY { font-family: "new century schoolbook", serif }
  
&lt;BODY STYLE="font-family: 'My own font', fantasy"&gt;
</PRE>

<P>If quoting is omitted, any whitespace characters before and after
the font name are ignored and any sequence of whitespace characters
inside the font name is converted to a single space.

<H2><a name="font-styling">Font styling</a>: the
<span class="propinst-font-style">'font-style'</span> property</H2>

<!-- #include src=properties/font-style.srb -->

<P>The 'font-style' property selects between normal (sometimes
referred to as "roman" or "upright"), italic and oblique faces within
a font family.

<P>A value of 'normal' selects a font that is classified as 'normal'
in the UA's font database, while 'oblique' selects a font that is
labeled 'oblique'. A value of 'italic' selects a font that is labeled
'italic', or, if that is not available, one labeled 'oblique'.

<P>The font that is labeled 'oblique' in the UA's font database may
actually have been generated by electronically slanting a normal font.

<P>Fonts with Oblique, Slanted or Incline in their names will
typically be labeled 'oblique' in the UA's font database. Fonts with
<EM>Italic, Cursive</EM> or <EM>Kursiv</EM> in their names will
typically be labeled 'italic'.

<PRE>
H1, H2, H3 { font-style: italic }
H1 EM { font-style: normal }
</PRE>

<P>In the example above, emphasized text within 'H1' will appear in a
normal face.

<H2><a name="small-caps">Small-caps</a>: the
<span class="propinst-font-variant">'font-variant'</span> property</H2>

<!-- #include src=properties/font-variant.srb -->

<P>Another type of variation within a font family is the small-caps.
In a small-caps font the lower case letters look similar to the
uppercase ones, but in a smaller size and with slightly different
proportions. The 'font-variant' property selects that font.

<P>A value of 'normal' selects a font that is not a small-caps font,
'small-caps' selects a small-caps font. It is acceptable (but not
required) in CSS2.1 if the small-caps font is a created by taking a
normal font and replacing the lower case letters by scaled uppercase
characters. As a last resort, uppercase letters will be used as
replacement for a small-caps font.

<P>The following example results in an 'H3' element in small-caps,
with emphasized words in oblique small-caps:

<PRE>
H3 { font-variant: small-caps }
EM { font-style: oblique }
</PRE>

<P>There may be other variants in the font family as well, such as
fonts with old-style numerals, small-caps numerals, condensed or
expanded letters, etc. CSS2.1 has no properties that select those.

<P><EM>Note:</EM> insofar as this property causes text to be
transformed to uppercase, the same considerations as for <A
href="#text-transform">'text-transform'</A> apply.

<H2><a name="font-boldness">Font boldness</a>: the
<span class="propinst-font-weight">'font-weight'</span> property</H2>

<!-- #include src=properties/font-weight.srb -->

<P>The 'font-weight' property selects the weight of the font. The
values '100' to '900' form an ordered sequence, where each number
indicates a weight that is at least as dark as its predecessor. The
keyword 'normal' is synonymous with '400', and 'bold' is synonymous
with '700'. Keywords other than 'normal' and 'bold' have been shown to
be often confused with font names and a numerical scale was therefore
chosen for the 9-value list.

<PRE>
P { font-weight: normal }   /* 400 */
H1 { font-weight: 700 }     /* bold */
</PRE>

<P>The 'bolder' and 'lighter' values select font weights that are
relative to the weight inherited from the parent:

<PRE>
STRONG { font-weight: bolder }
</PRE>

<P>Child elements inherit the resultant weight, not the keyword value.

<P>Fonts (the font data) typically have one or more properties whose
values are names that are descriptive of the "weight" of a font. There
is no accepted, universal meaning to these weight names. Their primary
role is to distinguish faces of differing darkness within a single
font family. Usage across font families is quite variant; for example
a font that you might think of as being bold might be described as
being <EM>Regular, Roman, Book, Medium, Semi-</EM> or <EM>DemiBold,
Bold,</EM> or <EM>Black,</EM> depending on how black the "normal" face
of the font is within the design. Because there is no standard usage
of names, the weight property values in CSS2.1 are given on a numerical
scale in which the value '400' (or 'normal') corresponds to the
"normal" text face for that family. The weight name associated with
that face will typically be <EM>Book, Regular, Roman, Normal</EM> or
sometimes <EM>Medium</EM>.

<P>The association of other weights within a family to the numerical
weight values is intended only to preserve the ordering of darkness
within that family. However, the following heuristics tell how the
assignment is done in typical cases:

<UL>

<LI>If the font family already uses a numerical scale with nine values
(like e.g. <EM>OpenType</EM> does), the font weights should be mapped
directly.

<LI>If there is both a face labeled <EM>Medium</EM> and one labeled
<EM>Book, Regular, Roman</EM> or <EM>Normal,</EM> then the
<EM>Medium</EM> is normally assigned to the '500'.

<LI>The font labeled "Bold" will often correspond to the weight value '700'.

<LI>If there are fewer then 9 weights in the family, the default
algorithm for filling the "holes" is as follows. If '500' is
unassigned, it will be assigned the same font as '400'. If any of the
values '600', '700', '800' or '900' remains unassigned, they are
assigned to the same face as the next darker assigned keyword, if any,
or the next lighter one otherwise. If any of '300', '200' or '100'
remains unassigned, it is assigned to the next lighter assigned
keyword, if any, or the next darker otherwise.

</UL>

<P>The following two examples show typical mappings.</P>

<div class="html-example">
<P>Assume four weights in the "Rattlesnake" family, from lightest to
darkest: <EM>Regular, Medium, Bold, Heavy.</EM></p>
<TABLE border=1 summary="Example of font-weight mapping">
<CAPTION>First example of font-weight mapping</CAPTION>
<!-- rattlesnake, ostrich and more at the Austin meeting -->
<THEAD>
<TR><TH>Available faces <TH>Assignments <TH>Filling the holes
</THEAD>
<TR><TD>"Rattlesnake Regular"    <TD> 400          <TD> 100, 200, 300
<TR><TD>"Rattlesnake Medium"     <TD> 500          <TD>&nbsp;
<TR><TD>"Rattlesnake Bold"       <TD> 700          <TD> 600
<TR><TD>"Rattlesnake Heavy"      <TD> 800          <TD> 900
</TABLE>
</div>

<div class="html-example">
<P>Assume six weights in the
"Ice Prawn" family: <EM>Book, Medium, Bold, Heavy, Black,
ExtraBlack.</EM> Note that in this instance the user agent
has decided <EM>not</EM> to assign a numeric
value to "Ice Prawn ExtraBlack".</p>

<TABLE border=1 summary="Example of font-weight mapping. Note
                that ExtraBlack is not mapped to a value.">
<CAPTION>Second example of font-weight mapping</CAPTION>
<THEAD>
<TR><TH>Available faces <TH>Assignments <TH>Filling the holes
</THEAD>
<TR><TD>"Ice Prawn Book"       <TD> 400          <TD> 100, 200, 300
<TR><TD>"Ice Prawn Medium"     <TD> 500          <TD>&nbsp;
<TR><TD>"Ice Prawn Bold"       <TD> 700          <TD> 600
<TR><TD>"Ice Prawn Heavy"      <TD> 800          <TD>&nbsp;
<TR><TD>"Ice Prawn Black"      <TD> 900          <TD>&nbsp;
<TR><TD>"Ice Prawn ExtraBlack" <TD> (none)       <TD>&nbsp;
</TABLE>
</div>


<P>Since the intent of the relative keywords 'bolder' and 'lighter' is
to darken or lighten the face <EM>within the family</EM> and because a
family may not have faces aligned with all the symbolic weight values,
the matching of 'bolder' is to the next darker face available on the
client within the family and the matching of 'lighter' is to the next
lighter face within the family. To be precise, the meaning of the
relative keywords 'bolder' and 'lighter' is as follows:

<UL>

<LI>'bolder' selects the next weight that is assigned to a font that
is darker than the inherited one. If there is no such weight, it
simply results in the next darker numerical value (and the font
remains unchanged), unless the inherited value was '900' in which case
the resulting weight is also '900'.

<LI>'lighter' is similar, but works in the opposite direction: it
selects the next lighter keyword with a different font from the
inherited one, unless there is no such font, in which case it selects
the next lighter numerical value (and keeps the font unchanged).

</UL>

<P>There is no guarantee that there will be a darker face for each of
the 'font-weight' values; for example, some fonts may have only a
normal and a bold face, others may have eight different face weights.
There is no guarantee on how a UA will map font faces within a family
to weight values. The only guarantee is that a face of a given value
will be no less dark than the faces of lighter values.

<H2><a name="font-size-props">Font size</a>: the <span
class="propinst-font-size">'font-size'</span>
property</H2>

<!-- #include src=properties/font-size.srb -->

<DL>
<DT><B>&lt;absolute-size&gt;</B>

<DD>An &lt;absolute-size&gt; keyword is an index to a table of font
sizes computed and kept by the UA. Possible values are:
<P> [ xx-small | x-small | small | medium | large | x-large | xx-large ]
<p>The following table provides user agent guidelines for the absolute-size 
scaling factor and their mapping to HTML heading and absolute font-sizes. The 
'medium' value is used as the reference middle value. The user agent may fine 
tune these values for different fonts or different types of display devices.</p>

<table border="1" style="border-collapse: collapse" width="73%" id="AutoNumber2">
  <tr>
    <th width="16%">CSS absolute-size values</th>
    <td width="12%" align="center">xx-small</td>
    <td width="9%" align="center">x-small</td>
    <td width="10%" align="center">small</td>
    <td width="11%" align="center">medium</td>
    <td width="11%" align="center">large</td>
    <td width="12%" align="center">x-large</td>
    <td width="11%" align="center">xx-large</td>
    <td width="8%" align="center">&nbsp;</td>
  </tr>
  <tr>
    <th width="16%">scaling factor</th>
    <td width="12%" align="center">3/5</td>
    <td width="9%" align="center">3/4</td>
    <td width="10%" align="center">8/9</td>
    <td width="11%" align="center">1</td>
    <td width="11%" align="center">6/5</td>
    <td width="12%" align="center">3/2</td>
    <td width="11%" align="center">2/1</td>
    <td width="8%" align="center">3/1</td>
  </tr>
  <tr>
    <th width="16%">HTML headings</th>
    <td width="12%" align="center">h6</td>
    <td width="9%" align="center">&nbsp;</td>
    <td width="10%" align="center">h5</td>
    <td width="11%" align="center">h4</td>
    <td width="11%" align="center">h3</td>
    <td width="12%" align="center">h2</td>
    <td width="11%" align="center">h1</td>
    <td width="8%" align="center">&nbsp;</td>
  </tr>
  <tr>
    <th width="16%">HTML font sizes</th>
    <td width="12%" align="center">1</td>
    <td width="9%" align="center">&nbsp;</td>
    <td width="10%" align="center">2</td>
    <td width="11%" align="center">3</td>
    <td width="11%" align="center">4</td>
    <td width="12%" align="center">5</td>
    <td width="11%" align="center">6</td>
    <td width="8%" align="center">7</td>
  </tr>
</table>

<p>
Different media may need different scaling factors. Also, the UA
should take the quality and availability of fonts into account when
computing the table. The table may be different from one font family
to another.
</p>

<p class="note"><em><strong>Note 1.</strong> To preserve readability, a UA applying 
these guidelines should nevertheless avoid creating font-size resulting
 in less than 9 pixels per EM unit on a computer display .</em></p>
 
<p class="note"><em><strong>Note 2.</strong> In CSS1, the suggested
scaling factor between adjacent indexes was 1.5 which user experience
proved to be too large. In CSS2, the suggested scaling factor for computer 
screen between adjacent indexes was 1.2 which still created issues for the small 
sizes. The new scaling factor varies between each index to provide better 
readability.</em></p>


<DT><B>&lt;relative-size&gt;</B>

<DD>A &lt;relative-size&gt; keyword is interpreted relative to the
table of font sizes and the font size of the parent element. Possible
values are: [ larger | smaller ]. For example, if the parent element
has a font size of 'medium', a value of 'larger' will make the font
size of the current element be 'large'. If the parent element's size
is not close to a table entry, the UA is free to interpolate between
table entries or round off to the closest one. The UA may have to
extrapolate table values if the numerical value goes beyond the
keywords.

</DL>

<P>Length and percentage values should not take the font size table
into account when calculating the font size of the element.

<P>Negative values are not allowed.

<P>On all other properties, 'em' and 'ex' length values refer to the
font size of the current element. On the 'font-size' property, these
length units refer to the font size of the parent element.

<P>Note that an application may reinterpret an explicit size,
depending on the context. E.g., inside a VR scene a font may get a
different size because of perspective distortion.

<P>Examples:

<PRE>
P { font-size: 16px; }
@media print {
	P { font-size: 12pt; }
}
BLOCKQUOTE { font-size: larger }
EM { font-size: 150% }
EM { font-size: 1.5em }
</PRE>

<H2><a name="font-shorthand">Shorthand font property</a>: the <span class="propinst-font">'font'</span> property</H2>

<!-- #include src=properties/font.srb -->

<P>The 'font' property is a shorthand property for setting <A
HREF="#font-style">'font-style'</A> <A
HREF="#font-variant">'font-variant'</A> <A
HREF="#font-weight">'font-weight'</A> <A
HREF="#font-size">'font-size'</A>, <A
HREF="#line-height">'line-height'</A> and <A
HREF="#font-family">'font-family'</A> at the same place in the style
sheet. The syntax of this property is based on a traditional
typographical shorthand notation to set multiple properties related to
fonts.

<P>For a definition of allowed and initial values, see the previously
defined properties. Properties for which no values are given are set
to their initial value.

<PRE>
P { font: 12px/14px sans-serif }
P { font: 80% sans-serif }
P { font: x-large/110% "new century schoolbook", serif }
P { font: bold italic large Palatino, serif }
P { font: normal small-caps 120%/120% fantasy }
</PRE>

<P>In the second rule, the font size percentage value ('80%') refers
to the font size of the parent element. In the third rule, the line
height percentage refers to the font size of the element itself.

<P>In the first three rules above, the 'font-style', 'font-variant'
and 'font-weight' are not explicitly mentioned, which means they are
all three set to their initial value ('normal'). The fourth rule sets
the 'font-weight' to 'bold', the 'font-style' to 'italic' and
implicitly sets 'font-variant' to 'normal'.

<P>The fifth rule sets the 'font-variant' ('small-caps'), the
'font-size' (120% of the parent's font), the 'line-height' (120% times
the font size) and the 'font-family' ('fantasy'). It follows that the
keyword 'normal' applies to the two remaining properties: 'font-style'
and 'font-weight'.

</BODY>
</HTML>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
