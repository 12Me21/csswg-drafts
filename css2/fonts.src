<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: fonts.src,v 1.37 1998-01-27 16:53:40 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Fonts</TITLE>
<LINK rel="next" href="text.html">
<LINK rel="previous" href="colors.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">Fonts</H1>

<h2>Introduction</h2>

<P>When a document's text is to be displayed visually, each character
(abstract information element) must be mapped to some representation
that may be drawn on the screen, paper, etc.

Each of these <span class="index-def"
title="glyph">glyphs</span> constitutes a graphical depiction of a character.
(as opposed to, for example, an aural, textual, or numerical depiction
of that character) One or more characters may be depicted by one or
more glyphs, in a possibly context-dependent fashion.

A <span class="index-def" title="glyph representation"><em>glyph
representation</em></span> is the actual artistic representation of an
abstract glyph, in some typographic style, in the form of outlines or
bitmaps.

A <span class="index-def" title="font">font</span> is a set of glyph
representations, all observing same basic motif according to design,
size, appearance, and other attributes associated with the entire set.

<P>A visual user agent must address the following issues before actually
	rendering a character:</p>

<ul>
<li>Has the author specified a font for this character?

<li>Does the client's user agent have this font available?

<li>If so, what glyph or glyphs does this character (or sequence of
characters) map to?

<li>If not, what should be done? Should a different font be substituted?
Can the font be synthesized? Can it be retrieved from the Web?
</ul>

<P>In both CSS1 and CSS2, authors specify font characteristics
via a series of font properties. 

<P>What use the user agent makes of these properties differs greatly
between CSS1 and CSS2. In CSS1, all fonts were assumed to be present on
the client system and were identified solely by name. Alternate fonts
could be specified with the properties, but beyond that, user agents
had no way to suggest any other fonts (even stylistically similar
fonts that the user agent had available) other than generic default
fonts.

<P>CSS2 changes all that, and allows user agents much greater liberty
in selecting a font when an author's requested font is not immediately
available. CSS2 improves client-side font matching, enables font
synthesis and progressive rendering, and enables fonts to be
downloaded over the Web.


<P>In the CSS font model, each user agent has a "font database" at its
disposition. CSS2 allows stylesheet authors to contribute towards that
database. When asked to display a character with a particular font,
the user agent first identifies the font in the database that "best
fits" the specified font (according to the <a href="#algorithm">font
matching algorithm)</a> Once it has identified a font, it retrieves
the font data locally or from the Web, and may display the character
using those glyph representations.

<P>In light of this simple model, we have organized the specification
into two sections. The first concerns the <a
href="#font-specification">font specification mechanism</a>, whereby
authors specify which fonts they would like to have used.  The
second concerns the <a href="#font-selection">font selection
mechanism</a>, whereby the client's user agent identifies and loads a
font that best fits the author's specification.

<P>How the user agent constructs <!--and consults--> the font database lies
outside the scope of this specification since the database's
implementation depends on the operating system, the windowing system,
the client, etc. Similarly, this specification does not mandate how
the user agent should handle error conditions such as when none of the desired
fonts are available.

<H2><a name="font-specification">Font specification</a></h2>

<P> The first phase of the CSS font mechanism concerns how authors
specify which fonts should be used by a client user
agent. Unfortunately, there exists no well-defined and universally
accepted taxonomy for classifying fonts, and terms that apply to one
font family may not be appropriate for others. For example, the term
'italic' is commonly used to label slanted text, but slanted text may
also be labeled <EM>Oblique, Slanted, Incline, Cursive</EM> or
<EM>Kursiv</EM>.

<P>Since it is not possible to provide authors with a perfect font
naming scheme, CSS has authors refer to pertinent characteristics of a
font through a series of properties. The property values form the
basis of the user agent's <a href="#font-selection">font
selection</a>.

<h3><a name="font-properties">Font specification properties</a></h3>
<P>CSS2 specifies fonts by using the following properties:

<dl>
<dt><strong><a name="font-family">Font family</a></strong>

<dd>A <span class="index-def" title="font family"> font family</span>
is a group of fonts that resemble one another.  One member of the
family may be italic, another other bold, another bold and italic,
etc. Examples of font family names include Helvetica, New Century
Schoolbook, Kyokasho ICA L. Font family names are not restricted to
Latin characters.  Font families may be grouped into different
categories: those with or without serifs, those whose characters are
or are not proportionally spaced, those that resemble handwriting,
those that are fantasy fonts, etc.

<dt><strong><a name="font-style">Font style</a></strong>
<dd>The font style specifies whether the specified font is normal,
	  italic, or oblique (italic and oblique fonts are similar,
	  but not the same, especially for fonts with serifs).
<dt><strong><a name="font-variant">Font variant</a></strong>
<dd>The font variant indicates whether the font contains normal upper
	  and lower case characters or whether it contains small-caps
	  characters. 
<dt><strong><a name="font-weight">Font weight</a></strong>
<dd>The font weight refers to the boldness or lightness of a font's
glyphs.
<dt><strong><a name="font-size">Font size</a></strong>
<dd>The font size refers to the size of the font.
</dl>


<P> On all properties except <span
class="propinst-font-size">'font-size'</span>, 'em' and 'ex' length
values refer to the font size of the current element. For <span
class="propinst-font-size">'font-size'</span>, these length units
refer to the font size of the parent element. Please consult the
section on <a href="./syndata.html#length-units">length units</a> for
more information.

<P>For information about the classification of fonts in general,
please consult the section on <a
href="#font-descriptors">font descriptors</a>.


<H3><a name="font-family">Font family</a>: the <span
class="propinst-font-family">'font-family'</span></H3>

<!-- #include src=properties/font-family.srb -->

<P>This property specifies a prioritized list of font family names
and/or generic family names. To deal with the problem that a single
font may not be enough to display all the characters in a document, or
even a single element, this property allows authors to specify a list
of fonts, all of the same style and size, that are tried in sequence
to see if they contain a glyph for a certain character. This list is
called a <span class="index-def" title="font set"><em>font
set</em></span>.

<div class="example"><P>
For example, text that contains English text mixed with
mathematical symbols may need a font set of two fonts, one containing
letters and digits, the other containing mathematical symbols. Here
is an example of a font set suitable for a text that is expected to
contain text with Latin characters, Japanese characters, and
mathematical symbols:

<PRE>
  BODY { font-family: Baskerville, "Heisi Mincho W3", Symbol, serif }
</PRE>

<P> The characters available in the Baskerville font (a font with only
Latin characters) will be taken from that font, Japanese will be taken
from Heisi Mincho W3, and the mathematical symbols will come from
Symbol. Any other characters will (hopefully) come from the generic
font family 'serif'. The 'serif' font family will also be used if one
or more of the other fonts is unavailable.
</div>

<P>  There are two types of list values:
  <DL>
    <DT><span class="index-def"
title="&lt;family-name&gt;::definition of"><a name="value-def-family-name" class="value-def">&lt;family-name&gt;</a></span> 
    <DD>
      The name of a font family of choice. In the last example, "gill"
      and "Helvetica" are font families.
    <DT><span class="index-def"
title="&lt;generic-family&gt;::definition of"><a name="value-def-generic-family" class="value-def">&lt;generic-family&gt;</a></span> 
    <DD>
      In the example above, the last value is a <a
      href="#generic-font-families">generic family name</a>. The following
      generic families are defined: 'serif','sans-serif', 'cursive',
      'fantasy' and 'monospace'.
 
<P>Authors are encouraged to offer a generic font family as a
      last alternative.</p>
  </DL>

<P> Font names containing <a href="syndata.html#whitespace">whitespace</a> should be quoted.

<div class="html-example"><P>
For example:

<PRE>
  &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;STYLE type="text/css"&gt;
    BODY { font-family: "new century schoolbook", serif }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt; 
  &lt;BODY style="font-family: 'My own font', fantasy"&gt;
  &lt;P&gt;What's up, Doc?
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>
</div>

<P> If quoting is omitted, any <a href="syndata.html#whitespace">whitespace</a> characters before and after
the font name are <span class="index-inst" title="skip"><a
href="syndata.html#skip">skipped</a></span> and any sequence of
whitespace characters inside the font name is converted to a single
space.

<P>The generic font family values are considered keywords and therefore
must not be quoted.

<H3><a name="font-style">Font style</a>: the
<span class="propinst-font-style">'font-style'</span>, 
<span class="propinst-font-variant">'font-variant'</span>, and
<span class="propinst-font-weight">'font-weight'</span> properties
</H3>

<!-- #include src=properties/font-style.srb -->

<P> The <span class="propinst-font-style">'font-style'</span> property selects
between normal (sometimes referred to as "roman" or "upright"), italic
and oblique faces within a font family.

<P> A value of 'normal' selects a font that is classified as 'normal'
in the UA's font database, while 'oblique' selects a font that is
labeled 'oblique'.  A value of 'italic' selects a font that is labeled
'italic', or, if that is not available, one labeled 'oblique'.

<P> The font that is labeled 'oblique' in the UA's font database may
actually have been generated by electronically slanting a normal font.

<P> Fonts with Oblique, Slanted or Incline in their names will
typically be labeled 'oblique' in the font database.  Fonts with
<EM>Italic, Cursive</EM> or <EM>Kursiv</EM> in their names will
typically be labeled 'italic'.

<div class="example"><P>
<PRE>
  H1, H2, H3 { font-style: italic }
  H1 EM { font-style: normal }
</PRE>

<P> In the example above, normal text in an H1, H2, or H3 element will
be displayed with an italic font. However, emphasized text within H1 will
appear in a normal face.
</div>

<!-- #include src=properties/font-variant.srb -->

<P>In a small-caps font, the lower case letters look similar to the
uppercase ones, but in a smaller size and with slightly different
proportions. The <span
class="propinst-font-variant">'font-variant'</span> property selects
that font. This property has no visible effect for scripts which are
unicameral (having only one case).


<P> A value of 'normal' selects a font that is not labeled as a
small-caps font, 'small-caps' selects a small-caps font. If a genuine
small-caps font is not available, it is acceptable (but not required)
in CSS2 if the small-caps font is a created by taking a normal font
and replacing the lower case letters by scaled uppercase
characters. As a last resort, unscaled uppercase letters will be used
as replacement for a small-caps font so that the text appears in all
capitals.


<div class="example"><P>
<P> The following example results in an H3 element in small-caps,
with emphasized words in oblique small-caps:

<PRE>
  H3 { font-variant: small-caps }
  EM { font-style: oblique }
</PRE>
</div>

<P> There may be other variants in the font family as well, such as
fonts with old-style numerals, small-caps numerals, condensed or
expanded letters, etc. CSS2 has no properties that select those.

<P>Insofar as this property causes text to be transformed to
uppercase, the same considerations as for <span
class="propinst-text-transform">'text-transform'</span> apply.

<!-- #include src=properties/font-weight.srb -->

<P> The <span class="propinst-font-weight">'font-weight'</span>
property selects the weight of the font. The values '100' to '900'
form an ordered sequence, where each number indicates a weight that is
at least as dark as its predecessor. The keyword 'normal' is
synonymous with '400', and 'bold' is synonymous with '700'. Keywords
other than 'normal' and 'bold' have been shown to be often confused
with font names and a numerical scale was therefore chosen for the
9-value list.

<div class="example"><P>
<PRE>
  P { font-weight: normal }   /* 400 */
  H1 { font-weight: 700 }     /* bold */
</PRE>

<P> The 'bolder' and 'lighter' values select font weights that are
relative to the weight inherited from the parent:

<PRE>
  STRONG { font-weight: bolder }
</PRE>
</div>

<P> Child elements inherit the resultant weight, not the keyword
value.

<P> Fonts (the font data) typically have one or more properties whose
values are names that are descriptive of the "weight" of a font. There
is no accepted, universal meaning to these weight names. Their primary
role is to distinguish faces of differing darkness within a single
font family. Usage across font families is quite variant; for example
a font that you might think of as being bold might be described as
being <EM>Regular, Roman, Book, Medium, Semi-</EM> or <EM>DemiBold,
Bold,</EM> or <EM>Black,</EM> depending on how black the "normal" face
of the font is within the design. Because there is no standard usage
of names, the weight property values in CSS2 are given on a numerical
scale in which the value '400' (or 'normal') corresponds to the
"normal" text face for that family. The weight name associated with
that face will typically be <EM>Book, Regular, Roman, Normal</EM> or
sometimes <EM>Medium</EM>.

<P> The association of other weights within a family to the numerical
weight values is intended only to preserve the ordering of darkness
within that family. However, the following heuristics tell how the
assignment is done in typical cases:</p>

<UL>
    <LI>
      If the font family already uses a numerical scale with nine
      values (as e.g. <EM>OpenType</EM> does), the font weights
      should be mapped directly.
    <LI>
      If there is both a face labeled <EM>Medium</EM> and one labeled
      <EM>Book, Regular, Roman</EM> or <EM>Normal,</EM> then the
      <EM>Medium</EM> is normally assigned to the '500'.
    <LI>
      The font labeled "Bold" will often correspond to the weight value '700'.
    <LI>
      If there are fewer then 9 weights in the family, the default
      algorithm for filling the "holes" is as follows. If '500' is
      unassigned, it will be assigned the same font as '400'. If any
      of the values '600', '700', '800' or '900' remains unassigned,
      they are assigned to the same face as the next darker assigned
      keyword, if any, or the next lighter one otherwise. If any of
      '300', '200' or '100' remains unassigned, it is assigned to the
      next lighter assigned keyword, if any, or the next darker
      otherwise.
</UL>

The following two examples illustrate the process. Assume four
weights in the "Example1" family, from lightest to darkest:
<EM>Regular, Medium, Bold, Heavy.</EM> And assume six weights in the
"Example2" family: <EM>Book, Medium, Bold, Heavy, Black,
ExtraBlack.</EM> Note how in the second example it has been decided
<EM>not</EM> to assign "Example2 ExtraBlack" to anything.

<PRE>
    Available faces       |  Assignments  |  Filling the holes
    ----------------------+---------------+-------------------
    "Example1 Regular"    |  400          |  100, 200, 300
    "Example1 Medium"     |  500          |
    "Example1 Bold"       |  700          |  600
    "Example1 Heavy"      |  800          |  900
</PRE>
<PRE>
    Available faces       |  Assignments  |  Filling the holes
    ----------------------+---------------+-------------------
    "Example2 Book"       |  400          |  100, 200, 300
    "Example2 Medium"     |  500          |
    "Example2 Bold"       |  700          |  600      
    "Example2 Heavy"      |  800          |
    "Example2 Black"      |  900          |
    "Example2 ExtraBlack" |  (none)       |
</PRE>

<P> Since the intent of the relative keywords 'bolder' and 'lighter'
is to darken or lighten the face <EM>within the family</EM> and
because a family may not have faces aligned with all the symbolic
weight values, the matching of 'bolder' is to the next darker face
available on the client within the family and the matching of
'lighter' is to the next lighter face within the family.  To be
precise, the meaning of the relative keywords 'bolder' and 'lighter'
is as follows:</p>

<UL>
    <LI>
      'bolder' selects the next weight that is assigned to a font that
      is darker than the inherited one. If there is no such weight, it
      simply results in the next darker numerical value (and the font
      remains unchanged), unless the inherited value was '900' in
      which case the resulting weight is also '900'.
    <LI>
      'lighter' is similar, but works in the opposite direction: it
      selects the next lighter keyword with a different font from the
      inherited one, unless there is no such font, in which case it
      selects the next lighter numerical value (and keeps the font
      unchanged).
</UL>

<P> There is no guarantee that there will be a darker face for each of
the <span class="propinst-font-weight">'font-weight'</span> values;
for example, some fonts may have only a normal and a bold face, others
may have eight different face weights. There is no guarantee on how a
UA will map font faces within a family to weight values. The only
guarantee is that a face of a given value will be no less dark than
the faces of lighter values.

<H3><a name="font-size">Font size</a>: the <span
class="propinst-font-size">'font-size'</span> 
and <span class="propinst-font-size-adjust">'font-size-adjust'</span>
properties</H3>

<!-- #include src=properties/font-size.srb -->

<DL>
    <DT><span class="index-def" title="&lt;absolute-size&gt;::definition of">
           &lt;absolute-size&gt; </span> 
    <DD> An <a name="value-def-absolute-size" class="value-def">&lt;absolute-size&gt;</a> keyword is an index to a
    table of font sizes computed and kept by the UA. Possible values
    are:

    <P> [ xx-small | x-small | small | medium | large | x-large | xx-large ]

    <P>On a computer screen a scaling factor of 1.5 is suggested
    between adjacent indexes; if the 'medium' font is 10pt, the
    'large' font could be 15pt. Different media may need different
    scaling factors. Also, the UA should take the quality and
    availability of fonts into account when computing the table. The
    table may be different from one font family to another.

    <DT><span class="index-def" title="&lt;relative-size&gt;::definition
of">&lt;relative-size&gt;</span> 

    <DD> A <a name="value-def-relative-size" class="value-def">&lt;relative-size&gt;</a> keyword is interpreted
    relative to the table of font sizes and the font size of the
    parent element. Possible values are:

    <P> [ larger | smaller ]

    <P> For example, if the parent element has a font size of
    'medium', a value of 'larger' will make the font size of the
    current element be 'large'.  If the parent element's size is not
    close to a table entry, the UA is free to interpolate between
    table entries or round off to the closest one. The UA may have to
    extrapolate table values if the numerical value goes beyond the
    keywords.
  </DL>

<P> Length and percentage values should not take the font size table
into account when calculating the font size of the element.

<P>Negative values are not allowed.


<P>An application may reinterpret an explicit size, depending on the
context, for example, inside a VR scene a font may get a different
size because of perspective distortion.

<div class="example"><P>
<P> Examples:

<PRE>
  P { font-size: 12pt; }
  BLOCKQUOTE { font-size: larger }
  EM { font-size: 150% }
  EM { font-size: 1.5em }
</PRE>
</div>


<!-- #include src=properties/font-size-adjust.srb -->

<P>This property preserves the <span class="index-inst"
title="x-height">x-height</span> of the first choice font in
substituted fonts. Values have the following meanings:</P>

<dl>
<dt><strong>z</strong>
<dd>This value refers to the ratio of em- to
x-heights of the "first choice" font in decimal notation.
<dt><strong>none</strong>
<dd>Do not preserve the font's x-height.
</dl>

<P>For example, the popular font
Verdana has a z value of 1.72; in an instance of Verdana at 100 pt
(em-height), the x-height will be 58 pt (100/58=1.72). For comparison,
Times New Roman has a z value of 2.17.

<P>This property uses z to compute an appropriate scaling factor for
available fonts, according to the following formula:

<PRE>
   a(z'/z) = b
</PRE>

<P>where:</p>

<PRE>
   a = 'font-size' of first-choice font      
   z' = z of available font
   b = 'font-size' to apply to available font
</PRE>

<P>The subjective "bigness" and general character of a font on screen
is less dependent on the size of its em than on the size of its
x-height, or, more usefully, on its z. The lower the value of z, the
more legible at smaller em sizes it will likely be. Inversely, faces
with a higher z value will become illegible more rapidly below a given
threshold size than faces with a lower z. Substitution can easily fall
foul of this threshold.

<P>The first image below shows several typefaces as rasterized on a
Macintosh at 12 point, together with their z values. No matter what
the typographical family (or nominal base size, unit, or platform),
faces with lower z look bigger than those with higher z. Faces with
very high z are illegible at the size shown.</p>

<P><img src="images/font-adjust-a.gif" alt="Comparison of 12 point fonts"></p>

<P>The next image below shows the results of <span
class="propinst-font-size-adjust">'font-size-adjust'</span> with the
fonts shown in the previous image. These fonts' em sizes range all the
way up to 25 pt, but appear subjectively to be about as large as 12-pt
Verdana, whose z served as the base for scaling. As adjusted, the
legibility characteristics of these faces on screen are nearly linear
across faces. Note that <span
class="propinst-font-size-adjust">'font-size-adjust'</span> tends to
stabilize the horizontal metrics of lines, as well.

<P><img src="images/font-adjust-b.gif" alt="Comparison of font-adjusted fonts"></p>

<H3><a name="font-shorthand">Shorthand font property</a>: the <span class="propinst-font">'font'</span> property</H3>

<!-- #include src=properties/font.srb -->

<P> The <span class="propinst-font">'font'</span> property is a
shorthand property for setting <span
class="propinst-font-style">'font-style'</span>, <span
class="propinst-font-variant">'font-variant'</span>, <span
class="propinst-font-weight">'font-weight'</span>, <span
class="propinst-font-size">'font-size'</span>, <span
class="propinst-line-height">'line-height'</span>, and <span
class="propinst-font-family">'font-family'</span>, at the same place
in the style sheet. The syntax of this property is based on a
traditional typographical shorthand notation to set multiple
properties related to fonts.

<P> For a definition of allowed and initial values, see the previously
defined properties. <em>Properties for which no values are given are set
to their initial value</em>.

<div class="example"><P>
Examples:
<PRE>
  P { font: 12pt/14pt sans-serif }
  P { font: 80% sans-serif }
  P { font: x-large/110% "new century schoolbook", serif }
  P { font: bold italic large Palatino, serif }
  P { font: normal small-caps 120%/120% fantasy }
</PRE>

<P> In the second rule, the font size percentage value ('80%') refers
to the font size of the parent element. In the third rule, the line
height percentage refers to the font size of the element itself.

<P> In the first three rules above, the <span
class="propinst-font-variant">'font-variant'</span> and <span
class="propinst-font-weight">'font-weight'</span> are not explicitly mentioned,
which means they are all three set to their initial value
('normal'). The fourth rule sets the <span
class="propinst-font-weight">'font-weight'</span> to 'bold', the <span
class="propinst-font-style">'font-style'</span> to 'italic' and implicitly sets
<span class="propinst-font-variant">'font-variant'</span> to 'normal'.

<P> The fifth rule sets the <span
class="propinst-font-variant">'font-variant'</span> ('small-caps'),
the <span class="propinst-font-size">'font-size'</span> (120% of the
parent's font), the <span
class="propinst-line-height">'line-height'</span> (120% times the font
size) and the <span class="propinst-font-family">'font-family'</span>
('fantasy'). It follows that the keyword 'normal' applies to the two
remaining properties: <span
class="propinst-font-style">'font-style'</span> and <span
class="propinst-font-weight">'font-weight'</span>.
</div>


<h3><a name="generic-font-families">Generic font families</a></h3>

<p>Generic font families are a fallback mechanism, a means of
preserving some of the style sheet writer's intent in the worst case
when none of the specified fonts can be selected. For optimum
typographic control, particular named fonts should be used in
stylesheets.


<p>All five generic font families may be assumed to exist in all CSS
implementations (they need not necessarily map to five distict actual
fonts, in all cases). UAs should provide reasonable default choices for
the generic font families, which express the characteristics of each
family as well as possible within the limits of the underlying
technology allows.

<p>UAs are encouraged to allow users to select alternative choices for
the generic fonts.

<h4>serif</h4> 

<p>Serif fonts, as the term is used in CSS, have the characteristic
that the ends of the strokes have finishing strokes, flared or
tapering ends, or have actual serifed endings (including slab
serifs). Serif fonts are typically proportionately spaced. They often
display a greater variation between thick and thin strokes than fonts
from the 'sans-serif' generic font family. CSS uses the term 'serif'
to apply to a font for any script, although other names may be more
familiar for particular scripts, such as Mincho (Japanese), Sung or
Song (Chinese), Totum or Kodig (Korean) and any font which is so
described may be used to represent the generic 'serif' family.

<p>Examples of fonts which fit this description include:

<dl>
<dt>Latin fonts
  <dd>Times New Roman, Garamond, Minion Web, ITC Stone Serif, MS Georgia, 
Bitstream Cyberbit
<dt>Greek fonts
  <dd>Bitstream Cyberbit
<dt>Cyrillic fonts
  <dd>Adobe Minion Cyrillic, Excelcior Cyrillic Upright, 
Monotype Albion 70, Bitstream Cyberbit, ER Bukinst
<dt>Hebrew fonts
  <dd>New Peninim, Raanana, Bitstream Cyberbit
<dt>Japanese fonts
  <dd>Ryumin Light-KL, Kyokasho ICA, Futo Min A101
<dt>Arabic fonts
  <dd>Bitstream Cyberbit
<dt>Cherokee fonts
  <dd>Lo Cicero Cherokee
</dl>

<h4>sans-serif</h4>

<p>Sans-serif fonts, as the term is used in CSS, have the
characteristic that the ends of their strokes have abrupt or butted
ends. Sans-serif fonts are typically proportionately spaced. They
often have little variation between thick and thin strokes, compared
to fonts from the 'serif' family. CSS uses the term 'sans-serif' to
apply to a font for any script, although other names may be more
familiar for particular scripts, such as Gothic (Japanese), Kai
(Chinese), Pathang (Korean) and any font which is so described may be
used to represent the generic 'sans-serif' family.

<p>Examples of fonts which fit this description include:

<dl>
<dt>Latin fonts
  <dd>MS Trebuchet, ITC Avant Garde Gothic, MS Arial, MS Verdana, Univers, 
Futura, ITC Stone Sans, Gill Sans, Akzidenz Grotesk, Helvetica
<dt>Greek fonts
  <dd>Attika, Typiko New Era, MS Tahoma, Monotype Gill Sans 571, Helvetica Greek
<dt>Cyrillic fonts
  <dd>Helvetica Cyrillic, ER Univers, Lucida Sans Unicode, Bastion
<dt>Hebrew fonts
  <dd>Arial Hebrew, MS Tahoma
<dt>Japanese fonts
  <dd>Shin Go, Heisei Kaku Gothic W5
<dt>Arabic fonts
  <dd>MS Tahoma
</dl>

<h4>cursive</h4>

<p>Cursive fonts, as the term is used in CSS, have the characteristic
that the glyphs are partially or completely connected, and that the
result looks more like handwritten pen or brush writing than printed
letterwork. Fonts for some scripts, such as Arabic, are almost always
cursive. CSS uses the term 'cursive' to apply to a font for any
script, although other names such as Chancery, Brush, Swing and Script
are also used in font names.

<p>Examples of fonts which fit this description include:

<dl>
<dt>Latin fonts
  <dd>Caflisch Script, Adobe Poetica, Sanvito, Ex Ponto, Snell Roundhand, 
Zapf-Chancery
<dt>Cyrillic fonts
  <dd>ER Architekt
<dt>Hebrew fonts
  <dd>Corsiva
<dt>Arabic fonts
  <dd>DecoType Naskh, Monotype Urdu 507
</dl>

<h4>fantasy</h4>

<p>Fantasy fonts, as used in CSS, are primarily decorative whilst
still containing representations of characters (as opposed to Pi or
Picture fonts, which do not represent characters).

<dl>
<dt>Latin fonts
  <dd>Alpha Geometrique, Critter, Cottonwood, FB Reactor, Studz
</dl>


<h4>monospace</h4>

<p>The sole criterion of a monospace font is that all glyph
representations have the same fixed width. This can make some scripts,
such as Arabic, look most peculiar. The effect is similar to a manual
typewriter, and is often used to simulate computer code. 

<p>Examples of fonts which fit this description include:

<dl>
<dt>Latin fonts
  <dd>Courier, MS Courier New, Prestige, American Typewriter, Everson Mono
<dt>Greek Fonts
  <dd>MS Courier New, Everson Mono
<dt>Cyrillic fonts
  <dd>ER Kurier, Everson Mono
<dt>Japanese fonts
  <dd>Osaka Monospaced
<dt>Cherokee fonts
  <dd>Everson Mono
</dl>


<H2><a name="font-selection">Font selection</a></h2>

<P>The second phase of the CSS2 font mechanism concerns the user
agent's selection of a font based on author-specified font properties,
available fonts, etc. The details of the <a href="#algorithm">font
matching algorithm</a> are provided below.

<P>There are four possible font selection actions:
matching, intelligent matching, synthesis, and download.</p>

<UL>

<LI><span class="index-def" title="name matching"><em>font name
matching</em></span> <BR> In this case, the user agent uses an
existing, accessible font that has the same family name as the
requested font (note that the appearance and the metrics might not
necessarily match, if the font that the document author used and the
font on the client system are from different foundries). The matching
information is restricted to the CSS font properties, including the
family name.

<LI><span class="index-def" title="intelligent
	    matching"><em>intelligent font name matching</em></span>
	  <BR>
In this case, the user agent uses an existing, accessible font that is
the closest match in appearance to the requested font. (Note that the
metrics might not match exactly). The matching information includes
information about the kind of font (text or symbol), nature of serifs,
weight, cap height, x height, ascent, descent, slant, etc.

<LI><span class="index-def" title="font synthesis"><em>font synthesis</em></span>
<BR> In this case, the user agent creates a font that is not
only a close match in appearance, but also matches the metrics of the
requested font. The synthesizing information includes the matching
information and typically requires more accurate values for the
parameters than are used for some matching schemes. In particular,
synthesis requires accurate width metrics and character to glyph
substitution and position information if all the layout characteristics of
the specified font are to be preserved.

<li><em>Download</em><br>Finally, the user agent may retrieve a font
over the Web. This is similar to the process of fetching images,
sounds or applets over the Web for display in the current document,
and likewise can cause some delay before the page can be displayed.
</UL>

<p><span class="index-def" title="progressive rendering"><em>progressive
rendering</em></span> is a combination of download and one of the
other methods; it provides a temporary substitute font (using name
matching, intelligent matching, or synthesis) to allow content to be
read while the requested font downloads. Once the real font has been
successfully downloaded, it replaces the
temporary font, hopefully without the need to reflow.

<p>In CSS2, authors may specify which, if any, of these mechanisms
should be invoked by the user agent if a particular font is not
immediately available. Authors add <span class="index-def" title="font
descriptions"><em>font descriptions</em></span> to style sheets for
this purpose. A font description is a set of <span
class="index-def" title="font descriptors"><em>font
descriptors</em></span>, individual pieces of information about a
font, possibly including a URI describing the font's location on the Web.

<div class="note"><P>
<em><strong>Note.</strong>
Progressive rendering requires metric information about the font in
order to avoid re-layout of the content when the actual font has been
loaded and rendered. This metric information is sufficiently verbose
that it should only be specified at most once per font in a document.
</em>
</div>


<h3>Font Descriptions and @font-face</h3>

<P>The font description provides the bridge between an author's font
specification and the <span class="index-def" title="font
data"><em>font data</em></span>, which is the data needed to format
text and to render the glyph representations to which the characters
map - the actual scalable outlines or bitmaps needed to render the
glyph representations to which the characters map. Fonts are
<em>referenced</em> by style sheet properties.

<P>The <span class="index-def" title="font description"><em>font
description</em></span> is used to select the relevant font data. The
font description contains descriptors that provide the location of the
font data on the Web, and/or characterize that font data. The font
descriptors are also needed to match the style sheet font properties
to particular font data. The level of detail of a font description can
vary from just the name of the font up to a list of glyph
representation widths. This data is a subset of the glyph
representation metrics contained in the font.

<P>Font descriptors may be classified into three types:</p>

<ol>
<li>those that provide the link between the CSS usage of the font and
the font description (these have the same names as the corresponding
CSS font properties),

<li>the URI for the location of the font data,

<li>those that further characterize the font, to provide a link
	  between the font description and the font data.
</ol>


<p>All font descriptions are specified via a <span class="index-def"
title="@font-face"><em>@font-face</em></span>
at-rule. The general form of this rule is:

<!-- check wd-font description about at-rules in general is somewhere in CSS2 -->

<P><tt>@font-face {<span class="value-inst-font-description">&lt;font-description&gt;</span> }</tt>

<p>where the <span class="index-def" title="&lt;font-description&gt;::definition of"><a name="value-def-font-description">&lt;font-description&gt;</a></span> has the form:

<pre>
descriptor: value;
descriptor: value;
[...]
descriptor: value;
</pre>

<p>Each <span class="index-inst" title="@font-face"> @font-face</span>
rule specifies a value for every font descriptor, either implicitly or
explicitly. Those not given explicit values in the rule take the
initial value listed with each descriptor in this specification. These
descriptors apply solely within the context of the @font-face rule in
which they are defined, and do not apply to document language
elements. Thus, there is no notion of which elements the descriptors
apply to, or whether the values are inherited by child elements.

<P>The available font descriptors are described in later sections of
this specification.

<div class="html-example"><P>
<p>For example, here the font 'Robson Celtic' is defined and
referenced in a style sheet contained in an HTML document.

<PRE>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Font test&lt;/TITLE&gt;
    &lt;STYLE TYPE="text/css" MEDIA="screen, print"&gt;
      @font-face {
        font-family: "Robson Celtic";
        src: url(http://site/fonts/rob-celt)
      }
      H1 {font-family: "Robson Celtic", serif}
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;

  &lt;BODY&gt;
    &lt;H1&gt; This heading is displayed using Robson Celtic&lt;/H1&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<p>The style sheet (in the STYLE element) contains a CSS rule that
sets all H1 elements to use the 'Robson Celtic' font family. 

<P>A CSS1 implementation will search the client for a font whose
family name and other properties match "Robson Celtic" and, if it
fails to find it, will use the UA-specific fallback serif font (which
is <a href="#propdef-font-family">defined to exist</a>).

<p>A user agent implementing CSS2 will first examine <span
class="index-inst" title="@font-face"> @font-face</span> rules in
search of a font description defining Robson Celtic. This example
contains a rule which matches. Although this rule doesn't contain much
font data, it does have a URI where the font can be retrieved for
rendering this document. Downloaded fonts should not be made available
to other applications. If no matching @font-face is found, the user
agent will attempt the same match as a user agent implementing CSS1.


<p>Note that if the font Robson Celtic <em>had</em> been installed on
the client system, this would cause the UA to construct an
@font-face rule for the installed copy as described in the
section on the <a href="#algorithm">font matching
algorithm</a>. The installed copy would have been matched before the
downloadable font in the example above.
</div>

<p>CSS1 implementations, which do not understand the @font-face rule
will encounter the opening curly brackets and will <span
class="index-inst" title="skip"><a href="syndata.html#skip">skip</a></span>
forward until the matching closing curly brackets. This at-rule
conforms with the <a href="syndata.html#syntax">forward-compatible
parsing</a> requirement of CSS. Parsers may <span class="index-inst"
title="skip"><a href="syndata.html#skip">skip</a></span> these rules without
error.

<p>Also, any descriptors which are not recognized or useful to the
user agent should be <span class="index-inst" title="skip"><a
href="syndata.html#skip">skipped</a></span>. This allows adding in the
future optional descriptors for the purpose of better font
substitution, matching, or synthesis. </p>

<H3><A NAME="select">Descriptors for Selecting a Font</a>:
<span class="descinst-font-family">'font-family'</span>, 
<span class="descinst-font-style">'font-style'</span>, 
<span class="descinst-font-variant">'font-variant'</span>,
<span class="descinst-font-weight">'font-weight'</span>, and
<span class="descinst-font-size">'font-size'</span>
</h3>

<p>The following descriptors have the same names as the corresponding
CSS2 font properties, and take a single value or comma-separated list
of values.

<p>The values within that list are exactly the same as those specified
for CSS2. If there is a single value, that is the value that must be
matched. If there is a list, any of the list items constitutes a
match. If the descriptor is omitted from the @font-face, the
initial value is used.

<!-- #include src=descriptors/font-family.srb -->

<p>This is the descriptor for the <a href="#font-family">family
name</a> of a font and takes the same values as the <span
class="propinst-font-family">'font-family'</span> property.

<!-- #include src=descriptors/font-style.srb -->

<p>This is the descriptor for the style of a font and takes the same
values as the <span class="propinst-font-style">'font-style'</span>
property except that a comma separated list is permitted. The value
'normal' indicates that this is the normal face of a font; it is
either the only face in a font, or it is the face which is intended
to be used alongside other companion faces. The value 'oblique'
indicates that this face is a more slanted companion face than 
the normal face. The value 'italic' indicates that this is a more
cursive companion face to the normal face. This avoids having to label
slightly slanted normal faces as oblique, or Greek faces as italic.

<!-- #include src=descriptors/font-variant.srb -->

<p>This is the CSS indication whether this face is a small-caps
variant of a font. It takes the same values as the <span
class="propinst-font-variant">'font-variant'</span> property except
that a comma separated list is permitted. Cyrillic <i>pryamo&#301;</i>
faces may be labeled with a <span
class="descinst-font-variant">'font-variant'</span>
of small-caps, which will give better consistency with Latin faces
(and the companion <i>kursiv</i> face labeled with <span
class="descinst-font-style">'font-style'</span> italic for the
same reason).

<!-- #include src=descriptors/font-weight.srb -->

<p>This is the descriptor for the weight of a face relative to others
in the same font family. It takes the same values as the <span
class="propinst-font-weight">'font-weight'</span> property with three
exceptions:</p>

<ol><li>relative keywords (bolder, lighter) are not permitted
<li>a comma separated list of values is permitted
<li>an additional keyword, 'all' is permitted
</ol>

<!-- should values not a multiple of 100 also be allowed? -->

<!-- #include src=descriptors/font-size.srb -->

<p>This is the descriptor for the sizes provided by this font. Only <a
href="syndata.html#absrel-units">absolute length</a> units are
permitted, in contrast to the <span
class="propinst-font-size">'font-size'</span> property, which allows
both relative and absolute lengths and sizes. A comma separated list
of absolute lengths is permitted.


<p>The initial value of 'all' is suitable for scalable fonts, so this
descriptor will only be useful in an @font-face for bitmap fonts,
or for scalable fonts which have hand-tuned bitmaps at specific point
sizes.

<!-- how to indicate tuned bitmaps at certain point sizes? -->


<H3><A NAME="dataqual">Descriptors for Font Data Qualification</a>: <span
class="descinst-unicode-range">'unicode-range'</span></H3>

<P>
The following descriptor is optional within a font definition, but is
used to avoid checking or downloading a font that does not have
sufficient glyphs to render a particular character.

<!-- #include src=descriptors/unicode-range.srb -->

<P>This is the descriptor for the range of <a rel="biblioentry"
href="./refs.html#ref-ISO10646">[ISO10646]</a> characters covered by
the font.  Since this is sparse (most fonts do not cover the whole of
<a rel="biblioentry" href="./refs.html#ref-ISO10646">[ISO10646]</a>)
this descriptor lists blocks or ranges which do have <em>some</em>
coverage (no promise is made of complete coverage). This method is
extensible to future allocation of characters in Unicode, without
change of syntax and without invalidating existing content.

<p>The values of <span class="index-def" title="&lt;urange&gt;::definition of"><a name="value-def-urange">&lt;urange&gt;</a></span>
are expressed using hexadecimal numbers prefixed by "U+",
corresponding to character code positions in <a rel="biblioentry"
href="./refs.html#ref-ISO10646" class="normref">[ISO10646]</a> (which
specifies the document character set of <a rel="biblioentry"
href="./refs.html#ref-HTML40" class="informref">[HTML40]</a>).

For example, <tt>U+05D1</tt> is the <a rel="biblioentry"
href="./refs.html#ref-ISO10646" class="normref">[ISO10646]</a>
character 'Hebrew letter bet'. For values outside the Basic
Multilingual Plane (BMP), additional leading digits corresponding to
the plane number are added, also in hexadecimal, like this:
<tt>U+A1234</tt> which is the character on Plane 10 at hexadecimal
code position 1234. At the time of writing no characters had been
assigned outside the BMP. Leading zeros (for example, 0000004D) are
legal, but not required.

<p>The initial value (i.e., the value used when no value is given in
the style sheet) covers not only the entire Basic Multilingual Plane
(BMP), which would be expressed as U+0-FFFF, but also the whole
repertoire of ISO 10646. Thus, the initial value says that the font
may have glyph representations for characters anywhere in <a
rel="biblioentry" href="./refs.html#ref-ISO10646" class="normref">[ISO10646]</a>.
Specifying a value for <span
class="descinst-unicode-range">'unicode-range'</span> provides
information to make searching efficient, by declaring a constrained
range in which the font may have glyph representations for
characters. The font need not be searched for characters outside this
range.

<p>Values may be written with any number of digits. For single
numbers,  the character '?' is assumed to mean 'any value' which
creates a <em>range</em> of character positions. Thus, using a
<em>single number</em>:

<dl><dt>unicode-range: U+20A7 <dd>no wild cards - it indicates a
single character position (the Spanish peseta currency
symbol)

<dt>unicode-range: U+215? <dd>one wild card, covers the range 2150 to
215F (the fractions)

<dt>unicode-range: U+00?? <dd>two wild cards, covers the range 0000 to
00FF (Latin-1)

<dt>unicode-range: U+E?? <dd>two wild cards, covers 0E00 to 0EFF
(the Lao script)
</dl>

<p>A <em>pair of numbers</em> in this format can be combined with the
dash character to indicate larger ranges. For example

<dl>

<dt>unicode-range:  U+AC00-D7FF

<dd>the range is AC00 to D7FF   (the Hangul Syllables area)
</dl>

<p>Multiple, discontinuous ranges can be specified, separated by a
comma. As with other comma-separated lists in CSS, any <a href="syndata.html#whitespace">whitespace</a>
before or after the comma is <span class="index-inst" title="skip"><a
href="syndata.html#skip">skipped.</a></span>

<div class="example"><P>
For example:

<dl><dt>unicode-range:  U+370-3FF,  U+1F??

<dd> This covers the range 0370 to 03FF (Modern Greek) plus 1F00 to
1FFF (Ancient polytonic Greek).

<dt>unicode-range: U+3000-303F, U+3100-312F, U+32??, U+33??, U+4E00-9FFF,
U+F9000-FAFF, U+FE30-FE4F 

<dd>Something of a worst case in terms of verbosity, this very
precisely indicates that this (extremely large) font contains only
Chinese characters from <a rel="biblioentry"
href="./refs.html#ref-ISO10646">[ISO10646]</a>, without including any
characters that are uniquely Japanese or Korean. The range is 3000 to
303F (CJK symbols and punctuation) plus 3100 to 312F (Bopomofo) plus
3200 to 32FF (enclosed CJK letters and months) plus 3300 to 33FF (CJK
compatibility zone) plus 4E00 to 9FFF (CJK unified Ideographs) plus
F900 to FAFF (CJK compatibility ideographs) plus FE30 to FE4F (CJK
compatibility forms).

<p>A more likely representation for a typical Chinese font would be:

<p>unicode-range: U+3000-33FF, U+4E00-9FFF</p>

<dt>unicode-range: U+11E00-121FF

<dd>This font covers a proposed registration for Aztec pictograms,
covering the range 1E00 to 21FF in plane 1.

<dt>unicode-range: U+1A00-1A1F

<dd>This font covers a proposed registration for Irish Ogham
covering the range 1A00 to 1A1F
</dl>
</div>

<H3><A NAME="unitsperem">Descriptor for Numeric Values</a>: <span
class="descinst-units-per-em">'units-per-em'</span></H3>

<P>The following descriptor is optional within a font definition, but
is required if there are any numeric values in the 'em' space in which
glyphs are defined.

<!-- #include src=descriptors/units-per-em.srb -->

<p>This is the descriptor for the number of the <a
href="#emsq"> co-ordinate units on the em square</a>, the
size of the design grid on which glyph representations are laid out.

<H3><A NAME="referencing">Descriptor for Referencing</a>: <span
class="descinst-src">'src'</span></H3>

<p>This descriptor is required for referencing actual font data, whether
downloadable or locally installed.

<!-- #include src=descriptors/src.srb -->

<p>This is a prioritized list of URIs and/or locally installed font
face names. The URI points to the font data itself.  This is required
if the WebFont is to be retrieved. The font resource may be a subset
of the source font. The URI may be partial, in which case it is
resolved relative to the location of the style sheet containing
the <span class="index-inst" title="@font-face"> @font-face</span>.

<p>The URI may have optional hints regarding the format of font
resource to be found at that URI, and this information should be used
by clients in format negotiation with the server. As with any
hypertext reference, there may be other formats available, or the
resource may have been moved; but the client has a better idea of what
is likely to be there, in a more robust way than trying to parse
filename extensions in URIs.

<p> The <span class="index-def" title="&lt;font-face-name&gt;::definition of"><a
name="value-def-font-face-name">&lt;font-face-name&gt;</a></span> is
the adorned font name of a locally installed font. The <span
class="index-def" title="adorned font name"><em>adorned font
name</em></span> is the name of the font as reported by the operating
system and is the name most likely to be used in reader stylesheets,
or author stylesheets on an intranet.  Adornments such as bold,
italic, underline are often used to select the appropriate font
within a font family. For <a href="#aname">more information
about adorned font names</a> please consult the notes about fonts.

<div class="example"><P>
Examples:

<dl>

  <dt><tt>src: url(http://foo/bar)</tt> <dd>a full URI and no
  information about the font format(s) available there

  <dt><tt>src: local(BT Century 751 No. 2 Semi Bold Italic)</tt>
  <dd>references a particular face of a locally installed font

  <dt><tt>src: url(../fonts/bar) format(truedoc)</tt> <dd>a partial URI
  which has a font available in TrueDoc format

  <dt><tt>src: url(http://cgi-bin/bar?stuff) format(opentype,
  intellifont)</tt> <dd>a full URI, in this case to a script, which
  can generate two different formats - OpenType and Intellifont

  <dt><tt>src: local(T-26 Typeka Mix), url(http://site/magda-extra)
  format(type1)</tt> <dd>two alternatives are given, firstly a locally
  installed font and secondly a downloadable font available in Type 1
  format.
</dl>
</div>

<P>Access to locally installed fonts is via the <span
class="value-inst-font-face-name">&lt;font-face-name&gt;</span>.  The
font face name is not truly unique, nor is it truly platform or font
format independent, but at the moment it is the best way to identify
font data. The use of the font face name can be made more accurate by
providing an indication of the glyph complement required. This may be
done by indicating the range of <a rel="biblioentry"
href="./refs.html#ref-ISO10646">[ISO10646]</a> character positions for
which the font provides some glyph representations (see <span
class="descinst-unicode-range">'unicode-range'</span>).

<H3><A NAME="matching">Descriptors for Matching</a>: <span
class="descinst-panose-1">'panose-1'</span>, 
<span class="descinst-stemv">'stemv'</span>, 
<span class="descinst-stemh">'stemh'</span>, 
<span class="descinst-slope">'slope'</span>, 
<span class="descinst-cap-height">'cap-height'</span>, 
<span class="descinst-x-height">'x-height'</span>, 
<span class="descinst-ascent">'ascent'</span>, and
<span class="descinst-descent">'descent'</span>
</h3>

<P>These descriptors are optional for a CSS2 definition,
but may be used if intelligent font matching is desired by the author.

<!-- #include src=descriptors/panose-1.srb -->

<p>This is the descriptor for the <a href="#pan1">Panose-1 number</a>
and consists of ten decimal numbers, separated by <a
href="syndata.html#whitespace">whitespace</a>. A comma separated list
is not permitted for this descriptor, because the <span
class="index-inst" title="panose-1">Panose-1</span> system can
indicate that a range of values are matched. The initial value is zero
for each PANOSE digit, which means "any"; all fonts will match the
Panose number if this value is used.


<!-- #include src=descriptors/stemv.srb -->

<p>This is the descriptor for the <a href="#stemv">vertical stem
width</a> of the font. If the value is undefined, the descriptor is
not used for matching. If this descriptor is used, the 
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/stemh.srb -->

<p>This is the descriptor for the <a
href="#stemh">horizontal stem width</a> of the font. If the
value is undefined, the descriptor is not used for matching. If this
descriptor is used, the <a href="#unitsperem">'units-per-em'</a>
descriptor must also be used.

<!-- #include src=descriptors/slope.srb -->

<p>This is the descriptor for the <a href="#slope">vertical stroke
angle</a> of the font.

<!-- #include src=descriptors/cap-height.srb -->

<p>This is the descriptor for the number of the <a
href="#cap">height of capital glyph representations</a> of
the font. If the value is undefined, the descriptor is not used for
matching. If this descriptor is used, the <a
href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/x-height.srb -->

<p>This is the descriptor for the <a href="#xht">height of
lowercase glyph representations</a> of the font.  If the value is
undefined, the descriptor is not used for matching. If this descriptor
is used, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.

<!-- #include src=descriptors/ascent.srb -->

<p>This is the descriptor for the <a href="#ascent">maximum
unaccented height</a> of the font.  If the value is undefined, the
descriptor is not used for matching. If this descriptor
is used, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.

<!-- #include src=descriptors/descent.srb -->

<p>This is the descriptor for the <a href="#descent">Maximum
unaccented depth</a> of the font.  If the value is undefined, the
descriptor is not used for matching. If this descriptor
is used, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.


<H3><A NAME="synthesizing">Descriptors for Synthesis</a>: <span
class="descinst-widths">'widths'</span> and <span
class="descinst-definition-src">'definition-src'</span></H3>

<P>
Synthesizing a font means, at minimum, matching the width metrics of
the specified font. Therefore, for synthesis, this metric information
must be available. Similarly, progressive rendering requires width
metrics in order to avoid reflow of the content when the actual font
has been loaded. Although the following descriptors are optional for a
CSS2 definition, some are required if synthesizing (and progressive
rendering) is desired by the author. Should the actual font become
available, the substitution should be replaced by the actual font. Any
of these descriptors which are present will be used to provide a
better or faster approximation of the intended font.

<p>Of these descriptors, the most important are
the <span class="descinst-widths">'widths'</span>
descriptor and <tt>bbox</tt> which are used to prevent text reflow
should the actual font become available.  In addition, the descriptors
in the <a href="#matching">set of descriptors required for matching</a>
can be used to provide a better synthesis of the actual font
appearance. 

<!-- #include src=descriptors/widths.srb -->

<p>This is the descriptor for the number of the <a
href="#lrwidth">glyph representation widths</a>. The value
is a (comma separated list of) <span
class="value-inst-urange">&lt;urange&gt;</span> values followed by one
or more glyph representation widths. If this descriptor is used, the
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.


<div class="example"><P>
For example:

<pre>
  widths: U+4E00-4E1F 1736 1874 1692
</pre>

<p>In this instance a range of 32 characters is given, from 4E00 to
4E1F. The glyph corresponding to the first character (4E00) has a
width of 1736, the second has a width of 1874 and the third,
1692. Because not enough widths have been provided, the last width
replicates to cover the rest of the specified range. If too many
widths are provided, the extras are <span class="index-inst"
title="skip"><a href="syndata.html#skip">skipped.</a></span>

</div>

<p>If the <span
class="value-inst-urange">&lt;urange&gt;</span> is omitted, a
range of U+0-7FFFFFFF is assumed which covers all characters and their
glyph representations

<p>This descriptor cannot describe multiple glyphs corresponding to a
single character, or ligatures of multiple characters. Thus, this
descriptor can <em>only</em> be used for scripts which do not have
contextual forms or mandatory ligatures. It is nevertheless useful in
those situations. Scripts which require a one-to-many or many-to-many
mapping of characters to glyphs cannot at present use this descriptor
to enable font synthesis although they can still use font downloading
or intelligent matching.

<!-- #include src=descriptors/definition-src.srb -->

<p>The font descriptors may either be within the font definition in
the stylesheet, or may be provided within a separate <span
class="index-def" title="font definition resource"><em>font definition
resource</em></span> identified by a URI. The latter approach can
reduce network traffic when multiple stylesheets reference the same
fonts.

<P>Having the font descriptors separate from the font data has a
benefit beyond being able to do font selection and/or
substitution. The data protection and replication restrictions on the
font descriptors may be much weaker than on the full font data. Thus,
it may be possible to locally install the font definition, or at least
to have it in a local cache. This allows the abbreviated form of
font definition within documents, but would not require accessing the
full font definition over the Web more than once per named font.


<H3><A NAME="alignment">Descriptors for Alignment</a>:
<span class="descinst-baseline">'baseline'</span>,
<span class="descinst-centerline">'centerline'</span>, 
<span class="descinst-mathline">'mathline'</span>, 
and <span class="descinst-topline">'topline'</span>
</H3>

<p>These optional descriptors are used to align runs of different
scripts with one another.

<!-- #include src=descriptors/baseline.srb -->

<p>This is the descriptor for the <a href="#bline">lower baseline</a>
of a font.  If this descriptor is given a non-default (non-zero)
value, the <a href="#unitsperem">'units-per-em'</a> descriptor must
also be used.


<!-- #include src=descriptors/centerline.srb -->

<p>This is the descriptor for the <a href="#cline">central
baseline</a> of a font. If the value is undefined, the UA may employ
various heuristics such as the midpoint of the ascent and descent
values. If this descriptor is used, the 
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/mathline.srb -->

<p>This is the descriptor for the <a
href="#mline">mathematical baseline</a> of a font. If
undefined, the UA may use the center baseline. If this descriptor is used, the 
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.

<!-- #include src=descriptors/topline.srb -->

<p>This is the descriptor for the <a href="#tline">top
baseline</a> of a font. If undefined, the UA may use an approximate
value such as the ascent. If this descriptor is used, the 
<a href="#unitsperem">'units-per-em'</a> descriptor must also be used.</p>


<H2><a name="font-descriptors">Font Characteristics</a></H2>

<h3><a name=universal>Introducing Font Characteristics</a></h3>

<p>In this section are listed the font characteristics that have been
found useful for client-side font matching, synthesis, and download
for heterogeneous platforms accessing the Web. The data may be useful
for any medium which needs to use fonts on the Web by some other means
than physical embedding of the font data inside the medium. 

<p>These characteristics are used to characterize fonts. They are not
specific to CSS or to style sheets. In CSS, each characteristic is
described by a font descriptor. These definitions could also be
mapped onto VRML nodes, or CGM Application Structures, or a Java API,
or alternative stylesheet languages. Fonts retrieved by one medium and
stored in a proxy cache could be re-used by another medium, saving
download time and network bandwidth.

<p>A non-exhaustive list examples of such media includes:</p>

<ul>
<li>2-D vector formats
<ul>
  <li>Computer Graphics Metafile
  <li>Simple Vector Format
</ul>
<li>3-D graphics formats
<ul>
  <li>VRML
  <li>3DMF
</ul>
<li>Object embedding technologies
<ul>
  <li>Java
  <li>Active-X
  <li>Obliq
</ul>
</ul>


<h3><a name=aname>Adorned font name</a></h3>

<p>This is the full name of a particular face of a font family. It
typically includes a variety of non-standardized textual qualifiers or
<em>adornments</em> appended to the font family name. It may also
include a foundry name or abbreviation, often prepended to the font
family name. It is only used in the 'src' descriptor, to refer to
locally installed fonts, because the format of the adorned name can
vary from platform to platform.

<p>The name of the font definition is important because it is the link
to any locally installed fonts. It is important that the name be
robust, both with respect to platform and application independence. For
this reason, the name should be one which is not application or
language specific.

<P>
The ideal solution would be to have a name which uniquely identifies
each collection of font data. This name does not exist in current
practice for font data. Fonts with the same face name can vary over of
number of descriptors. Some of these descriptors, such as different
complements of glyphs in the font may be insignificant if the needed
glyphs are in the font. Other descriptors, such as different width
metrics, make fonts with the same name incompatible. It does not seem
possible to define a rule that will always identify incompatibilities,
but will not prevent the use of a perfectly suitable local copy of the
font data with a given name. Therefore, only the range of <a
rel="biblioentry" href="./refs.html#ref-ISO10646">[ISO10646]</a>
characters will be used to qualify matches for the font face name.

<P>Since a prime goal of the font face name in the font definition is
allow a user agent to determine when there is a local copy of the
specified font data, the font face name must be a name which will be
in all legitimate copies of the font data. Otherwise, unnecessary Web
traffic may be generated due to missed matches for the local copy.

<p>For TrueType and OpenType fonts, this value may be obtained from
the <tt>full font name</tt> from the <tt>name</tt> table.

<p>For Type 1 fonts, this value may be obtained from the PostScript
language name; the name which, in a PostScript language program, is
used as an operand of the findfont operator.  It is the name
associated with the font by a definefont operation.  This is usually
the value of the FontName entry in the font dictionary. For more
information, see Section 5.2 of the PostScript Language Reference
Manual, Second Edition. <!-- Link here to the PS Ref, second edition -->
</P>

<p>Multiple Master Type 1 fonts allow specifying various design
dimensions (e.g., weight, such as light to extra-bold, and width, such
as condensed to expanded). <!-- IJ: Insert link here to MMT1 -->
Coordinates along these design dimensions are specified by numbers,
and are appended as a suffix to the base font name. To specify the
appearance of the font, numeric values must be supplied for each
design dimension of the multiple master font.  A completely specified
multiple master font is referred to as an instance of the multiple
master font.

<p>The PostScript language name used for a Multiple Master Type 1 is
the name of the instance.  If the name contains spaces (such as
&quot;MinionMM 366 465 11&quot;), these spaces are replaced with
underscores.  For example, the base font name here is TektonMM and the
2 dimensions specified have values of 200 and 300:</p>

<pre>  TektonMM_200_300</pre>
<p>The full font name of the TrueType font and the PostScript Language
name may differ by spacing and punctuation.  For example, spaces are
not allow in a PostScript Language name, but are common in full font
names. The TrueType name table can also contain the PostScript name,
which has no spaces. <!-- this is not really very satisfactory -->


<h3><a name=cline>Central Baseline</a></h3>

<p>This gives the position in the em square of the central
baseline. The central baseline is used by ideographic scripts for
alignment, just as the bottom baseline is used for Latin, Greek and
Cyrillic scripts.

<p>For TrueType GX fonts, this value may be obtained from the <a
rel="biblioentry" href="./refs.html#ref-TRUETYPEGX" class="informref">[TRUETYPEGX]</a>
<tt>bsln</tt> table. Within this table, the <tt>ideographic
centered baseline</tt> may be used for stretches of predominantly
ideographic characters and the <tt>ideographic low baseline</tt> is
more suitable for ideographic characters in a run of predominantly
Latin, Greek or Cyrillic characters.

<h3><a name=emsq>Co-ordinate units on the em square</a></h3>

<p>Certain values, such as width metrics, are expressed in units that
are relative to an abstract square whose height is the intended
distance between lines of type in the same type size. This square is
called the EM square. The value of this descriptor specifies how many
units the EM square is divided into.  The valid range is 16 to 16384
units per EM square. Common values are 250 (Intellifont), 1000 (Type
1) and 2048 (TrueType).

<p>If this value is not specified, it becomes impossible to know what
any font metrics mean. For example, one font has lowercase glyph
representations of height 450; another has smaller ones of height 890!
The numbers are actually fractions; the first font has 450/1000 and
the second has 890/2048 which is indeed smaller.

<p>For Type 1 fonts, this value may be obtained from the
<tt>FontMatrix</tt> entry in the font dictionary. For TrueType fonts,
this value may be obtained from the <tt>unitsPerEm</tt> entry in the
<tt>head</tt> table. For Intellifont fonts, this value is contained in
the font attribute file.

<h3><a name="cmap">Font encoding tables</a></h3>

<P>Either explicitly or implicitly, each font has a table associated
with it, the <span class="index-def" title="font encoding
table"><EM>font encoding table</EM> </span>, that tells for each glyph
what character it is a representation for. In "Type 1 fonts", the
table is referred to as an <span class="index-def" title="encoding
vector"><EM>encoding vector</EM></span>.

<P> In fact, many fonts contain several glyphs for the same
character. Which of those glyphs should be used depends either on the
rules of the language, or on the preference of the designer.

<P> In Arabic, for example, all letters have four (or two) different
shapes, depending on whether the letter is used at the start of a
word, in the middle, at the end, or in isolation. It is the same
character in all cases, and thus there is only one character in the
HTML document, but when printed, it looks differently each time.

<P> There are also fonts that leave it to the graphic designer to
choose from among various alternative shapes provided. Unfortunately,
CSS2 doesn't yet provide the means to select those
alternatives. Currently, it is always the default shape that is chosen
from such fonts.


<h3><a name=family>Font family name</a></h3>

<p>Specifies the family name portion of the font face name. For
example, the family name for Helvetica-Bold is Helvetica and the
family name of ITC Stone Serif Semibold Italic is ITC Stone
Serif. Some systems treat adornments relating to condensed or expanded
faces as if they were part of the family name. <!-- whole system is
too flat anyway - is Adobe Stone Serif the same family? Is Minion
Cyrillic the same family as Minion? -->

<p>For Type 1 fonts, this value may be obtained from the
<tt>FamilyName</tt> entry in the FontInfo dictionary. For TrueType and
OpenTypefonts, it may be obtained from the <tt>name</tt> table.

<!-- add the naming issues stuff here -->



<h3><a name=lrwidth>Glyph Representation widths</a></h3>


<p>For Type 1 fonts, this value may be obtained from the @@???. For
TrueType fonts, the values are in the <tt>hmtx</tt> table.




<h3><a name=stemh>Horizontal stem width</a></h3>

<p>
<p>For Type 1 fonts, this value may be obtained from the <tt>StdHW</tt>
entry, in the Private dictionary or the AFM file.

<h3><a name=cap>Height of capital glyph representations</a></h3>

<p>The y-coordinate of the top of flat capital letters in Latin, Greek
and Cyrillic scripts, measured from the baseline. This descriptor is not
useful for fonts that do not contain any glyph representations from
these scripts.

<p>For Type 1 fonts, this value may be obtained from the <tt>CapHeight</tt>
entry in the AFM file or from the <tt>Bluevalues</tt> entry in the
Private dictionary

<h3><a name=xht>Height of lowercase glyph representations</a></h3>

<p>The y-coordinate of the top of unaccented, non-ascending lowercase
letters in Latin, Greek and Cyrillic scripts, measured from the
baseline. Flat-topped letters are used, ignoring any optical
correction zone. Usually used as a ratio of lowercase to uppercase
heights, as a means of comparison between font families. The terms
large-eye, small-eye are also used to indicate the height of lowercase
glyph representations relative to the height of uppercase.

<P><img src="./images/x-height.gif" alt="Illustration of x-height"></p>

<p>This descriptor is not useful for fonts that do not contain any glyph
representations from these scripts. Since the heights of lowercase and
uppercase letters are often formed into a ratio for comparing
different fonts, it may be useful to set both the lowercase and
uppercase heights to the same value for unicameral scripts such as
Hebrew, where for mixed Latin and Hebrew text the Hebrew characters
are typically set at a height midway between the capital and lowercase
heights of the Latin font.

<P><img src="./images/heb-height-54.gif" alt="Height of Hebrew characters"></p>

<p>For Type 1 fonts, this value may be obtained from the
<tt>Bluevalues</tt> entry in the Private dictionary.

<h3><a name=bline>Lower Baseline</a></h3>

<p>This gives the position in the em square of the lower baseline. The
lower baseline is used by Latin, Greek and Cyrillic scripts for
alignment, just as the upper baseline is used for Sanscrit-derived
scripts.

<h3><a name=mline>Mathematical Baseline</a></h3>

<p>This gives the position in the em square of the mathematical
baseline. The mathematical baseline is used by ideographic scripts for
alignment, just as the lower baseline is used for Latin, Greek and
Cyrillic scripts.

<p>For TrueType GX fonts, this value may be obtained from the 
<a rel="biblioentry" href="./refs.html#ref-TRUETYPEGX" class="informref">[TRUETYPEGX]</a>
<tt>bsln</tt> table.

<h3><a name=bbox>Maximal bounding box</a></h3>

<p>
<p>For Type 1 fonts, this value may be obtained from the FontBBox
entry in the font dictionary. For TrueType fonts, the four values are
in the <tt>'xMin'</tt>, <tt>'xMax'</tt>, <tt>'yMin'</tt> and <tt>'yMax'</tt>
entries of the <tt>'head'</tt> table.<!-- Apple API to get this: http://17.126.23.20/dev/techsupport/insidemac/Text/Text-273.html#HEADING273-0 -->

<h3><a name=ascent>Maximum unaccented height</a></h3>

<p>
<p>For Type 1 fonts, this value may be obtained from the
<tt>'Ascender'</tt> value in the AFM file.  For TrueType and OpenType
fonts, this value may be obtained from the <tt>'Ascender'</tt> entry
in the <a rel="biblioentry" href="./refs.html#ref-OPENTYPE" class="informref">[OPENTYPE]</a>
<tt>'hhea'</tt> table or (preferably) from the
	<tt>'sTypoAscender'</tt> value in the 
<a rel="biblioentry" href="./refs.html#ref-OPENTYPE" class="informref">[OPENTYPE]</a>
<tt>'OS/2'</tt> table.

<P>For TrueType GX fonts, the <tt>'horizontalBefore'</tt> entry in the
<a rel="biblioentry"
href="./refs.html#ref-TRUETYPEGX" class="informref">[TRUETYPEGX]</a> <tt>'fmtx'</tt>
table is used, overriding Ascender values in the <tt>'hhea'</tt>
table.

<h3><a name=descent>Maximum unaccented depth</a></h3>

<p>
<p>For Type 1 fonts, this value may be obtained from <tt>'descender'</tt> value in the AFM file. <!-- check Descender, sTypoDescender, horizontalAfter -->

<h3><a name="pan1">Panose-1 number</a></h3>

<p><span class="index-def" title="Panose-1"><em>Panose-1</em></span>
is an industry standard TrueType font classification and matching
technology. The PANOSE system consists of a set of ten numbers that
categorize the key attributes of a Latin typeface, a classification
procedure for creating those numbers, and Mapper software that
determines the closest possible font match given a set of
typefaces. The system <em>could</em>, with modification, also be used
for Greek and Cyrillic, but is not suitable for unicameral and
ideographic scripts (Hebrew, Armenian, Arabic,
Chinese/Japanese/Korean).  Panose-1 technology was originally
developed by Elseware Corporation and is now owned by Hewlett Packard.

<p><img src="./images/panose-16.gif" alt="Illustration of Panose-1"></p> 

<p>The Family, Serif Style and Proportion numbers are used by
Windows95 for font selection and matching.

<p>The meaning of the ten numbers and the allowable values (given in
parentheses) are given in <a href="notes.html#panose">Appendix
C</a> for the most common case, where the "family" digit is <tt>2,
Text and Display</tt>. (If the first digit has a different value, the
remaining nine digits have different meanings).



<p><em>Panose-2</em> (see <a rel="biblioentry"
href="./refs.html#ref-PANOSE2" class="informref">[PANOSE2]</a>) is a specification for a
more comprehensive font classification and matching technology which
is not limited to Latin typefaces. For example, the serif
characteristics of a Latin face may be compared with the stroke
terminations of a Kanji face.
 
<p><img src="./images/P2F24.gif" alt="Illustration of Panose-2"></p>

<p>The Panose-2 value is not stored inside any known font formats, but
may be measured.

<h3><a name=ucode>Range of ISO10646characters</a></h3>

<p>This indicated the glyph repertoire of the font, relative to the
Basic Multilingual Plane of <a rel="biblioentry"
href="./refs.html#ref-ISO10646">[ISO10646]</a>, and is used to
eliminate unsuitable fonts (ones that will not have the required
glyphs). It does not indicate that the font definitely has the
required glyphs, only that it is worth downloading and looking at the
font. See <a rel="biblioentry" href="./refs.html#ref-ISO10646"
class="normref">[ISO10646]</a> for information about useful documents.

<p>Font formats that do not include this information, explicitly or
indirectly, may still use this descriptor, but the value must be
supplied by the document or stylesheet author, perhaps being obtained
by inspection.</p> 

<p>For Type 1 fonts, this value may be obtained
from the <!--@@look up spec for CID fonts --> CMap file).

<p>For TrueType and Opentype fonts with an <tt>OS/2</tt> table, see <a href="notes.html#truetype-unicode">Appendix C</a>.

<p>There are other classifications into scripts, such as the 
<a rel="biblioentry" href="./refs.html#ref-MONOTYPE" class="informref">[MONOTYPE]</a>
	system and a proposed ISO script system.

<p>Because of this, classification of glyph repertoires by the range
of <a rel="biblioentry" href="./refs.html#ref-ISO10646">[ISO10646]</a>
characters that may be represented with a particular font is suggested
in this specification.

<h3><a name=tline>Top Baseline</a></h3>

<p>This gives the position in the em square of the top
baseline. The top baseline is used by  Sanscrit-derived scripts for
alignment, just as the bottom baseline is used for Latin, Greek and
Cyrillic scripts.

<p>For TrueType GX fonts, this value may be obtained from the <a
rel="biblioentry" href="./refs.html#ref-TRUETYPEGX" class="informref">[TRUETYPEGX]</a>
<tt>bsln</tt> table.

<h3><a name=stemv>Vertical stem width</a></h3>

<p>The width of vertical (or near-vertical) stems of glyph
representations. This information is often tied to hinting, and may
not be directly accessible in some font formats. For Type 1 fonts,
this may be obtained from the <tt>/StdVW</tt> entry in the Private
dictionary or the AFM file. For TrueType fonts, this may be obtained
from the <tt>cvt</tt> table.

<h3><a name=slope>Vertical stroke angle</a></h3>

<p>Angle, in degrees counterclockwise from the vertical, of the dominant
vertical strokes of the font. The value is negative for fonts that
slope to the right, as almost all italic fonts do. This descriptor may
also be specified for oblique fonts, slanted fonts, script fonts, and
in general for any font whose vertical strokes are not precisely
vertical. A non-zero value does not of itself indicate an italic font.


<h2><a name="algorithm">Font matching algorithm</a></h2>

<P>This specification extends the algorithm given in the CSS1
specification. This algorithm reduces down to the algorithm in the
CSS1 specification when the author and reader stylesheets do not
contain any <span class="index-inst" title="@font-face">
@font-face</span> rules.

<p>Matching of descriptors to font faces must be done carefully. The
descriptors are matched in a well-defined order to insure that the
results of this matching process are as consistent as possible across
UAs (assuming that the same library of font faces and font
descriptions is presented to each of them). This algorithm may be
optimized, provided that an implementation behaves as if the algorithm
had been followed exactly.</p>
  
<OL>

 <LI>The user agent makes (or accesses) a database of relevant
 font-face descriptors of all the fonts of which the UA is aware. If
 there are two fonts with exactly the same descriptors, one of them is
 <span class="index-inst" title="skip"><a
 href="syndata.html#skip">skipped.</a></span> The UA may be aware of a
 font because:

 <ul>
   <li>it has been installed locally

    <li>it is declared using an <span class="index-inst"
    title="@font-face"> @font-face</span> rule in one of the style
    sheets linked to or contained in the current document


    <li>it is used in the UA default style sheet, which conceptually
    exists in all UAs and is considered to have full
    @font-face rules for all fonts which the UA will use for
    default presentation, plus @font-face rules for the five
    special generic font families (see
    <span class="propinst-font-family">'font-family'</span>)
    defined in CSS2
  </ul>


  <LI>At a given element and for each character in that element, the
  UA assembles the font properties applicable to that element. Using
  the complete set of properties, the UA uses the <span
  class="descinst-font-family">'font-family'</span> descriptor to
  choose a tentative font family. Thus, matching on a family name will
  succeed before matching on some other descriptor. The remaining
  properties are tested against the family according to the matching
  criteria described with each descriptor. If there are matches for
  all the remaining properties, then that is the matching font face
  for the given element.

  <LI>If there is no matching font face within the <span
  class="descinst-font-family">'font-family'</span> being
  processed by step 2, <em>UAs which implement intelligent
  matching</em> may proceed to examine other descriptors such as
  x-height, glyph representation widths, and panose-1 to identify a
  different tentative font family. If there are matches for all the
  remaining descriptors, then that is the matching font face for the
  given element. The font-family descriptor which is reflected 
  into the CSS2 properties is the font family that was requested, not
  whatever name the intelligently matched font may have. UAs which do
  not implement intelligent matching are considered to fail at this
  step.

  <li>If there is no matching font face within the <span
  class="descinst-font-family">'font-family'</span> being processed by
  step 3, <em>UAs which implement font downloading</em> may proceed to
  examine the src descriptor of the tentative font face identified in
  step 3 or 4 to identify a network resource which is available, and
  of the correct format. If there are matches for all the remaining
  descriptors, then that is the matching font face for the given
  element and the UA may attempt to download this font resource. The
  UA may choose to block on this download or may choose to proceed to
  the next step while the font downloads. UAs which do not implement
  font download, or are not connected to a network, or where the user
  preferences have disabled font download, or where the requested
  resource is unavailable for whatever reason, or where the downloaded
  font cannot be used for whatever reason, are considered to fail at
  this step.

  <li>If there is no matching font face within the <span
  class="descinst-font-family">'font-family'</span> being
  processed by step 3, <em>UAs which implement font synthesis</em> may
  proceed to examine other descriptors such as x-height, glyph
  representation widths, and panose-1 to identify a different
  tentative font family for synthesis. If there are matches for all
  the remaining descriptors, then that is the matching font face for
  the given element and synthesis of the faux font may begin. UAs
  which do not implement font synthesis are considered to fail at this
  step.

 

  <li>If all of steps 3, 4 and 5 fail, and if there is a next
  alternative <span
  class="descinst-font-family">'font-family'</span> in the font
  set, then repeat from step 2 with the next alternative <span
  class="descinst-font-family">'font-family'</span>.
    
  <LI>If there is a matching font face, but it doesn't contain a glyph
  representation for the current character, and if there is a next
  alternative <span
  class="descinst-font-family">'font-family'</span> in the font
  sets, then repeat from step 2 with the next alternative <span
  class="descinst-font-family">'font-family'</span>.  The <span
  class="descinst-unicode-range">'unicode-range'</span>
  descriptor may be used to rapidly eliminate from consideration those
  font faces which do not have the correct glyph representations. If
  the <span class="descinst-unicode-range">'unicode-range'</span>
  descriptor indicates that a font contains some glyph representations
  in the correct range, it may be examined by the UA to see if it has
  that particular one.
 
  <LI>If there is no font within the family selected in 2, then use a
  UA-dependent default <span
  class="descinst-font-family">'font-family'</span> and repeat
  from step 2, using the best match that can be obtained within the
  default font. If a particular character cannot be displayed using
  the default font, the UA should indicate that a character is not
  being displayed (for example, using the 'missing character' glyph).

  <li>UAs which implement progressive rendering and have pending font
  downloads may, once download is successful, use the downloaded font
  as a font family. If the downloaded font is missing some glyph
  representations that the temporary progressive font did contain, the
  downloaded font is not used for that character and the temporary
  font continues to be used.

</OL>

<div class="note"><P>
<em><strong>Note.</strong>
The above algorithm can be optimized to avoid having to revisit
the CSS2 properties for each character.
</em>
</div>
  
<P>The per-descriptor matching rules from (2) above are as follows:</p>
  

<OL>
  <LI>
      <span class="descinst-font-style">'font-style'</span> is tried first. 'italic' will be satisfied
      if there is either a face in the UA's font database labeled with the CSS
      keyword 'italic' (preferred) or 'oblique'. Otherwise the values must be matched
      exactly or font-style will fail.
    <LI>
      <span class="descinst-font-variant">'font-variant'</span> is tried next. 'normal' matches
      a font not labeled as 'small-caps'; 'small-caps' matches (1) a font labeled
      as 'small-caps', (2) a font in which the small caps are synthesized, or (3)
      a font where all lowercase letters are replaced by upper case letters. A
      small-caps font may be synthesized by electronically scaling uppercase letters
      from a normal font.
    <LI>
      <span class="descinst-font-weight">'font-weight'</span> is matched next, it will never fail.
      (See <span class="descinst-font-weight">'font-weight'</span> below.)
    <LI>
      <span class="descinst-font-size">'font-size'</span> must be matched within a UA-dependent
      margin of tolerance. (Typically, sizes for scalable fonts are rounded to
      the nearest whole pixel, while the tolerance for bitmapped fonts could be
      as large as 20%.) Further computations, e.g. by 'em' values in other properties,
      are based on the <span class="descinst-font-size">'font-size'</span> value that is used, not the one that is specified.
  </OL>

<h3>Examples of font matching</h3>

<div class="example"><P>

The following example defines a specific font face, Alabama
Italic. A panose font description and source URI for retrieving a
truetype server font are also provided. Font-weight, and font-style
descriptors are provided to describe the font. The declaration says
that the weight will also match any request in the
range 300 to 500). The font family is Alabama and the adorned font
name is Alabama Italic.</P>

<PRE>
  @font-face {
    src: local(Alabama Italic), 
         url(http://www.fonts.org/A/alabama-italic) format(truetype);
    panose-1: 2 4 5 2 5 4 5 9 3 3;
    font-family: Alabama, serif;
    font-weight:   300, 400, 500;
    font-style:  italic, oblique;
  }
</PRE>
</div>

<div class="example"><P>
The next example defines a family of fonts. A single URI is provided
for retrieving the font data. This data file will contain multiple
styles and weights of the named font. Once one of these
@font-face definitions has been dereferenced, the data will
be in the UA cache for other faces that use the same URI.</P>

<PRE>
  @font-face {
    src: local(Helvetica Medium), 
         url(http://www.fonts.org/sans/Helvetica_family) format(truedoc);
    font-family: "Helvetica";
    font-style: normal
  }
  @font-face {
    src: local(Helvetica Oblique), 
         url(http://www.fonts.org/sans/Helvetica_family) format(truedoc);
    font-family: "Helvetica";
    font-style: oblique;
    slope: -18
  }
</PRE>
</div>

<div class="example"><P>
The following example groups three physical fonts into one virtual font with
extended coverage. In each case, the adorned font name is given in the
src descriptor to allow locally installed versions to be preferentially
used if available. A fourth rule points to a font with the same coverage, 
but contained in a single resource.

<PRE>
  @font-face {
  font-family: Excelsior;
  src: local(Excelsior Roman), url(http://site/er) format(intellifont);
  unicode-range: U+?? /* Latin-1 */
  }
  @font-face {
  font-family: Excelsior;
  src: local(Excelsior EastA Roman), url(http://site/ear) format(intellifont);
  unicode-range: U+100-220 /* Latin Extended A and B */
  }
  @font-face {
  font-family: Excelsior;
  src: local(Excelsior Cyrillic Upright), url(http://site/ecr) format(intellifont);
  unicode-range: U+4?? /* Cyrillic */
  }
  @font-face {
  font-family: Excelsior;
  src: url(http://site/excels) format(truedoc);
  unicode-range: U+??,U+100-220,U+4??;
  }
</PRE>
</div>

<div class="example"><P>
This next example might be found in a UA's default style sheet. It
implements the CSS2 generic font family, <tt>serif</tt> by mapping it to
a wide variety of serif fonts that might exist on various
platforms. No metrics are given since these vary between the possible
alternatives.

<PRE>
  @font-face {
    src: local(Palatino), 
            local(Times New Roman), 
            local(New York), 
            local(Utopia), 
            url(http://somewhere/free/font);
    font-family: serif;
    font-weight: 100, 200, 300, 400, 500;
    font-style: normal;
    font-variant: normal;
    font-size: all
  }
</PRE>
</div>

</BODY>
</HTML>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
