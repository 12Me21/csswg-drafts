<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: aural.src,v 1.15 1998-01-20 23:20:13 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Aural style sheets</TITLE>
<LINK rel="next" href="sample.html">
<LINK rel="previous" href="ui.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center"><a name="aural">Aural style sheets</a></H1>

<p>Those of us who are sighted are accustomed to visual presentation
of documents, frequently on a bitmapped display.  This is not the only
possible presentation method, however.  Aural presentation, using a
combination of speech synthesis and 'audio icons', provides an
alternative presentation.  This form of presentation is already in
current use by the blind and print-impaired communities.

<p>Often such aural presentation occurs by converting the document to
plain text and feeding this to a 'screen reader' -- software or
hardware that simply reads all the characters on the screen.  This
results in less effective presentation than would be the case if the
<em>document structure</em> were retained. A benefit of separating the
content (e.g., the HTML) and the visual presentation (the stylesheet)
is that other types of presentation can also be offered as options
(other stylesheets). Stylesheet properties for aural presentation can
be used together with visual properties (mixed media) or as an aural
alternative to visual presentation.

<p>Besides the obvious accessibility issues for the blind, there are
other large markets for aural presentation:

<dl>
<dt>in-car use 

<dd><i>keep your eyes on the road ahead, Jack, and search the web for
recommended hotels in the next town up ahead</i>

<dt>industrial and medical documentation systems (intranets)

<dd><i>my hands and eyes are otherwise occupied with your triple bypass
but I would still like your medication records</i>

<dt>home entertainment

<dd><i>images, headlines, movies are fine on the wide-screen TV but I
don't want to read body text off the screen from the couch; speak it
to me (perhaps through the 5 speaker home theater set-up)</i>

<dt>the illiterate

<dd><i>I understand everything you say, but I don't read very well</i>

</dl>

<p>Hence, aural or mixed aural/visual presentation is likely to increase
in importance over the next few years. Realizing that the aural
rendering is essentially independent of the visual rendering:</p>
 
<ul>

<li>Allows orthogonal aural and visual views. 

<li>Allows browsers to optionally implement both aural and visual
views to produce truly multi-modal documents.
</ul>

<H2>Aural cascading style sheet properties</H2>

<H3><a name="volume-props">Volume properties</a>: <span
class="propinst-volume">'volume'</span></H3>

<!-- #include src=properties/volume.srb -->

<P>The legal range of numerical values is 0 to 100. Note that '0'
<strong>does not mean the same as "silent"</strong>. 0 represents the
<em>minimum audible</em> volume level and 100 corresponds to the
<em>maximum comfortable</em> level. 

<p>Percentage values are calculated relative to the inherited value,
and are then clipped to the range 0 to 100.

<P>There is a fixed mapping between keyword values and volumes:</p>

<UL>
<li>'silent' = no sound at all, the element is spoken silently
<LI>'x-soft' = '0'
<LI>'soft' = '25'
<LI>'medium' = '50'
<LI>'loud' = '75'
<LI>'x-loud' = '100'
</UL>

<P><span class="index-def" title="volume">Volume</span> refers to the
median volume of the waveform. In other words, a highly inflected
voice at a volume of 50 might peak well above that. The overall values
are likely to be human adjustable for comfort, for example with a
physical volume control (which would increase both the 0 and 100
values proportionately); what this property does is adjust the dynamic
range.

<p>The UA should allow the values corresponding to 0 and
100 to be set by the listener. No one setting is universally
applicable; suitable values depend on the equipment in use (speakers,
headphones), the environment (in car, home theater, library) and
personal preferences. Some examples:</p>

<ul>
<li>A browser for in-car use has a setting for when there is lots
of background noise. 0 would map to a fairly high level and 100 to a
quite high level. The speech is easily audible over the road noise but
the overall dynamic range is compressed. Plusher cars with better
insulation allow a wider dynamic range.


<li>Another speech browser is being used in the home, late at night,
(don't annoy the neighbors) or in a shared study room. 0 is set to
a very quiet level and 100 to a fairly quiet level, too. As with the first
example, there is a low slope; the dynamic range is reduced. The
actual volumes are low here, whereas they were high in the first
example.

<li>In a quiet and isolated house, an expensive hi-fi home theater
setup. 0 is set fairly low and 100 to quite high; there is wide
dynamic range.
</ul>

<p>The same authors stylesheet could be used in all cases, simply by
mapping the 0 and 100 points suitably at the client side.

<H3><a name="speaking-props">Speaking properties</a>: <span
class="propinst-speak">'speak'</span></H3>

<!-- #include src=properties/speak.srb -->

<P>This property specifies whether text will be rendered aurally and
if so, in what manner (somewhat analogous to the <span
class="propinst-display">'display'</span> property). The possibles
values are:

<dl>
<dt>none</dt>
<dd>Suppresses aural rendering so that, unless overridden recursively,
the element and its children require no time to render.

<dt>normal</dt>
<dd>Uses regular language-dependent pronunciation rules for rendering
an element and its children.

<dt>spell-out</dt>
<dd>Spells the text one letter at a time (useful for acronyms and
abbreviations).
</dl>

<p>Note the difference between an element whose <span
class="propinst-volume">'volume'</span> property has a value of
'silent' and an element whose <span
class="propinst-speak">'speak'</span> property has the value 'none':

<P>The former takes up the same time as if it had been spoken,
including any pause before and after the element, but no sound is
generated. This may be used in language teaching applications, for
example. A pause is generated for the pupil to speak the element
themselves. Note that since the value of this property is inherited,
child elements will also be silent.  Child elements may however set
the volume to a non-silent value and will then be spoken.

<P>Elements whose <span class="propinst-speak">'speak'</span> property
has the value 'none' are not spoken and take no time. Child elements
may however override this value and may be spoken normally.

<H3><a name="pause-props">Pause properties</a>: <span
class="propinst-pause-before">'pause-before'</span>, <span
class="propinst-pause-after">'pause-after'</span>, and <span
class="propinst-pause">'pause'</span></H3>

<!-- #include src=properties/pause-before.srb -->

<P>The <span
class="propinst-pause-before">'pause-before'</span> property specifies
the pause before an element is spoken. It may be given in an absolute
units (seconds, milliseconds) or as a relative value, in which case it
is relative to the reciprocal of the <span
class="propinst-speech-rate">'speech-rate'</span> property. If
speech-rate is 120 words per minute (i.e., a word takes half a second,
500 milliseconds) then a <span
class="propinst-pause-before">'pause-before'</span> of 100% means a
pause of 500 ms and a <span
class="propinst-pause-before">'pause-before'</span> of 20% means
100ms.

<p>Using relative units gives more robust stylesheets in the face of
large changes in speech-rate and is recommended practice.

<!-- #include src=properties/pause-after.srb -->

<P>This property specifies the pause after an element is
spoken. Values are specified the same way as <span
class="propinst-pause-before">'pause-before'</span>.

<!-- #include src=properties/pause.srb -->

<P>The <span class="propinst-pause">'pause'</span> property is a
shorthand for setting <span
class="propinst-pause-before">'pause-before'</span> and <span
class="propinst-pause-after">'pause-after'</span>.  If two values are
given, the first value is <span
class="propinst-pause-before">'pause-before'</span> and the second is
<span class="propinst-pause-after">'pause-after'</span>. If only one
value is given, it applies to both properties.


<div class="example"><P>
Examples:
<PRE>
  H1 { pause: 20ms } /* pause-before: 20ms; pause-after: 20ms */
  H2 { pause: 30ms 40ms } /* pause-before: 30ms; pause-after: 40ms */
  H3 { pause-after: 10ms } /* pause-before: ?; pause-after: 10ms */
</PRE>
</div>

<H3><a name="cue-props">Cue properties</a>: <span
class="propinst-cue-before">'cue-before'</span>, <span
class="propinst-cue-after">'cue-after'</span>, and <span
class="propinst-cue">'cue'</span></H3>

<!-- #include src=properties/cue-before.srb -->

<!-- #include src=properties/cue-after.srb -->

<P>Auditory icons are another way to distinguish semantic
elements. Sounds may be played before, and/or after the element to
delimit it. 

<div class="example"><P>
For example:
<PRE>
  A {cue-before: url(bell.aiff); cue-after: url(dong.wav) }
  H1 {cue-before: url(pop.au); cue-after: url(pop.au) }
</pre>
</div>

<!-- 
The <tt>:before</tt> and <tt>:after</tt> pseudo-elements (see
frosting document) could be used to generate this content, rather
than using two special-purpose properties. This would be more
general.</p>
-->

<!-- #include src=properties/cue.srb -->

<P>The same sound can be used both before and after, using the
shorthand <span class="propinst-cue">'cue'</span> property.


<div class="example"><P>
The following two rules are equivalent:
<PRE>
  H1 {cue-before: url(pop.au); cue-after: url(pop.au) }
  H1 {cue: url(pop.au) }
</pre>
</div>


<H3><a name="mixing-props">Mixing properties</a>: <span
class="propinst-play-during">'play-during'</span></H3>

<!-- #include src=properties/play-during.srb -->

<p>Similar to the <span
class="propinst-cue-before">'cue-before'</span> and <span
class="propinst-cue-after">'cue-after'</span> properties, this
indicates sound to be played during an element as a background (i.e., the
sound is mixed in with the speech).

<p>The optional 'mix' keyword means the sound inherited from the parent
element's play-during property continues to play and the current
element sound (pointed to by the URI) is mixed with it. If 'mix' is not
specified, the sound replaces the sound of the parent element. 

<p>The optional 'repeat' keyword means the sound will repeat if it is
too short to fill the entire duration of the element. Without this
keyword, the sound plays once and then stops. This is similar to the
background repeat properties in CSS2. If the sound is too long for the
element, it is clipped once the element is spoken.

<p>'Auto' means that the sound of the parent element continues to play
(it is not restarted, which would have been the case if this property
inherited)and none means that there is silence - the sound of the
parent element (if any) is silent for the current element and
continues after the current element.

<div class="examples"><P>
Examples:
<PRE>
  BLOCKQUOTE.sad {play-during: url(violins.aiff) }
  BLOCKQUOTE Q {play-during: url(harp.wav) mix}
  SPAN.quiet {play-during: none }
</pre>
</div>

<P>If a stereo icon is dereferenced the central point of the stereo
pair should be placed at the azimuth for that element and the left and
right channels should be placed to either side of this position.

<!-- ================================================================== -->

<H3><a name="spatial-props">Spatial properties</a>: <span
class="propinst-azimuth">'azimuth'</span> and
<span class="propinst-elevation">'elevation'</span>
</H3>

<p>Spatial audio is an important stylistic property for aural
presentation. It provides a natural way to tell several voices apart,
the same way we use in real life (people rarely all stand in the same
spot in a room). Stereo speakers produce a lateral sound
stage. Binaural headphones or the increasingly popular 5-speaker home
theater setups can generate full surround sound, and multi-speaker
setups can create a true three-dimensional sound stage. VRML 2.0 also
includes spatial audio (and uses the same azimuth and elevation terms,
which originate in astronomy), which implies that in time
consumer-priced spatial audio hardware will become more widely
available.

<!-- #include src=properties/azimuth.srb -->

<P>The value is given in the range -360deg &lt;= x &lt; 360deg where
0deg is interpreted as directly ahead in the center of the sound
stage.  90deg is to the right, 180deg behind and 270deg (or,
equivalently and more conveniently, -90deg) to the left. It may also
be specified using absolute keywords:


<P><div align=center><table border="1"><tr><th>keyword<th>value<th>value with 'behind'
<tr><td>left-side <td>270deg <td>270deg
<tr><td>far-left <td>300deg <td>240deg
<tr><td>left <td>320deg <td>220deg
<tr><td>center-left <td>340deg <td>200deg
<tr><td>center <td>0deg <td>180deg
<tr><td>center-right <td>20deg <td>160deg
<tr><td>right <td>40deg <td>140deg
<tr><td>far-right <td>60deg <td>120deg
<tr><td>right-side <td>90deg <td>90deg</tr>
</table></div>

<p>or relative keywords. The value <tt>leftwards</tt> moves the sound
more to the left (subtracts 20 degrees) while the value
<tt>rightwards</tt> moves the sound more to the right (adds 20
degrees). Arithmetic is carried out modulo 360 degrees.

<p>This property is most likely to be implemented by mixing the same
signal into different channels at differing volumes.  It might also
use phase shifting, digital delay, and other such techniques to
provide the illusion of a sound stage.  The precise means used to
achieve this effect and the number of speakers used to do so are
browser dependent - this property merely identifies the desired end
result.

<div class="example"><P>
Examples:
<PRE>
  H1   { azimuth: 30deg }          
  TD.a { azimuth: far-right }          /*  60deg */
  #12  { azimuth: behind far-right }   /* 120deg */
  P.comment { azimuth: behind }        /* 180deg */
</PRE>
</div>


<p>UAs should attempt to honor this request if they have resources to
do so. If spatial-azimuth is specified and the output device cannot
produce sounds <em>behind</em> the listening position, values in the
rearwards hemisphere should be converted into forwards hemisphere
values.  One method is as follows:</p>

<ul>
    <li>if 90deg &lt; x &lt;= 180deg then x := 180deg - x
    <li>if 180deg &lt; x &lt;= 270deg then x := 540deg - x
</ul>

<!-- #include src=properties/elevation.srb -->

<P>The value is given in degrees in the range -90deg to 90deg. 0deg is
interpreted as on the forward horizon, which loosely means level with
the listener.  90deg is directly overhead and -90 is directly
underneath.  The precise means used to achieve this effect and the
number of speakers used to do so are undefined.  This property merely
identifies the desired end result. UAs should attempt to honor this
request if they have resources to do so. 

<p>The relative keywords <tt>higher</tt> and <tt>lower</tt> add and
subtract 10 degrees from the elevation, respectively.

<div class="example"><P>
Examples:
<PRE>        
  H1   { elevation: above }   
  TR.a { elevation: 60deg }
  TR.b { elevation: 30deg }
  TR.c { elevation: level } 
</pre>
</div>


<h3><a name="voice-char-props">Voice characteristic properties</a>: <span
class="propinst-speech-rate">'speech-rate'</span>, <span
class="propinst-voice-family">'voice-family'</span>,
<span class="propinst-pitch">'pitch'</span>,
<span class="propinst-pitch-range">'pitch-range'</span>,
<span class="propinst-stress">'stress'</span>,
<span class="propinst-richness">'richness'</span>,
<span class="propinst-speak-punctuation">'speak-punctuation'</span>,
<span class="propinst-speak-date">'speak-date'</span>,
<span class="propinst-speak-numeral">'speak-numeral'</span>, and
<span class="propinst-speak-time">'speak-time'</span>
</h3>

<!-- #include src=properties/speech-rate.srb -->

<P>Specifies the speaking rate. Note that both absolute and relative
keyword values are allowed (compare with <span
class="propinst-font-weight">'font-weight'</span>). If a numerical
value is given, it refers to words per minute, a quantity which varies
somewhat by language but is nevertheless widely supported by speech
synthesizers. The value 'medium' refers to the reader's preferred
speech-rate setting. Relative values may be cascaded more readily.

<!-- #include src=properties/voice-family.srb -->

<P>The value is a prioritized list of voice family names (compare with
<span class="propinst-font-family">'font-family'</span>). Suggested
values of <span class="index-def" title="&lt;generic-voice&gt;,
definition of"><a
name="value-def-generic-voice">&lt;generic-voice&gt;</a></span>: male,
female, child.

<P>Examples of <span class="index-def" title="&lt;specific-voice&gt;::definition of"><a name="value-def-specific-voice">&lt;specific-voice&gt;</a></span> families are: comedian, trinoids, carlos, lisa

<div class="example"><P>
Examples:

<pre>
  H1 { voice-family: announcer, male }
  P.part.romeo  { voice-family: romeo, male }
  P.part.juliet { voice-family: juliet, female }
</pre>
</div>

<!--
<p class=comment>Should the properties of these family names be
described, using an @-rule, to allow better client-side matching (like
fonts). If so, what are the values that describe these voice families
in a way that is independent of speech synthesizer?
-->

<!-- #include src=properties/pitch.srb -->

<p>Specifies the average pitch of the speaking voice in hertz (Hz).

<!-- #include src=properties/pitch-range.srb -->

<p>Specifies variation in average pitch. A pitch range of 0 produces
a flat, monotonic voice. A pitch range of 50 produces normal
inflection.  Pitch ranges greater than 50 produce animated voices.

<!-- #include src=properties/stress.srb -->

<p>Specifies the level of stress (assertiveness or emphasis) of the
speaking voice.  English is a <strong>stressed</strong> language, and
different parts of a sentence are assigned primary, secondary or
tertiary stress. The value of <span
class="propinst-stress">'stress'</span> controls the amount of
inflection that results from these stress markers.

<P>Increasing the value of this property results in the speech being
more strongly inflected.  It is in a sense dual to the <span
class="propinst-pitch-range">'pitch-range'</span> property and is
provided to allow developers to exploit higher-end auditory displays.

<!-- #include src=properties/richness.srb -->

<P>Specifies the richness (brightness) of the speaking voice. The
effect of increasing richness is to produce a voice that
<em>carries</em> --reducing richness produces a soft, mellifluous
voice.


<P><EM>The following four properties are <STRONG>very</STRONG>
preliminary</EM>; discussion is invited:

<!-- #include src=properties/speak-punctuation.srb -->

<p>A value of 'code' indicates that punctuation such as semicolons,
braces, and so on are to be spoken literally. The initial value of
'none' means that punctuation is not spoken but instead is rendered
naturally as various pauses.

<!-- #include src=properties/speak-date.srb -->


<p>This property controls  how  dates should be
spoken. month-day-year is common in the USA, while day-month-year is
common in Europe and year-month-day is also used.

<div class="xml-example"><P>
This would be useful, for example, when combined with an XML
element used to identify dates, such as:

<pre>
   &lt;PARA&gt;The campaign started on &lt;DATE value="1874-10-21"/&gt;
    and finished &lt;DATE value="1874-10-28/"&gt;&lt;/PARA&gt;
</pre>
</div>

<!-- #include src=properties/speak-numeral.srb -->

<p>This property controls whether multi-digit numerals (such as 237)
are spoken as a single number (two hundred and thirty seven) or
individual digits (two three seven).

<!-- #include src=properties/speak-time.srb -->

<p>This property controls whether times are spoken in the 24-hour time
system or the 12-hour, am/pm system. When used in combination with the
'speak-date' property, this allows elements with an attribute
containing an ISO 8601 format date/time attribute to be presented in a
flexible manner.

<p>An additional aural property, <a
href="tables.html#propdef-speak-header">speak-header</a>, is
described in the capter on <a href="tables.html">tables</a>


</BODY>
</HTML>
