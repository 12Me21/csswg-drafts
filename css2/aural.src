<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: aural.src,v 2.27 1998-05-12 12:29:20 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Aural style sheets</TITLE>
</HEAD>
<BODY>
<H1 align="center"><a name="aural">Aural style sheets</a></H1>

<H2>Introduction to aural style sheets</H2>

<p>The aural rendering of a document, already commonly used by the
blind and print-impaired communities, combines speech synthesis and
<span class="index-def" title="auditory icon">"auditory icons."</span> Often
such aural presentation occurs by converting the document to plain
text and feeding this to a <span class="index-def" title="screen
reader"><dfn>screen reader</dfn></span> -- software or hardware that
simply reads all the characters on the screen.  This results in less
effective presentation than would be the case if the document
structure were retained.  Style sheet properties for aural presentation
may be used together with visual properties (mixed media) or as an
aural alternative to visual presentation.

<p>Besides the obvious accessibility advantages, there are other large
markets for listening to information, including in-car use, industrial
and medical documentation systems (intranets), home entertainment, and
to help users learning to read or who have difficulty reading.

<p>When using aural properties, the <span class="index-inst"
title="canvas">canvas</span> consists of a three-dimensional physical
space (sound surrounds) and a temporal space (one may specify sounds
before, during, and after other sounds). The CSS properties also
allow authors to vary the quality of synthesized speech (voice type,
frequency, inflection, etc.).

<div class="example"><p>
<pre>
H1, H2, H3, H4, H5, H6 {
    voice-family: paul;
    stress: 20;
    richness: 90;
    cue-before: url("ping.au")
}
P.heidi { azimuth: center-left }
P.peter { azimuth: right }
P.goat  { volume: x-soft }
</pre>

<p>This will direct the speech synthesizer to speak headers in a voice
(a kind of "audio font") called "paul", on a flat tone, but in a very
rich voice. Before speaking the headers, a sound sample will be played
from the given URL. Paragraphs with class "heidi" will appear to come
from front left (if the sound system is capable of spatial audio), and
paragraphs of class "peter" from the right. Paragraphs with class
"goat" will be very soft.
</div>


<H2><a name="volume-props">Volume properties</a>: <span
class="propinst-volume">'volume'</span></H2>

<!-- #include src=properties/volume.srb -->

<P><span class="index-def" title="volume">Volume</span> refers to the
median volume of the waveform. In other words, a highly inflected
voice at a volume of 50 might peak well above that. The overall values
are likely to be human adjustable for comfort, for example with a
physical volume control (which would increase both the 0 and 100
values proportionately); what this property does is adjust the dynamic
range.


<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;number&gt;"><span
		class="value-inst-number"><strong>&lt;number&gt;</strong>
</span></span>
<dd>Any number between '0' and '100'.
'0' represents the <em>minimum audible</em>
volume level and 100 corresponds to the
<em>maximum comfortable</em> level.
<dt><span class="index-inst" title="&lt;percentage&gt;"><span class="value-inst-percentage"><strong>&lt;percentage&gt;</strong></span></span>
<dd>Percentage values are calculated relative to the inherited value,
and are then clipped to the range '0' to '100'.
<dt><strong>silent</strong>
<dd>No sound at all. The value '0' does not mean
the same as 'silent'.
<dt><strong>x-soft</strong>
<dd>Same as '0'.
<dt><strong>soft</strong>
<dd>Same as '25'.
<dt><strong>medium</strong>
<dd>Same as '50'.
<dt><strong>loud</strong>
<dd>Same as '75'.
<dt><strong>x-loud</strong>
<dd>Same as '100'.
</dl>

<p>User agents should allow the values corresponding to '0' and '100'
to be set by the listener. No one setting is universally applicable;
suitable values depend on the equipment in use (speakers, headphones),
the environment (in car, home theater, library) and personal
preferences. Some examples:</p>

<ul>
<li>A browser for in-car use has a setting for when there is lots of
background noise. '0' would map to a fairly high level and '100' to a
quite high level. The speech is easily audible over the road noise but
the overall dynamic range is compressed. Cars with better
insulation might allow a wider dynamic range.

<li>Another speech browser is being used in an apartment, late at
night, or in a shared study room. '0' is set to a very quiet level and
'100' to a fairly quiet level, too. As with the first example, there
is a low slope; the dynamic range is reduced. The actual volumes are
low here, whereas they were high in the first example.

<li>In a quiet and isolated house, an expensive hi-fi home theater
setup. '0' is set fairly low and '100' to quite high; there is wide
dynamic range.
</ul>

<p>The same author style sheet could be used in all cases, simply by
mapping the '0' and '100' points suitably at the client side.

<H2><a name="speaking-props">Speaking properties</a>: <span
class="propinst-speak">'speak'</span></H2>

<!-- #include src=properties/speak.srb -->

<P>This property specifies whether text will be rendered aurally and
if so, in what manner (somewhat analogous to the <span
class="propinst-display">'display'</span> property). The possible
values are:

<dl>
<dt><strong>none</strong></dt>
<dd>Suppresses aural rendering so that the
element requires no time to render. Note, however, that
descendants may override this value and will be spoken. (To
be sure to suppress rendering of an
element and its descendants, use the
<span class="propinst-display">'display'</span> property).

<dt><strong>normal</strong></dt>
<dd>Uses  language-dependent pronunciation rules for rendering
an element and its children.

<dt><strong>spell-out</strong></dt>
<dd>Spells the text one letter at a time (useful for acronyms and
abbreviations).
</dl>

<p>Note the difference between an element whose <span
class="propinst-volume">'volume'</span> property has a value of
'silent' and an element whose <span
class="propinst-speak">'speak'</span> property has the value 'none'.
The former takes up the same time as if it had been spoken, including
any pause before and after the element, but no sound is generated. The
latter requires no time and is not rendered (though its descendants
may be).

<H2><a name="pause-props">Pause properties</a>: <span
class="propinst-pause-before">'pause-before'</span>, <span
class="propinst-pause-after">'pause-after'</span>, and <span
class="propinst-pause">'pause'</span></H2>

<!-- #include src=properties/pause-before.srb -->

<!-- #include src=properties/pause-after.srb -->


<P>These properties specify a pause to be observed before (or after)
speaking an element's content.  Values have the following
meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;time&gt;"><span class="value-inst-time"><strong>&lt;time&gt;</strong></span></span>
<dd>Expresses the pause in absolute time units (seconds and milliseconds).
<dt><span class="index-inst" title="&lt;percentage&gt;"><span class="value-inst-percentage"><strong>&lt;percentage&gt;</strong></span></span>
<dd>Refers to the inverse of the value of the
<span class="propinst-speech-rate">'speech-rate'</span> property.
For example, if the speech-rate is 120 words per minute
(i.e., a word takes half a second, or 500ms) then a <span
class="propinst-pause-before">'pause-before'</span> of 100% means a
pause of 500 ms and a <span
class="propinst-pause-before">'pause-before'</span> of 20% means
100ms.
</dl>

<p>The pause is inserted between the element's content and any <span
class="propinst-cue-before">'cue-before'</span> or <span
class="propinst-cue-after">'cue-after'</span> content.

<p>Authors should use relative units to create more robust style
sheets in the face of large changes in speech-rate.</p>

<!-- #include src=properties/pause.srb -->

<P>The <span class="propinst-pause">'pause'</span> property is a
shorthand for setting <span
class="propinst-pause-before">'pause-before'</span> and <span
class="propinst-pause-after">'pause-after'</span>.  If two values are
given, the first value is <span
class="propinst-pause-before">'pause-before'</span> and the second is
<span class="propinst-pause-after">'pause-after'</span>. If only one
value is given, it applies to both properties.

<div class="example"><P>
<PRE>
H1 { pause: 20ms } /* pause-before: 20ms; pause-after: 20ms */
H2 { pause: 30ms 40ms } /* pause-before: 30ms; pause-after: 40ms */
H3 { pause-after: 10ms } /* pause-before: ?; pause-after: 10ms */
</PRE>
</div>

<H2><a name="cue-props">Cue properties</a>: <span
class="propinst-cue-before">'cue-before'</span>, <span
class="propinst-cue-after">'cue-after'</span>, and <span
class="propinst-cue">'cue'</span></H2>

<!-- #include src=properties/cue-before.srb -->

<!-- #include src=properties/cue-after.srb -->

<P>Auditory icons are another way to distinguish semantic
elements. Sounds may be played before and/or after the element to
delimit it. Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;uri&gt;"><span class="value-inst-uri"><strong>&lt;uri&gt;</strong></span></span>
<dd> The URI must designate an auditory icon resource. If the URI resolves to something other than an audio file, such as an image, the resource should be ignored and the property treated as if it had the value 'none'.

<dt><strong>none</strong>
<dd> No auditory icon is specified.
</dl>

<div class="example"><P>
<PRE>
A {cue-before: url("bell.aiff"); cue-after: url("dong.wav") }
H1 {cue-before: url("pop.au"); cue-after: url("pop.au") }
</pre>
</div>

<!-- #include src=properties/cue.srb -->

<P>The <span class="propinst-cue">'cue'</span> property is a shorthand
for setting <span class="propinst-cue-before">'cue-before'</span>
and <span class="propinst-cue-after">'cue-after'</span>.  If two
values are given, the first value is <span
class="propinst-cue-before">'cue-before'</span> and the second is
<span class="propinst-cue-after">'cue-after'</span>. If only one
value is given, it applies to both properties.</p>

<div class="example"><P>
The following two rules are equivalent:
<PRE>
H1 {cue-before: url("pop.au"); cue-after: url("pop.au") }
H1 {cue: url("pop.au") }
</pre>
</div>

<P>If a user agent cannot render an auditory icon (e.g., the user's
environment does not permit it), we recommend that it produce an
alternative cue (e.g., popping up a warning, emitting a warning sound,
etc.)

<P>Please see the sections on <a
href="generate.html#before-after-content"> the :before and :after
pseudo-elements</a> for information on other content generation
techniques.

<H2><a name="mixing-props">Mixing properties</a>: <span
class="propinst-play-during">'play-during'</span></H2>

<!-- #include src=properties/play-during.srb -->

<p>Similar to the <span
class="propinst-cue-before">'cue-before'</span> and <span
class="propinst-cue-after">'cue-after'</span> properties, this
property specifies a sound to be played as a background
while an element's content is spoken.
Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;uri&gt;"><span class="value-inst-uri"><strong>&lt;uri&gt;</strong></span></span>
<dd>The sound designated by this <span class="index-inst"
title="&lt;uri&gt;"><span
class="value-inst-uri">&lt;uri&gt;</span></span> is played
as a background while the element's content is spoken.
<dt><strong>mix</strong>
<dd>When present, this keyword means that
the sound inherited from the parent element's <span
class="propinst-play-during">'play-during'</span> property continues
to play and the sound designated by the <span
class="index-inst" title="&lt;uri&gt;"><span
class="value-inst-uri">&lt;uri&gt;</span></span> is mixed with it. If
'mix' is not specified, the element's background sound replaces
the parent's.
<dt><strong>repeat</strong>
<dd>When present, this keyword means that the sound will repeat if it
is too short to fill the entire duration of the element. Otherwise,
the sound plays once and then stops. This is similar to the <span
class="propinst-background-repeat">'background-repeat'</span>
property. If the sound is too long for the element, it is clipped once
the element has been spoken.
<dt><strong>auto</strong>
<dd>The sound of the parent element continues to play
(it is not restarted, which would have been the case if this property
had been inherited).
<dt><strong>none</strong>
<dd>This keyword means that there is silence. The sound of the
parent element (if any) is silent during the current element and
continues after the current element.
</dl>

<div class="example"><P>
<PRE>
BLOCKQUOTE.sad { play-during: url("violins.aiff") }
BLOCKQUOTE Q   { play-during: url("harp.wav") mix }
SPAN.quiet     { play-during: none }
</pre>
</div>

<H2><a name="spatial-props">Spatial properties</a>: <span
class="propinst-azimuth">'azimuth'</span> and
<span class="propinst-elevation">'elevation'</span>
</H2>

<p>Spatial audio is an important stylistic property for aural
presentation. It provides a natural way to tell several voices apart,
as in real life (people rarely all stand in the same spot in a
room). Stereo speakers produce a lateral sound stage. Binaural
headphones or the increasingly popular 5-speaker home theater setups
can generate full surround sound, and multi-speaker setups can create
a true three-dimensional sound stage. VRML 2.0 also includes spatial
audio, which implies that in time consumer-priced spatial audio
hardware will become more widely available.</p>

<!-- #include src=properties/azimuth.srb -->

<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;angle&gt;"><span class="value-inst-angle"><strong>&lt;angle&gt;</strong></span></span>
<dd>Position is described in terms of an angle
within the range '-360deg' to '360deg'.
The value '0deg' means directly ahead in the center of the sound
stage.  '90deg' is to the right, '180deg' behind, and '270deg' (or,
equivalently and more conveniently, '-90deg') to the left.
<dt><strong>left-side</strong>
<dd>Same as '270deg'. With 'behind', '270deg'.
<dt><strong>far-left</strong>
<dd>Same as '300deg'. With 'behind', '240deg'.
<dt><strong>left</strong>
<dd>Same as '320deg'. With 'behind', '220deg'.
<dt><strong>center-left</strong>
<dd>Same as '340deg'. With 'behind', '200deg'.
<dt><strong>center</strong>
<dd>Same as '0deg'. With 'behind', '180deg'.
<dt><strong>center-right</strong>
<dd>Same as '20deg'. With 'behind', '160deg'.
<dt><strong>right</strong>
<dd>Same as '40deg'. With 'behind', '140deg'.
<dt><strong>far-right</strong>
<dd>Same as '60deg'. With 'behind', '120deg'.
<dt><strong>right-side</strong>
<dd>Same as '90deg'. With 'behind', '90deg'.
<dt><strong>leftwards</strong>
<dd>Moves the sound
to the left, relative to the current angle.
More precisely, subtracts 20 degrees.
Arithmetic is carried out modulo 360 degrees. Note that
'leftwards' is more accurately described as "turned
counter-clockwise," since it <em>always</em> subtracts 20 degrees,
even if the inherited azimuth is already behind the listener (in which
case the sound actually appears to move to the right).
<dt><strong>rightwards</strong>
<dd>Moves the sound
to the right, relative to the
current angle. More precisely, adds 20 degrees. See 'leftwards'
for arithmetic.
</dl>

<p>This property is most likely to be implemented by mixing the same
signal into different channels at differing volumes.  It might also
use phase shifting, digital delay, and other such techniques to
provide the illusion of a sound stage.  The precise means used to
achieve this effect and the number of speakers used to do so are
user agent-dependent; this property merely identifies the desired end
result.

<div class="example"><P>
<PRE>
H1   { azimuth: 30deg }
TD.a { azimuth: far-right }          /*  60deg */
#12  { azimuth: behind far-right }   /* 120deg */
P.comment { azimuth: behind }        /* 180deg */
</PRE>
</div>

<p>If spatial-azimuth is specified and the output device cannot
produce sounds <em>behind</em> the listening position, user agents
should convert values in the rearwards hemisphere to forwards
hemisphere values.  One method is as follows:</p>

<ul>
    <li>if 90deg &lt; x &lt;= 180deg then x := 180deg - x
    <li>if 180deg &lt; x &lt;= 270deg then x := 540deg - x
</ul>

<!-- #include src=properties/elevation.srb -->

<P>Values of this property have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;angle&gt;"><span class="value-inst-angle"><strong>&lt;angle&gt;</strong></span></span>
<dd>Specifies the elevation as an angle, between '-90deg' and '90deg'.
'0deg' means on the forward horizon, which loosely means level with
the listener.  '90deg' means directly overhead and '-90deg' means directly
below.
<dt><strong>below</strong>
<dd>Same as '-90deg'.
<dt><strong>level</strong>
<dd>Same as '0deg'.
<dt><strong>above</strong>
<dd>Same as '90deg'.
<dt><strong>higher</strong>
<dd>Adds 10 degrees to the current elevation.
<dt><strong>lower</strong>
<dd>Subtracts 10 degrees from the current elevation.
</dl>

<P>The precise means used to achieve this effect and the
number of speakers used to do so are undefined.  This property merely
identifies the desired end result.

<div class="example"><P>
<PRE>
H1   { elevation: above }
TR.a { elevation: 60deg }
TR.b { elevation: 30deg }
TR.c { elevation: level }
</pre>
</div>

<h2><a name="voice-char-props">Voice characteristic properties</a>: <span
class="propinst-speech-rate">'speech-rate'</span>, <span
class="propinst-voice-family">'voice-family'</span>,
<span class="propinst-pitch">'pitch'</span>,
<span class="propinst-pitch-range">'pitch-range'</span>,
<span class="propinst-stress">'stress'</span>, and
<span class="propinst-richness">'richness'</span></H2>

<!-- #include src=properties/speech-rate.srb -->

<P>This property specifies the speaking rate. Note that both absolute
and relative keyword values are allowed (compare with <span
class="propinst-font-size">'font-size'</span>). Values have
the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;number&gt;"><span
class="value-inst-number"><strong>&lt;number&gt;</strong></span></span>
<dd>Specifies the speaking rate in words per minute, a quantity that varies
somewhat by language but is nevertheless widely supported by speech
synthesizers.
<dt><strong>x-slow</strong>
<dd>Same as 80 words per minute.
<dt><strong>slow</strong>
<dd>Same as 120 words per minute
<dt><strong>medium</strong>
<dd>Same as 180 - 200 words per minute.
<dt><strong>fast</strong>
<dd>Same as 300 words per minute.
<dt><strong>x-fast</strong>
<dd>Same as 500 words per minute.
<dt><strong>faster</strong>
<dd>Adds 40 words per minute to the current speech rate.
<dt><strong>slower</strong>
<dd>Subtracts 40 words per minutes from the current speech rate.
</dl>

<!-- #include src=properties/voice-family.srb -->

<P>The value is a comma-separated, prioritized list of voice family
names (compare with <span
class="propinst-font-family">'font-family'</span>). Values have the
following meanings:</P>

<dl>
<dt><span class="index-def" title="&lt;generic-voice&gt;,
definition of"><a
name="value-def-generic-voice"><strong>&lt;generic-voice&gt;</strong></a></span>
<dd>Values are voice families. Possible values
are 'male', 'female', and 'child'.
<dt><span class="index-def" title="&lt;specific-voice&gt;::definition of"><a name="value-def-specific-voice"><strong>&lt;specific-voice&gt;</strong></a></span>
<dd>Values are specific instances (e.g., comedian, trinoids, carlos, lani).
</dl>

<div class="example"><P>

<pre>
H1 { voice-family: announcer, male }
P.part.romeo  { voice-family: romeo, male }
P.part.juliet { voice-family: juliet, female }
</pre>
</div>

<p>Names of specific voices may be quoted, and indeed must be quoted
if any of the words that make up the name does not conform to the
syntax rules for <a
href="syndata.html#tokenization">identifiers</a>. It is also
recommended to quote specific voices with a name consisting of more
than one word. If quoting is omitted, any <a
href="syndata.html#whitespace">whitespace</a> characters before and
after the font name are ignored and any sequence of whitespace
characters inside the font name is converted to a single space.

<!-- #include src=properties/pitch.srb -->

<p>Specifies the average pitch (a frequency) of the speaking voice.  The
average pitch of a voice depends on the voice family.  For example,
the average pitch for a standard male voice is around 120Hz,
but for a female voice, it's around 210Hz.</p>

<P>Values have the following meanings:</P>

<dl>
<dt><span class="index-inst" title="&lt;frequency&gt;"><span class="value-inst-frequency"><strong>&lt;frequency&gt;</strong></span></span>
<dd>Specifies the average pitch of the speaking voice in hertz (Hz).
<dt><strong>x-low</strong>, <strong>low</strong>,
<strong>medium</strong>, <strong>high</strong>, <strong>x-high</strong>
<dd>These values do not map to absolute frequencies since
these values depend on the voice family. User agents should map
these values to appropriate frequencies based on the voice family
and user environment. However, user agents must map these values in
order (i.e., 'x-low' is a lower frequency than 'low', etc.).
</dl>


<!-- #include src=properties/pitch-range.srb -->

<p>Specifies variation in average pitch.  The perceived pitch of a
human voice is determined by the fundamental frequency and typically
has a value of 120Hz for a male voice and 210Hz for a female voice.
Human languages are spoken with varying inflection and pitch; these
variations convey additional meaning and emphasis.  Thus, a highly
animated voice, i.e., one that is heavily inflected, displays a high
pitch range. This property specifies the range over which these
variations occur, i.e., how much the fundamental frequency may deviate
from the average pitch.

<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;number&gt;"><span class="value-inst-number"><strong>&lt;number&gt;</strong></span></span>
<dd>A value between '0' and '100'. A pitch range of '0' produces
a flat, monotonic voice. A pitch range of 50 produces normal
inflection.  Pitch ranges greater than 50 produce animated voices.
</dl>


<!-- #include src=properties/stress.srb -->

<p>Specifies the height of "local peaks" in the intonation contour
of a voice. For example, English is a <strong>stressed</strong>
language, and different parts of a sentence are assigned primary,
secondary, or tertiary stress. The value of <span
class="propinst-stress">'stress'</span> controls the amount of
inflection that results from these stress markers.  This property is a
companion to the <span
class="propinst-pitch-range">'pitch-range'</span> property and is
provided to allow developers to exploit higher-end auditory displays.

<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;number&gt;"><span class="value-inst-number"><strong>&lt;number&gt;</strong></span></span>
<dd>A value, between '0' and '100'. The meaning of values
depends on the language being spoken. For example,
a level of '50' for a
standard, English-speaking male voice (average pitch = 122Hz), speaking
with normal intonation and emphasis would have a different
meaning than '50' for an Italian voice.
</dl>

<!-- #include src=properties/richness.srb -->

<P>Specifies the richness, or brightness, of the speaking voice.  A
rich voice will "carry" in a large room, a smooth voice will not.
(The term "smooth" refers to how the wave form looks when drawn.)

<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;number&gt;"><span class="value-inst-number"><strong>&lt;number&gt;</strong></span></span>
<dd>A value between '0' and '100'.
The higher the value, the more the voice will carry.
A lower value will produce a soft, mellifluous voice.
</dl>

<H2><a name="speech-props">Speech properties</a>:
<span class="propinst-speak-punctuation">'speak-punctuation'</span>
and <span class="propinst-speak-numeral">'speak-numeral'</span>
</h2>

<p>An additional speech property, <a
href="tables.html#propdef-speak-header">speak-header</a>, is
described in the chapter on <a href="tables.html">tables</a>

<!-- #include src=properties/speak-punctuation.srb -->

<P>This property specifies how punctuation is spoken.  Values have the
following meanings:</p>

<dl>
<dt><strong>code</strong>
<dd>Punctuation such as semicolons,
braces, and so on are to be spoken literally.
<dt><strong>none</strong>
<dd>Punctuation is not to be spoken, but instead rendered
naturally as various pauses.
</dl>

<!-- #include src=properties/speak-numeral.srb -->

<p>This property controls how numerals are spoken.  Values have the
following meanings:</P>

<dl>
<dt><strong>digits</strong>
<dd>Speak the numeral as individual digits. Thus, "237" is spoken
"Two Three Seven".
<dt><strong>continuous</strong>
<dd>Speak the numeral as a full number. Thus, "237" is spoken
"Two hundred thirty seven". Word representations are language-dependent.
</dl>

</BODY>
</HTML>
