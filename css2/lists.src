<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: lists.src,v 2.8 1998-03-10 10:18:43 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Lists</TITLE>
</HEAD>
<BODY>
<H1 align="center">Lists</H1>

<H2>Visual formatting of lists</H2> 
CSS allows authors to control the visual presentation of lists in a
number of ways:

<ul>
<li>Authors may specify a marker that appears before each list item.
<li>Markers may be placed outside or inside the list item's
content.
<li>Markers may be represented by predefined shapes (bullets,
circles, squares), numerals (arabic, roman, letters, etc.), or
images.
<li>With <a
href="./selector.html#descendant-selectors">descendant selectors</a>
and <a
href="./selector.html#child-selectors">child selectors</a>,
it's possible to specify different marker types depending on the depth
of embedded lists.
</ul>

<P>An element with a <span class="propinst-display">'display'</span>
property value of 'list-item' generates two boxes: a <a
href="visuren.html#block-level">block-level</a> box that contains its
content and an inline box that contains a marker. Only the content box
is involved with positioning (e.g, in the <a
href="visuren.html#normal-flow">normal flow</a>). The position of the
marker box (see the <span
class="propinst-list-style-position">'list-style-position'</span>
property) does not affect the position of the content box.  CSS
properties allow authors to specify the marker type (image, glyph, or
number) and its position with respect to the content box (outside the
content or at the beginning of content). CSS properties do not allow
authors to specify distinct style (colors, fonts, alignment, etc.) for
the list marker.

<P>The <a href="colors.html#background-properties">background
properties</a> apply to the content box only; the marker box is
transparent.

<div class="html-example"><P>
The declaration in the following HTML program causes LI elements to
generate 'list-item' boxes. The <span
class="propinst-list-style">'list-style'</span> value 'none' suppresses
preceding markers.

<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;STYLE type="text/css"&gt;
      LI { display: list-item; list-style: none }
   &lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;UL&gt;
      &lt;LI&gt; This is the first list item, formatted as a block.
      &lt;LI&gt; This is the second list item.
      &lt;LI&gt; This is the third.
   &lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The list might be formatted as follows:</P>

<P><img src="./images/list-none.gif" alt="A list with no markers."></p>

<P>The illustration shows the relationship between the current left
margin and the margins and padding of the list (UL) box and the list
item (LI) boxes. (The lines delimiting the margins and padding are not
rendered).

<P>If we change the <span
class="propinst-list-style">'list-style'</span> to "square":

<PRE>
  LI { display: list-item; list-style: square }
</PRE>

<P> each list item will be preceded by a small square. However, the
placement of the square does not affect the <a
href="visuren.html#block-formatting">block formatting</a> of the list
item box:</P>

<p><img src="./images/list-square.gif" alt="A list with square markers."></p>
</div>

<div class="note"><P>
<em><strong>Note.</strong></em>
<ul>
<li><em>CSS2 does not include a property to adjust the separation between a
list marker and the content of its list item.</em></li>

<li><em>There is no "list" presentation for other types of list structures
(e.g., "definition lists" declared by DL, DT, and DD in HTML). Each
part of a definition list is simply a block element.</em></li>
</ul>
</div>

<H3><a name="list-props">List properties</a>: <span
class="propinst-list-style-type">'list-style-type'</span>, <span
class="propinst-list-style-image">'list-style-image'</span>, <span
class="propinst-list-style-position">'list-style-position'</span>,
and <span class="propinst-list-style">'list-style'</span>
</H3>

<!-- #include src=properties/list-style-type.srb -->

<P> This property specifies appearance of the list item marker if
<span class="propinst-list-style-image">'list-style-image'</span> has
the value 'none' or if the image pointed to by the URI cannot be
displayed.

<P>Values have the following meanings:</p>
<dl>
<dt><strong><span class="index-def" title="disc"><a class="value-def" name="value-def-disc">disc</a></span></strong>
<dd>A disc (exact presentation is UA-dependent)
<dt><strong><span class="index-def" title="circle"><a class="value-def" name="value-def-circle">circle</a></span></strong>
<dd>A circle (exact presentation is UA-dependent)
<dt><strong><span class="index-def" title="square"><a class="value-def" name="value-def-square">square</a></span></strong>
<dd>A square (exact presentation is UA-dependent)
<dt><strong><span class="index-def" title="western-decimal"><a class="value-def" name="value-def-western-decimal">western-decimal</a></span></strong> or <strong>decimal</strong>
<dd>Decimal numbers, beginning with 1.
<dt><strong><span class="index-def" title="leading-zero"><a class="value-def" name="value-def-leading-zero">leading-zero</a></span></strong>
<dd>Decimal numbers 01, 02, 03,... (or 001, 002, 003,.. if more than 99 items)
<dt><strong><span class="index-def" title="lower-roman"><a class="value-def" name="value-def-lower-roman">lower-roman</a></span></strong>
<dd>Lower case roman numerals (i, ii, iii, iv, v, etc.).
<dt><strong><span class="index-def" title="upper-roman"><a class="value-def" name="value-def-upper-roman">upper-roman</a></span></strong>
<dd>Upper case roman numerals (I, II, III, IV, V, etc.).
<dt><strong><span class="index-def" title="lower-latin"><a class="value-def" name="value-def-lower-latin">lower-latin</a></span></strong> or <strong>lower-alpha</strong>
<dd>Lower case ascii letters (a, b, c, ... z).
<dt><strong><span class="index-def" title="upper-latin"><a class="value-def" name="value-def-upper-latin">upper-latin</a></span></strong> or <strong>upper-alpha</strong>
<dd>Upper case ascii letters (A, B, C, ... Z).
<dt><strong><span class="index-def" title="lower-greek"><a class="value-def" name="value-def-lower-greek">lower-greek</a></span></strong>
<dd>Lower case Greek alpha, beta, gamma,... (&#941;, &#942;, &#943;,...)
<dt><strong><span class="index-def" title="upper-greek"><a class="value-def" name="value-def-upper-greek">upper-greek</a></span></strong>
<dd>Upper case Greek Alpha, Beta, Gamma,... (&#902;, &#913; &#914;, &#915;,...)
<dt><strong><span class="index-def" title="hebrew"><a class="value-def" name="value-def-hebrew">hebrew</a></span></strong>
<dd>Traditional Hebrew numbering (&#1488; (alef) = 1, &#1497; (yod) = 10, etc.)
<dt><strong><span class="index-def" title="georgian"><a class="value-def" name="value-def-georgian">georgian</a></span></strong>
<dd>Traditional Georgian numbering
<dt><strong><span class="index-def" title="armenian"><a class="value-def" name="value-def-armenian">armenian</a></span></strong>
<dd>Traditional Armenian numbering
<dt><strong><span class="index-def" title="cjk-ideographic"><a class="value-def" name="value-def-cjk-ideographic">cjk-ideographic</a></span></strong>
<dd>plain ideographic numbers
<dt><strong><span class="index-def" title="hiragana"><a class="value-def" name="value-def-hiragana">hiragana</a></span></strong>
<dd>a, i, u, e, o, ka, ki, ...
<dt><strong><span class="index-def" title="katakana"><a class="value-def" name="value-def-katakana">katakana</a></span></strong>
<dd>A, I, U, E, O, KA, KI, ...
<dt><strong><span class="index-def" title="hiragana-iroha"><a class="value-def" name="value-def-hiragana-iroha">hiragana-iroha</a></span></strong>
<dd>i, ro, ha, hi, ho, he, to, ...
<dt><strong><span class="index-def" title="katakana-iroha"><a class="value-def" name="value-def-katakana-iroha">katakana-iroha</a></span></strong>
<dd>I, RO, HA, HI, HO, HE, TO, ...
<dt><strong><span class="index-def" title="none"><a class="value-def" name="value-def-li-none">none</a></span></strong>
<dd>No marker
</dl>

<!-- Comments from Dan Glazman not yet accounted for -IJ -->

<!-- ordinal (1st, 2nd, 3rd), cardinal text (one, two, three), ordinal
text (first, second, third), leading-zero (01, 02, 03)? ChrisW 27/2/98
-->

<!-- enumerated values? RobertP 27/2/98 -->

<!-- Resolved: add leading-zero, rest for CSS3. 27/2/98 -->

<div class="html-example"><P>
For example, the following HTML document:
<PRE>
&lt;HTML&gt;
   &lt;HEAD&gt;
     &lt;STYLE type="text/css"&gt;
          OL { list-style-type: lower-roman }   
     &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;OL&gt;
      &lt;LI&gt; This is the first item.
      &lt;LI&gt; This is the second item.
      &lt;LI&gt; This is the third item.
    &lt;/OL&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>might produce something like this:

<PRE>
  i This is the first item.
 ii This is the second item.
iii This is the third item.
</PRE>

<P>Note that the list marker alignment (here, right justified)
depends on the user agent.
</div>

<!-- #include src=properties/list-style-image.srb -->

<P> This property sets the image that will be used as the list item
marker. When the image is available, it will replace the marker set
with the <span
class="propinst-list-style-type">'list-style-type'</span> marker.

<div class="example"><P>
The following example sets the marker at the beginning of each list
item to be the image "ellipse.png".


<PRE>
  UL { list-style-image: url(http://png.com/ellipse.png) }
</PRE>
</div>

<!-- #include src=properties/list-style-position.srb -->

<P> This property specifies the position of the marker
box with respect to line item content box. Values have the
following meanings:</p>

<dl>
<dt><strong>outside</strong>
<dd>The list item marker is outside the box that is generated for the
list item. 
<dt><strong>inside</strong>
<dd>The list item marker is the first inline box generated for the
list item. The list item's contents flow after the marker box.
</dl>

<div class="html-example"><P>
For example:

<PRE>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;STYLE type="text/css"&gt;
      UL         { list-style: outside }
      UL.compact { list-style: inside }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;UL&gt;
      &lt;LI&gt;first list item comes first
      &lt;LI&gt;second list item comes second
    &lt;/UL&gt;

    &lt;UL class="compact"&gt;
      &lt;LI&gt;first list item comes first
      &lt;LI&gt;second list item comes second
    &lt;/UL&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P> The above example may be formatted as:</P>

<P><img src="./images/list-inout.gif" alt="Difference between inside and outside list style position"></p>
</div>

<P>In right-to-left text, the markers would have been on the right
side of the box. 

<!-- #include src=properties/list-style.srb -->

<P> The <span class="propinst-list-style">'list-style'</span> property
is a shorthand notation for setting the three properties <span
class="propinst-list-style-type">'list-style-type'</span>, <span
class="propinst-list-style-image">'list-style-image'</span>, and <span
class="propinst-list-style-position">'list-style-position'</span> at
the same place in the style sheet.

<div class="example"><P>
<PRE>
  UL { list-style: upper-roman inside }  /* Any UL*/
  UL > UL { list-style: circle outside } /* Any UL child of a UL*/
</PRE>
</div>

<P>Although authors may specify <span
class="propinst-list-style">'list-style'</span> information directly
on list item elements (e.g., LI in HTML), they should do so with
care. The following rules look similar, but the first declares a <a
href="./selector.html#descendant-selectors">descendant selector</a>
and the second a (more specific) <a
href="./selector.html#child-selectors">child
selector.</a>

<PRE class="example">
  OL.alpha LI  { list-style: lower-alpha } /* Any LI descendant of an OL */
  OL.alpha > LI  { list-style: lower-alpha } /* Any LI child of an OL */
</PRE>

<P>Authors who use only the <a
href="selector.html#descendant-selectors">descendant selector</a> may
not achieve the results they expect. Consider the following rules:

<PRE class="html-example">
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;STYLE type="text/css"&gt;
      OL.alpha LI  { list-style: lower-alpha }
      UL LI        { list-style: disc }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;OL class="alpha"&gt;
      &lt;LI&gt;level 1
      &lt;UL&gt;
         &lt;LI&gt;level 2
      &lt;/UL&gt;
    &lt;/OL&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The desired rendering would have level 1 list items with
'lower-alpha' labels and level 2 items with 'disc' labels. However,
the <a href="./cascade.html#cascading-order">cascading order</a> will
cause the first style rule (which includes specific class information)
to mask the second. The following rules solve the problem by employing
a <a href="./selector.html#child-selectors">child
selector</a> instead:

<PRE class="example">
    OL.alpha > LI  { list-style: lower-alpha }
    UL LI   { list-style: disc }
</PRE>

<P>Another solution would be to specify <span
class="propinst-list-style">'list-style'</span> information only on
the list type elements:

<PRE class="example">
    OL.alpha  { list-style: lower-alpha }
    UL        { list-style: disc }
</PRE>

<P>Inheritance will transfer the <span
class="propinst-list-style">'list-style'</span> values from OL and
UL elements to LI elements. This is the recommended way to
specify list style information.

<div class="example"><P>
<P>  A URI value may be combined with any other value, as in:

<PRE>
  UL { list-style: url(http://png.com/ellipse.png) disc }
</PRE>
<P> In the example above, the 'disc' will be used when the image is
unavailable.
</div>

</body>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:nil
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:nil
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
