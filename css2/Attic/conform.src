<!DOCTYPE HTML SYSTEM "http://www.w3.org/TR/WD-html40/sgml/HTML4.dtd">
<html lang="en">
<!-- $Id: conform.src,v 1.5 1997-08-12 20:10:24 ian Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>CSS2 Conformance</TITLE>
<LINK rel="next" href="refs.html">
<LINK rel="previous" href="ui.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">CSS2 Conformance</H1>
<P><em> This section only defines conformance to CSS2. There will be other
levels of CSS in the future that may require a UA to implement a
different set of features in order to conform.</em>


<P> A User Agent that uses CSS2 <strong>to display</strong> documents
conforms to the CSS2 specification if it:
  <UL>
    <LI> attempts to fetch all referenced style sheets and parse them
    according to this specification 

    <LI> sorts the declarations according to the <a
	    href="./cascade.html#cascade-order">cascade order</a>.

    <LI> implements the CSS2 functionality within the <a
    href="#presentation-constraints">constraints of the presentation
    medium</a> (see explanation below).

    <LI> implements all of CSS1, not just the core sections.
  </UL>

<P> A User Agent that <strong>outputs</strong> CSS2 style sheets
conforms to the CSS2 specification if it:

  <UL>
    <LI>
      outputs valid CSS2 style sheets
  </UL>

<P> A User Agent that uses CSS2 to display documents <EM>and</EM>
outputs CSS2 style sheets conforms to the CSS2 specification if it
meets both sets of conformance requirements.

A UA does not have to implement all the functionality of CSS2: it can
conform to CSS2 by implementing the <a
href="convent.html#definitions">core functionality</a>.

<P> This specification also recommends, but doesn't require, that a
UA:

  <UL>
    <LI> allows the reader to specify personal style sheets
    <LI> allows individual style sheets to be turned on and off
  </UL>

<P> The above conformance rules describe only functionality, not user
	interface. 

<H2><a name="presentation-constraints">Conformance constraints due to presentation medium</a></H2>
<P> Examples of constraints of the presentation medium are: limited
resources (fonts, color) and limited resolution (so margins may not be
accurate). In these cases, the UA should approximate the style sheet
values. Also, different user interface paradigms may have their own
constraints: a VR browser may rescale the document based on its
"distance" from the user.

<P> UAs may offer readers additional choices on presentation. For
example, the UA may provide options for readers with visual
impairments or may provide the choice to disable blinking.

<P> Note that CSS2 does not specify all aspects of formatting, e.g., 
the UA is free to select a letter-spacing algorithm.


<H2><A NAME="forward-compatible-parsing">Forward-compatible parsing</A></H2>
<em>See <a href="grammar.html">Appendix B</a> for the grammar of CSS2</em>

<P> To ensure that UAs supporting just CSS2 will be able to parse style
sheets containing higher level features, this section defines what the
UA must do when it encounters certain constructs that are not valid in
CSS2

<UL>
    <LI> a declaration with an unknown property is ignored. For
    example, if the style sheet is 
<PRE> H1 { color: red; rotation: 70deg }
</PRE>
      <P> the UA will treat this as if the style sheet had been

<PRE>  H1 { color: red; }
</PRE>

 <LI> illegal values, <EM>or values with illegal parts</EM>, are
 treated as if the declaration weren't there at all:

<PRE>
  IMG { float: left }       /* CSS2 */
  IMG { float: left top }   /* "top" is not a value of 'float' */
  IMG { background: "red" } /* keywords cannot be quoted in CSS2 */
  IMG { border-width: 3 }   /* a unit must be specified for length values */
</PRE>

<P> In the above example, a CSS2 parser would honor the first rule and
ignore the rest, as if the style sheet had been:

<PRE>
  IMG { float: left }
  IMG { }
  IMG { }
  IMG { }
</PRE>

<P> A UA conforming to a future CSS specification may accept one or
more of the other rules as well.

<LI> an invalid at-keyword is ignored together with everything
following it, up to and including the next semicolon (;) or brace pair
({...}), whichever comes first. For example, assume the style sheet
reads:

<PRE>
  @three-dee {
    @background-lighting {
      azimuth: 30deg;
      elevation: 190deg;
    }
    H1 { color: red }
  }
  H1 {color: blue}
</PRE>

<P> The '@three-dee' is illegal according to CSS2. Therefore, the
whole at-rule (up to, and including, the third right curly brace) is
ignored. The CSS2 UA skips it, effectively reducing the style sheet
to:

<PRE>
  H1 {color: blue}
</PRE>
/UL>

<H3>Statements</H3>
<P> A CSS style sheet, for any version of CSS, consists of a list of
<span class="index-inst" title="statements"><em>statements</em></span>.
There are two kinds of statements: <span class="index-inst"
title="at-rules|@-rules"><em>at-rules</em></span> and <span
class="index-inst" title="rule sets"><em>rule sets</em> </span>. There
may be whitespace (spaces, tabs, newlines) around the statements.

<H3>At-rules</H3>
<P> At-rules start with an <DFN>at-keyword</DFN>, which is an
identifier with an '@' at the start (for example, '@import', '@page',
etc.). An identifier consists of letters, digits, dashes and escaped
characters (defined below).

<P> An at-rule consists of everything up to and including the next
semicolon (;) or the next block (defined shortly), whichever comes
first. A CSS2 UA that encounters an at-rule that starts with an
at-keyword other than '@import' ignores the whole of the at-rule and
continue parsing after it. It also ignores any at-rule that starts
with '@import' if it doesn't occur at the top of the style sheet,
i.e., if it occurs after any rules (even ignored rules).  

<div class="example"><P>
Here is an example. Assume a CSS2 parser encounters this style sheet:

<PRE>
  @import "subs.css";
  H1 { color: blue }
  @import "list.css";
</PRE>

<P> The second '@import' is illegal according to CSS2. The CSS2 parser
skips the whole at-rule, effectively reducing the style sheet to:

<PRE>
  @import "subs.css";
  H1 {color: blue}
</PRE>
</div>

<H3>Blocks</H3> 
<P> A <span class="index-inst"
title="block"><em>block</em></span> starts with a left curly brace ({)
and ends with the matching right curly brace (}). In between there may
be any characters, except that parentheses (()), brackets ([]) and
braces ({}) always occur in matching pairs and may be nested. Single
(') and double quotes (") <!-- " --> also occur in matching pairs, and
characters between them are parsed as a <span class="index-inst"
title="string">string</span>.  See the tokenizer in <a
href="grammar.html">Appendix B</a> for the definition of a string.

<div class="example"><P>
Here is an example of a block. Note that the right brace between the quotes
does not match the opening brace of the block, and that the second
single quote is an escaped character, and thus doesn't match the
opening quote:

<PRE>
  { causta: "}" + ({7} * '\'') }
</PRE>
</div>

<H3>Rule sets, declaration blocks, and selector-strings</H3> 

<P> A rule set consists of a selector-string followed by a 
declaration block.

<P> A <span class="index-def"
title="declaration-block"><em>declaration-block</em></span> (also
called a {}-block in the following text) starts with a left curly
brace ({) and ends with the matching right curly brace (}). In between
there is a list of zero or more <DFN>declarations,</DFN> separated by
semicolons (;).

<P>The <span class="index-def"
title="selector-string"><em>selector-string</em></span> consists of
everything up to (but not including) the first left curly brace ({).
A selector-string does not start with an "@", does not include a "{",
that always goes together with a {}-block. When a UA can't parse the
selector-string (i.e., it is not valid CSS2), it should skip the
{}-block as well.

<P>Implementations may want to collect the uninterpreted string of
characters up to but not including the first "{" to find the
declaration, and then attempt to lexically analyze the selector
string.

<div class="example"><P>
For example, assume a CSS2 parser encounters this style sheet:
<PRE>
  H1 { color: blue }
  P[align], UL { color: red; font-size: large } /* ILLEGAL */
  P EM { font-weight: bold }
</PRE>

<P> The second line contains a selector-string that is illegal in
CSS2. The CSS2 UA will skip the ruleset, reducing the style sheet to:

<PRE>
  H1 { color: blue }
  P EM { font-weight: bold }
</PRE>
</div>

<div class="example"><P>
<P>Similary, the following rule:

<PRE>
    P[align & justify
        { color: red; font-size: large }
</PRE>

<P>would be parsed without problem while:

<PRE>
    P[example="public class foo
{
    private int x;

    foo(int x) {
        this.x = x;
    }

}"]          /* ILLEGAL since {}-block missing */
</PRE>
<!-- " -->
<P>would not since it is not followed by a {}-block.
</div>


<H3>Properties</H3>

<P> A declaration consists of a <span class="index-inst"
title="property"><em>property</em></span>, a colon (:) and a
<DFN>value</DFN>. Around each of these there may be whitespace. 

A property is an identifier, as defined earlier. Any character may
occur in the value, but parentheses (()), brackets ([]), braces ({}),
single quotes (') and double quotes (") 
<!-- " -->
must come in matching pairs. Parentheses, brackets, and braces may be
nested. Inside the quotes, characters are parsed as a string.

<P> To ensure that new properties and new values for existing
properties can be added in the future, a UA must skip a declaration
with an invalid property name or an invalid value. Every CSS2 property
has its own syntactic and semantic restrictions on the values it
accepts.

<div class="example"><P>
For example, assume a CSS2 parser encounters this style sheet:

<PRE>
  H1 { color: red; font-style: 12pt }
  P { color: blue;  font-vendor: any;  font-variant: small-caps }
  EM EM { font-style: normal }
</PRE>

<P> The second declaration on the first line has an invalid value
'12pt'. The second declaration on the second line contains an
undefined property 'font-vendor'. The CSS2 parser will skip these
declarations, reducing the style sheet to:

<PRE>
  H1 { color: red; }
  P { color: blue;  font-variant: small-caps }
  EM EM { font-style: normal }
</PRE>
</div>

<H3>Comments</H3> 

<P> <span class="index-inst" title="comments">Comments </span>(see the
section on <a href="./syndata.html#comments">comments</a> for details)
can occur anywhere where whitespace can occur and are considered to be
whitespace. CSS2 defines additional places where whitespace can occur
(such as inside values) and comments are allowed there as well.

<H3>Characters and case</H3>
<P>  The following rules always hold:

<UL>
    <LI> All CSS style sheets are <span class="index-inst" title="case
    sensitivity">case-insensitive</span>, except for parts that are
    not under the control of CSS. For example, the case-sensitivity of
    the HTML attributes 'id' and 'class', of font names, and of URLs
    lies outside the scope of this specification.

    <LI> In CSS2, selectors (element names, classes and IDs) can
    contain only the characters A-Z, 0-9, and <a rel="biblioentry" href="./refs.html#ref-UNICODE">[UNICODE]</a> characters
    161-255, plus dash (-); they cannot start with a dash or a digit;
    they can also contain escaped characters and any Unicode character
    as a numeric code (see next item).

    <LI> the backslash followed by at most four hexadecimal digits
    (0..9A..F) stands for the <a rel="biblioentry" href="./refs.html#ref-UNICODE">[UNICODE]</a> character with that number.

    <LI> any character except a hexadecimal digit can be escaped to
    remove its special meaning, by putting a backslash in front,
    Example: "\"" is a string consisting of one double quote.

    <LI> the two preceding items define <span class="index-inst" title="backslash escapes"><EM>backslash-escapes</EM></span>. Backslash-escapes are always
    considered to be part of an identifier, except inside strings
    (i.e., "\7B" is not punctuation, even though "{" is, and "\32" is
    allowed at the start of a class name, even though "2" is not).
  </UL>

<H2>CSS and HTML</H2> 

<P> CSS style sheets may be embedded in HTML documents, and to be able
to hide style sheets from older UAs, it is convenient put the style
sheets inside HTML comments. The HTML comment tokens "&lt;!--" and
"--&gt;" may occur before, after, and in between the statements. They
may have whitespace around them.

<P> The "class" attribute of HTML allows more characters in a class
name than the set allowed for selectors above. In CSS2, these
characters have to be escaped or written as Unicode numbers:
"B&amp;W?" can be written as "B\&amp;W\?" or "B\26W\3F",
"&#186;&#191;&Aring;&Aacute;&#191;&Acirc;" (Greek: "kouros") has to be written as
"\3BA\3BF\3C5\3C1\3BF\3C2". It is expected that in later versions of
CSS, more characters can be entered directly.

</BODY>
</HTML>
