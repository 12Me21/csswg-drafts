#!/usr/local/bin/perl
# Generate a table of contents plus a database of headings
# When an HTML comment is found right before the end tag of a header its
# content is added as a description note to the TOC like this:
#   1. Some header - and its related comment
#
# Arnaud Le Hors - lehors@w3.org
# $Id: mktoc,v 1.12 1997-11-20 23:47:32 ian Exp $

if (($_ = $ARGV[0], /^-l/) && $ARGV[0]) {
    shift;
    $startlvl = $ARGV[0];
    shift;
} else {
    $startlvl = 1;
}

if (($_ = $ARGV[0], /^-ml/) && $ARGV[0]) {
    shift;
    $maxlvl = $ARGV[0];
    shift;
} else {
    $maxlvl = 0;
}

if (($_ = $ARGV[0], /^-mol/) && $ARGV[0]) {
    shift;
    $maxollvl = $ARGV[0];
    shift;
} else {
    $maxollvl = 0;
}

$PROGNAME = substr($0, rindex($0, "/") + 1);

if ($#ARGV < 2) {
    print STDERR "Usage: $PROGNAME [-l startlvl] [-ml level] [-mol level] toc tocdb src1 src2 ...
\t-l   to give the level from which headings should be put into the toc
\t-ml  set the maximum level to be put into the toc
\t-mol set the level from which to use an unordered list
The default is to use an ordered list but this can be changed anytime, by
inserting the flags -ul and -ol, possibly followed by -none for non bulleted
unordered lists and -roman for roman ordered lists\n";
    exit 1;
} else {
    $tocf = $ARGV[0];
    shift;
    $tocdb = $ARGV[0];
    shift;
}

# copy file in memory
sub readfile {
    $buf = "";
    if (!open(INPUT, $_[0])) {
	print STDERR "$PROGNAME Error: Cannot open file: $_[0]\n";
	return;
    }
    while (<INPUT>) {
	$buf .= $_;
    }
    close(INPUT);
}

sub hnuminit {
    @n = ();
    @ol = ();
    $ol[0] = "";
}

sub hnum {
    $h = $_[0];
    if ($h == 0 && $#n < 0) {
	return;
    }

    $hn = $h - $startlvl;
    for ($i = $#n; $i > $hn; $i--) {
	if ($ol[$i] ne "") {
	    $ol[$i] = "";
	}
	$n[$i] = 0;
    }
    if ((($maxlvl == 0) || ($h <= $maxlvl)) && $hn >= 0 && $ol[$hn] eq "") {
	if ($maxollvl == 0 || $h <= $maxollvl) {
	    if ($h == $startlvl) {
		$ol[$hn] = "$list";
	    } else {
		$ol[$hn] = "ol";
	    }
	} else {
	    $ol[$hn] = "ul";
	}
    }
    $n[$hn]++;
    if (($_ = $listtype, /A/)) {
	$num = chr(65 + $n[0] - 1);
    } else {
	$num = "$n[0]";
    }
    for ($i = 1; $i <= $hn; $i++) {
	$num .= ".$n[$i]";
    }
    return $num;
}

# remove every possible anchor
sub cleanup {
    $text = $_[0];
    $text =~ s/<a(.*?)>//sgi;
    $text =~ s/<\/a>//sgi;
    $text =~ s/[ \t]*$//sgi;
    return $text;
}


### main

# search for all the headings
$headingp = "<h([1-6]).*?>(.*?)(:[^a-zA-Z].*?)?(?:<!--(.*?)-->)?</h[1-6]>";

open(DBASE, "> $tocdb");
open(OUTPUT, "> $tocf");
hnuminit();
$list = "ol";
$listtype = "";
print OUTPUT "<DIV CLASS=\"toc\">";
LOOP: foreach $file (@ARGV) {
    if ($file eq "-ul") {	# start a new unordered list
	$list = "ul";
	$listtype = "";
	hnum(0);
	hnuminit();
	next LOOP;
    } elsif ($file eq "-ol") { # start a new ordered list
	$list = "ol";
	$listtype = "";
	hnum(0);
	hnuminit();
	next LOOP;
    } elsif ($file eq "-roman") { # make ordered list roman
	$listtype = " type=\"A\"";
	next LOOP;
    } elsif ($file eq "-none") { # make unordered list with no bullets
	$listtype = " class=\"toc\""; # we must rely on CSS for this one
	next LOOP;
    }
    readfile($file);
    # change extension
    $hfil = $file;
    $hfil =~ s/\.src$/\.html/;
#  This doesn't work, but this is the idea!
#    # remove commented headings
#    $buf =~ s/<!--\s*<h[1-6].*?>.*?<\/h[1-6]>.*?-->//sgi;
    # seek headings
    $_ = $buf;
    while (/$headingp/sio) {
	$h = int($1);
	if ($h >= $startlvl && (($maxlvl == 0) || ($h <= $maxlvl))) {
	    #Only one or the other of text
	    $t = "$2$4";
	    $cmt = $5;
	    # compute section number
	    $num = hnum($h);
	    if ($h == 1) {	# if H1 go to the top of the page and set rel
		$url = "$hfil";
		$rel= " rel=\"chapter\"";
	    } else {
		$url = "$hfil#h-$num";
		$rel = "";
	    }
	    $txt = cleanup($t);
	    if ($list eq "ol" && $listtype ne " class=\"toc\"") {
		$tnum = "$num ";
	    } else {
		$tnum ="";
	    }
	    if ($h == 1) {
		print OUTPUT "<P CLASS=\"tocline\"><a href=\"$url\"$rel><strong>$tnum$txt</strong></a>$3\n"; 
	    } elsif ($h == 2) {
		print OUTPUT "<BR><a href=\"$url\"$rel>$tnum$txt</a>$3\n";
	    } elsif ($h == 3) {
		print OUTPUT 
		    "<BR>&nbsp;&nbsp;&nbsp;<a href=\"$url\"$rel>$tnum$txt</a>$3\n";
	    } else {
		print OUTPUT
		    "<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"$url\"$rel>$txt</a>$3\n";
	    }
	    if ($cmt) {
		print OUTPUT " <em>-$cmt</em>";
	    }

	    # dbase format: file;headingtext;h;hnum
	    print DBASE "$file;$t$3;$h;$num\n";
	}
	$_ = $';
    }
}
print OUTPUT "</DIV>";
hnum(0);			# close all open lists
close(OUTPUT);
close(DBASE);
