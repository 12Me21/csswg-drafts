#!/usr/local/bin/perl
# Extract entries from the CSS properties database
# The database has the following format:
# name;; values;; initial-value;; media
# Special characters: 
#  1) Translate "*" into the words "all elements"
#  1.a) Translate "XX" into "not defined for shorthand properties"
#  2) "<name>" means the value is defined elsewhere. Translate to
#     <span class="value-inst-name">&lt;name&gt;</span>
#  3) "<'name'>" means the set of values is the same as for the
#      property with the same name. Translate to
#     <span class="propinst-name">&lt;'name'&gt;</span>     
#
# Ian Jacobs - ij@w3.org (Based on work by Arnaud Le Hors)
# $Id: dextr,v 1.10 1998-02-24 22:54:29 ijacobs Exp $

$PROGNAME = substr($0, rindex($0, "/") + 1);

if (!$ARGV[0]) {
    print "Usage: $PROGNAME file [tgt_dir]\n";
    exit 1;
}

# copy file in memory
if (!open(input, $ARGV[0])) {
    print "$PROGNAME Error: Cannot open file: $ARGV[0]\n";
    exit 1;
}
$buf = "";
while (<input>) {
    $buf .= $_;
}
close(input);

$path = "";
if ($ARGV[1]) {
    $path = "$ARGV[1]/";
}

# regexps
$sp = "[ \t\n]*";		# whitespace
$patt = "$sp(.*?)$sp";
$blockst = "[/][*]";
$blocket = "[*][/]";

sub format_descriptor {
$name = $_[0]; 
$values = $_[1]; 
$init = $_[2];
$media = $_[3];
print output "<DIV class=\"descdef\">\n";
print output "<P><a name=\"descdef-$name\" class=\"descdef-title\"><strong>'$name'</strong> (Descriptor)</a></P>\n";
# We use cellspacing/cellpadding until more browsers
# handle tables correctly.
print output "<TABLE class=\"descinfo\" cellpadding=0 cellspacing=0>\n";
&format_name($name);
&format_values($values);
&format_init($init);
&format_media($media);
print output "</TABLE>\n";
print output "</DIV>\n\n";
}  

sub format_name {
print output "<TR valign=\"top\"><TH align=\"right\">Descriptor&nbsp;name:&nbsp;&nbsp;";
print output "<TD><span class=\"index-def\" title=\"'$_[0]' (descriptor)\">\'$_[0]\'</span></TR>\n";
}

sub format_values {
$values = $_[0];
$values =~ s/<([^>']*)>/<span class=\"value-inst-$1\">&lt;$1&gt;<\/span>/g;
print output "<TR valign=\"top\"><TH align=\"right\">Value:&nbsp;&nbsp;<TD>$values</TR>\n";
}

sub format_init {
$init = $_[0];
$init =~ s/XX/not defined for shorthand properties/g;
$init =~ s/<([^>']*)>/<span class=\"value-inst-$1\">&lt;$1&gt;<\/span>/g;
print output "<TR valign=\"top\"><TH align=\"right\">Initial:&nbsp;&nbsp;<TD>$init</TR>\n";
}

sub format_media {
    $fmedia = $_[0];
    $fmedia =~ s/visual/<a href=\"media.html#visual-media-group\">visual<\/a>/;
    $fmedia =~ s/aural/<a href=\"media.html#aural-media-group\">aural<\/a>/;
    $fmedia =~ s/tactile/<a href=\"media.html#tactile-media-group\">tactile<\/a>/;
    $fmedia =~ s/continuous/<a href=\"media.html#continuous-media-group\">continuous<\/a>/;
    $fmedia =~ s/paged/<a href=\"media.html#paged-media-group\">paged<\/a>/;
    $fmedia =~ s/grid/<a href=\"media.html#grid-media-group\">grid<\/a>/;
    $fmedia =~ s/all/<a href=\"media.html#all-media-group\">all<\/a>/;
print output "<TR valign=\"top\"><TH align=\"right\">Media&nbsp;groups:&nbsp;&nbsp;<TD>$fmedia</TR>\n";
}

# extract every possible block
$_ = $buf;
while (/$blockst$patt;;$patt;;$patt;;$patt$blocket/s) {
    # Set parameters first (before any modifications)
    $placeholder = $';
    $output = "$path$1.srb";
    print "\textracting $output\n";
    open(output, "> $output");
    &format_descriptor($1, $2, $3, $4);
    close(output);
    $_ = $placeholder;
}
