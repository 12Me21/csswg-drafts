#!/usr/local/bin/perl

#use Getopt::Std;

$PROG = substr($0, rindex($0, "/") + 1);
$USAGE = "Usage: $PROG indexdb [output]\n";

@indent = ('  ','    ','      ','        ');


sub cmp_entry {
    $terms_a = lc($a);
    $terms_b = lc($b);
    $terms_a =~ s/\&[a-z#0-9]+;?//sio;
    $terms_b =~ s/\&[a-z#0-9]+;?//sio;
    $terms_a =~ s/^[^a-z0-9\@:]+//sio;
    $terms_b =~ s/^[^a-z0-9\@:]+//sio;
    return $terms_a cmp $terms_b;
}

if ($#ARGV >= 0) {$db = $ARGV[0]; shift;} else {die $USAGE;}
if ($#ARGV >= 0) {$output = $ARGV[0]; shift;} else {$output = '-';}
if ($#ARGV >= 0) {die $USAGE;}

dbmopen(%index, $db, 0666) || die "$PROG: cannot open database $db\n;";
open(OUTPUT, ">$output") || die "$PROG: cannot create file $output\n";

# Slurp it all into memory, and sort...
@sorted = sort cmp_entry (values %index);

# Write it out
@prev = ('', '', '', '', '', '');
$prevletter = ' ';
#print OUTPUT "<ul class=\"index\">";
$lvl = 0;
$seqno = 1;			# Number within an entry
foreach $e (@sorted) {
    ($entry, $prefix, $class, $anchor) = split(/\t/, $e);
    @subs = split(/::/, $entry);

    # Check to what level this entry is the same as the last one
    $i = 0;
    while (($i <= $#subs) && ($subs[$i] eq $prev[$i])) {$i++;}

    # If not completely the same, reset $seqno, else increment
    if ($i <= $lvl) {$seqno = 1;} else {$seqno++;}

    # Close lists to the required level
    while ($lvl > $i) {
	$lvl--;
	print OUTPUT "\n$indent[$lvl]</ul>";
    }

    # If new first letter, insert an anchor
    if ($lvl == 0) {
	$letter = $subs[0];
	$letter =~ s/\&[a-z\#0-9]+;?//sio;
	$letter =~ s/^[^a-z0-9\@:]+//sio;
	$letter = lc(substr($letter, 0, 1));
	if ($letter ne $prevletter) {
	    if ($prevletter ne ' ') {	    
		print OUTPUT "\n</ul>";
	    }
	    print OUTPUT "\n<p>";
	    foreach (chr(ord($prevletter)+1) .. $letter) {
		print OUTPUT "<a name=\"index-$_\">&nbsp;</a>";
	    $lvl++;
	}
    }
    # Write the subterms that are different
    # class="tocline*" directs our patched html2ps to omit the bullet
    for ($j = $i; $j <= $#subs; $j++) {
	if ($lvl <= $j) {
	    $lvl++;
	print OUTPUT "\n$indent[$j]<li>$subs[$j]";
	if ($j < $#subs) {
	    print OUTPUT "\n$indent[$j]<ul class=\"index\">";
	print OUTPUT "\n$indent[$j]<li class=\"tocline0\">$subs[$j]";

    print OUTPUT ", <a href=\"$prefix#$anchor\" ";
    if ($class eq 'index-def') {
	print OUTPUT "class=\"index-def\"><strong>$seqno</strong>";
    } else {
	print OUTPUT "class=\"index-inst\"><span>$seqno</span>";
    }
    print OUTPUT "</a>";

    for ($j = 0; $j <= $#subs; $j++) {$prev[$j] = $subs[$j];}
    $prev[$j] = '';
}
while ($lvl > 0) {
    print OUTPUT "\n</ul>";
    $lvl--;
}
print OUTPUT "\n</ul>\n";

close(OUTPUT);

