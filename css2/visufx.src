<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Visual effects</title>
</head>
<body>
<h1 align="center">Visual effects</h1>

<P>The visual effects discussed in these sections do not alter layout,
only presentation.

<H2><a name="overflow-clipping">Overflow and clipping</a></H2>

<H3><a name="overflow">Overflow</a>: the <span
class="propinst-overflow">'overflow'</span> property</H3>

<P>Generally, a box is confined by its <a
href="visudet.html#containing-block">containing block</a>.  In certain
cases, a box may <span class="index-def"
title="overflow|box::overflow"><dfn>overflow</dfn></span>, meaning it
lies partly or entirely outside of its containing block:</P>

<ul>
<li>It is <a href="visuren.html#floats">floated</a> and is too wide
for the containing block.
<li>Its height exceeds an explicit height assigned to the
containing block (through the <span
class="propinst-height">'height'</span>
property).
<li>It is <a href="visuren.html#absolute-positioning">positioned absolutely</a>.
<li>It has <a href="visudet.html#margin-properties">negative margins</a>.
</ul>

<p>The <span class="propinst-overflow">'overflow'</span> property
specifies rendering in these cases.

<!-- #include src=properties/overflow.srb -->

<P>This property specifies how the <a
href="visudet.html#containing-block">containing block</a> of boxes
generated for an element should behave when the boxes overflow. Note
that in general, the width of the containing block is
fixed (i.e., width calculations are top-down). In the case of
overflow, width calculations may have a bottom-up effect on the
containing block.

<P>Values for this property refer to the behavior
of the containing block for boxes generated for this element. They
have the following meanings:</p>

<dl>

<dt><strong>visible</strong> 

<dd>This value indicates that the <a
href="visudet.html#containing-block"> containing block</a> should be
enlarged enough to contain overflowing boxes. Any padding or border
will remain outside the boxes. Any additional width will be added in
the direction specified by the current value of the <span
class="propinst-direction">'direction'</span> property. Additional
height will be added to the bottom.

<dt><strong>hidden</strong> 

<dd>This value indicates that the dimensions of the <a
href="visudet.html#containing-block">containing block</a> should not
be adjusted to contain overflowing boxes and that no scrolling
mechanism should be provided to view the partially or entirely clipped
boxes; users will not have access to clipped content. Padding and
border will be applied to the regular height and width of each
overflowing box, as if it were not overflowing.

<dt><strong>scroll</strong> 

<dd>This value indicates that if the user agent supports a visible
scrolling mechanism, that mechanism should be displayed for a
containing block whether or not its boxes overflow.  This avoids any
problem with scrollbars appearing and disappearing in a dynamic
environment. When this value
is specified and the target medium is 'print' or 'projection',
overflowing content should be printed.

<dt><strong>auto</strong> 

<dd>The behavior of the 'auto' value is user agent-dependent, but
should cause a scrolling mechanism to appear
on a containing block when one or more of its boxes overflows.

</dl>

<P> Even if <span class="propinst-overflow">'overflow'</span> is set
to 'visible', contents may be clipped to a UA's document window by the
native operating environment. In addition, the <span
class="propinst-clip">'clip'</span> property can cause otherwise
visible &quot;overflowed&quot; contents to be clipped.

<P>The examples below utilize the following style sheet, which
describes a simple 100 pixel box with a thin, solid-red border:

<div class="example"><P>
<PRE>
#overlay {position: absolute; top: 50px; left: 50px; height: 100px;
          width: 100px; border: thin solid red;}
</PRE>

<P>Applied to an empty &lt;DIV&gt;, the box would look something
like:</P>

<P><img src="./images/overflow1.gif" alt="Simple overlay"></p>
</div>

<P> First, let's consider the initial value of <span
class="propinst-overflow">'overflow'</span>, which is 'visible'. This
value indicates that all boxes should be visible, even if they overflow.

<div class="html-example"><P>
In HTML, the PRE element is a <a
href="visuren.html#block-level">block-level</a> element that acts as a
containing block for <a href="visuren.html#inline">inline</a>
contents. Consider what happens when the text content of PRE
is longer than the width specified for PRE (here, 100px):</P>

<PRE>
&lt;PRE id="overlay"&gt;Here is some long preformatted text.&lt;/PRE&gt;
</PRE>

<p>With <span class="propinst-overflow">'overflow'</span> set to
'visible', the containing block will increase to accommodate the
generated inline boxes, and all of the text will be visible (and
padding and border rendered as well). The example might be rendered
something like:</p>

<P><img src="./images/overflow2.gif" alt="Long overflow text which is visible."></P>

</div>

<div class="example"><P>
Similarly, a value of 'visible' will cause a containing block to grow 
if the height of rendered contents exceed the containing block's declared
height. Consider the following:</P>

<PRE class="html-example">
&lt;BODY&gt;
&lt;DIV id="overlay"&gt;Here is a block of text that will
cause this element to exceed its declared height of 100 pixels.
&lt;/DIV&gt;
&lt;/BODY&gt;
</PRE>

<p>This DIV element should be rendered something like this:</P>

<P><img src="./images/overflow3.gif" alt="Layout of an element whose contents exceed the declared height"></p>

<p>The value 'hidden', on the other hand, specifies that a
containing block should not grow to accommodate overflow.  If we had
set the <span class="propinst-overflow">'overflow'</span> to 'hidden'
in the two previous examples, the containing block established by the
PRE element would have maintained its specified size of 100px by
100px. The examples might have been rendered something like:</p>

<P><img src="./images/overflow4.gif" alt="Hiding overflow content"></p>
</div>

<H3><a name="clipping">Clipping</a>: the <span
class="propinst-clip">'clip'</span> property</h3>

<p>A <span class="index-def" title="clipping region"><dfn>clipping
region</dfn></span> defines what portion of an element's <a
href="conform.html#rendered-content">rendered content</a> is
visible. The clipping region for an element is that
of its parent, modified by the value of the element's <span
class="propinst-clip">'clip'</span> property.

<!-- #include src=properties/clip.srb -->

<P>Values have the following meanings:</p>

<dl>
<dt><strong>auto</strong>
<dd>The clipping region for the element has the dimensions
of the containing block of boxes generated for the element.

<dt><span class="index-def" title="&lt;shape&gt;::definition of"><a
name="value-def-shape"
class="value-def"><strong>&lt;shape&gt;</strong></a></span>

<dd>In CSS2, the only legal &lt;shape&gt; value is:
rect (<span
class="value-inst-top">&lt;top&gt;</span> <span
class="value-inst-right">&lt;right&gt;</span> <span
class="value-inst-bottom">&lt;bottom&gt;</span> <span
class="value-inst-left">&lt;left&gt;</span>)

<P>where <span class="value-inst-top">&lt;top&gt;</span>, <span
class="value-inst-bottom">&lt;bottom&gt;</span> <span
class="value-inst-right">&lt;right&gt;</span>, and <span
class="value-inst-left">&lt;left&gt;</span> specify offsets from the
respective sides of the parent's (rectangular) clipping region.

<P><span class="index-def" title="&lt;top&gt;::definition of"><a
name="value-def-top" class="value-def">&lt;top&gt;</a></span>, <span
class="index-def" title="&lt;right&gt;::definition of"><a
name="value-def-right" class="value-def">&lt;right&gt;</a></span>,
<span class="index-def" title="&lt;bottom&gt;::definition of"><a
name="value-def-bottom" class="value-def">&lt;bottom&gt;</a></span>,
and <span class="index-def" title="&lt;left&gt;::definition of"><a
name="value-def-left" class="value-def">&lt;left&gt;</a></span> may
either have a <span class="value-inst-length">&lt;length&gt;</span>
value or 'auto'.  Negative lengths are permitted. The value 'auto'
means that a given edge of the clipping region will be the same as the
edge of the element's generated box.

<P> When converted to pixel coordinates, the bottom-right corner is
excluded from the clipping rectangle. This rule is necessary to permit
the definition of zero-width or zero-height rectangles.
</dl>

<P>If the clipping region exceeds the bounds of the UA's
document window, contents may be clipped to that window by the
native operating environment.

<div class="example"><P>
The following two rules:</P>
<PRE>
   P { clip: rect(5px, 10px, 10px, 5px); }
   P { clip: rect(5px, -5px, 10px, 5px); }
</PRE>

<P>will create the rectangular clipping regions delimited
by the dotted line in the following illustrations:</p>

<P><IMG src="images/clip.gif" alt="Two clipping regions"></p>
</div>

<div class="note"><P>
<em><strong>Note.</strong>
In CSS2, all clipping regions are rectangular. We anticipate
future extensions to permit non-rectangular clipping.
</em>
</div>

<H2><a name="visibility">Visibility</a>: the <span
class="propinst-visibility">'visibility'</span> property</H2>

<!-- #include src=properties/visibility.srb -->

<p>The <span class="propinst-visibility">'visibility'</span> property
specifies whether the boxes generated by an element are
rendered. Invisible boxes still affect layout (set the <span
class="propinst-display">'display'</span> property to 'none' to
suppress box generation altogether).  Values have the following
meanings:</p>

<dl>
<dt><strong>visible</strong>
<dd>The generated box is visible. 
<dt><strong>hidden</strong>
<dd>The generated box is invisible, but still affects layout.
<dt><strong>collapse</strong>
<dd>Please consult the section on 
<a href="tables.html#dynamic-effects">dynamic row and column
effects</a> in tables.
</dl>

<P>This property may be used in conjunction with scripts to create
dynamic effects.

<div class="html-example"><P>
In the following example, pressing either form button invokes a
user-defined script function that causes the corresponding box to
become visible and the other to be hidden. Since these boxes
have the same size and position, the
effect is that one replaces the other.

<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
&lt;!--
   #container1 { position: absolute; top: 2in; left: 2in; width: 2in}
   #container2 { position: absolute; top: 2in; left: 2in; width: 2in;
                 visibility: hidden; }
--&gt;
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;Choose a suspect:&lt;/P&gt;
&lt;DIV id="container1"&gt;
   &lt;IMG alt="Al Capone" width="100" height="100" src="suspect1.jpg"&gt;
   &lt;P&gt;Name: Al Capone&lt;/P&gt;
   &lt;P&gt;Residence: Chicago&lt;/P&gt;
&lt;/DIV&gt;

&lt;DIV id="container2"&gt;
   &lt;IMG alt="Lucky Luciano" width="100" height="100" src="suspect2.jpg"&gt;
   &lt;P&gt;Name: Lucky Luciano&lt;/P&gt;
   &lt;P&gt;Residence: New York&lt;/P&gt;
&lt;/DIV&gt;

&lt;FORM method="post" action="http://www.suspect.org/process-bums"&gt;
   &lt;P&gt;
   &lt;INPUT name="Capone" type="button" value="Capone" onclick='show("container1");hide("container2")'&gt;
   &lt;INPUT name="Luciano" type="button" value="Luciano" onclick='show("container2");hide("container1")'&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<P>Note that the <span class="propinst-position">'position'</span>
property of each DIV element has the value 'relative'. A more
visually appealing version of the above might be designed using
overlapping <a href="visuren.html#absolute-positioning">
absolutely positioned</a> boxes.</p>
</div>
</body>
</html>
