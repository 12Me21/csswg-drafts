<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Visual effects</title>
<link rel="next" href="generate.html">
<link rel="previous" href="visudet.html">
<link href="style/default.css" rel="STYLESHEET" type="text/css">
</head>
<body>
<h1 align="center">Visual effects</h1>
<H2><a name="overflow-clipping">Overflow and clipping</a></H2>
<!--
   Overflow and clipping

       Overflow must be considered when an element's content or that
       of its children exceeds the element's specified dimensions.

       [Note, may apply to relatively or absolutely positioned elements]
-->

<H3><a name="overflow">Overflow</a>: the <span
class="propinst-overflow">'overflow'</span> property</H3>

<P>Normally, child boxes are positioned within the box of their
parent. However, a child box may extend horizontally beyond the
bounding box of its parent in the following situations:</p>

<ul>
<li>It is <a href="visuren.html#floats">floated</a> and is too large for its
parent.
<li>It is <a href="visuren.html#absolute-positioning">positioned absolutely</a>.
<li>It has <a href="visudet.html#margin-properties">negative margins</a>.
</ul>

<p>The <span class="propinst-overflow">'overflow'</span> property is
used to specify the user agent's behavior when the contents of an
absolutely positioned element exceed its declared bounds.

<!-- #include src=properties/overflow.srb -->

<p>This property determines what happens when an element's rendered
contents exceed its height or width.</p>

<ul>

<li><strong>visible:</strong> A value of 'visible' indicates that the
element's bounding box should be enlarged enough to contain all of its
rendered contents.  In other words, its height or width can be made
bigger than the declared value. Any padding or border will remain
outside the rendered content. Any additional width will be added in
the direction specified by the current value of the <span
class="propinst-direction">'direction'</span> property. Additional
height will be added to the bottom.

<li><strong>hidden:</strong> A value of 'hidden' indicates that the
element's contents should be clipped to its height and width, and that
no scrolling mechanism should be provided. Padding and border will be
applied to the regular height and width of the element, as if its
contents did not exceed its bounds. Any contents that exceed the
element's bounds will be unavailable to the user.

<li><strong>auto:</strong> The behavior of the 'auto' value is
UA-dependent, but should cause a scrolling mechanism to be invoked
when the element's rendered contents exceed its bounds.

<li><strong>scroll:</strong> Finally, the 'scroll' value indicates
that if the UA supports a visible scrolling mechanism, that mechanism
should be displayed whether or not the element's rendered contents
exceed its bounds.  This avoids any problem with scrollbars appearing
and disappearing in a dynamic environment.
</ul>

<P> Even if <span class="propinst-overflow">'overflow'</span> is set
to 'visible', contents may be clipped to a UA's document window by the
native operating environment. In addition, the <span
class="propinst-clip">'clip'</span> property can cause otherwise
visible &quot;overflowed&quot; contents to be clipped.

The examples below utilize the following stylesheet, which
describes a simple 100 pixel box with a thin solid red border:

<div class="example"><P>
<PRE>
#overlay {position: absolute; top: 50px; left: 50px; height: 100px;
          width: 100px; border: thin solid red;}
</PRE>

<P>Applied to an empty &lt;DIV&gt;, this would look something like:</P>

<P><img src="./images/overflow1.gif" alt="Simple overlay"></p>
</div>

<P> First, let's consider the default value of <span
class="propinst-overflow">'overflow'</span>, which is 'visible'. This
value indicates that all contents of an element should be rendered,
even if these contents exceed the declared width or height of the
element.

<div class="html-example"><P>
Consider a block of long, preformatted text:

<PRE>
&lt;PRE id="overlay"&gt;Here is some long preformatted text.&lt;/PRE&gt;
</PRE>

<p>With <span class="propinst-overflow">'overflow'</span> set to
'visible', all of the text will be visible even though it exceeds the
declared width of the element. The element will be made wider than its
declared width, and any padding or border will be rendered outside of
this new width. The example might be rendered something like:</p>

<P><img src="./images/overflow2.gif" alt="Long overflow text which is visible."></P>

</div>

<div class="example"><P>
Similarly, the height of the element will be extended should the
rendered contents exceed the declared height. Consider the following:</P>

<PRE class="html-example">
&lt;BODY&gt;
&lt;DIV id="overlay"&gt;Here is a block of text that will
cause this element to exceed its declared height of 100 pixels.
&lt;/DIV&gt;
&lt;/BODY&gt;
</PRE>

<p>This division should be rendered something like this:</P>

<P><img src="./images/overflow3.gif" alt="Layout of an element whose contents exceed the declared height"></p>

<p>The 'hidden' value of the <span
class="propinst-overflow">'overflow'</span> property indicates that
any content which exceeds the declared bounds of the element should not
be rendered at all. The user will have no way to view this
"overflowed" content. With <span
class="propinst-overflow">'overflow'</span> set to 'hidden', the two
examples above should be rendered something like this:</p>

<P><img src="./images/overflow4.gif" alt="Hiding overflow content"></p>
</div>


<p>Another value for <span class="propinst-overflow">'overflow'</span>
is 'auto', which indicates that the user agent should provide for a
scrolling mechanism when the contents overflow the bounds of the
element. Finally, a value of 'scroll' indicates that a scrolling
mechanism should always be present, whether or not the contents exceed
the element's bounds. 

<H3><a name="clipping">Clipping</a>: the <span
class="propinst-clip">'clip'</span> property</h3>

<p>Clipping alters a document's display, though it does not affect how
it is laid out. The clipping region defines what portion of the
element's physical representation is visible. It is computed by the
intersection of the parent's clipping region with the value of the
element's <span class="propinst-clip">'clip'</span> property.</p>

<!-- #include src=properties/clip.srb -->

<P>The <span class="index-def" title="&lt;shape&gt;::definition of"><a
name="value-def-shape" class="value-def">&lt;shape&gt;</a></span>
value type may have the following values:</p>

<ul>
<li> rect (<span class="value-inst-top">&lt;top&gt;</span>
	   <span class="value-inst-right">&lt;right&gt;</span>
	   <span class="value-inst-bottom">&lt;bottom&gt;</span>
           <span class="value-inst-left">&lt;left&gt;</span>)
</ul>

<P>The value types <span class="index-def" title="&lt;top&gt;::definition of"><a name="value-def-top"
		class="value-def">&lt;top&gt;</a></span>, <span
	      class="index-def" title="&lt;right&gt;::definition
	      of"><a name="value-def-right"
		class="value-def">&lt;right&gt;</a></span>, <span
	      class="index-def" title="&lt;bottom&gt;::definition
	      of"><a name="value-def-bottom"
		class="value-def">&lt;bottom&gt;</a></span>, and <span
	      class="index-def" title="&lt;left&gt;::definition of"><a
		name="value-def-left"
		class="value-def">&lt;left&gt;</a></span> may either
	    have the values <span
		class="value-inst-length">&lt;length&gt;</span>
	    or 'auto'.

<p>Lengths are specified with respect to the element's top-left
corner. Negative lengths are permitted.

<P>The values for <span class="value-inst-top">&lt;top&gt;</span>,
<span class="value-inst-bottom">&lt;bottom&gt;</span> <span
class="value-inst-right">&lt;right&gt;</span>, and <span
class="value-inst-left">&lt;left&gt;</span> are distances
from the respective extents of the parent element's clipping region.

<P> When converted to pixel coordinates, the bottom-right corner is
excluded from the clipping rectangle. This rule is necessary to permit
the definition of zero-width or zero-height rectangles.

<p>Any length can be replaced by the value 'auto', which causes
the respective extent of the clipping rectangle to match the
element's extent in the given direction, including padding,
borders and child elements. The default value for the 'clip'
property causes the clip rectangle to encompass the entire
element. In effect, 'auto' provides for an infinite clipping
region.</p>

<div class="note"><P>
<em><strong>Note.</strong>
For now, all clipping regions are rectangular. We anticipate
future extensions to permit non-rectangular clipping.
</em>
</div>

<P>If the clipping region exceeds the bounds of the UA's
document window, contents may be clipped to that window by the
native operating environment.

<H2><a name="visibility">Visibility</a>: the <span
class="propinst-visibility">'visibility'</span> property</H2>

<P>Some elements of the document tree cause boxes to be generated that
	    follow the normal positioning rules, but are not rendered;
	    their presence is "felt," but they are invisible.

<!-- #include src=properties/visibility.srb -->

<p>The <span class="propinst-visibility">'visibility'</span> property
determines whether or not an element is initially displayed. The
visibility of an element does not affect its layout.  Elements that
are hidden still take up the same physical space as they would were
they visible, they are just rendered transparently. This differs from
the behavior of <span class="propinst-display">'display'</span> with a
value of 'none', in which the element is skipped, as if it were not
present in the document at all. Visibility can be used in a scripting
environment to dynamically display only one of several elements which
overlap one another.</p>

<div class="html-example"><P>

In the following example, pressing either form button invokes a
user-defined script function that causes the corresponding element to
become visible and the other element to be hidden. Since the
containers occupy the same position, and are the same size, the
effect is that one replaces the other.

<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
&lt;!--
   #container1 { position: absolute; top: 2in; left: 2in; width: 2in}
   #container2 { position: absolute; top: 2in; left: 2in; width: 2in;
                 visibility: hidden; }
--&gt;
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;Choose a suspect:&lt;/P&gt;
&lt;DIV id="container1"&gt;
   &lt;IMG alt="Al Capone" width="100" height="100" src="suspect1.jpg"&gt;
   &lt;P&gt;Name: Al Capone&lt;/P&gt;
   &lt;P&gt;Residence: Chicago&lt;/P&gt;
&lt;/DIV&gt;

&lt;DIV id="container2"&gt;
   &lt;IMG alt="Lucky Luciano" width="100" height="100" src="suspect2.jpg"&gt;
   &lt;P&gt;Name: Lucky Luciano&lt;/P&gt;
   &lt;P&gt;Residence: New York&lt;/P&gt;
&lt;/DIV&gt;

&lt;FORM method="post" action="http://www.suspect.org/process-bums"&gt;
   &lt;P&gt;
   &lt;INPUT name="Capone" type="button" value="Capone" onclick='show("container1");hide("container2")'&gt;
   &lt;INPUT name="Luciano" type="button" value="Luciano" onclick='show("container2");hide("container1")'&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<P>Note that the <span class="propinst-position">'position'</span>
property of each DIV element has the value 'relative'. A more
visually appealing version of the above might be designed using
overlapping 'absolute' positioned elements:</p>
</div>

<H2><a name="dynamic-positioning">Dynamic positioning</a></H2>
<P>Certain dynamic aspects of managing positioned elements, such
as hiding, displaying and movement can only be performed using an
external scripting language.

<P>This draft does not specify the behavior of dynamic elements in
scripting environments. For example, what happens when an element
having 'width: auto' is repositioned? Do the contents reflow, or do
they maintain their original formatting?  The answer is outside the
scope of this draft, and such behavior is likely to differ in initial
implementations of CSS2.
</body>
</html>
