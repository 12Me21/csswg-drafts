<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: visuren.src,v 1.35 1997-10-29 22:54:17 howcome Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual rendering model</TITLE>
<LINK rel="next" href="flowobj2.html">
<LINK rel="previous" href="box.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">Visual rendering model</H1>


<H2><a name="flow-model">The visual flow model</a></H2> 

The <span class="index-def" title="flow, definition of">flow</span>
of elements refers to how sibling boxes (i.e., of elements who share
the same parent) are laid out.

<P>Sibling boxes may be laid out horizontally or vertically. Inline
elements generate boxes that are laid out horizontally. Block-level
elements generate boxes that are laid out vertically.

<P>In the normal flow, the initial position of each box is calculated
relative to the boxes that come before it (i.e., ancestor and sibling
boxes). 

<P>The <span class="propinst-position">'position'</span> property
determines if an element is in the normal flow or in any of the other
visual rendering models.

<!-- #include src=properties/position.srb -->

<P>The values of this property have the following meanings:

<ul>

<li>'static': Static boxes belong to the normal flow and are described
in this section

<li>'relative': The box generated for this element will first be
positioned according to the normal flow, then offset. Relative
positioning is descibed in a <a href="#relative-positioning">separate
section</A>.

<li>'absolute': The box generated for this element will be given an
absolute position (and possibly size) with respect to a positioning
block. Absolutely positioned elements are described in a <a
href="#absolute-positioning">separate section</A>.

<li>'fixed; Fixed positioning is a variant of absolute positioning
where elemets are fixed with respect to the canvas. These are
described in a <a href="#fixed-positioning">separate section</A>.

</ul>

<div class="note"><P>
<em><strong>Note.</strong>
The 'static' value causes some user agents to
ignore the <span class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> properties. To ensure that values of
<span class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> are taken into account, authors should
explicitly set the value of the <span
class="propinst-position">'position'</span> property to 'relative'.
</em>
</div>






<P>All elements that have text content (block or inline) generate
"anonymous" boxes that contain chunks of text. These anonymous boxes
inherit properties (colors, fonts, etc.) from their ancestors. By
default, anonymous boxes are inline, i.e., text is laid out
horizontally. 

<P>Decisions about the construction of anonymous boxes depends on many
factors (language, hyphenation, etc.) and lies outside the 
scope of this specification.

<!-- #include src=properties/direction.srb -->

<P>This property determines the whether inline boxes are laid out
left-to-right or right-to-left. It may take the following values:

<dl>
<dt><strong>ltr</strong> 
<dd>Left to right flow. This is the default value.
<dt><strong>rtl</strong>
<dd> Right to left flow.
<dt><strong>ltr-override</strong>
<dd>[Ian: What does this mean?]
<dt><strong>rtl-override</strong>
<dd>[Ian: What does this mean?]
</dl>

<P>[Ian: Examples here.]

<P>This property also specifies the direction of <a href="./tables.html">
table layout</a>.

<H3><a name="block-level">Block-level layout</a></H3>

<P><span class="index-def" title="Block-level
layout">Block-level</span> boxes are laid out one after the other,
vertically.

<P>The vertical distance between the top of a box and its preceding
sibling (or parent if no preceding sibling exists) is determined
by the <span class="propinst-margin">'margin'</span> properties.

<P>Vertical space between adjacent block-level boxes collapses, as
described in the section on <a
href="./flowobj2.html#collapsing-margins">collapsing margins</a>.

<P>For left-to-right flowing content, a block-level box flows inside
the left side of its parent, at a horizontal distance specified by the
<span class="propinst-margin">'margin'</span> properties.  For
right-to-left flowing content, boxes flow inside the right side of
their parent.

<P>For information about page breaks in paged media, please consult
the section on <a href="page.html#allowed-page-breaks">allowed
page breaks</a>.

<H4><A NAME="list-item-elements">List-item elements</A></H4>

<!-- INSERT FROSTING LIST STUFF HERE -->
    
<P>Some block elements generate boxes that may be formatted as
lists. In terms of flow, lists are formatted as other block-level
elements.

<P>For information about lists and examples of list formatting, please
consult the section on <a href="lists.html">lists</a>.

<H3><a name="inline">Inline layout</a></H3>

<P><span class="index-def" title="Inline layout">Inline boxes</span>
are laid out one after the other, horizontally, within a horizontal
space defined by the first enclosing block element (see the section on
<a href="flowobj2.html#box-width">box width calculations</a> for more
information). 

<P>For left-to-right flow, the horizontal distance between the left
side of a box and its preceding sibling's right side (or parent's
right side if no preceding sibling exists) is determined by the <span
class="propinst-margin">'margin'</span> properties. For right-to-left
flow, the horizontal distance is between the right side of a box and
its preceding sibling's left side (or parent's left side if no
preceding sibling exists).

<P>Horizontally adjacent inline boxes form a <dfn>line box</dfn>.  To
form a paragraph, line boxes are stacked vertically. Note that in the
same block, stacked line boxes have the same width but may vary in
height.

<P>When an inline box is less wide than the width of the line box that
contains it, its horizontal alignment within the line box is
determined by the <span
class="propinst-text-align">'text-align'</span> property.

<P>When an inline box is wider than a line box, it it may be split
into several inline boxes and these boxes distributed across several
lines.  

<P>Inline boxes in the same line may have different heights (e.g., an
inline image surrounded by text), so the final height of each line box
is determined by the rules given in the section on <a
href="flowobj2.html#line-height">line height calculations</a>.  When
an inline box's height is less than the line box height, the vertical
alignment of the inline box within the line box is determined by the
<span class="propinst-vertical-alignment">'vertical-alignment'</span>
property.

<h4><a name="anonymous">Anonymous text boxes</a></h4> 

<P>Text within a block-level element that is not the content of an
inline element is called <dfn>bare text</dfn>. For the purposes of
visual formatting, chunks of bare text are packed into 
<dfn>anonymous inline boxes</dfn> that are children of
the block-level element.

<div class="example"><P>
For example, the following paragraph (created by the HTML block-level
element P) contains chunks of bare text separated by 
the inline elements EM and STRONG:

<PRE>
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear
&lt;STRONG&gt;in this&lt;/STRONG&gt; sentence, dear.&lt;/P&gt;
</PRE>

<P>In terms of the document tree, P has five children elements
that contain the following pieces of text:

<ul>
<li>Anonymous: "Several"
<li>EM: "emphasized words"
<li>Anonymous: "appear"
<li>STRONG: "in this"
<li>Anonymous: "sentence, dear."
</ul>
 
<P>To format the paragraph, the user agent generates an inline box
for each child and lays all five of them out into a series of line
boxes.  The width of the P element determines the width of these line
boxes.  If the width of P is sufficient, all the inline boxes will fit
into a single line box:

<PRE>
  Several <EM>emphasized words</EM> appear <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>If the inline boxes do not fit within a single line box, they will
be split up and distributed across several lines.  The previous
paragraph might be split as follows:

<PRE>
  Several <EM>emphasized words</EM> appear
  <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>or like this:

<PRE>
  Several <EM>emphasized</EM>  
  <EM>words</EM> appear
  <STRONG>in this</STRONG> 
  sentence, dear.
</PRE>
</div>

<h4>Behavior of margins, borders, padding, and decoration after a
split inline box</h4>

<P>In the last example above, the EM inline box has been split into
two EM boxes (call them "split1" and "split2"). If a inline box split
this way has margins, borders, padding, or text decorations, these
have no visible effect after split1 or before split2 (e.g., the border
is not drawn and the margin and padding are not included after
split1).

<div class="example"><P>
Consider the following example:

<PRE>
  &lt;STYLE&gt;
  EM { padding: 2px ; 
       margin: 1em ;
       border-width: medium;
       border-style: dashed;
       line-height: 2.4em;
  }
  &lt;/STYLE&gt;
  &lt;BODY&gt;
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
  &lt;/BODY&gt;
</PRE>

<P>Depending on the width of the P, the boxes may be distributed as
follows:</P>

<img src="./images/inline-layout.gif"
     alt="Image illustrating the effect of line breaking on the display of margins, borders, and padding.">

<ul>
<li> The margin is inserted before "emphasized" and after "words". 
Recall that margins above and below inline elements have no effect.

<li> The padding is inserted before, above, and below
"emphasized" and after, above, and below "words" (i.e.,
neither after "emphasized" nor before "words"). A
dashed border surrounds the padding.  
</ul>
</div>

<P>Note that with a small line height, the padding and borders
around text in different lines may overlap.

<h3>Dual-mode elements: run-in and compact</h3>

<p>There are two types of boxes that are inline or block depending on
the context. A <dfn>'compact'</dfn> box is one that is put in the
margin of the following block if there is enough room, and will be
rendered as a block otherwise. A 'run-in' box is one that is rendered
inline in the following block, or as a block if there is no following
block.

<div class=example>
<p>The effect of 'compact' is like this: the document
<pre>
&lt;style>
DT {display: compact}
DD {margin-left: 4em}
&lt;/style>
&lt;dl>
&lt;dt>Short
&lt;dd>&lt;p>Description goes here.
&lt;dt>too long for the margin
&lt;dd>&lt;p>Description goes here.
&lt;/dl>
</pre>
<p>Can be rendered as:
<pre>
<b>short</b>    Description goes here

<b>too long for the margin</b>
         Description goes here
</pre>
</div>

<div class=example>

<p>A 'run-in' element is useful for run-in headers, like in this
example:

<pre>
&lt;style>
  H3 {display: run-in}
  H3:after {content: ". "}
&lt;/style>
&lt;h3>A run-in heading&lt;/h3>
&lt;p>And a paragraph of text that
follows it.
</pre>
<p>Which can be rendered as follows:
<pre>
<b>A run-in heading. </b>And a
paragraph of text that
follows it.
</pre>
</div>

<p>A 'run-in' element is rendered exactly like a 'block' element if
the following sibling element is not of type 'block' or is floating or
positioned absolutely. Otherwise the run-in element is rendered inline
as if it were the first inline box of the following block.

<p>Properties apply to a run-in element depending on whether it is
rendered inline or as a block. For example, the <span
class="propinst-white-space">'white-space'</span> property only applies
if the element is rendered as a block.

<p>For a 'compact' element to be rendered as an inline box, it must be
followed by a 'block' element that doesn't float and is not positioned
absolutely. That block must have a <span
class="propinst-margin-left">'margin-left'</span> (or <span
class="propinst-margin-right">'margin-right'</span>
if it's <span class="propinst-direction">'direction'</span> is 'rtl')
that is wide enough for the compact element. That means: the compact
element, when rendered as an inline box, must be a single box (no line
breaks) with overall width (including magins, border and padding) that
is no larger than the margin of the block.

<p>The compact box is outside (to the left or right) of the first line
box of the block, but it takes part in the calculation of that line
box's height. The <span
class="propinst-vertical-align">'vertical-align'</span> property of
the compact box determines its vertical position relative to that line
box.

<p>The horizontal position is always in the margin of the block, as
far to the outside as possible. The compact box's left margin (or
right, if the block's 'direction' is 'rtl') determines the position.

<H3><a name="relative-positioning">Relative positioning</a></H3>  

<P>Once a block-level or inline box has been assigned its position
according to the flow model, it may be shifted relative to this
position. This is called <span class="index-def" title="relative
positioning"><em>relative positioning</em></span> and the offset is
specified by the the <span class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties. Offsetting a box in
this way has no effect on sibling boxes; they are not "reflowed" as a
result of the offset. This implies that relative positioning allows
boxes to overlap.

<P>Relatively positioned elements establish a new reference box
that child elements can be positioned with respect to. See the section
on <a href="#absolute-positioning">absolutely positioned elements</A>
for more on this.

<p>Relatively positioned elements keep their natural shape, including
line breaks and the space originally reserved for them.
Dynamic movement of relatively positioned elements can provide
animation effects in scripting environments (see the section on <a
href="./flowobj2.html#dynamic-positioning">dynamic positioning</a> for
details.</p>

<P>Elements are positioned relatively by setting the <span
class="propinst-position">'position'</span> property to 'relative'.

<p>Relative positioning could also be used as a general form of
superscripting and subscripting except that line height is not
automatically adjusted to take the positioning into consideration. See
the description of <a href="flowobj2.html#line-height">line height
calculations</a> for more information.

<P>Examples of relative positioning are provided in the section <a
href="#absolute-comparison">comparing normal, relative, floating, and
absolute positioning</a>.

<H3>Controlling layout behavior: the <span
class="propinst-display">'display'</span> property</H3>

<P>An element of the document language is not inherently inline or block-level (except, perhaps in the minds of the language's designers). CSS
does not assume any default layout behavior for elements. The layout
behavior of every element is determined by the value of its <span
class="propinst-display">'display'</span> property.

<!-- #include src=properties/display.srb -->

<P> An element with a <span class="propinst-display">'display'</span>
value of 'block' causes the generation of a <a
href="#block-level">block-level</a> box.

<P>A value of 'list-item' is similar to 'block' except that a
list-item marker is added. For example, in HTML, LI will typically
have this value.

<P> An element with a <span class="propinst-display">'display'</span>
value of 'inline' generates an <a href="#inline">inline box</a>.  The
box is dimensioned according to the formatted size of the content. If
the content is text, it may span several lines, and there will be a
box on each line. The <a href="#margin-properties">margin</a>, <a
href="#border-properties">border</a>, and <a
href="#padding-properties">padding</a> properties apply to 'inline'
elements, but will not have any effect at the line breaks.

<P> A value of 'none' turns off the display of the element (including
any border around the element). Descendent elements will also be
turned off and cannot override this by setting the <span
class="propinst-display">'display'</span> property themselves.

<div class="example"><P>
<PRE>
  P { display: block }
  EM { display: inline }
  LI { display: list-item }
  IMG { display: none }
</PRE>
<P> The last rule turns off the display of images.  
</div>

<P> The initial value of <span
class="propinst-display">'display'</span> is 'block', but a user agent
will typically have default values for all document language elements.

<P>UAs may ignore <span class="propinst-display">'display'</span> and use
only the UA's default values. See the section on <a
href="convent.html#conformance">conformance</a> for details.

<P> For many document languages, and in particular for HTML, user agents
may provide a default style sheet that implements the layout behavior
expected of the language's elements. Please consult the <a
href="sample.html">sample style sheet</a> in the appendix for
information about the default layout behavior of HTML 2.0.


<H2><a name="floats">Floats</a>: <span
class="propinst-float">'float'</span> and <span
class="propinst-clear">'clear'</span></H2>


<P>At times, authors may want to control the positioning of a box in a
way that cannot be done within the flow model. There are three ways to
generate a box that does not adhere to the flow model:

<ul>

<li>Create a <a href="#floats">floating box</a> that floats
to the left or right of where
it would normally appear in the flow. For instance, authors may
float paragraph boxes in order to place them side-by-side.

<li>Use <a href="#absolute-positioning">absolute positioning</a>.

<li>Set the value of the <span
class="propinst-display">'display'</span> property to 'none' (in which
case, the element does not generate a box at all).

</ul>

<P>The primary difference between a floating box and one that is
absolutely positioned is that absolute positioning has no impact on
the flow of later siblings; later siblings are laid out as though
their absolutely positioned sister did not exist at all. Later
siblings of floating objects flow with respect to the final
position of the floating element.

<P>Floating and absolutely positioned boxes do affect the flow of
children elements: children elements always flow relative to the
position of their parent unless positioned absolutely themselves.

<P>A floated box is moved to the left or right until the margin,
padding, or border of another block-level element is reached. 

<P>User agents take the boundaries of floated boxes into account when
flowing subsequent boxes, i.e., boxes that follow flow around the
floated box. The margins, borders and padding of the floated box are
honored, and the margins never collapse with the margins of adjacent
elements.

<P>To float a box, set the <span class="propinst-float">'float'</span>
property for the element generating the box.

<!-- #include src=properties/float.srb -->

<P> With the value 'none', the generated box will be displayed where
it appears in the text. With a value of 'left' ('right') the element
will be moved to the left ('right') and the text will wrap on the
right (left) side of the element.  With a value of 'left' or 'right',
the element is treated as <a href="#block-level">block-level</a> (and
thus the <span class="propinst-display">'display'</span> property is
ignored).

<P> This property is most often used with inline images, but also
applies to text elements.

<div class="example"><P>
The following example will place all IMG elements with
<samp>class="icon"</samp> along the left side of the parent element:

<PRE>
  IMG.icon { 
    float: left;
    margin-left: 0;
  }
</PRE>
</div>


<div class="example"><P>
The following HTML source:

<PRE>
  &lt;STYLE type="text/css"&gt;
    IMG { float: left }
    BODY, P, IMG { margin: 2em }
  &lt;/STYLE&gt;

  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG src=img.gif&gt;
      Some sample text that has no other...
  &lt;/BODY&gt;
</PRE>

<P>could be formatted as:</P>

<img src="./images/floateg.gif"
     alt="Image illustrating how floating elements interact with margins.">

<P> Note that the margin of the P element encloses the floating
IMG element. 
</div>

<H3>Controlling floats</H3> 

<P>The <span
class="propinst-clear">'clear'</span> property specifies whether an
element will allow floating elements on its sides.

<!-- #include src=properties/clear.srb -->

<P>When set for an element E, this property indicates which sides of E
may not be adjacent to sides of a floating element. A value of 'left'
means that E may not be positioned next to any floating elements to
its left; when flowed, E will therefore be moved to the next available
line below. The value 'right' means the same thing, but on the right
side of E. 

<P>A value of 'none' means that E may be placed next to
floating objects to the left or right.  

<P>A value of 'both' means that E may not be placed next to floating
objects on either side.

<div class="example"><P>
The following style rule means that no H1 element may have a floating
element to its left. All H1 elements will be positioned at the current
left margin. 

<PRE>
  H1 { clear: left }
</PRE>
</div>

<P>Consult the section on <a
href="flowobj2.html#floating-constraints">floating constraints</a> for
more information about controlling floats.

<H2><a name="absolute-positioning">Absolute positioning</a></H2>

<!--
<P>The position and size are determined by the <span
class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties.

<p>Absolutely positioned elements act like block-level elements, but
since they do not belong to the normal flow, the following properties
do not apply to them: <span class="propinst-float">'float'</span>,
<span class="propinst-clear">'clear'</span>, <span
class="propinst-display">'display'</span> (and therefore <span
class="propinst-list-style-type">'list-style-type'</span>), and all
the <a href="#margin-properties">margin properties</a>.
-->

<p>Elements that are positioned with respect to a <span
class="index-def" title="reference box"><em>reference
block</em></span> are said to be <span class="index-def"
title="absolute positioning"><em>absolutely positioned</em></span>.

<P>The default reference box is the box generated for the root
element of the <a href="convent.html#doctree">document tree</a>.
However, an element for which the <span
class="propinst-position">'position'</span> property has been set to a
value other than 'static' establishes a new reference
block. Absolutely positioned descenders of the element will be
positioned with regard to the inner edges of the reference box.
Furthermore, an absolutely positioned element establishes a new
context in which normally flowing descendents are aligned.

<P>When the reference box is established by a block-level element it
has the same width, height and position as the content+padding area of
the block-level element. When the reference box is established by an
inline element is has the same width, height, and position as the
content+padding area of the first box generated by the inline
elements. I.e., if the inline element is split into several boxes on
different lines, the reference box is defined by the first box.

<P>The contents of an absolutely positioned element do not flow around
any other elements. They may or may not obscure the contents of
another element, depending on the <a href="#z-order">z-order</a> of
the overlapping elements (described below).

<P>An absolutely positioned element lives inside of this reference
block, as illustrated below:</p>

<img src="./images/box-coord.gif" alt="Illustration of a reference box">

<H3>Properties to specify position: <span class="propinst-top">'top'</span>,
<span class="propinst-right">'right'</span>, 
<span class="propinst-bottom">'bottom'</span>, 
<span class="propinst-left">'left'</span></H3>

<P>The position of an <a href="#relative-positioning">relatively</A>,
<a href="#absolute-positioning">absolutely</A> or <a
href="#fixed-positioning">fixed positioned</A> (see below) element is
determined from four properties:

<!-- #include src=properties/top.srb -->

<!-- #include src=properties/right.srb -->

<!-- #include src=properties/bottom.srb -->

<!-- #include src=properties/left.srb -->

<P>Each of these four properties specifies an offset between the
reference box and the element which is being positioned. More
specifically, values indicate the offset between the edge of the
reference box and the corresponding content+padding+border box of the
element which is being positioned.

<P>The values have the following meanings:

<dl>
<dt><strong><span class="value-inst-length">&lt;length&gt;</span></strong>
<dd>The offset is a fixed distance from the edge.

<dt><strong><span class="value-inst-percentage">&lt;percentage&gt;</span></strong>

<dd>The offset is a percentage of the reference box's width (for <span class="propinst-left">'left'</span> or <span
class="propinst-right">'right'</span>) or height (for <span
class="propinst-top">'top'</span> and <span
class="propinst-bottom">'bottom'</span>).

<dt><strong>auto</strong>
<dd>The offset depends on the width and height specified 
for the element.
</dl>

<P>For absolutely positioned elements, the values of the <span
class="propinst-left">'left'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-top">'top'</span>, and <span
class="propinst-bottom">'bottom'</span> properties take over the roles
of the corresponding <a href="#margin-properties">margin properties</a>
(i.e., absolutely positioned element boxes do not have margins but do
have padding and borders).

<P>For more information about the width and height of absolutely
positioned elements, please consult the sections on <a
href="flowobj2.html#box-width">box width calculations</a> and <a
href="flowobj2.html#box-height">box height calculations</a>
respectively.


<H2><a name="fixed-positioning">Fixed positioning</a></H2>

<P>Fixed positioning is a variant of absolute positioning. The only
difference is that absolutely positioned elements are positioned with
respect to a reference box, while fixed positioned elements are
positioned with respect to the canvas. Fixed positioned elements are,
as the name indicates, fixed to the canvas and do not move when the
document is scrolled. In this respect, they are similar to <a
href="./colors.html#background-attachment">fixed background
images</a>.

<P>In a paged medium, fixed positioned elements will be repeated on
every page. This is useful for placing e.g. a signature at the bottom
of each page. 


<H2><a name="comparison">Comparison of normal, relative, floating, absolute positioning</a></H2>
<P>To illustrate the relationship between normal flow, relative
positioning, floats, and absolute positioning, we provide a series of
examples in the following sections based on the following HTML
fragment:

<p>
<tt>&lt;BODY&gt;<br>
&lt;P&gt;Beginning of body contents.<br>
&lt;SPAN id=outer&gt; Start of outer contents.<br>
&lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;<br>
End of outer contents.&lt;/SPAN&gt;<br>
End of body contents.<br>
&lt;/P&gt;<br>
&lt;/BODY&gt;</tt></p>

<p>The final positioning of the <em>outer</em> and <em>inner</em>
spans vary in each example. In each illustration, the numbers to
the left of the illustration indicate the normal position of the
double-spaced lines.</p>

<H3>Normal flow</H3>

<p>Consider the following CSS declarations for <em>outer</em> and
<em>inner</em> that don't alter the normal flow of elements:</p>

<p>
<tt>#outer {color: red;}<br>
#inner {color: blue;}</tt></p>

<p>This results in something like the following:</p>

<img src="./images/flow-generic.gif"
     alt="Image illustrating the normal flow of text between parent and sibling elements.">

<H3>Relative positioning</H3>

<P>To see the effect of relative positioning, consider the following CSS rules: 

<p><tt>BODY {line-height: 200%}<br>
#outer {position: relative; top: -12px; color: red;}<br>
#inner {position: relative; top: 12px; color: blue;}</tt></p>

<p>First, the <em>outer</em> text is flowed into its "normal" position and
dimensions at the end of line 1. Then, the entire box (distributed
over three lines) is shifted upwards by 12px.

<P>The contents of <em>inner</em>, as a child of <em>outer</em>, would
normally flow immediately after the words "of outer contents" (on line
1.5). However, the <em>inner</em> contents are themselves offset
relative to the <em>outer</em> contents by 12px downwards, back to
their original position on line 2.

<P>Note that the content following <em>outer</em> is not affected by the
relative positioning of <em>outer</em>.</P>

<img src="./images/flow-relative.gif"
     alt="Image illustrating the effects of relative positioning on an element's content.">

<P>Note also that if the relative positioning of <em>outer</em> were -24px, the
text of <em>outer</em> and the body text would have overlapped.

<H3>Floating a box</H3>

<P>Now consider the effect of floating the <em>inner</em> text to the right by
means of the following rules:

<p>
<tt>
#outer {color: red;}<br>
#inner {float: right; width: 130px; color: blue;}
</tt></p>

<P>First, the <em>inner</em> box (whose width has been set explicitly) is
floated to the right margin. The text that follows flows in the space
left by the <em>inner</em> box, and respects the new right margin imposed by
the left border of <em>inner</em>.</P>

<img src="./images/flow-float.gif"
     alt="Image illustrating the effects of floating an element.">

<P>To show the effect of the <span
class="propinst-clear">'clear'</span> property, we add a <em>sibling</em>
element to the example:

<p>
<tt>&lt;BODY&gt;<br>
&lt;P&gt;Beginning of body contents.<br>
&lt;SPAN id=outer&gt; Start of outer contents.<br>
&lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;<br>
&lt;SPAN id=sibling&gt; Sibling contents.&lt;/SPAN&gt;<br>
End of outer contents.&lt;/SPAN&gt;<br>
End of body contents.<br>
&lt;/P&gt;<br>
&lt;/BODY&gt;</tt></p>

<P>The following rules:

<p>
<tt>
#inner {float: right; width: 130px; color: blue;}<BR>
#sibling {color: red;}<br>
</tt></p>

<P>cause the <em>inner</em> box to float to the right and the
<em>sibling</em> box to flow in the available space:</P>

<img src="./images/flow-clear.gif"
     alt="Image illustrating the effects of floating an element without setting the clear property to control the flow of text around the element.">

<P>However, if the <span class="propinst-clear">'clear'</span>
property on the <em>sibling</em> box is set to 'right' (i.e., the
<em>sibling</em> box will not accept being positioned next to floating
objects to its right), the <em>sibling</em> box flows on the next
available line below:

<p>
<tt>
#inner {float: right; width: 130px; color: blue;}<BR>
#sibling {clear: right; color: red;}<br>
</tt></p>

<img src="./images/flow-clear2.gif" 
alt="Image illustrating the effects of floating an element with setting the clear property to control the flow of text around the element.">

<H3>Absolute positioning</H3>

<p>Finally, we consider the effect of absolute positioning on
elements. Consider the following CSS declarations for <em>outer</em> and
<em>inner</em>:</p>

<p><tt>
#outer {position: absolute; top: 200px; left: 200px; width:
200px; color: red;}<br>
#inner {color: blue;}</tt></p>

<p>which causes the top of the <em>outer</em> box to be positioned
with respect to the reference box (which we suppose
is set on the root of the document). The top side of the
<em>outer</em> box is 200px from the top of the reference box
and the left side is 200px from the left side. The child element of
<em>outer</em> flows with respect to its parent.</P>

<img src="./images/flow-absolute.gif"
   alt="Image illustrating the effects of absolutely positioning an element.">

<P>Note that because <em>outer</em> has been absolutely positioned, it
establishes a new reference box for any absolutely positioned
children (there aren't any in this example).

<p>Recall that absolutely positioned elements are positioned with
respce to a reference box set on an ancestor element. The
following example shows an absolutely positioned element that is a
child of a relatively positioned element. Although the parent
<em>outer</em> box is not actually offset, setting its <span
class="propinst-position">'position'</span> property to 'relative'
causes its box to serve as the reference box for any
descendents. Since the <em>outer</em> box is an inline box that is
split across several lines, only the first box (whose upper left-hand
corner is designated by a "@" in the illustration below) establishes
the reference box for the descendents.

<p><tt>#outer {position: relative; color: red;}<br>
#inner {position: absolute; top: 200px; left: -100px; height:
130px; width: 130px; color: blue;}</tt></p>

<p>This results in something like the following:</p>

<img src="./images/flow-abs-rel.gif"
     alt="Image illustrating the effects of absolutely positioning an
element with respect to a reference box.">

<P>Recall that statically positioning an element is equivalent to
using the <span class="propinst-position">'position'</span> property
to put an element back in the normal flow. Statically positioned
elements do not establish a reference box for their
children. Thus, the following rules:

<p><tt>
#outer {position: static; color: red;}<br>
#inner {position: absolute; top: 200px; left: -100px; height:
130px; width: 130px; color: blue;}</tt></p>

<P>are equivalent to:
<p><tt>
#outer {color: red;}<br>
#inner {position: absolute; top: 200px; left: -100px; height:
130px; width: 130px; color: blue;}</tt></p>

<P>and cause the <em>inner</em> box to be positioned with respect to
the reference box (which we assume here is set on the root element
of the document tree).</P>

<img src="./images/flow-static.gif"
     alt="Image illustrating the effects of absolutely positioning an element with respect to a coordinate system established by a statically positioned parent.">

<P>Relative and absolute positioning may be used to implement change
bars, as shown in the following example. We use a value of 'auto' for
the value of the <span class="propinst-top">'top'</span> property,
which results in the element being placed at the &quot;current&quot;
location in the document window, just as if the element were being
flowed into that space. The following HTML text:</p>

<pre>
&lt;P style=&quot;position: relative; margin-right: 10px; left: 10px;&quot;&gt;
I used two red hyphens to serve as a change bar. They
will &quot;float&quot; to the left of the line containing THIS
&lt;SPAN style=&quot;position: absolute; top: auto; left: 0px; color: red;&quot;&gt;--&lt;/SPAN&gt;
word.&lt;/P&gt;</pre>

<p>might result in something like:</p>

<img src="./images/changebar.gif"
     alt="Image illustrating the use of floats to create a changebar effect.">

<H2><a name="z-order">Z-order</a>: Layered presentation</H2>
CSS allows authors to specify the position of an element in three
dimensions. The <span class="index-def" title="stack level"><em>stack
level</em></span> of an element refers to its position above or below
other elements. The stack level is particularly relevant to elements
that overlap visually. 

<H3>Specifying the stack level: the <span
class="propinst-z-index">'z-index'</span> property</H3> 

<P>In the following sections, the expression "in front of" means
closer to the user as the user faces the screen.

<P>The stack level of an element may be determined in two ways:

<ul>
<li>By an element's place in the document tree (i.e., with respect to
parent and sibling elements). Elements are stacked in the order they
appear in the document tree. Thus, an element is stacked in
front of its parent and "older" siblings (i.e., those to the left of
the element in the document tree) and behind its children and later
siblings. 
<li>Explicitly, via the <span
class="propinst-z-index">'z-index'</span> property.
</ul>

<!-- #include src=properties/z-index.srb -->

<p>The <span class="propinst-z-index">'z-index'</span> property is
used to specify the stacking order of elements that may be positioned (i.e.,
element's whose <span class="propinst-position">'position'</span>
property has a value of 'absolute' or 'relative').

<P>The default ('auto') behavior is to stack elements back-to-front
in the order they appear in the document tree.

<P>An integer value for <span
class="propinst-z-index">'z-index'</span> specifies stacking order
for an element relative to its sibling and parent elements:</p>

<ul>
    <li>Sibling elements are stacked bottom-to-top in order of
    increasing <span class="propinst-z-index">'z-index'</span>
    value. Sibling elements with identical <span
    class="propinst-z-index">'z-index'</span> values have unspecified
    relative stacking order.

    <li>Elements that have negative <span
    class="propinst-z-index">'z-index'</span> values are stacked below
    their parent element and elements with positive <span
    class="propinst-z-index">'z-index'</span> values are stacked behind
    their parent element.  In other words, each element that may be positioned
    defines a positioning context for z-order in which their own <span
    class="propinst-z-index">'z-index'</span> is 0.

   <li>A <span class="propinst-z-index">'z-index'</span> value of 0 is
       equivalent to a value of 'auto'.
</ul>

<p>The relative z-order of two elements that are neither siblings
nor parent/child can be determined by evaluation of the above
rules for both elements' ancestors. </p>

<P>By default, a positioned element will be placed just above (in
z-space) its parent in the document tree.

<P>It is not possible to position an element behind a grandparent.

<!--
    - Position relative to cousins (see 3.6 bullets)

    - The same algorithm applies to absolutely positioned elements, but
      who is the parent in this case?
-->

<div class="example"><P>
<P>In the following example, the order of the elements, listed
back-to-front is:</p>

<ul>
    <li>image</li>
    <li>text2</li>
    <li>text1</li>
</ul>

<pre>&lt;STYLE type=&quot;text/css&quot;&gt;
&lt;!--
.pile { position: absolute; left: 2in; top: 2in; width: 3in; height: 3in; }
--&gt;

&lt;IMG src=&quot;butterfly.gif&quot; class=&quot;pile&quot; id=&quot;image&quot; style=&quot;z-index: 1&quot;&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text1&quot; style=&quot;z-index: 3&quot;&gt;
   This text will overlay the butterfly image.
&lt;/DIV&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text2&quot; style=&quot;z-index: 2&quot;&gt;
   This text will underlay text1, but overlay the butterfly image
&lt;/DIV&gt;</pre>
</div>


<p>The previous example demonstrates the notion of transparency. The
default behavior of an element is to allow elements below it to be
visible through transparent areas in its content. In the example, each
element transparently overlays the elements below it. This behavior
can be overridden by utilizing one of the existing background-related
properties like <span class="propinst-background">'background'</span>.</p>

<H2>Multicolumn layout</H2>

<P>Flowing content into several columns is a common way of presenting
text, especially in print. When line lengths are shortened, the font
size and line height can be reduced while maintaining legibility. In
CSS, columns are verical boxes formed in the content area of an
<DFN>column element</DFN>. In HTML, the column element will typically
be of type DIV and its child element will be flowed into the columens.

<P>All columns in a column element have the same width. The UA
should attempt to balance the content so that each column is filled to
the same extent. When breaking elements over several columns, the
<span class="propinst-widows">'widows'</span> and <span
class="propinst-orphans">'orphans'</span> properties should be
consulted.

<P>In a <a href="page.html">paged medium</a>, page breaks may occur
within the column element. This can be due to lack of space, or from
a settin on a page break property of a child element. When this
happens, the column element should be continued on the next page with
the same number of columns.


<P>Between columns there is optionally a column gap and a vertical
column rule.


<!-- #include src=properties/columns.srb -->

<p>The <span class="propinst-columns">'columns'</span> property
determines the number of columns into which the content of the element
will be flowed.  

<P>By specifying a numeric value, a fixed number of columns is set. In
the following example, DIV elements will have three columns:

<PRE CLASS="example">
  DIV { columns: 3 }
</PRE>

<P>By specifying a length value, the UA creates as many columns as
possible within the available space. So, if the available space
increases (for example when the UA window is enlarged), the number of
columns may increase. The number of columns (n) is a function of the
width of the element (w), the desired column width (cw), the column
gap (cg) and the width of the column rule (cr):

<PRE>
  n' = (w + cg + cr) / (cw + cg + cr)
  n = round(n')
</PRE>

<P>See a description of the column gap and column rule below.

<P>Child elements that are flowed into the columns will be "adapted"
by them. Consider this example:

<PRE CLASS="example">
&lt;STYLE>
  DIV {
    columns: 3;
    column-gap: 1em;
  }
  IMG.logo { 
    width: 100%;
  }
&lt;/STYLE>
&lt;BODY>
  &lt;DIV>
    &lt;IMG CLASS="logo">
  &lt;/DIV>
&lt;/BODY>
</PRE>

<P>The percentage value on the <span
class="propinst-width">'width'</span> property refers to the width of
the parent element, but since the IMG element appears inside a column,
the width of the column will take the place of the width of the parent
element.

<!-- #include src=properties/column-gap.srb -->

<P>This property sets the gap between adjacent columns. The initial
value is UA-specific, but should be greater than zero. Negative values
are not allowed.

<!-- #include src=properties/column-rule-width.srb -->
<!-- #include src=properties/column-rule-style.srb -->
<!-- #include src=properties/column-rule-color.srb -->
<!-- #include src=properties/column-rule.srb -->

<P>These properties set the vertical column rule between adjacent
columns. The rule will appear in the middle of the column gap. On each
side of the rule there will be a gap equal to half the specified
column gap.

<P>Vertially, the column rule extend up to, but not including, the
padding area. If there is a border, but no padding the column rule
will abut the border. In this case, the UA should attempt to
gracefully join the column rule and the border.

</BODY>
</HTML>
