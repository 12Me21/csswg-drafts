<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: visuren.src,v 2.44 1998-03-27 10:40:55 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual rendering model</TITLE>
</HEAD>
<BODY>
<H1 align="center"><a name="visual-rendering-model">Visual rendering model</a></H1>

<H2>Introduction to the visual rendering model</H2>

<P>This chapter and the next describe the <span class="index-def"
title="visual rendering model">visual rendering model</span>: how user
agents process the <a href="conform.html#doctree">document tree</a>
for visual <a href="media.html">media</a>.

<P>In the visual rendering model, each element in the document tree
generates zero or more boxes according to the <a href="box.html">box
model</a>. The layout of these boxes is governed by:</p>

<ul>
<li><a href="box.html#box-dimensions">box dimensions</a> and <a
href="#box-gen">type</a>.
<li><a href="#positioning-scheme">positioning scheme</a>
(normal flow, float, and absolute positioning models).
<li>relationships between elements
in the <a href="conform.html#doctree">document tree.</a>
<li>external information (e.g., viewport size, intrinsic
dimensions of images, etc.).
</ul>

<P>The properties defined in this chapter and the next apply to both
<a href="media.html#continuous-media-group">continuous media</a> and
<a href="media.html#paged-media-group">paged media</a>. However, the
meanings of the <a href="box.html#margin-properties">margin
properties</a> vary when applied to paged media (see the <a
href="page.html#page-model">page model</a> for details).

<P>The visual rendering model does not specify all aspects of
formatting (e.g., it does not specify a letter-spacing algorithm). <a
href="conform.html#conformance">Conforming user agents</a> may behave
differently for those formatting issues not covered by this
specification.

<h3>The viewport</h3>

<P>User agents for <a
href="media.html#continuous-media-group">continuous media</a>
generally offer users a <span class="index-def" title="viewport"><a
name="viewport"><dfn>viewport</dfn></a></span> (a window or other
viewing area on the screen) through which users consult a
document. User agents may change the document's layout when the
viewport is resized (see the <a
href="#initial-containing-block">initial containing block</a>).  When
the viewport is smaller than the document's initial containing block,
the user agent should offer a scrolling mechanism.  There is at most
one viewport per <a href="intro.html#canvas">canvas</a>, but user
agents may offer users several views of a document.


<H3><span class="index-def" title="containing block">
<a name="containing-block">Containing blocks</a></span>
</H3>

<P>In CSS2, all box positions are calculated with respect to the edges
of a rectangular box called a <span class="index-def"
title="containing block"><dfn>containing block</dfn></span>.  A box
establishes reference edges for its descendants and is itself
positioned with respect to its containing block. The phrase "a box's
containing block" means "the containing block in which the box lives",
not the one it generates.

<P>Each box is positioned with respect to its containing block, but it
is not confined by this containing block (it may <a
href="visufx.html#overflow">overflow</a>)

<P>The root of the <a href="conform.html#doctree">document tree</a>
generates a box that serves as the <span class="index-def"
title="initial containing block|containing block::initial"><a
name="initial-containing-block"><dfn>initial containing
block</dfn></a></span> for subsequent layout. If the <span
class="propinst-width">'width'</span> property for the root element
has the value 'auto', the user agent supplies an initial width (e.g.,
the user agent uses the current width of the <a
href="#viewport">viewport</a>).  The initial containing block cannot
be positioned or floated (i.e., user agents <a
href="syndata.html#ignore">ignore</a> the <span
class="propinst-position">'position'</span> <span
class="propinst-float">'float'</span> properties for the root
element).

<P>The <a href="visudet.html#containing-block-details">details</a> of
how a containing block's dimensions are calculated are described in
the <a href="visudet.html">next chapter</a>.

<H2><a name="box-gen">Controlling box generation</a></h2>

<P>The following sections describe the types of boxes that may be
generated in CSS2. A box's type affects, in part, its behavior in the
visual rendering model. The <span
class="propinst-display">'display'</span> property, described below,
specifies a box's type.

<H3>Block-level elements and block boxes</h3>

<P><span class="index-def" title="block-level
element"><a name="block-level"><dfn>Block-level elements</dfn></a></span> are those elements of
the source document language that are formatted visually as
blocks (e.g., paragraphs). Several values of the <span
class="propinst-display">'display'</span> property make an element
block-level: 'block', 'list-item', 'compact' and 'run-in' (part of the
time; see <a href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>),
and 'table'.

<P>Block-level elements generate a <span class="index-def"
title="principal block box"><a name="principal-box"><dfn>principal
block box</dfn></a></span> that contains <span class="index-def"
title="block box"><a name="block-box"><dfn>block
boxes</dfn></a></span>. The principal block box establishes the <a
href="#containing-block">containing block</a> for descendant boxes and
is also the box involved in any positioning scheme.  Sibling block
boxes participate in a <a href="#block-formatting">block formatting
context</a>.

<P>Some block-level elements generate additional boxes outside of the
principal box: 'list-item' elements and those with markers. These
additional boxes follow the principal box when it is positioned.

<h4><a name="anonymous-block-level">Anonymous block boxes</a></h4>

<p>In a document like this:

<pre>
&lt;DIV>
  Some text
  &lt;P>Some more text
&lt;/DIV>
</pre>

<p>(and assuming the DIV and the P both have 'display: block'), the
DIV appears to have both inline content and block content. To make it
easier to define the formatting, we assume that there is an <em><span
class="index-def" title="anonymous">anonymous block box</span></em>
around "Some text".

<div class="figure">
<p><img src="images/anon-block.gif" alt="diagram showing the three
boxes for the example above"> <p class="caption">Diagram showing the
three boxes, of which one is anonymous, for the example above
</div>

<p>In other words: if a block box (such as that generated for
the DIV above) has another block box inside it (such as the P
above), then we force it to have <em>only</em> block boxes
inside it, by wrapping any inline boxes in an anonymous block box.

<p>The properties of these anonymous boxes are inherited from the
enclosing non-anonymous box (in the example: the one for
DIV). Non-inherited properties have their initial value. For example,
the font of the anonymous box is inherited from the DIV, but the
margins will be 0.

<H3>Inline-level elements and inline boxes</h3>

<P><span class="index-def" title="inline-level element">
<a name="inline-level"><dfn>Inline-level
elements</dfn></a></span> are those elements of the source document that
do not form new blocks of content; the content is distributed in lines
 (e.g., emphasized pieces of text
within a paragraph, inline images,
etc.). Several values of the <span
class="propinst-display">'display'</span> property make an element
inline: 'inline', 'inline-table', 
'compact' and 'run-in' (part of the time; see <a
href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>). 
Inline-level elements generate <a name="inline-box">inline boxes</a>.  

<P>An <a href="#inline-box">inline</a> box participates in an <a
href="#inline-formatting">inline formatting context</a> with its
siblings and children.

<h4><a name="anonymous">Anonymous inline boxes</a></h4>

<p>In a document like this:

<pre>
&lt;P>Some &lt;EM>emphasized&lt;/em> text
</pre>

<p>The P generates a block box, with several inline boxes inside
it. The box for "emphasized" is an inline box generated by an inline
element (EM), but the other boxes ("Some" and "text") are inline boxes
generated by a block-level element (P). The latter are called <span
class="index-def" title="anonymous inline boxes">anonymous inline
boxes</span>, because they don't have an associated inline-level element.

<p>Such anonymous inline boxes inherit inheritable properties from
their block parent box. Non-inherited properties have their
initial value.

<p>In the example, the color of the anonymous initial boxes is
inherited from the P, but the background is transparent.

<p>If it is clear from the context which type of anonymous box is
meant, both anonymous inline boxes and anonymous block boxes are
simply called anonymous boxes in his specification.

<p>There are more types of anonymous boxes in the <a
href="tables.html#anonymous-boxes">table context</a>.

<H3><a name="compact">Compact boxes</a></h3>

<P>A <span class="index-def" title="compact box"><a name="compact"><dfn>compact
box</dfn></a></span> behaves as follows:</p>

<ul>
<li>If a <a href="#block-box">block</a> box (that does not
float and is not absolutely positioned) 
follows the compact box, the compact box is
formatted like a one-line inline box.  
The resulting box width is compared to one of the side margins of
the block box. 
The choice of left or right margin is determined
by the <span class="propinst-direction">'direction'</span> specified
for the element producing the <a href="#containing-block">
containing block</a> for the compact box and following box.
If the inline box width is less
than or equal to the margin, the inline box is positioned in the
margin as described immediately below.

<li>Otherwise, the compact box behaves like a block box.
</ul>

<P>The compact box is positioned in the margin as follows: it is
outside (to the left or right) of the first <a href="#line-box">line
box</a> of the block, but it affects the calculation of that <a
href="visudet.html#box-height">line box's height</a>. The <span
class="propinst-vertical-align">'vertical-align'</span> property of
the compact box determines the vertical position of the compact box
relative to that line box. The horizontal position of the compact box
is always in the margin of the block box.

<P>An element that cannot be rendered on one line cannot be placed in
the margin of the following block. For example, a 'compact' element in
HTML that contains a &lt;BR&gt; element will always be rendered as a
block box (assuming the default style for BR, which inserts a
newline). For placing multi-line texts in the margin, the <span
class="propinst-float">'float'</span> property is often more adequate.

<div class="html-example">
<p>The following example illustrates a compact box.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;A compact box example&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      DT { display: compact }
      DD { margin-left: 4em }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DL&gt;
      &lt;DT&gt;Short
        &lt;DD&gt;&lt;P&gt;Description goes here.
      &lt;DT&gt;too long for the margin
        &lt;DD&gt;&lt;P&gt;Description goes here.
    &lt;/DL&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<P>This example might be rendered as:

<pre>
<b>short</b>    Description goes here

<b>too long for the margin</b>
         Description goes here
</pre>

<p>The <span class="propinst-text-align">'text-align'</span> property
can be used to align the compact element inside the margin: against
the left edge of the margin ('left'), against the right edge
('right'), or centered in the margin ('center'). The value 'justify'
doesn't apply, and is handled as either 'left' or 'right', depending
on the <span class="propinst-direction">'direction'</span> of the
block-level element in whose margin the compact element is
rendered. ('left' if the direction is 'ltr', 'right' if it is 'rtl'.)

<P>Please consult the section on 
<a href="generate.html#compact-run-in-gen">generated content</a>
for information about how compact boxes interact with generated
content.

<H3><a name="run-in">Run-in boxes</a></h3>

<P>A <span class="index-def" title="run-in box"><dfn>run-in
box</dfn></span> behaves as follows:</p>

<ul>
<li>If a <a href="#block-box">block</a>
box (that does not float and is not
absolutely positioned) follows the run-in
box, the run-in box behaves like an inline child of the block box.  
<li>Otherwise, the run-in box behaves like a block box.
</ul>

<p>A 'run-in' box is useful for run-in headers, as
in this example:

<div class="html-example">
<P>
<pre>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;A run-in box example&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      H3 { display: run-in }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;H3&gt;A run-in heading.&lt;/H3&gt;
    &lt;P&gt;And a paragraph of text that
       follows it.
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<p>This example might be rendered as:

<pre>
  <b>A run-in heading.</b> And a
  paragraph of text that 
  follows it.
</pre>

<p>The properties of the run-in element are inherited from its
parent in the source tree, not from the block box it visually
becomes part of.

<P>Please consult the section on 
<a href="generate.html#compact-run-in-gen">generated content</a>
for information about how run-in boxes interact with generated
content.

<h3><a name="display-prop">The</a> <span
class="propinst-display">'display'</span> property</h3>

<!-- #include src=properties/display.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><span class="index-def" title="'block', definition of"><a
name="value-def-block"><strong>block</strong></a></span>

<dd>This value causes an element to generate a 
principal block box.

<dt><span class="index-def" title="'inline', definition of"><a
name="value-def-inline"><strong>inline</strong></a></span>

<dd>This value causes an element to generate one or more inline boxes.

<dt><span class="index-def" title="'list-item', definition of"><a
name="value-def-list-item"><strong>list-item</strong></a></span>
<dd>This value causes an element to generate a 
principal block box and a list-item marker box.
For example, in HTML, the LI 
element will typically have this <span
class="propinst-display">'display'</span> value.
For information about lists and examples of list formatting,
please consult the section on <a href="lists.html">lists</a>.

<dt><span class="index-def" title="marker', definition of"><a
name="value-def-marker"><strong>marker</strong></a></span> 
<dd>This value declares <a href="generate.html">generated content</a>
before or after a box to be a marker. This value is only useful with
the <a href="generate.html#before-after-content">:before and :after
pseudo-elements</a>, on other elements is interpreted as 'inline'.
Please consult the section on <a
href="generate.html#markers">markers</a> for more information.

<dt><span class="value-def-none"><strong>none</strong></span>

<dd><span class="index-def" title="'none'::as display value">This
value</span> causes an element to generate <b>no</b> boxes in the <a
href="intro.html#rendering-structure">rendering structure</a> (i.e.,
the element has no effect on layout).  Descendant elements do not
generate any boxes either; this behavior <strong>cannot</strong> be
overridden by setting the <span
class="propinst-display">'display'</span> property on the descendants.

<P>Please note that a display of 'none' does not create an invisible
box; it creates no box at all. CSS includes mechanisms that enable an
element to generate boxes in the rendering structure that affect
formatting but are not visible themselves. Please consult the section
on <a href="visufx.html#visibility">visibility</a> for details.

<dt><span class="index-def" title="'run-in', definition of"><a
name="value-def-run-in"><strong>run-in</strong></a></span>
and <span class="index-def" title="'compact', definition of"><a
name="value-def-compact"><strong>compact</strong></a></span>
<dd>These values create either block or 
inline boxes, depending on context. 
Properties apply to run-in and compact boxes based on their
final status (inline-level or block-level).  For example, the <span
class="propinst-white-space">'white-space'</span> property only
applies if the box behaves like a block box.

<dt><span class="index-inst" title="'table'"><a
name="value-inst-table"><strong>table</strong></a></span>, <span
class="index-inst" title="'inline-table'"><a
name="value-inst-inline-table"><strong>inline-table</strong></a></span>, <span
class="index-inst" title="'table-row-group'"><a
name="value-inst-table-row-group"><strong>table-row-group</strong></a></span>,
<span class="index-inst" title="'table-column-group'"><a
name="value-inst-table-column-group"><strong>table-column-group</strong></a></span>,
<span class="index-inst" title="'table-header-group'"><a name="value-inst-table-header-group"><strong>table-header-group</strong></a></span>,
<span class="index-inst" title="'table-footer-group'"><a name="value-inst-table-footer-group"><strong>table-footer-group</strong></a></span>,
<span class="index-inst" title="'table-row'"><a
name="value-inst-table-row"><strong><strong>table-row</strong></strong></a></span>, <span
class="index-inst" title="'table-cell'"><a
name="value-inst-table-cell"><strong><strong>table-cell</strong></strong></a></span>, and <span
class="index-inst" title="'table-caption'"><a
name="value-inst-table-caption"><strong>table-caption</strong></a></span>
<dd>These values cause an element to behave like a table element
(subject to restrictions described in the chapter on <a
href="tables.html">tables</a>).
</dl>

<P>Note that although the <a href="cascade.html#initial-value">initial
value</a> of <span class="propinst-display">'display'</span> is
'inline', rules in the user agent's <a
href="cascade.html#default-style-sheet">default style sheet</a> may <a
href="cascade.html">override</a> this value. See the <a
href="sample.html">sample style sheet</a> for HTML 4.0 in the
appendix.

<div class="example"><P>
<P>Here are some examples of the <span
class="propinst-display">'display'</span> property:

<PRE>
P   { display: block }
EM  { display: inline }
LI  { display: list-item } 
IMG { display: none }      /* Don't display images */
</PRE>
</div>

<P><span class="index-inst" title="conformance"><a
href="conform.html#conformance">Conforming</a></span> HTML user agents
may <span class="index-inst" title="ignore"><a
href="syndata.html#ignore">ignore</a></span> the <span
class="propinst-display">'display'</span> property when specified in
author and user style sheets but must specify a value for it in the <a
href="cascade.html#default-style-sheet">default style sheet</a>.

<h2><a name="positioning-scheme">Positioning schemes</a></h2>

<P>In CSS2, a box may be laid out according to three <span
class="index-def" title="positioning scheme"><dfn>positioning
schemes</dfn></span></p>

<ol>
<li><a href="#normal-flow">Normal flow</a>. In CSS2, normal
flow includes <a href="#block-formatting">block formatting</a>
of <a href="#block-box">block</a> boxes, 
<a href="#inline-formatting">inline formatting</a>
of <a href="#inline-box">inline </a> boxes, <a
href="#relative-positioning">relative positioning</a> of
block or inline boxes, and positioning of
<a href="#compact">compact</a> and <a href="#run-in">run-in</a> boxes.
<li><a href="#floats">Floats</a>. In the float model,
a box is first positioned in the normal flow, then 
taken out of the flow and shifted
to the left or right as far as possible. Content may
flow along the side of a float.
<li><a href="#absolute-positioning">Absolute positioning</a>. 
In the absolute positioning model, a box is removed from
the normal flow entirely (it has no impact on later siblings)
and assigned coordinates with respect to a containing block.
</ol>

<h3><a name="choose-position">Choosing a positioning scheme:</a> <span
class="propinst-position">'position'</span> property</h3>

<P>The <span class="propinst-position">'position'</span> and <span
class="propinst-float">'float'</span> properties determine which CSS2
positioning algorithms are used to calculate the coordinates of a box.

<!-- #include src=properties/position.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><strong>static</strong>

<dd>The box is a normal box, positioned according to the <a
href="#normal-flow">normal flow</a>. The <span
class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> properties do not apply. (The word
"static" may seem confusing&#8212;'fixed' is arguably more static than
'static'&#8212;but "static" was chosen because the expectation is that it
will most often be used in scripts that "animate" elements by
modifying <span class="propinst-top">'top'</span>, <span
class="propinst-left">'left'</span>, <span
class="propinst-bottom">'bottom'</span>, and/or <span
class="propinst-right">'right'</span>.) <!-- Bullshit. The word is
'normal'.  "Hence it should not be implemented as part of a production
system, but may be implemented on an experimental basis." -
Positioning draft -->

<dt><strong>relative</strong>

<dd>The box coordinates are calculated according to the <a
href="#normal-flow">normal flow</a>, then the box is offset <a
href="#relative-positioning">relative</a> to its normal position. When
a box B is relatively positioned, the position of the following box is
calculated as though B were not offset.

<dt><strong>absolute</strong>
<dd> The box coordinates (and possibly size) are assigned
with the <span class="propinst-left">'left'</span>
<span class="propinst-right">'right'</span>, 
<span class="propinst-top">'top'</span>,
and <span class="propinst-bottom">'bottom'</span> properties.
These properties specify offsets with respect to the box's
<a href="#containing-block">containing block</A>. Absolutely
positioned boxes are taken out of the normal flow. This means
they have no impact on the layout of later siblings. Also,
though absolutely positioned boxes have margins, they
do not <a href="box.html#collapsing-margins">collapse</a>
with any other margins.

<dt><strong>fixed</strong>
<dd> The box coordinates are calculated according to the 'absolute'
model, but in addition, the box is <a
href="#fixed-positioning">fixed</a> with respect to some reference. In
the case of <a href="media.html#continuous-media-group">continuous
media</a>, the box is fixed with respect to the <a
href="#viewport">viewport</A> (and doesn't move when scrolled).  In
the case of <a href="media.html#paged-media-group">paged media</a>,
the box is fixed with respect to the page, even if that page is seen
through a <a href="#viewport">viewport</A> (in the case of a
print-preview, for example).  Authors may wish to specify 'fixed' in a
media-dependent way.  For instance, an author may want a box to remain
at the top of the <a href="#viewport">viewport</A> on the screen, but
not at the top of each printed page. The two specifications may be
separated by using an <a href="media.html#at-media-rule">@media
rule</a>, as in:

<div class="example"><P>
<PRE>   
@media screen { 
  H1#first { position: fixed } 
}
@media print { 
  H1#first { position: static }
}
</PRE>   
</div>
</dl>

<H3><a name="position-props">Box offsets</a>: <span
class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span></H3>

<P>The position of a <a href="#relative-positioning">relatively</A>
or <a href="#absolute-positioning">absolutely</A> (including <a
href="#fixed-positioning">fixed</A>) positioned box is established
by four properties:

<!-- #include src=properties/top.srb -->

<P>This property specifies how far a box's top content edge is offset below
the top edge of the box's <a href="#containing-block">containing block</a>.

<!-- #include src=properties/right.srb -->

<P>This property specifies how far a box's right content edge is offset
to the left of the right edge of the box's <a
href="#containing-block">containing block</a>.

<!-- #include src=properties/bottom.srb -->

<P>This property specifies how far a box's bottom content edge is offset
above the bottom of the box's <a href="#containing-block">containing
block</a>.

<!-- #include src=properties/left.srb -->

<P>This property specifies how far a box's left content edge is offset
to the right of the left edge of the box's <a
href="#containing-block">containing block</a>.

<P>The values for the four properties have the following meanings:</p>

<dl>
<dt><strong><span class="value-inst-length">&lt;length&gt;</span></strong>
<dd>The offset is a fixed distance from the reference edge.

<dt><strong><span class="value-inst-percentage">&lt;percentage&gt;</span></strong>

<dd>The offset is a percentage of the containing block's width (for <span class="propinst-left">'left'</span> or <span
class="propinst-right">'right'</span>) or height (for <span
class="propinst-top">'top'</span> and <span
class="propinst-bottom">'bottom'</span>).

<dt><strong>auto</strong>
<dd>The value depends on which of the other properties are 'auto' as
well. See <a href="visudet.html#abs-width">"Width of absolutely positioned boxes"</a>.
<!--
For relatively positioned boxes, this value means '0'.  For
absolutely positioned boxes, the box is first positioned in the normal
flow. The <a href="cascade.html#computed-value">computed value</a> of
the property is calculated with respect to the corresponding side of
the containing block (e.g., <span class="propinst-left">'left'</span>
with respect to the containing block's left side). Then, the box is
taken out of the flow. If an inline-level element's boxes are pulled
out of the flow, the computed offset refers to the position of the
first inline box.
-->
</dl>

<P>For absolutely positioned boxes, the offsets are with respect to
the box's <a href="#containing-block">containing
block</a>. For relatively positioned boxes, the offsets are with
respect to the outer edges of the box itself (i.e., the box is
normally positioned, then offset from that position according to
these properties).

<H2><a name="normal-flow">Normal flow</a></H2> 

<P>Boxes in the normal flow belong to a <span class="index-def"
title="formatting context">formatting context</span>, which may be
block or inline, but not both simultaneously.  <a
href="#block-box">Block</a> boxes participate in a <a
href="#block-formatting">block formatting</a> context.  <a
href="#inline-box">Inline boxes</a> participate in an <a
href="#inline-formatting">inline formatting</a> context.

<h3><a name="block-formatting">Block formatting context</a></h3> 

<P>In a block formatting context, boxes are laid out one after the
other, vertically, beginning at the top of a containing block. The
vertical distance between two sibling boxes is determined by the <span
class="propinst-margin">'margin'</span> properties. Vertical margins
between adjacent block boxes in a block formatting context <a
href="box.html#collapsing-margins">collapse</a>.

<P>In a block formatting context, each box's left outer edge touches
the left edge of the containing block (for right-to-left formatting,
right edges touch).

<P>For information about page breaks in paged media, please consult
the section on <a href="page.html#allowed-page-breaks">allowed
page breaks</a>.

<H3><a name="inline-formatting">Inline formatting context</a></H3>

<P>In an inline formatting context, boxes are laid out horizontally,
one after the other, beginning at the top of a containing
block. Horizontal margins, borders, and padding are respected between
these boxes. They may be aligned vertically in different ways: their
bottoms or tops may be aligned, or the baselines of text within them
may be aligned. The rectangular area that contains the boxes that form
a line is called a <span class="index-def" title="line box"><a
name="line-box"><dfn>line box</dfn></a></span>. The margin between the
first inline box in a line box and the near line box edge is
respected; the same holds for the last inline box and the opposite
line box edge.

<P>The width of a line box is determined by a <A
HREF="#containing-block">containing block</A>.  The height of a line
box is determined by the rules given in the section on <a
href="visudet.html#line-height">line height calculations</a>. A line
box is always tall enough for all of the boxes it contains. However,
it may be taller than the tallest box it contains (if, for example,
boxes are aligned so that baselines line up).  When the height of a
box B is less than the height of the line box containing it, the
vertical alignment of B within the line box is determined by the <span
class="propinst-vertical-align">'vertical-align'</span> property.

<P>When several inline boxes cannot fit within a single line box, they
are distributed among two or more vertically-stacked line boxes. Thus,
a paragraph is a vertical stack of line boxes. Line boxes are stacked
with no vertical separation and they never overlap.

<P>In left-to-right formatting, the left edge of a line box generally
touches the left edge of its containing block (right edges touch in
right-to-left formatting). However, floating boxes may come between
the containing block edge and the line box edge.  Thus, although line
boxes in the same inline formatting context generally have the same
width (that of the containing block), they may vary in width if
available horizontal space is reduced due to <a
href="#floats">floats</a>. Line boxes in the same inline formatting
context generally vary in height (e.g., one line might contain a tall
image while the others contain only text).

<P>When the total width of the boxes on a line is less than the width
of the line box containing them, their horizontal distribution within
the line box is determined by the <span
class="propinst-text-align">'text-align'</span> property.  If that
property has the value 'justify', the user agent may stretch the
inline boxes as well.

<P>Since an inline box may not exceed the width of a line box, long
inline boxes are split into several boxes and these boxes distributed
across several line boxes. When an inline box is split, margins,
borders, and padding have no visual effect where the split occurs.
Rendering of margins, borders, and padding may not be fully defined if
the split occurs within a bidirectional embedding.

<P>Inline boxes may also be split into several boxes <em>within the
same line box</em> due to <a href="#direction">bidirectional text
processing</a>.

<div class="html-example"><P> 
Here is an example of inline box construction. The following paragraph
(created by the HTML block-level element P) contains anonymous text
interspersed with the elements EM and STRONG:

<PRE>
&lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear
&lt;STRONG&gt;in this&lt;/STRONG&gt; sentence, dear.&lt;/P&gt;
</PRE>

<P>The P element generates a block box that contains five inline
boxes, three of which are anonymous:</p>

<ul>
<li>Anonymous: "Several"
<li>EM: "emphasized words"
<li>Anonymous: "appear"
<li>STRONG: "in this"
<li>Anonymous: "sentence, dear."
</ul>
 
<P>To format the paragraph, the user agent flows the five boxes into
line boxes. Since the parent box in normal flow acts as the containing
block for an inline box, the width of the P box determines the width
of these line boxes.  If the width of P is sufficient, all the inline
boxes will fit into a single line box:

<PRE>
 Several <EM>emphasized words</EM> appear <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>If the boxes do not fit within a single line box, they will
be split up and distributed across several line boxes. The previous
paragraph might be split as follows:

<PRE>
Several <EM>emphasized words</EM> appear
<STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>or like this:

<PRE>
Several <EM>emphasized</EM>  
<EM>words</EM> appear <STRONG>in this</STRONG> 
sentence, dear.
</PRE>

</div>

<P>In the previous example, the EM box was split into two EM boxes
(call them "split1" and "split2"). Margins, borders,
padding, or text decorations have no visible effect after split1 or
before split2.

<div class="html-example"><P>
Consider the following example:

<PRE>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Example of inline flow on several lines&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      EM {
        padding: 2px; 
        margin: 1em;
        border-width: medium;
        border-style: dashed;
        line-height: 2.4em;
      }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>Depending on the width of the P, the boxes may be distributed as
follows:</P>

<P><img src="./images/inline-layout.gif"
     alt="Image illustrating the effect of line breaking on the display of margins, borders, and padding."></p>

<ul>
<li> The margin is inserted before "emphasized" and after "words". 

<li> The padding is inserted before, above, and below
"emphasized" and after, above, and below "words". A
dashed border is rendered on three sides in each case.
</ul>
</div>

<P>Note that with a small line height, the padding and borders
around text in different lines may overlap.

<H3><a name="relative-positioning">Relative positioning</a></H3>  

<P>Once a box has been assigned a position according to the <a
href="#normal-flow">normal flow</a>, it may be shifted relative to
this position. This is called <span class="index-def" title="relative
positioning"><dfn>relative positioning</dfn></span>. Offsetting a box
in this way has no effect on the following box: it is positioned as if
the preceding box were not offset and it is not repositioned after the
offset is applied. This implies that relative positioning may cause
boxes to overlap.

<!-- The expression "normal flow shape" is confusing since,
in terms of line boxes, the shape is always rectangular -IJ -->

<p>Relatively positioned boxes keep their normal flow size, including
line breaks and the space originally reserved for them. A relatively
positioned box establishes a new <A
HREF="#containing-block">containing block</A> for descendant
boxes. 

<P>A relatively positioned box is generated when the <span
class="propinst-position">'position'</span> property for an element
has the value 'relative'.  The offset is specified by the <span
class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties.

<P>Dynamic movement of relatively positioned boxes can produce
animation effects in scripting environments (see also the <span
class="propinst-visibility">'visibility'</span> property). Relative
positioning may also be used as a general form of superscripting and
subscripting except that line height is not automatically adjusted to
take the positioning into consideration. See the description of <a
href="visudet.html#line-height">line height calculations</a> for more
information.

<P>Examples of relative positioning are provided in the section <a
href="#comparison">comparing normal, relative, floating, and
absolute positioning</a>.

<H2><a name="floats">Floats</a></H2>

<P>A float is a box that is shifted to the left or right on the
current line. The most interesting characteristic of a floated box is
that content may flow along its side (or be prohibited from doing so
by the <span class="propinst-clear">'clear'</span> property). Content
flows down the right side of a left-floated box and down the left side
of a right-floated box. The following is an introduction to float
positioning and content flow; the exact <a
href="#float-rules">rules</a> governing float behavior are given in
the description of the <span class="propinst-float">'float'</span>
property.

<P>A floated box must have an explicit width (assigned via the <span
class="propinst-width">'width'</span> property, or its intrinsic width
in the case of replaced elements). A floated box becomes a <a
href="#block-box">block box</a> that is shifted to the left or right
until its outer edge touches the containing block edge or the outer
edge of another float. The top of the floated box is aligned with the
top of the current line box (or bottom of the preceding block box if
no line box exists). If there isn't enough horizontal room on the
current line for the float, it is shifted downward, line by line,
until a line has room for it.

<P>Since a float is not in the flow, non-positioned block boxes
created before and after the float box flow vertically as if the float
didn't exist. However, line boxes created next to the float are
shortened to make room for the float.  Any content in the current line
before a floated box is reflowed in the first available
line on the other side of the float.

<P>Several floats may be adjacent, and this model also applies to
adjacent floats in the same line.

<div class="example"><P>
The following rule floats all IMG boxes with
<samp>class="icon"</samp> to the left (and
sets the left margin to '0'):</p>

<PRE>
IMG.icon { 
  float: left;
  margin-left: 0;
}
</PRE>
</div>


<div class="html-example"><P>
Consider the following HTML source and style sheet:</p>

<PRE>  
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;STYLE type="text/css"&gt;
      IMG { float: left }
      BODY, P, IMG { margin: 2em }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;&lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
       Some sample text that has no other...
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The IMG box is floated to the left. The content that follows is
rendered to the right of the float, starting on the same line as the
float. The line boxes to the right of the float are shortened due to
the float's presence, but resume their "normal" width (that of the
containing block established by the P element) after the float.  This
document might be formatted as:</P>

<P><img src="./images/floateg.gif"
     alt="Image illustrating how floating boxes interact with
margins."></p>

<P>Rendering would have been exactly the same if the document had
been:

<PRE>
  &lt;BODY&gt;
    &lt;P&gt;Some sample text 
    &lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
             that has no other...
  &lt;/BODY&gt;
</PRE>

<P>because the content to the left of the float is displaced by
the float and reflowed down its right side.
</div>

<P>The margins of floating boxes never <a
href="box.html#collapsing-margins">collapse</a> with margins of
adjacent boxes. Thus, in the previous example, vertical margins do not
<a href="box.html#collapsing-margins">collapse</a> between the P box
and the floated IMG box.

<p>A float can overlap other boxes in the normal flow (e.g., when a
normal flow box next to a float has negative margins). When an inline
box overlaps with a float, it is rendered in front of the float. When
a block box overlaps, the background and borders of the block box are
"clipped" by the non-transparent parts of the float, but the content
is rendered in front of the float.

<div class="example">
<p>Here is another illustration, showing what happens when a float
overlaps borders of elements in the normal flow.

<div class="figure">
<p><img src="images/float2p.gif" alt="Image showing a floating image
that overlaps the borders of two paragraphs: the borders are
interrupted by the image.">

<p class="caption">The floating image is larger than the block that it
is a child of, so it interrupts the border of the block, and also the
border of the next block. Borders are "clipped" by floats".
</div>
</div>

<P>The following example illustrates the use of the <span
class="propinst-clear">'clear'</span> property to prevent content
from flowing next to a float.

<div class="example"><P>
This style rule means that no H1 element may have a floating
element to its left; this means that H1 elements will
be positioned below any left floating box.

<PRE>
H1 { clear: left }
</PRE>
</div>

<div class="example">
<p>Here is an example illustrating the effect of 'clear: left' on two
paragraphs. Assuming a rule such as this:

<pre>
P {clear: left }
</pre>

<P>a rendering might look like this:

<div class="figure">
<p><img src="images/floatclear.gif" alt="Image showing a floating
image and the effect of 'clear: left' on the two paragraphs.">

<p class="caption">Both paragraphs have set 'clear: left', which
causes the second paragraph to be "pushed down" to a position below
the float.
</div>
</div>


<h3><a name="float-position">Positioning the float:</a> the
<span class="propinst-float">'float'</span> property</h3>

<!-- #include src=properties/float.srb -->

<P>This property specifies whether a box should float to the left,
right, or not at all. It may be set for elements that generate boxes
that are not positioned absolutely (i.e., not 'absolute' or 'fixed').
The values of this property have the following meanings:</p>

<dl>
<dt><strong>left</strong>

<dd>The element generates a <a href="#block-box">block</a> box that is
floated to the left. Content flows on the right side of the box,
starting at the top (subject to the <span
class="propinst-clear">'clear'</span> property). The <span
class="propinst-display">'display'</span> is ignored, unless it has
the value 'none'.

<dt><strong>right</strong>

<dd>Same as 'left', but content flows on the left side of the box,
starting at the top.

<dt><strong>none</strong>

<dd>Has no effect on the generated box.
</dl>


<P><span class="index-def" title="float rules"><a
name="float-rules">Here are the precise rules</a></span> that
govern the behavior of floats:</p>

<OL>
<LI> The left <a href="box.html#outer-edge">outer edge</a> of a
left-floating box may not be to the left of the left edge of its <a
href="#containing-block">containing block</a>. An
analogous rule holds for right-floating elements.

<LI> If the current box is left-floating, and there are any left
floating boxes generated by elements earlier in the source document,
then for each such earlier box, either the left <a
href="box.html#outer-edge">outer edge</a> of the current box must be
to the right of the right <a href="box.html#outer-edge">outer edge</a>
of the earlier box, or its top must be lower than the bottom of the
earlier box. Analogous rules hold for right-floating boxes.

<LI>The right <a href="box.html#outer-edge">outer edge</a> of a
left-floating box may not be to the right of the left <a
href="box.html#outer-edge">outer edge</a> of any right-floating
box that is to the right of it. Analogous rules hold for
right-floating elements.

<LI>A floating box's <a href="box.html#outer-edge">outer top</a>
may not be higher than the top of its <a
href="#containing-block">containing block</a>.

<LI> The <a href="box.html#outer-edge">outer top</a> of a floating box
may not be higher than the outer top of any <a
href="#block-box">block</a> or <a
href="#floats">floated</a> box generated by an element
earlier in the source document.

<LI>The <a href="box.html#outer-edge">outer top</a> of an element's
floating box may not be higher than the top of any <span
class="index-inst" title="line-box"><a
href="#line-box">line-box</a></span> containing a box
generated by an element earlier in the source document.

<LI> A floating box must be placed as high as possible.

<LI> A left-floating box must be put as far to the left as
possible, a right-floating box as far to the right as possible. A
higher position is preferred over one that is further to the
left/right.
</OL>

<H3><a name="flow-control">Controlling flow next to floats:</a>
the <span class="propinst-clear">'clear'</span> property</H3> 

<!-- #include src=properties/clear.srb -->

<P>This property indicates which sides of an element's box(es) may
<em>not</em> be adjacent to an earlier floating box. (It may be that
the element itself has floating descendants; the <span
class="propinst-clear">'clear'</span> property has no effect on
those.)

<p>This property may only be specified for <a
href="#block-level">block-level</a> elements (including floats).  For
<a href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>,
this property applies to the final block box to which the compact or
run-in box belongs.

<P>Values have the following meanings when applied to non-floating
block boxes:</P>

<dl>
<dt><strong>left</strong>

<dd>The top margin of the generated box is increased enough that the
top border edge is below the bottom outer edge of any left floating
boxes that resulted from elements earlier in the source document.

<dt><strong>right</strong>

<dd>Same as left, but with respect to right floating boxes.

<dt><strong>both</strong>

<dd>The generated box is moved below all floating
boxes of earlier elements in the source document..

<dt><strong>none</strong>

<dd>No constraint on the box's position with respect to floats.
</dl>

<p>When the property is set on floating elements, it results in a
modification of the <a href="#float-rules">rules</a> for
positioning the float. An extra constraint (#9) is added:

<ul>
<li>The top outer edge of the float must be below the bottom outer
edge of all earlier left floating boxes (in the case of 'clear:
left'), or all earlier right floating boxes (in the case of 'clear:
right'), or both ('clear: both').
</ul>
 

<H2><a name="absolute-positioning">Absolute positioning</a></H2>

<P>In the absolute positioning model, a box is assigned explicit
coordinates with respect to its containing block.  It is removed from
the normal flow entirely (it has no impact on later siblings).  Like
other boxes, an absolutely positioned box establishes a new containing
block for descendant boxes.  However, the contents of an absolutely
positioned element do not flow around any other boxes. They may or may
not obscure the contents of another box, depending on the <a
href="#stack-level">stack levels</a> of the overlapping boxes.

<H3><a name="fixed-positioning">Fixed positioning</a></H3>

<P>Fixed positioning is a variant of absolute positioning. The only
difference is that for a fixed positioned box, the containing block is
established by the <a href="#viewport">viewport</A>.  For <a
href="media.html#continuous-media-group">continuous media</a>, fixed
boxes do not move when the document is scrolled. In this respect, they
are similar to <a href="colors.html#background-properties">fixed
background images</a>.  For <a href="page.html">paged media</a>, boxes
with fixed positions are repeated on every page. This is useful for
placing, for instance, a signature at the bottom of each page.

<div class="html-example">
<P>Authors may use fixed positioning to create frame-like presentations.
Consider the following frame layout:</P>

<P><img src="./images/frame.gif"
     alt="Image illustrating a frame-like layout with position='fixed'."></p>

<P>This might be achieved with the following HTML document and
style rules:</P>

<PRE>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;A frame document with CSS2&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      #header {
        position: fixed;
        width: 100%;
        height: 15%;       
        top: 0;
        right: 0;
        bottom: auto;
        left: 0;
      }
      #sidebar {
        position: fixed;
        width: 10em;
        height: auto;
        top: 15%;
        right: auto;
        bottom: 100px;
        left: 0;
      }
      #main {
        position: fixed;
        width: auto;
        height: auto;
        top: 15%;
        right: 0;
        bottom: 100px;
        left: 10em;
      }
      #footer {
        position: fixed;
        width: 100%;
        height: 100px;
        top: auto;
        right: 0;
        bottom: 0;
        left: 0;
      }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DIV id="header"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="sidebar"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="main"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="footer"&gt; ...  &lt;/DIV&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<h2>Relationships between 'display', 'position', and 'float'</h2>

<P>When specified for the same elements, the three properties that
affect box generation and layout -- <span
class="propinst-display">'display'</span>, <span
class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> -- interact according to the
following precedences (highest to lowest):</p>

<ol>
<li>If <span class="propinst-display">'display'</span>
has the value 'none',
user agents must <a href="syndata.html#ignore">ignore</a>
<span class="propinst-position">'position'</span> and
<span class="propinst-float">'float'</span>. In this
case, the element generates no box.

<li>Otherwise, if <span class="propinst-position">'position'</span>
has the value 'absolute' or 'fixed', the generated box will be
non-floating and block. The position of the box will be
determined by the <span class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span> and <span
class="propinst-left">'left'</span> properties and the box's containing
block.

<li>Otherwise, if 
<span class="propinst-float">'float'</span> has a value
other than 'none', the generated box is a block box and is floated.

<li>Otherwise, the remaining <span
class="propinst-display">'display'</span> properties apply
as specified.
</ol>

<div class="note"><P>
<em><strong>Note.</strong> CSS2 does not
specify layout behavior when values for these properties are changed
by scripts.  For example, what happens when an element having 'width:
auto' is repositioned? Do the contents reflow, or do they maintain
their original formatting?  The answer is outside the scope of this
document, and such behavior is likely to differ in initial
implementations of CSS2.
</em>
</div>

<H2><a name="comparison">Comparison of normal flow, floats,  
and absolute positioning</a></H2>
<P>To illustrate the relationship between normal flow, relative
positioning, floats, and absolute positioning, we provide a series of
examples based on the following HTML fragment:

<pre class="html-example">
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Comparison of positioning schemes&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;Beginning of body contents.
      &lt;SPAN id="outer"&gt; Start of outer contents.
      &lt;SPAN id="inner"&gt; Inner contents.&lt;/SPAN&gt;
      End of outer contents.&lt;/SPAN&gt;
      End of body contents.
    &lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<p>The final positions of boxes generated by the <em>outer</em> and
<em>inner</em> elements vary in each example. In each illustration,
the numbers to the left of the illustration indicate the <a
href="#normal-flow">normal flow</a> position of the double-spaced (for
clarity) lines. (Note: the illustrations use different horizontal and
vertical scales.)</p>

<H3>Normal flow</H3>

<p>Consider the following CSS declarations for <em>outer</em> and
<em>inner</em> that don't alter the <a href="#normal-flow">normal
flow</a> of boxes:</p>

<PRE>
#outer { color: red }
#inner { color: blue }
</PRE>

<p>This results in something like the following:</p>

<P><img src="./images/flow-generic.gif"
     alt="Image illustrating the normal flow of text between parent and sibling boxes."></p>

<H3>Relative positioning</H3>

<P>To see the effect of <a href="#relative-positioning">relative
positioning</a>, consider the following CSS rules:

<PRE>
BODY { line-height: 200% }
#outer { position: relative; top: -12px; color: red }
#inner { position: relative; top: 12px; color: blue }
</PRE>

<p>First, the <em>outer</em> text is flowed into its normal flow
position and dimensions at the end of line 1. Then, the inline boxes
containing the text (distributed over three lines) are shifted as a
unit upwards by 12px.

<P>The contents of <em>inner</em>, as a child of <em>outer</em>, would
normally flow immediately after the words "of outer contents" (on line
1.5). However, the <em>inner</em> contents are themselves offset
relative to the <em>outer</em> contents by 12px downwards, back to
their original position on line 2.

<P>Note that the content following <em>outer</em> is not affected by the
relative positioning of <em>outer</em>.</P>

<P><img src="./images/flow-relative.gif"
     alt="Image illustrating the effects of relative positioning on a box's content."></p>

<P>Note also that if the relative positioning of <em>outer</em> were -24px, the
text of <em>outer</em> and the body text would have overlapped.

<H3>Floating a box</H3>

<P>Now consider the effect of <a href="#floats">floating</a> the
<em>inner</em> element's text to the right by means of the following
rules:

<PRE>
#outer { color: red }
#inner { float: right; width: 130px; text-align: top; color: blue }
</PRE>

<P>First, the <em>inner</em> box (whose width has been set explicitly)
is floated to the right margin. Then, the text of the <em>outer</em>
element that follows the inner element text flows in the space vacated
by the <em>inner</em> box. This flow respects the new right margin
established by the left border of the <em>inner</em> box.</P>

<P><img src="./images/flow-float.gif"
     alt="Image illustrating the effects of floating a box."></p>

<P>To show the effect of the <span
class="propinst-clear">'clear'</span> property, we add a <em>sibling</em>
element to the example:

<PRE class="html-example">
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Comparison of positioning schemes II&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;Beginning of body contents.
      &lt;SPAN id=outer&gt; Start of outer contents.
      &lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;
      &lt;SPAN id=sibling&gt; Sibling contents.&lt;/SPAN&gt;
      End of outer contents.&lt;/SPAN&gt;
      End of body contents.
    &lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The following rules:

<PRE class="example">
  #inner { float: right; width: 130px; 
           text-align: top; color: blue }
  #sibling { color: red }
</PRE>

<P>cause the <em>inner</em> box to float to the right and the text of
the <em>sibling</em> element to flow in the vacated space:</P>

<P><img src="./images/flow-clear.gif"
     alt="Image illustrating the effects of floating a box without setting the clear property to control the flow of text around the box."></p>

<P>However, if the <span class="propinst-clear">'clear'</span>
property on the <em>sibling</em> element is set to 'right' (i.e., the
generated <em>sibling</em> box will not accept being positioned next
to floating boxes to its right), the <em>sibling</em> box is
moved below the float:

<PRE class="example">
  #inner { float: right; width: 130px; 
           text-align: top; color: blue }
  #sibling { clear: right; color: red }
</PRE>

<P><img src="./images/flow-clear2.gif" 
alt="Image illustrating the effects of floating an element with setting the clear property to control the flow of text around the element."></p>

<H3>Absolute positioning</H3>

<p>Finally, we consider the effect of <a
href="#absolute-positioning">absolute positioning</a>.
Consider the following CSS declarations for <em>outer</em> and
<em>inner</em>:</p>

<PRE class="example">
  #outer { 
    position: absolute; 
    top: 200px; 
    left: 200px; 
    width: 200px; 
    color: red;
  }
  #inner { color: blue }
</PRE>

<p>which cause the top of the <em>outer</em> box to be positioned with
respect to the containing block (which we suppose is established
by the <a href="#initial-containing-block">initial
containing block</a>).
The top side of the <em>outer</em> box is 200px from
the top of the containing block and the left side is 200px from the
left side. The child box of <em>outer</em> is flowed normally with
respect to its parent.</P>

<P><img src="./images/flow-absolute.gif"
   alt="Image illustrating the effects of absolutely positioning a box."></p>

<P>Note that because <em>outer</em> has been absolutely positioned, it
establishes a new containing block for descendant boxes.

<p>The following example shows an absolutely positioned box that
is a child of a relatively positioned box. Although the parent
<em>outer</em> box is not actually offset, setting its <span
class="propinst-position">'position'</span> property to 'relative'
causes its box to serve as the containing block for any descendant
boxes. Since the <em>outer</em> box is an inline box that is split
across several lines, only the first box (whose upper left-hand corner
is designated by a "@" in the illustration below) establishes the
containing block for the descendants.

<PRE class="example">
  #outer { 
    position: relative; 
    color: red 
  }
  #inner { 
    position: absolute; 
    top: 200px; 
    left: -100px; 
    height: 130px; 
    width: 130px; 
    color: blue;
  }
</PRE>

<p>This results in something like the following:</p>

<P><img src="./images/flow-abs-rel.gif"
     alt="Image illustrating the effects of absolutely positioning a
box with respect to a containing block."></p>

<P>The following rules don't establish a new positioning
context for <em>inner</em>:

<PRE class="example">
  #outer { color: red }
  #inner {
    position: absolute; 
    top: 200px; 
    left: -100px; 
    height: 130px; 
    width: 130px; 
    color: blue;
  }
</PRE>

<P>but cause the <em>inner</em> box to be positioned with respect to
the containing block (which we assume here is
<a href="#initial-containing-block">initial
containing block</a>).

<P><img src="./images/flow-static.gif"
     alt="Image illustrating the effects of absolutely positioning a box with respect to a coordinate system established by a normally positioned parent."></p>

<P>Relative and absolute positioning may be used to implement change
bars, as shown in the following example. We use a value of 'auto' for
the <span class="propinst-top">'top'</span> property, which results in
the box being placed at the "current" location, just as if the box
were being flowed into that space. The following HTML text:</p>

<pre>
&lt;P style=&quot;position: relative; margin-right: 10px; left: 10px;&quot;&gt;
I used two red hyphens to serve as a change bar. They
will &quot;float&quot; to the left of the line containing THIS
&lt;SPAN style=&quot;position: absolute; top: auto; left: 0px; color: red;&quot;&gt;--&lt;/SPAN&gt;
word.&lt;/P&gt;
</pre>

<p>might result in something like:</p>

<P><img src="./images/changebar.gif"
     alt="Image illustrating the use of floats to create a changebar effect."></p>

<!-- How do you put the hyphens in the RIGHT margin? BB -->

<H2>Layered presentation</H2>
<P><em>In the following sections, the expression "in front of" 
means closer to the user as the user faces the screen.</em></P>

<P>In CSS2, each box has a position in three dimensions. In addition
to their horizontal and vertical positions, boxes lie along a "z-axis"
and are rendered one on top of the other.  Z-axis positions are
particularly relevant when boxes overlap visually. This section
discusses how boxes may be positioned along the z-axis.


<P>Each box belongs to one <span class="index-def" title="stacking
context"><dfn>stacking context</dfn></span>. Each box in a given
stacking context has an integer <span class="index-def" title="stack
level"><a name="stack-level"><dfn>stack level</dfn></a></span>, which
is its position on the z-axis relative to other boxes in the same
stacking context.  Boxes with greater stack levels are always rendered
in front of boxes with lower stack levels.  Boxes may have negative
stack levels.  Boxes with the same stack level in a stacking context
are stacked bottom-to-top according to document tree order.

<!-- Say depth-first traversal? -IJ --> 

<P>The <a href="conform.html#root">root</a> element creates a <span
class="index-def" title="root stacking context"><dfn>root stacking
context</dfn></span>, but other elements may establish <span
class="index-def" title="local stacking context"><dfn>local stacking
contexts</dfn></span>. Stacking contexts are inherited. A local
stacking context is atomic; boxes in other stacking contexts may not
come between any of its boxes.

<P>An element that establishes a local stacking context generates a
box that has two stack levels: one for the stacking context it creates
(always '0') and one for the stacking context to which it belongs
(given by the <span class="propinst-z-index">'z-index'</span>
property).

<P>An element's box has the same stack level as its parent's box
unless given a different stack level with the <span
class="propinst-z-index">'z-index'</span> property.

<H3><a name="z-index">Specifying the stack level</a>: the <span
class="propinst-z-index">'z-index'</span> property</H3> 

<!-- #include src=properties/z-index.srb -->

<p>For an absolutely or relatively positioned box, the <span
class="propinst-z-index">'z-index'</span> property specifies:

<ol>
<li>The stack level of the box in the current stacking context.
<li>Whether the box establishes a local stacking context.
</ol>

<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;integer&gt;"><span
class="value-inst-integer"><strong>&lt;integer&gt;</strong></span></span>
<dd>This integer is the stack level of the generated box
in the current stacking context. The box 
also establishes a local stacking context in which its stack
level is '0'.
<dt><strong>auto</strong>
<dd>The stack level of the generated box in the current stacking
context is the same as its parent's box. The
box does not establish a new local stacking context.
</dl>

<div class="html-example"><P>
<P>In the following example, the stack levels of
the boxes (named with their "id" attributes) are:
"text2"=0, "image"=1, "text3"=2, and "text1"=3. The
"text2" stack level is inherited from the root box. The
others are specified with the <span
class="propinst-z-index">'z-index'</span> property.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Z-order positioning&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      .pile { 
        position: absolute; 
        left: 2in; 
        top: 2in; 
        width: 3in; 
        height: 3in; 
      }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG id="image" class="pile" 
           src="butterfly.gif" alt="A butterfly image"
           style="z-index: 1"&gt;

    &lt;DIV id="text1" class="pile" 
         style="z-index: 3"&gt;
      This text will overlay the butterfly image.
    &lt;/DIV&gt;

    &lt;DIV id="text2"&gt;
      This text will be beneath everything.
    &lt;/DIV&gt;

    &lt;DIV id="text3" class="pile" 
         style="z-index: 2"&gt;
      This text will underlay text1, but overlay the butterfly image
    &lt;/DIV&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>


<p>This example demonstrates the notion of
<em>transparency</em>. The default behavior of a box is to allow boxes
behind it to be visible through transparent areas in its content. In
the example, each box transparently overlays the boxes below it. This
behavior can be overridden by using one of the existing
<a href="colors.html#background-properties">
background properties</a>.


<!-- Proposed text for z-index:

<p>'Z-index' determines the stacking order of overlapping boxes. The
z-index is not an absolute number, but only determines the order of an
element's boxes among its siblings' boxes.

<p>'Z-index' doesn't apply to floating elements. How floating elements
overlap with other elements is specified in the section on floats.

<p>Elements with higher z-index are "in front of" sibling elements
with lower z-index. In other words, if two boxes overlap, the one with
the higher z-index obscures the one with the lower z-index. The
background and border of the parent are considered to be at z-index 0.

<p>If an element is in front of another element, than so are all its
descendants. This (recursive) rule allows one to find the overall
stacking order of all boxes.

<p>Negative values are possible, and mean that the element is behind
its parent.

<p>If two boxes with equal z-index overlap, then the one that comes
later in the source order is in front.

<p>UAs that do progressive rendering may (but should not) treat the
'z-index' of boxes in the normal flow (i.e., those with 'position'
'static') as zero.

-->



<h2><a name="direction">Text direction:</a>
the <span class="propinst-direction">'direction'</span>
and <span class="propinst-unicode-bidi">'unicode-bidi'</span>
properties
</h2>

<P>The characters in certain scripts are written from right to left.
In some languages, in particular those written with the Arabic or
Hebrew script, and in some mixed-language contexts, text in a single
(visually displayed) block can therefore appear with mixed
directionality. This phenomenon is called <span class="index-def"
title="bidirectionality (bidi)"><dfn>bidirectionality</dfn></span>, or
"bidi" for short. For an introduction to bidirectionality issues,
please consult the HTML 4.0 specification ([[HTML40]], section 8.2).

<P>The Unicode ([[UNICODE]]) specification assigns directionality to
characters and defines a complex algorithm for determining the
proper directionality of text.  The <span
class="propinst-direction">'direction'</span> and <span
class="propinst-unicode-bidi">'unicode-bidi'</span> properties allow
authors to specify how the elements and attributes of a document language
correspond to units of the Unicode bidi algorithm.

<P>Because the directionality of a text depends on the structure and
semantics of the <a href="conform.html#doclanguage">document
language</a>, these properties should in most cases be used only by
designers of document type descriptions (DTDs), or authors of special
documents.  A typical exception would be to override bidi behavior in
a user agent if that user agent transliterates Yiddish (usually
written with Hebrew letters) to Latin letters at the user's request.

<P>If a document contains right-to-left characters, and if the user
agent displays these characters (with appropriate glyphs, not
arbitrary substitutes such as a question mark, a hex code, a black
box, etc.), the user agent must apply the bidirectional algorithm.
This seemingly one-sided requirement reflects the fact that, although
not every Hebrew or Arabic document contains mixed-directionality
text, such documents are much more likely to contain left-to-right
text (e.g., numbers, text from other languages) than are documents
written in left-to-right languages.

<P><a href="conform.html#conformance">Conforming</a> HTML user agents
may ignore the <span class="propinst-direction">'direction'</span> and
<span class="propinst-unicode-bidi">'unicode-bidi'</span> properties
in author and user style sheets but must behave as if they used the
style sheet fragment given <a href="#html40-bidi">below</a>.

<!-- #include src=properties/direction.srb -->

<P>This property specifies the direction of inline box flow, embedded
text direction (see <span
class="propinst-unicode-bidi">'unicode-bidi'</span>), <a
href="tables.html">table</a> column layout, and content <a
href="visufx.html#overflow">overflow</a>.

<P>Values for this property have the following meanings:</P>

<dl>
<dt><strong>ltr</strong> 
<dd>Left-to-right direction.
<dt><strong>rtl</strong>
<dd> Right-to-left direction.
</dl>

<!-- #include src=properties/unicode-bidi.srb -->

<P>The writing direction of text within an inline box depends on two
factors:</p>

<ol>
<li>The directionality of the characters, as specified in 
the Unicode specification ([[UNICODE]]).
<li>The value of the <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property
(in conjunction with the value of the <span
class="propinst-direction">'direction'</span> property).
</ol>

<P>User agents following the bidirectional algorithm will display
characters in the correct writing direction automatically, except when
elements with reversed writing direction are embedded more than one
level deep. In such cases, authors must assist the user agent by
signaling that an element opens a new level of embedding with respect
to the bidirectional algorithm. 

<P>Thus, values for <span
class="propinst-unicode-bidi">'unicode-bidi'</span> have the following
meanings:</p>

<dl>
<dt><strong>normal</strong>
<dd>The element does not open an additional level of embedding with
respect to the bidirectional algorithm. For inline-level elements,
implicit reordering works across element boundaries.


<dt><strong>embed</strong>

<dd>The element opens an additional level of embedding with respect to
the bidirectional algorithm. The direction of this embedding level is
given by the <span class="propinst-direction">'direction'</span>
property. Inside the element, reordering is done implicitly.

<dt><strong>bidi-override</strong>

<dd>Like 'embed', the element opens an additional level of embedding
with respect to the bidirectional algorithm and the direction of this
embedding level is given by the <span
class="propinst-direction">'direction'</span> property.  However,
inside the element, reordering is strictly in sequence according to
the <span class="propinst-direction">'direction'</span> property;
this value overrides the implicit bidirectional algorithm.
</dl>

<P>For the <span class="propinst-direction">'direction'</span>
property to have any effect on inline-level elements, the <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property must have
as value either 'embed' or 'override'.

<P>If a default style sheet specifies values for <span
class="propinst-unicode-bidi">'unicode-bidi'</span>, authors and users
should not specify rules to override them.

<!-- Should the above be must? Should mention be made of the
cascade? -IJ -->

<p>The following example shows an XML document with bidirectional
text. It illustrates an important design principle: <span
class="index-inst" title="DTD">DTD</span> designers should take bidi
into account both in the language proper (elements and attributes) and
in any accompanying style sheets. The style sheets should be designed
so that bidi rules are separate from other style rules. The bidi rules
should not be overridden by other style sheets so that the 
document language's or DTD's bidi behavior is preserved.

<div class="example"><P>
In this example, 
lowercase letters stand for inherently left-to-right characters and
uppercase letters represent inherently right-to-left characters:

<pre class="xml-example">
&lt;HEBREW&gt;
  &lt;PAR&gt;HEBREW1 HEBREW2 english3 HEBREW4 HEBREW5&lt;/PAR&gt;
  &lt;PAR&gt;HEBREW6 &lt;EMPH&gt;HEBREW7&lt;/EMPH&gt; HEBREW8&lt;/PAR&gt;
&lt;/HEBREW&gt;
&lt;ENGLISH&gt;
  &lt;PAR&gt;english9 english10 english11 HEBREW12 HEBREW13&lt;/PAR&gt;
  &lt;PAR&gt;english14 english15 english16&lt;/PAR&gt;
  &lt;PAR&gt;english17 &lt;HE-QUO&gt;HEBREW18 english19 HEBREW20&lt;/HE-QUO&gt;&lt;/PAR&gt;
&lt;/ENGLISH&gt;
</pre>

<p>Since this is XML, the style sheet is responsible for setting the
writing direction. This is the style sheet:</p>

<pre class="example">
/* Rules for bidi */
HEBREW, HE-QUO  {direction: rtl; unicode-bidi: embed}
ENGLISH         {direction: ltr; unicode-bidi: embed} 

/* Rules for presentation */
HEBREW, ENGLISH, PAR  {display: block}
EMPH                  {font-weight: bold}
</pre>

<p>The HEBREW element is a block with a right-to-left base direction,
the ENGLISH element is a block with a left-to-right base
direction. The PARs are blocks that inherit the base direction from
their parents. Thus, the first two PARs are read starting at the top
right, the final three are read starting at the top left.

<p>The EMPH element is inline-level, and since its value for <span
class="propinst-unicode-bidi">'unicode-bidi'</span> is 'normal' (the
initial value), it has no effect on the ordering of the text. The
HE-QUO element, on the other hand, creates an embedding.

<p>The rendering of this text might look like this if the line length
is long:

<pre class="ascii-art">
               5WERBEH 4WERBEH english3 2WERBEH 1WERBEH

                                8WERBEH <b>7WERBEH</b> 6WERBEH

english9 english10 english11 13WERBEH 12WERBEH

english14 english15 english16

english17 20WERBEH english19 18WERBEH
</pre>

<p>Note that the HE-QUO embedding causes HEBREW18 to be to the right
of english19.

<p>If lines have to be broken, it might be more like this:

<pre class="ascii-art">
       2WERBEH 1WERBEH
  -EH 4WERBEH english3
                 5WERB

   -EH <b>7WERBEH</b> 6WERBEH
                 8WERB

english9 english10 en-
glish11 12WERBEH
13WERBEH

english14 english15
english16

english17 18WERBEH
20WERBEH english19
</pre>

<p>Because HEBREW18 must be read before english19, it is on the line
above english19. Just breaking the long line from the earlier
rendering would not have worked. Note also that the first syllable
from english19 might have fit on the previous line, but hyphenation of
left-to-right words in a right-to-left context, and vice versa, is
usually suppressed to avoid having to display a hyphen in the middle
of a line.

<P>Note that the default style sheet "states" that the HEBREW, HE-QUO,
and ENGLISH elements all create embeddings. This bidi behavior
should be preserved even if a user decides to change 'display: inline'
for these elements. The rules that specify 'unicode-bidi: embed'
achieve this as long as they are not overridden by user rules.
</div><!-- example -->

<h3>Interaction between inline flow and text direction</h3>

<P>The <span class="propinst-direction">'direction'</span> property
determines the direction of several types of flow:</p>

<ol>
<li>When set for a block-level element, it specifies the base writing
direction of inline text generated by the element. It also
determines the position of an incomplete last line in a block
in case of 'text-align: justify'.

<li> When set for an inline-level element, in coordination with a value of
'embed' or 'bidi-override' for the <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property, it
specifies an additional embedding level.

<li>When set for a table element, it specifies the direction of table
column layout. <strong>Note.</strong> The <span
class="propinst-direction">'direction'</span>, when specified for
table column elements, is not inherited by cells in the column since
columns don't exist in the document tree. Thus, CSS cannot easily
capture the "dir" attribute inheritance rules described in [[HTML40]],
section 11.3.2.1.


<li> It specifies the direction of horizontal overflow.
</ol>

<P>In order to ensure the proper application of the bidirectional
algorithm, inline boxes (including anonymous inline boxes) must be
constructed, split up if necessary, and flowed so that the final order
of the characters on each line conforms to the Unicode bidirectional
algorithm. This means that left-to-right character sequences and
right-to-left character sequences can occur within an element's
content, but inline boxes are constructed so that
flow remains in one direction. Non-textual entities such as
images are treated as neutral characters, unless their <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property has a
value other than 'normal', in which case they are treated as strong
characters in the <span class="propinst-direction">'direction'</span>
specified for the element.

<div class="bidi-example"><P>
For instance, suppose that in the middle
of a paragraph of Hebrew (right-to-left) text, we
embed an English quotation:</p>

<!--
<pre class="html-example">
&lt;P lang="he"&gt;WERBEH WERBEH WERBEH WERBEH WERBEH
WERBEH WERBEH WERBEH WERBEH WERBEH 
WERBEH WERBEH WERBEH &lt;SPAN lang="en"&gt;English
quote here&lt;/SPAN&gt; WERBEH WERBEH&lt;/&gt;
</pre>
Error in PR, fix is below. BB -->
<pre class="html-example">
&lt;P lang="he"&gt;HEBREW HEBREW HEBREW HEBREW HEBREW
HEBREW HEBREW HEBREW HEBREW HEBREW 
HEBREW HEBREW HEBREW &lt;SPAN lang="en"&gt;English
quote here&lt;/SPAN&gt; HEBREW HEBREW&lt;/&gt;
</pre>

<P>The right-to-left flow of Hebrew
text stops at the asterisk (*) in the following diagram:</p>

<PRE> 
WERBEH WERBEH WERBEH WERBEH WERBEH
WERBEH WERBEH WERBEH WERBEH WERBEH
             *WERBEH WERBEH WERBEH
</PRE>

<P>While inline flow continues right-to-left after the asterisk,
the English text is laid out left-to-right. Thus, successive
letters will fill in the available space as follows:</p>

<PRE>
            E *WERBEH WERBEH WERBEH
           En *WERBEH WERBEH WERBEH
          Eng *WERBEH WERBEH WERBEH
         Engl *WERBEH WERBEH WERBEH
        Engli *WERBEH WERBEH WERBEH
       Englis *WERBEH WERBEH WERBEH
</PRE>

<P>Etc., onto the following line:</p>

<PRE>
English quote *WERBEH WERBEH WERBEH
                                  h

English quote *WERBEH WERBEH WERBEH
                                 he

English quote *WERBEH WERBEH WERBEH
                                her

English quote *WERBEH WERBEH WERBEH
                               here
</PRE>

<P>Hebrew text continues to flow right-to-left at the
end of the English text.
</div>

<h3><a name="html40-bidi">Bidirectionality in HTML 4.0</a></h3>

<P>In order to preserve the expected behavior of HTML 4.0 elements,
their bidirectionality must be preserved <em>however they are
rendered</em>. For example, people expect paragraphs to behave like a
block with respect to bidirectionality, so even if a paragraph is
displayed as an 'inline' element, it must introduce a new level of
bidi embedding. 

<P>The following rules capture the remaining bidi semantics
of HTML 4.0:</p>

<PRE class="example">
  BDO[DIR="ltr"]  { direction: ltr; unicode-bidi: bidi-override }
  BDO[DIR="rtl"]  { direction: rtl; unicode-bidi: bidi-override }

  *[DIR="ltr"]    { direction: ltr; unicode-bidi: embed }
  *[DIR="rtl"]    { direction: rtl; unicode-bidi: embed }

  /* Block-level elements */
  ADDRESS, BLOCKQUOTE, BODY, DD, DIV, DL, DT, FIELDSET, 
  FORM, FRAME, FRAMESET, H1, H2, H3, H4, H5, H6, IFRAME,
  NOSCRIPT, NOFRAMES, OBJECT, OL, P, UL, APPLET, CENTER, 
  DIR, HR, MENU, PRE, LI, TABLE, TR, THEAD, TBODY, TFOOT, 
  COL, COLGROUP, TD, TH, CAPTION 
                  { unicode-bidi: embed }
</PRE>

</BODY>
</HTML>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:nil
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:nil
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
