<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: visuren.src,v 2.9 1998-02-17 23:51:28 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual rendering model</TITLE>
</HEAD>
<BODY>
<H1 align="center"><a name="visual-rendering-model">Visual rendering model</a></H1>

<H2>Introduction to the visual rendering model</H2>

<P>This chapter describes the <span class="index-def" title="visual
rendering model">visual rendering model</span>, how user agents
process the <a href="conform.html#doctree">document tree</a> for
visual <a href="media.html">media</a>.

<P>In the visual rendering model, each element in the document tree
generates zero or more <a href="#box-model">rectangular boxes</a> that
are then rendered. Some boxes belong to the "normal flow" of boxes
while others are "outside the flow". A box in the normal flow has a
<span class="index-def" title="preceding box"> <a
name="preceding-box"><dfn>preceding box</dfn></a></span> in the normal
flow (unless it is the first box) and a <span class="index-def"
title="preceding box"> <a name="following-box"><dfn>following
box</dfn></a></span> in the normal flow (unless it is the last box).

<!-- Is a "preceding box" one that is generated by a "preceding
element"? (see conform.src for "preceding element") -IJ -->

<P>Most boxes establish a <span class="index-inst" title="containing
block"><a href="visudet.html#containing-block">containing
block</a></span> whose edges serve as references for the layout of
descendant boxes (see the <a href="visudet.html">next chapter</a> for
details). in the CSS visual rendering model, a box establishes
reference edges for its descendants and is itself positioned with
respect to its containing block. A box is not confined by its
containing block -- it is positioned with respect to its edges and may
even <a href="visufx.html#overflow">overflow</a> those edges. When a
box is <a href="#floats">floated</a> inside a containing block, layout
of boxes in the containing block is also affected by the edges of
those floating boxes.

<P>The <a href="#box-model">box model</a> describes the generation of
boxes. The layout of these boxes is governed by:</p>

<ul>
<li><a href="#box-dimensions">box dimensions</a> and <a
href="#box-gen">type</a>.
<li><a href="#positioning-scheme">positioning scheme</a>
(normal, float, and absolute positioning models).
<li>relationships between elements
in the <a href="conform.html#doctree">document tree.</a>
<li>external information (e.g., viewport size, intrinsic
dimensions of images, etc.).
</ul>

<P>The properties defined in this chapter apply to both <a
href="media.html#continuous-media-group">continuous media</a> and <a
href="media.html#paged-media-group">paged media</a>. However, the
meanings of the <a href="visudet.html#margin-properties">margin
properties</a> vary when applied to paged media (see the <a
href="page.html#page-model">page model</a> for details).

<P>The <a href="visudet.html">next chapter</a> supplies the details
of the visual rendering model. However, the model does not specify all
aspects of formatting (e.g., it does not specify a letter-spacing
algorithm). <a href="conform.html#conformance">Conforming user
agents</a> may behave differently for those formatting issues not
covered by this specification.

<h3>The viewport</h3>

<P>User agents for <a
href="media.html#continuous-media-group">continuous media</a>
generally offer users a <span class="index-def" title="viewport"><a
name="viewport"><dfn>viewport</dfn></a></span> (a window or other
viewing area on the screen) through which users consult a
document. User agents may change the document's layout when the
viewport is resized (see the <a
href="visudet.html#initial-containing-block">initial containing
block</a>).  When the viewport is smaller than the document's
containing block, the user agent should offer a scrolling mechanism.
There is at most one viewport per <a
href="intro.html#canvas">canvas</a>, but user agents may offer users
several views of a document.

<H2><a name="box-model">The box model</a></H2>

<P>The CSS box model describes how rectangular boxes are generated for
elements in the <a href="conform.html#doctree">document
tree</a>.  The <A href="page.html">page box</A> is a special kind of
box that is described in detail on the section on <A
href="page.html">paged media</a>.

<H3><a name="box-gen">Controlling box generation:</a> the <span
class="propinst-display">'display'</span> property</H3>

The <span class="propinst-display">'display'</span> property
determines whether an element generates a box, and if so, what type of
box it generates.

<!-- #include src=properties/display.srb -->

<P><span class="index-def" title="block-level
element"><dfn>Block-level elements</dfn></span> are those elements of
the document language that, by default, are formatted visually as
blocks (e.g., paragraphs). Several values of the <span
class="propinst-display">'display'</span> property make an element
block-level: 'block', 'list-item', 'compact' and 'run-in' (part of the
time; see <a href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>),
and 'table'.

<P>Most block-level elements generate block-level boxes, but some
elements also produce inline <a href="#anonymous">anonymous</a> boxes.

<P><span class="index-def" title="inline element"><dfn>Inline
elements</dfn></span> are those elements of the document language that
do not form new blocks of content (e.g., emphasized pieces of text
within a paragraph, inline images,
etc.). Several values of the <span
class="propinst-display">'display'</span> property make an element
inline: 'inline', 'inline-table', 
'compact' and 'run-in' (part of the time; see <a
href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>). 
Inline elements generate inline boxes.  

<P>A block-level box acts as a <a href="visudet.html#containing-block">containing
block</a> for its descendant boxes, which are either block-level boxes
or inline boxes (but not both).  Sibling block-level boxes participate
in a <a href="#block-formatting">block formatting context</a>.

<P>An <a href="#inline">inline</a> box participates in an <a
href="#inline-formatting">inline formatting context</a> with its
siblings and children.

<P>The values of this property have the following meanings:</P>

<dl>
<dt><span class="index-def" title="'block', definition of"><a
name="value-def-block"><strong>block</strong></a></span>

<dd>This value causes an element to generate a <a
name="block-level">block-level</a> box.

<dt><span class="index-def" title="'inline', definition of"><a
name="value-def-inline"><strong>inline</strong></a></span>

<dd>This value causes an element to generate an <a name="inline">inline</a>
box.  

<dt><span class="index-def" title="'list-item', definition of"><a
name="value-def-list-item"><strong>list-item</strong></a></span>
<dd>This value causes an element to generate a <a
href="#block-level">block-level</a> box that also has a 
list-item marker box. For example, in HTML, the LI 
element will typically have this <span
class="propinst-display">'display'</span> value.
For information about lists and examples of list formatting,
please consult the section on <a href="lists.html">lists</a>.

<dt><span class="value-def-none"><strong>none</strong></span>

<dd><span class="index-def" title="'none'::as list style">This
value</span> causes an element to generate <b>no</b> boxes in the <a
href="intro.html#rendering-structure">rendering structure</a> (i.e.,
the element has no effect on layout).  Descendant elements do not
generate any boxes either; this behavior <strong>cannot</strong> be
overridden by setting the <span
class="propinst-display">'display'</span> property on the descendants.

<P>Please note that a display of 'none' does not create an invisible
box; it creates no box at all. CSS includes mechanisms that enable an
element to generate boxes in the rendering structure that affect
formatting but are not visible themselves. Please consult the section
on <a href="visufx.html#visibility">visibility</a> for details.

<dt><span class="index-def" title="'run-in', definition of"><a
name="value-def-run-in"><strong>run-in</strong></a></span>
and <span class="index-def" title="'compact', definition of"><a
name="value-def-compact"><strong>compact</strong></a></span>
<dd>These values create a box that is block-level 
or inline, depending on context. These values are described below.

<dt><span class="index-def" title="'table', definition of"><a
name="value-def-table"><strong>table</strong></a></span>, <span
class="index-def" title="'inline-table', definition of"><a
name="value-def-inline-table"><strong>inline-table</strong></a></span>, <span
class="index-def" title="'table-row-group', definition of"><a
name="value-def-table-row-group"><strong>table-row-group</strong></a></span>,
<span class="index-def" title="'table-column-group', definition of"><a
name="value-def-table-column-group"><strong>table-column-group</strong></a></span>,
<span class="index-def" title="'table-header-group', definition of"><a name="value-def-table-header-group"><strong>table-header-group</strong></a></span>,
<span class="index-def" title="'table-footer-group', definition of"><a name="value-def-table-footer-group"><strong>table-footer-group</strong></a></span>,
<span class="index-def" title="'table-row', definition of"><a
name="value-def-table-row"><strong><strong>table-row</strong></strong></a></span>, <span
class="index-def" title="'table-cell', definition of"><a
name="value-def-table-cell"><strong><strong>table-cell</strong></strong></a></span>, and <span
class="index-def" title="'table-caption', definition of"><a
name="value-def-table-caption"><strong>table-caption</strong></a></span>
<dd>These values cause an element to behave like a table element
(subject to restrictions described in the chapter on <a
href="tables.html">tables</a>).
</dl>

<P>Note that although the <a href="cascade.html#initial-value">initial
value</a> of <span class="propinst-display">'display'</span> is
'inline', rules in the user agent's <a
href="cascade.html#default-style-sheet">default style sheet</a> may <a
href="cascade.html">override</a> this value. See the <a
href="sample.html">sample style sheet</a> for HTML 4.0 in the
appendix.

<div class="example"><P>
<P>Here are some examples of the <span
class="propinst-display">'display'</span> property:

<PRE>
  P   { display: block }
  EM  { display: inline }
  LI  { display: list-item } 
  IMG { display: none }      /* Don't display images */
</PRE>
</div>

<P><span class="index-inst" title="conformance"><a
href="conform.html#conformance">Conforming HTML user agents</a></span>
may <span class="index-inst" title="skip"><a
href="syndata.html#skip">skip</a></span> the <span
class="propinst-display">'display'</span> property when specified in
author and user style sheets but must specify a value for it in the <a
href="cascade.html#default-style-sheet">default style sheet</a>.

<p>Properties apply to run-in and compact boxes based on their
final status (inline or block-level).  For example, the <span
class="propinst-white-space">'white-space'</span> property only
applies if the box behaves like a block-level box.

<H4><a name="compact">'Compact' boxes</a></h4>

<P>A <span class="index-def" title="compact box"><a name="compact"><dfn>compact
box</dfn></a></span> behaves as follows:</p>

<ul>
<li>If a <a href="#block-level">block-level</a> box (that does
not float and is not absolutely positioned)
<a href="#following-box">follows</a> the compact box,
the compact box is formatted like a one-line inline box. If
the resulting <a href="#the-box-width">box width</a> is less
than or equal to the left margin of the block-level box, the inline
box is positioned in the margin as described immediately below.
If the writing direction of the following block-level box is right-to-left
(the <span class="propinst-direction">'direction'</span>
property value is 'rtl'), the inline box
is placed in the right margin.
<li>Otherwise, the compact box behaves like a block-level box.
</ul>

<P>The compact box is positioned in the margin as follows: it is
outside (to the left or right) of the first <a href="#line-box">line
box</a> of the block, but it affects the calculation of that <a
href="visudet.html#box-height">line box's height</a>. The <span
class="propinst-vertical-align">'vertical-align'</span> property of
the compact box determines the vertical position of the compact box
relative to that line box. The horizontal position of the compact box
is always in the margin of the block-level box, as far to the outside
as possible.

<P>An element that cannot be rendered on one line cannot be placed in
the margin of the following block. For example, a 'compact' element in
HTML that contains a &lt;BR&gt; element will always be rendered as a
block-level box (assuming the default style for BR, which inserts a
newline). For placing multi-line texts in the margin, the <span
class="propinst-float">'float'</span> property is often more adaquate.

<div class="html-example">
<p>The following example illustrates a compact box.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;A compact box example&lt;/TITLE&gt;
&lt;STYLE type="text/css"&gt;
  DT {display: compact}
  DD {margin-left: 4em}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;DL&gt;
  &lt;DT&gt;Short
    &lt;DD&gt;&lt;P&gt;Description goes here.
  &lt;DT&gt;too long for the margin
     &lt;DD&gt;&lt;P&gt;Description goes here.
&lt;/DL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<P>This example might be rendered as:

<pre>
<b>short</b>    Description goes here

<b>too long for the margin</b>
         Description goes here
</pre>

<p>The <span class="propinst-text-align">'text-align'</span> property
can be used to align the compact element inside the margin: against
the left adge of the margin ('left'), against the right edge
('right'), or centered in the margin ('center'). The value 'justify'
doesn't apply, and is handled as either 'left' or 'right', depending
on the <span class="propinst-direction">'direction'</span> of the
block-level element in whose margin the compact element is
rendered. ('left' if the direction is 'ltr', 'right' if it is 'rtl'.)

<P>Please consult the section on 
<a href="generate.html#compact-run-in-gen">generated content</a>
for information about how compact boxes interact with generated
content.

<H4><a name="run-in">'Run-in' boxes</a></h4>

<P>A <span class="index-def" title="run-in box"><dfn>run-in
box</dfn></span> behaves as follows:</p>

<ul>
<li>If a <a href="#block-level">block-level</a>
box (that does not float and is not
absolutely positioned) <a href="#following-box">follows</a> the run-in
box, the run-in box behaves like an inline child of the block-level
box.  
<li>Otherwise, the run-in box behaves like a block-level box.
</ul>

<p>A 'run-in' box is useful for run-in headers, as
in this example:

<div class="html-example">
<P>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;A run-in box example&lt;/TITLE&gt;
&lt;STYLE type="text/css"&gt;
  H3 {display: run-in}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H3&gt;A run-in heading.&lt;/H3&gt;
&lt;P&gt;And a paragraph of text that
follows it.
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>
make 
<p>This example might be rendered as:

<pre>
<b>A run-in heading.</b> And a
paragraph of text that 
follows it.
</pre>

<p>The properties of the run-in element are inherited from its
parent in the source tree, not from the block-level box it visually
becomes part of.

<P>Please consult the section on 
<a href="generate.html#compact-run-in-gen">generated content</a>
for information about how run-in boxes interact with generated
content.

<H3><a name="box-dimensions">Box dimensions</a></H3> 

<P>Each box has a
<span class="index-def" title="box content|content::of a box">
<a name="box-content-area"><dfn>content area</dfn></a></span> (e.g.,
text, an image, etc.) and optional surrounding 
<span class="index-def" title="box padding|padding::of a box">
<a name="box-padding-area"><dfn>padding</dfn></a></span>,
<span class="index-def" title="box border|border::of a box">
<a name="box-border-area"><dfn>border</dfn></a></span>, and 
<span class="index-def" title="box margin|margin::of a box">
<a name="box-margin-area"><dfn>margin</dfn></a></span> areas; the size
of each area is specified by properties defined in the <a
href="visudet.html">next chapter</a>.  The following diagram shows
how these areas relate and the terminology used to refer to pieces of
margin, border, and padding:</P>

<P><img src="./images/boxdim.gif"
     alt="Image illustrating the relationship between content, padding, borders, and margins."></P>

<P>The padding, border, and padding can be broken down into left,
right, top, and bottom segments (e.g., in the diagram, "LM" for left
margin, "RP" for right padding, "TB" for top border, etc.
margin, etc.).

<P>The perimeter of each of the four areas (content, padding, border,
and margin) is called an "edge", so each box has four edges:</P>

<dl>
<dt><span class="index-def"
title="content edge"><a name="content-edge"><strong>content edge</strong></a></span>
or <span class="index-def" title="inner edge"><a name="inner-edge"><strong>inner edge</strong></a></span>
<dd>The content edge surrounds the element's <a href="conform.html#rendered-content">rendered content</a>.
<dt><span class="index-def" title="padding edge"><a name="padding-edge"><strong>padding edge</strong></a></span>
<dd>The padding edge surrounds the box padding. If the padding
has 0 width, the padding edge is the same as the content edge.
The padding edge of a box defines the edges of the
<a href="visudet.html#containing-block">containing block</a> established by the box.
<dt><span class="index-def" title="border edge"><a name="border-edge"><strong>border edge</strong></a></span>
<dd>The border edge surrounds the box border. If the border
has 0 width, the border edge is the same as the padding edge.
<dt><span class="index-def" title="margin edge"><a name="margin-edge"><strong>margin edge</strong></a></span>
or <span class="index-def" title="outer edge"><a name="outer-edge"><strong>outer
edge</strong></a></span>
<dd>The margin edge surrounds the box margin. If the margin
has 0 width, the margin edge is the same as the border edge.
</dl>

<P>Each edge may be broken down into a left, right, top, and bottom
edge. 

<!-- Say something about top/bottom behavior during layout
of block-level and abs. positioned boxes -IJ -->

<P>The dimensions of the content area of a box -- the <span
class="index-def" title="box:content width"><a
name="content-width"><dfn>content width</dfn></a></span> and <span
class="index-def" title="box:content height"><a
name="content-height"><dfn>content height</dfn></a></span> -- may be
established in one of several ways:</p>

<dl>
<dt><em>Width and height properties set explicitly</em>
<dd> The <span class="propinst-width">'width'</span> and
<span class="propinst-height">'height'</span> properties specify
a dimension explicitly. Except for <a href="tables.html">table</a>
cells, specified values other than 'auto' for
<span class="propinst-width">'width'</span> and
<span class="propinst-height">'height'</span> cannot be overridden
for a generated box.
<dt><em>Block-level box widths are calculated top-down</em>
<dd>The width of a block-level box 
is given by the width of its
containing block and the box's margins, borders, and padding.
Please consult the sections on <a
href="visudet.html#box-width">box width calculations</a> for details.
<dt><em>Inline box widths are calculated bottom-up</em>
<dd>The width of an inline box is given by its 
<a href="conform.html#rendered-content">rendered content</a>.
Please consult the sections on <a
href="visudet.html#box-width">box width calculations</a> for details.
<dt><em>Block-level box heights are calculated bottom-up</em>
<dd>Block level boxes grow to the size of the boxes
they contain.
Please consult the section on <a
href="visudet.html#box-height">box height calculations</a> for
details.
<dt><em><a name="intrinsic-dim">Intrinsic dimension of replaced
content</a></em>
<dd>The <a href="conform.html">rendered content</a> of a <a
href="conform.html#replaced-element">replaced element</a> may have
"intrinsic dimensions" that user agents use as the <a
href="cascade.html#computed-value">computed</a> content 
width and height (e.g., the unscaled width and height of an included
image). If the intrinsic dimensions are overridden, the 
replaced content is scaled by the user agent.
When scaling an image, the aspect ratio of the image is preserved
if values for the <span class="propinst-width">'width'</span> and
<span class="propinst-height">'height'</span> properties are set to
'auto'.
<dt><em>Hybrid calculations</em>
<dd>The dimension of a table cell is determined by both the cell's
contents and the surrounding available space.
</dl>

<P>The <span class="index-def" title="box::box width"><a
name="the-box-width"><dfn>box width</dfn></a></span> (resp., <span
class="index-def" title="box::box height"><a
name="the-box-height"><dfn>box height</dfn></a></span>) is
given by the sum of the content width (resp., content height), the
padding, the border, and the margin.

<P>If an inline element generates boxes over several lines (i.e., for
more than one <a href="#line-box">line box</a>), the <a
href="visudet.html#margin-properties">margin</a>, <a
href="visudet.html#border-properties">border</a>, and <a
href="visudet.html#padding-properties">padding</a> properties do not
affect line height calculations (see the section on <a
href="visudet.html#line-height">line height calculations</a> for
details). However, margin, border, and padding areas remain visible.

<P>Note that there are no properties to set the color of margins and
padding; margins are always transparent and padding areas always use
the background of the element itself. The background of an element
extends to the padding edge of the box it generates.

<H3><a name="mpb-examples">Example of margins, padding, and borders</a></H3> 

This example illustrates how margins, padding, and borders
interact. The example HTML document:

<PRE class="html-example">
    &lt;HTML&gt;
    &lt;HEAD&gt;
    &lt;STYLE type="text/css"&gt;
      UL { 
        background: orange; 
        margin: 12px 12px 12px 12px;
        padding: 3px 3px 3px 3px;
                                     /* No borders set */
      }
      LI { 
        color: white;                /* text color is white */ 
        background: blue;            /* Content, padding will be blue */
        margin: 12px 12px 12px 12px;
        padding: 12px 0px 12px 12px; /* Note 0px padding right */
        list-style: none             /* no glyphs before a list item */
                                     /* No borders set */
      }
      LI.withborder {
        border-style: dashed;
        border-width: medium;        /* sets border width on all sides */
        border-color: green;
      }
    &lt;/STYLE&gt;
    &lt;/HEAD&gt;
    &lt;BODY&gt;
    &lt;UL&gt;
      &lt;LI&gt;First element of list
      &lt;LI class="withborder"&gt;Second element of list is longer
           to illustrate wrapping.
    &lt;/UL&gt;
    &lt;/BODY&gt;
    &lt;/HTML&gt;
</PRE>

<P>results in a <a href="conform.html#doctree">document tree</a> with
(among other relationships) a UL element that has two LI
children. 

<P>The first of the following diagrams illustrates what this example
would produce. The second illustrates the relationship between the
margins, padding, and borders of the UL elements and those of its
children LI elements.</P>

<P><img src="./images/boxdimeg.gif"
     alt="Image illustrating how parent and child margins, borders,
and padding relate."></p>

<P>Note that:</p>

<ul>

<li>The <a href="#content-width">content width</a> for each LI box is
calculated top-down; the <a href="visudet.html#containing-block">containing
block</a> for the each LI box is the box generated by the UL element.

<li>The height of each LI box is given by its <a
href="#content-height">content height</a>, plus padding, borders, and
margins. Note that vertical margins between the LI boxes <a
href="visudet.html#collapsing-margins">collapse.</a>

<li>The right padding of the LI boxes has been set to zero width
(the <span class="propinst-padding">'padding'</span> property). The
effect is apparent in the second illustration.

<li>The foreground color of the LI boxes has been set to white for
legibility against a blue background (the <span
class="propinst-color">'color'</span> property).

<li>The margins of the LI boxes are transparent -- margins are always
transparent -- so the background color of the UL boxes (orange) shines
through them. However, the (blue) background of the LI boxes is also
used for the LI padding.

<li>The second LI element specifies a dashed border (the
<span class="propinst-border-style">'border-style'</span> property).
</ul>

<h2><a name="positioning-scheme">Positioning schemes</a></h2>

<P>In CSS2, a box may be laid out according to three <span
class="index-def" title="positioning scheme"><dfn>positioning
schemes</dfn></span></p>

<ol>
<li><a href="#normal-flow">Normal flow</a>. The normal
flow includes <a href="#block-formatting">block formatting</a>
of <a href="#block-level">block level</a> elements, 
<a href="#inline-formatting">inline formatting</a>
of <a href="#inline">inline</a> elements, <a
href="#relative-positioning">relative positioning</a> of
block-level or inline elements, and positioning of
<a href="#compact">compact</a> and <a href="#run-in">run-in</a> boxes.
<li><a href="#floats">Floats</a>. The floating model translates
a box's position to the left or right of where
it would normally appear in the flow. For instance, authors may
float paragraph boxes in order to place them side-by-side.
<li><a href="#absolute-positioning">Absolute positioning</a>. Authors
may specify the absolute position of a box (with respect to
a containing block).
</ol>

<P>The primary difference between a floating box and one that is
absolutely positioned is that absolute positioning has no impact on
the flow of later siblings; later siblings are laid out as though
their absolutely positioned sister did not exist at all. Later
siblings of floating boxes flow with respect to the final
position of the floating box.

<h3><a name="choose-position">Choosing a positioning scheme:</a> <span
class="propinst-position">'position'</span> property</h3>

<P>The <span class="propinst-position">'position'</span> and <span
class="propinst-float">'float'</span> properties determine which CSS2
positioning algorithms are used to calculate the coordinates of a box.

<!-- #include src=properties/position.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><strong>normal</strong>
<dd>The box coordinates are calculated according to the
<a href="#normal-flow">normal flow</a>.

<dt><strong>relative</strong>
<dd>The box coordinates are calculated according to the <a
href="#normal-flow">normal flow</a>, then the box is 
offset <a href="#relative-positioning">relative</a> to its normal
position. Note that the position of the <a href="#following-box">
following box</a> is established independently of the offset.

<dt><strong>absolute</strong>
<dd> The box coordinates (and possibly size) are calculated 
in <a href="#absolute-positioning">absolute</a> terms
with respect to the box's <a
href="visudet.html#containing-block">containing block</A>.

<dt><strong>fixed</strong>
<dd> The box coordinates are calculated according to the
'absolute' model, but in addition, the box is <a
href="#fixed-positioning">fixed</a> with
respect to some reference. In the case of 
<a href="media.html#continuous-media-group">continuous media</a>,
the box is fixed with respect to the <a href="#viewport">viewport</A>
(and doesn't move when scrolled).
In the case of 
<a href="media.html#paged-media-group">paged media</a>,
the box is fixed with respect to the page. Fixed boxes
are fixed with respect to pages that are seen through a 
<a href="#viewport">viewport</A>.
<strong>Note.</strong>
Authors may wish to specify 'fixed' in a media-dependent way.
For instance, an author may want a box to remain at the top
of the <a href="#viewport">viewport</A> on the screen,
but not at the top of each printed page. The two specifications
may be separated by using an <a href="media.html#at-media-rule">@media
rule</a>, as in:

<div class="example"><P>
<PRE>   
   @media screen { H1#first { position: fixed }
   @media print  { H1#first { position: normal }
</PRE>   
</div>
</dl>

<div class="note"><P> <em><strong>Note.</strong> The value 'normal'
causes some user agents to <span class="index-inst" title="skip"><a
href="syndata.html#skip">skip</a></span> the <span
class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> properties. To ensure that values of
<span class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> are taken into account, authors
should explicitly set the value of the <span
class="propinst-position">'position'</span> property to 'relative'.
</em>
</div>

<H3><a name="position-props">Box offsets</a>: <span
class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span></H3>

<P>The position of a <a href="#relative-positioning">relatively</A>
or <a href="#absolute-positioning">absolutely</A> (including <a
href="#fixed-positioning">fixed</A>) positioned boxes is established
by four properties:

<!-- #include src=properties/top.srb -->

<P>This property specifies how far a box's top content edge is offset below
the top edge of the box's <a href="visudet.html#containing-block">containing block</a>.

<!-- #include src=properties/right.srb -->

<P>This property specifies how far a box's right content edge is offset
to the left of the right edge of the box's <a
href="visudet.html#containing-block">containing block</a>.

<!-- #include src=properties/bottom.srb -->

<P>This property specifies how far a box's bottom content edge is offset
above the bottom of the box's <a href="visudet.html#containing-block">containing
block</a>.

<!-- #include src=properties/left.srb -->

<P>This property specifies how far a box's left content edge is offset
to the right of the left edge of the box's <a
href="visudet.html#containing-block">containing block</a>.

<P>The values for the four properties have the following meanings:</p>

<dl>
<dt><strong><span class="value-inst-length">&lt;length&gt;</span></strong>
<dd>The offset is a fixed distance from the reference edge.

<dt><strong><span class="value-inst-percentage">&lt;percentage&gt;</span></strong>

<dd>The offset is a percentage of the containing block's width (for <span class="propinst-left">'left'</span> or <span
class="propinst-right">'right'</span>) or height (for <span
class="propinst-top">'top'</span> and <span
class="propinst-bottom">'bottom'</span>).

<dt><strong>auto</strong>
<dd>The offset is automatically calculated based on the width and
height of the box.
</dl>

<P>For absolutely positioned boxes, the offsets are with respect to
the box's <a href="visudet.html#containing-block">containing
block</a>. For relatively positioned boxes, the offsets are with
respect to the outer edges of the box itself (i.e., the box is
relatively positioned, then offset from that position according to
these properties).

<P>For absolutely positioned boxes, the values of the <span
class="propinst-left">'left'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-top">'top'</span>, and <span
class="propinst-bottom">'bottom'</span> properties replace the roles
of the corresponding <a href="visudet.html#margin-properties">margin
properties</a> (i.e., absolutely positioned boxes do not have
margins but do have padding and borders).

<P>For more information about the width and height of boxes, please
consult the sections on <a href="visudet.html#box-width">box width
calculations</a> and <a href="visudet.html#box-height">box height
calculations</a> respectively.

<H2><a name="normal-flow">Normal flow</a></H2> 

<P>Boxes in the normal flow belong to a <span class="index-def"
title="formatting context">formatting context</span>, which may be
block or inline, but not both simultaneously. 

<P><a href="#block-level">Block-level</a> boxes participate in an <a
href="#block-formatting">block formatting</a> context.

<P><a href="#inline">Inline</a> boxes participate in an <a
href="#inline-formatting">inline formatting</a> context.

<h3><a name="anonymous">Anonymous boxes</a></h3>

<P>Block-level elements whose <a
href="conform.html#rendered-content">rendered content</a> contains
text that is not the content of an inline element have <span
class="index-def" title="anonymous
elements"><dfn>anonymous</dfn></span> children in the <a
href="conform.html#doctree">document tree</a>. These anonymous
elements inherit property values (colors, fonts, etc.). They generate
boxes that contain chunks of text as content.  By default, anonymous
boxes act like inline boxes. However, they may act like block-level
boxes if context demands (e.g., an inline <a href="#run-in">run-in</a>
box that behaves like a block-level box).  Decisions about the
construction of anonymous inline boxes depend on many factors
(language, hyphenation, etc.)  and lie outside the scope of this
specification.

<h3><a name="block-formatting">Block formatting context</a></h3> 

<P>In a block formatting context, boxes are laid out one after the
other, vertically. The vertical distance between two sibling boxes is
determined by the <span class="propinst-margin">'margin'</span>
properties. Vertical margins between adjacent block-level boxes <a
href="./visudet.html#collapsing-margins">collapse</a>.

<!-- Add a statement/link here about bottom-up height calc? -IJ -->

<P>To lay out boxes horizontally in CSS2, authors may declare them to
be <a href="#inline">inline</a>, or position them (using <a
href="#floats">floats</a> or <a
href="#absolute-positioning">absolute</a> positioning).

<P>For information about page breaks in paged media, please consult
the section on <a href="page.html#allowed-page-breaks">allowed
page breaks</a>.

<H3><a name="inline-formatting">Inline formatting context</a></H3>

<P>In an inline formatting context, boxes are laid out horizontally,
one after the other. Horizontal margins, borders, and padding are
respected between these boxes. They may be aligned vertically in
different ways: their bottoms or tops may be aligned, or the baselines
of text within them may be aligned. The rectangular area that contains
the boxes that form a line is called a <span class="index-def"
title="line box"><a name="line-box"><dfn>line box</dfn></a></span>.

<P>The width of a line box is determined by a <A
HREF="visudet.html#containing-block">containing block</A>.  The height of a line
box is determined by the rules given in the section on <a
href="visudet.html#line-height">line height calculations</a>. A line
box is always tall enough for all of the boxes it contains. However,
it may be taller than the tallest box it contains (if, for example,
boxes are aligned so that baselines line up).  When the height of a
box B is less than the height of the line box containing it, the
vertical alignment of B within the line box is determined by the <span
class="propinst-vertical-align">'vertical-align'</span> property.

<P>When several inline boxes cannot fit within a single line box, they
are distributed among two or more vertically-stacked line boxes. Thus,
a paragraph is a vertical stack of line boxes. Line boxes are stacked
with no vertical separation and they never overlap.

<P>Line boxes in the same inline formatting context generally have the
same width (that of the containing block) but may vary in width if
available horizontal space is reduced due to <a
href="#floats"> floats</a>. Line boxes in the same inline
formatting context generally vary in height (e.g., one line might
contain an image while the others contain only text).

When a box is less wide than the width of the line box containing it,
its horizontal alignment within the line box is determined by the
<span class="propinst-text-align">'text-align'</span> property. Since
a box may not exceed the width of a line box, long boxes are split into
several boxes and these boxes distributed across several line
boxes. When a box is split, margins, borders, and padding have no
visual effect at the end of the first line box or at the beginning of
the next line box.

<div class="html-example"><P> 
For example, the following paragraph
(created by the HTML block-level element P) contains anonymous text
interspersed with the elements EM and STRONG:

<PRE>
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear
  &lt;STRONG&gt;in this&lt;/STRONG&gt; sentence, dear.&lt;/P&gt;
</PRE>

<P>In terms of the document tree, P has five children:</p>

<ul>
<li>Anonymous: "Several"
<li>EM: "emphasized words"
<li>Anonymous: "appear"
<li>STRONG: "in this"
<li>Anonymous: "sentence, dear."
</ul>
 
<P>To format the paragraph, the user agent creates a box for each
child and flows the boxes into line boxes. Since the parent box in
normal flow acts as the containing block for an inline box, the width
of the P box determines the width of these line boxes.  If the
width of P is sufficient, all the inline boxes will fit into a single
line box:

<PRE>
  Several <EM>emphasized words</EM> appear <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>If the boxes do not fit within a single line box, they will
be split up and distributed across several line boxes. The previous
paragraph might be split as follows:

<PRE>
  Several <EM>emphasized words</EM> appear
  <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>or like this:

<PRE>
  Several <EM>emphasized</EM>  
  <EM>words</EM> appear <STRONG>in this</STRONG> 
  sentence, dear.
</PRE>

</div>

<P>In the previous example, the EM box was split into two EM boxes
(call them "split1" and "split2"). Therefore, margins, borders,
padding, or text decorations have no visible effect after split1 or
before split2.

<div class="html-example"><P>
Consider the following example:

<PRE>
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;TITLE&gt;Example of inline flow on several lines&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
  EM {
    padding: 2px ; 
    margin: 1em ;
    border-width: medium;
    border-style: dashed;
    line-height: 2.4em;
  }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>

<P>Depending on the width of the P, the boxes may be distributed as
follows:</P>

<P><img src="./images/inline-layout.gif"
     alt="Image illustrating the effect of line breaking on the display of margins, borders, and padding."></p>

<ul>
<li> The margin is inserted before "emphasized" and after "words". 

<li> The padding is inserted before, above, and below
"emphasized" and after, above, and below "words". A
dashed border is rendered on three sides in each case.
</ul>
</div>

<P>Note that with a small line height, the padding and borders
around text in different lines may overlap.

<h3><a name="direction">Writing and flow direction</a></h3>

<P>The [[UNICODE]] specification assigns directionality to
characters and defines a (complex) algorithm for determining the
proper directionality of text.  The <span
class="propinst-direction">'direction'</span> and <span
class="propinst-unicode-bidi">'unicode-bidi'</span> properties allow
authors to specify the writing direction of an element's text in terms
of the Unicode bidirectional algorithm.  For an introduction to
bidirectionality issues, please consult [[HTML40]], section 8.2.

<P>If a document does not contain a displayable right-to-left
character, a <a href="conform.html#conformance">conforming user
agent</a> is not required to apply the [[UNICODE]]
bidirectional algorithm. If a document contains right-to-left
characters, and if the user agent displays these characters (with
appropriate glyphs, not arbitrary substitutes such as a question mark,
a hex code, a black box, etc.), the user agent must apply the
bidirectional algorithm.

<P>Conforming HTML user agents may skip the <span
class="propinst-direction">'direction'</span> and <span
class="propinst-unicode-bidi">'unicode-bidi'</span> properties in
author and user style sheets but must behave as if they used the style
sheet fragment given below if they apply the bidirectional
algorithm. However, user agents must not skip the <span
class="propinst-direction">'direction'</span> property when it applies
to table direction.

<!-- #include src=properties/direction.srb -->

<P>This property determines the direction of several types of
flow:</p>

<ol>
<li>When set for an <a href="#inline">inline</a>
element or <a href="#block-level">block-level</a> element,
it specifies the base writing direction of inline
text generated by the element.
<li>When set for an <a href="#inline">inline</a>
element, it specifies the direction that generated inline
boxes will flow into line boxes.
<li>When set for a <a href="#block-level">block-level</a>
element, it specifies the direction that descendent
inline and anonymous boxes will flow into line boxes.
<li>When set for a <a href="tables.html">table</a>
element, it specifies the direction of table layout.
<li>Is specifies the direction that a <a
href="visudet.html#containing-block">containing block</a> will grow
in certain cases of content <a href="visufx.html#overflow">overflow</a>.
</ol>

<P>The writing direction of text <em>within</em> an inline box may
differ from the flow direction of the inline box itself.  For example
a <span class="propinst-direction">'direction'</span> of "ltr"
specified for a paragraph of Hebrew text will cause inline boxes to
flow left-to-right, but the Hebrew text will be displayed
right-to-left if the value of <span
class="propinst-unicode-bidi">'unicode-bidi'</span> is 'normal'. For
the <span class="propinst-direction">'direction'</span> property to
have any effect on inline elements, the <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property must have
as value either 'embed' or 'override'.


<P>Values for this property have the following meanings:</P>

<dl>
<dt><strong>ltr</strong> 
<dd>Left-to-right flow.
<dt><strong>rtl</strong>
<dd> Right-to-left flow.
</dl>

<!-- Add examples here -IJ -->

<P>For a left-to-right <a href="#inline-formatting">inline formatting
context</a>, the horizontal distance between the right side of a box
and the left side of the <a href="#following-box">following box</a>
(or right side of the parent box if no following box exists) is
determined by the source element's <span
class="propinst-margin">'margin'</span> properties. For right-to-left
flow, the horizontal distance between the left side of a box and the
right side of the <a href="#preceding-box">preceding box</a> (or left
side of the parent box is no preceding box exists) is similarly
determined by the source element's <span
class="propinst-margin">'margin'</span> properties.

<!-- #include src=properties/unicode-bidi.srb -->

<P>The writing direction of text within an inline box depends on two
factors:</p>

<ol>
<li>The directionality of the characters, as specified in [[UNICODE]].  
<li>The value of the <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property.
</ol>

<P>User agents following the bidirectional algorithm will display
characters in the correct writing direction automatically, except when
elements reversing the writing direction are embedded more than one
level deep. In such cases, authors must assist the user agent by
signaling that an element opens a new level of embedding with respect
to the bidirectional algorithm.

<P>Thus, values for <span
class="propinst-unicode-bidi">'unicode-bidi'</span> have the following
meanings:</p>

<dl>
<dt><strong>normal</strong>
<dd>The element does not open an additional level of embedding with
respect to the bidirectional algorithm. For inline elements,
implicit reordering works across element boundaries.


<dt><strong>embed</strong>

<dd>The element opens an additional level of embedding with respect to
the bidirectional algorithm. The direction of this embedding level is
given by the <span class="propinst-direction">'direction'</span>
property. Inside the element, reordering is done implicitly.

<dt><strong>bidi-override</strong>

<dd>Like 'embed', the element opens an additional level of embedding
with respect to the bidirectional algorithm and the direction of this
embedding level is given by the <span
class="propinst-direction">'direction'</span> property.  However,
inside the element, reordering is strictly in sequence according to
the <span class="propinst-direction">'direction'</span> property;
this value overrides the implicit bidirectional algorithm.
</dl>

<div class="example"><P>
For example, the following rules 
model the semantics of HTML's BDO element
and inline elements with respect to the "dir" attribute:</p>

<PRE>
  BDO[DIR="ltr"]  { direction: ltr; unicode-bidi: bidi-override }
  BDO[DIR="rtl"]  { direction: rtl; unicode-bidi: bidi-override }

  /* Applies to inline elements only */
  *[DIR="ltr"] { direction: ltr; unicode-bidi: embed }
  *[DIR="rtl"] { direction: rtl; unicode-bidi: embed }
</PRE>
</div>


<div class="example">
<p>The following example shows an XML document with bidirectional
text. Lowercase letters stand for inherently left-to-right characters,
Uppercase letters represent inherently right-to-left characters:

<pre class="xml-example">
&lt;HEBREW>
  &lt;PAR>HEBREW1 HEBREW2 english3 HEBREW4 HEBREW5&lt;/PAR>
  &lt;PAR>HEBREW6 &lt;EMPH>HEBREW7&lt;/EMPH> HEBREW8&lt;/PAR>
&lt;/HEBREW>
&lt;ENGLISH>
  &lt;PAR>english9 english10 english11 HEBREW12 HEBREW13&lt;/PAR>
  &lt;PAR>english14 english15 english16&lt;/PAR>
  &lt;PAR>english17 &lt;HE-QUO>HEBREW18 english19 HEBREW20&lt;/HE-QUO>&lt;/PAR>
&lt;/ENGLISH>
</pre>

<p>Since this is XML, the style sheet is responsible for setting the
writing direction. (Another possibility is to use the Unicode
characters LRE, RTF, PDF, in the text.) This is the style sheet:

<pre class="example">
HEBREW {display: block; direction: rtl}
ENGLISH {display: block; direction: ltr}
PAR {display: block}
EMPH {font-weight: bold}
HE-QUO {direction: rtl; unicode-bidi: embed}
</pre>

<p>The HEBREW element is a block with a right-to-left base direction,
the ENGLISH element is a block with a left-to-right base
direction. The PARs are blocks that inherit the base direction from
their parents. Thus, the first two PARs are read starting at the top
right, the final three are read starting at the top left.

<p>The EMPH element is inline, and since its value for 'unicode-bidi'
is 'normal' (the initial value), it has no effect on the ordering of
the text. The HE-QUO element, on the other hand, creates an embedding.

<p>The rendering of this text might look like this if the line length
is long:

<pre class="ascii-art">
               5WERBEH 4WERBEH english3 2WERBEH 1WERBEH

                                8WERBEH <b>7WERBEH</b> 6WERBEH

english9 english10 english11 13WERBEH 12WERBEH

english14 english15 english16

english17 20WERBEH english19 18WERBEH
</pre>

<p>Note that the HE-QUO embedding causes HEBREW18 to be to the right
of english19.

<p>If lines have to be broken, it might be more like this:

<pre class="ascii-art">
       2WERBEH 1WERBEH
  -EH 4WERBEH english3
                 5WERB

   -EH <b>7WERBEH</b> 6WERBEH
                 8WERB

english9 english10 en-
glish11 12WERBEH
13WERBEH

english14 english15
english16

english17 18WERBEH
20WERBEH english19
</pre>

<p>Because HEBREW18 must be read before english19, it is on the line
above english19. Just breaking the long line from the earlier
rendering would not have worked. Note also that the first syllable
from english19 might have fitted on the previous line, but you can't
hyphenate left-to-right words in a left-to-right context, and vice
versa.

</div><!-- example -->


<H3><a name="relative-positioning">Relative positioning</a></H3>  

<P>Once a box has been assigned a position according to the <a
href="#normal-flow">normal flow</a>, it may be shifted relative to
this position. This is called <span class="index-def" title="relative
positioning"><dfn>relative positioning</dfn></span>. Offsetting a box
in this way has no effect on the following box: it is positioned as if
the preceding box were not offset and it is not repositioned after the
offset is applied. This implies that relative positioning may cause
boxes to overlap.

<!-- The expression "normal flow shape" is confusing since,
in terms of line boxes, the shape is always rectangular -IJ -->

<p>Relatively positioned boxes keep their normal flow size, including
line breaks and the space originally reserved for them. A relatively
positioned box establishes a new <A
HREF="visudet.html#containing-block">containing block</A> for descendant
boxes. 

<P>A relatively positioned box is generated when the <span
class="propinst-position">'position'</span> property for an element
has the value 'relative'.  The offset is specified by the <span
class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties.

<P>Dynamic movement of relatively positioned boxes can produce
animation effects in scripting environments (see the <span
class="propinst-visibility">'visibility'</span> property). Relative
positioning may also be used as a general form of superscripting and
subscripting except that line height is not automatically adjusted to
take the positioning into consideration. See the description of <a
href="visudet.html#line-height">line height calculations</a> for more
information.

<P>Examples of relative positioning are provided in the section <a
href="#comparison">comparing normal, relative, floating, and
absolute positioning</a>.

<H2><a name="floats">Floats</a>: the <span
class="propinst-float">'float'</span> and <span
class="propinst-clear">'clear'</span> properties</H2>

<P>A floating box may be positioned at the right or left edge of a
containing block (the <span class="propinst-float">'float'</span>
property). Content may flow next to a floating box or be forced to
flow after it (see the <span
class="propinst-clear">'clear'</span> property).


<!-- #include src=properties/float.srb -->

<P>This property specifies whether a box should float to the left,
right, or not at all. It may be set for elements that generate boxes
that are not positioned absolutely (i.e., not 'absolute' or 'fixed').  

A floating box is given a position and height according to the <a
href="#normal-flow">normal flow</a> (the <a
href="cascade.html#computed-value">computed value</a> of the <span
class="propinst-width">'width'</span> is '0' unless assigned
explicitly), then taken out of the flow and shifted to the left or
right until its <a href="#outer-edge">outer edge</a> is flush with the
current left or right edge (which may be established by a <a
href="visudet.html#containing-block">containing block</a> or another floated box).

<P>User agents take the outer edge of a floating box into account when
positioning subsequent boxes; the outer edge of a float becomes the
current edge for flowed or floated boxes to the left or right side.
The margins of floating boxes never <a
href="visudet.html#collapsing-margins">collapse</a> with margins of
adjacent boxes.

<P>The values of this property have the following meanings:</p>

<dl>
<dt><strong>left</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box (i.e., <span class="propinst-display">'display'</span>
is set to 'block') in the <a href="#normal-flow">normal flow</a>,
then shifts the box to the left. Text wraps on the right
side of the box.
<dt><strong>right</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box (i.e., <span class="propinst-display">'display'</span>
is set to 'block') in the <a href="#normal-flow">normal flow</a>,
then shifts the box to the right. Text wraps on the left
side of the box.
<dt><strong>none</strong>
<dd>Has no effect on the generated box.
</dl>

<!-- Hakon: we can't say 'display' is skipped since 'none' still has
an effect -->

<div class="example"><P>
The following rule positions all IMG elements with
<samp>class="icon"</samp> along the left side of the parent element:

<PRE>
  IMG.icon { 
    float: left;
    margin-left: 0;
  }
</PRE>
</div>


<div class="html-example"><P>
The following HTML source:

<PRE>  
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;STYLE type="text/css"&gt;
    IMG { float: left }
    BODY, P, IMG { margin: 2em }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
      Some sample text that has no other...
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>

<P>might be formatted as:</P>

<P><img src="./images/floateg.gif"
     alt="Image illustrating how floating elements interact with margins."></p>

<P>Note that the margin of the P element encloses the floating
IMG element and that the vertical margins do not collapse.
</div>

<H3>Controlling flow next to floats</H3> 

<!-- #include src=properties/clear.srb -->

<P>When set for an element generating a box B, this property indicates
which sides of B may <strong>not</strong> be adjacent to a floating
box. This property may only be specified for <a
href="#block-level">block-level</a> elements.  For <a
href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>, this property
applies to the final block-level box to which the compact or run-in
box belongs.

<P>Values have the following meanings:</P>

<dl>
<dt><strong>left</strong>
<dd>The generated box is moved below any floating
box to its left.
<dt><strong>right</strong>
<dd>The generated box is moved below any floating
box to its right.
<dt><strong>both</strong>
<dd>The generated box is moved below any floating
box to its left or right.
<dt><strong>none</strong>
<dd>The box may be placed next to
floating boxes to the left or right.
</dl>

<div class="example"><P>
The following style rule means that no H1 element may have a floating
element to its left; this means that H1 elements will
be positioned below any floating box.

<PRE>
  H1 { clear: left }
</PRE>
</div>

<P>A floating box B is subject to several constraints:</p>

<ul>
<li>Once floated, the margin of B is increased enough so that its border
top is positioned at or below the margin bottom of the bottom-most
float it clears. 
<li>The floats cleared by B must be generated by elements that precede
the element in the <a href="conform.html#doctree">document tree</a>
that generated B.
</ul>

<P>Please consult the section on <a
href="visudet.html#floating-constraints">floating constraints</a> for
additional constraints.


<H2><a name="absolute-positioning">Absolute positioning</a></H2>

<!--
<p>Absolutely positioned boxes act like block-level boxes, but
since they do not belong to the normal flow, the following properties
do not apply to them: <span class="propinst-float">'float'</span>,
<span class="propinst-clear">'clear'</span>, <span
class="propinst-display">'display'</span> (and therefore <span
class="propinst-list-style-type">'list-style-type'</span>), and all
the <a href="visudet.html#margin-properties">margin properties</a>.
-->

<p>Like other boxes, an absolutely positioned element is positioned
with respect to a <A HREF="visudet.html#containing-block">containing block</A>.
It also establishes a new containing block for descendant boxes.
However, the contents of an absolutely positioned element do not flow
around any other boxes. They may or may not obscure the contents of
another box, depending on the <a href="#z-order">z-order</a> of the
overlapping boxes.

<H3><a name="fixed-positioning">Fixed positioning</a></H3>

<P>Fixed positioning is a variant of absolute positioning. The only
difference is that for a fixed positioned box, the containing block is
established by the <a href="#viewport">viewport</A>. 

<P>For <a href="media.html#continuous-media-group">continuous
media</a>, fixed boxes do not move when the document is scrolled. In
this respect, they are similar to <a
href="./colors.html#background-properties">fixed background
images</a>.

<P>For <a href="page.html">paged media</a>, boxes with fixed
positions are repeated on every page. This is useful for placing, for
instance, a signature at the bottom of each page.

<div class="html-example">
<P>Authors may use fixed positioning to create frame-like presentations.
Consider the following frame layout:</P>

<P><img src="./images/frame.gif"
     alt="Image illustrating a frame-like layout with position='fixed'."></p>

<P>This might be achieved with the following HTML document and
style rules:</P>

<PRE>
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;TITLE&gt;A frame document with CSS2&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
    #header {
       position: fixed;
       width: 100%;
       height: 15%;       
       top: 0;
       right: 0;
       bottom: auto;
       left: 0;
    }
    #sidebar {
       position: fixed;
       width: 10em;
       height: auto;
       top: 15%;
       right: auto;
       bottom: 100px;
       left: 0;
    }
    #main {
       position: fixed;
       width: auto;
       height: auto;
       top: 15%;
       right: 0;
       bottom: 100px;
       left: 10em;
    }
    #footer {
       position: fixed;
       width: 100%;
       height: 100px;
       top: auto;
       right: 0;
       bottom: 0;
       left: 0;
    }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DIV id="header"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="sidebar"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="main"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="footer"&gt; ...  &lt;/DIV&gt;
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>
</DIV>

<h2>Relationships between 'display', 'position', and 'float'</h2>

<P>When specified for the same elements, the three properties that
affect box generation and layout -- <span
class="propinst-display">'display'</span>, <span
class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> -- interact according to the
following precedences (highest to lowest):</p>

<ol>
<li>If <span class="propinst-display">'display'</span>
has the value 'none',
user agents must <a href="syndata.html#skip">skip</a>
<span class="propinst-position">'position'</span> and
<span class="propinst-float">'float'</span>. In this
case, the element generates no box.

<li>Otherwise, if <span class="propinst-position">'position'</span>
has the value 'absolute' or 'fixed', the generated box will be
non-floating and block-level. The position of the box will be
determined by the <span class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span> and <span
class="propinst-left">'left'</span> properties and the containing
block.

<li>Otherwise, if 
<span class="propinst-float">'float'</span> has a value
other than 'none', the generated box is a block-level
box and is floated.

<li>Otherwise, the remaining <span
class="propinst-display">'display'</span> properties apply
as specified.
</ol>

<div class="note"><P>
<em><strong>Note on scripting and layout.</strong> CSS2 does not
specify layout behavior when values for these properties are changed
by scripts.  For example, what happens when an element having 'width:
auto' is repositioned? Do the contents reflow, or do they maintain
their original formatting?  The answer is outside the scope of this
document, and such behavior is likely to differ in initial
implementations of CSS2.
</em>
</div>

<H2><a name="comparison">Comparison of normal, relative, floating, absolute positioning</a></H2>
<P>To illustrate the relationship between normal flow, relative
positioning, floats, and absolute positioning, we provide a series of
examples based on the following HTML fragment:

<pre class="html-example">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Comparison of positioning schemes&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;P&gt;Beginning of body contents.
  &lt;SPAN id="outer"&gt; Start of outer contents.
  &lt;SPAN id="inner"&gt; Inner contents.&lt;/SPAN&gt;
  End of outer contents.&lt;/SPAN&gt;
  End of body contents.
  &lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<p>The final positions of boxes generated by the <em>outer</em> and
<em>inner</em> elements vary in each example. In each illustration,
the numbers to the left of the illustration indicate the <a
href="#normal-flow">normal flow</a> position of the double-spaced (for
clarity) lines.</p>

<P>&nbsp;</P>
<H3>Normal flow</H3>

<p>Consider the following CSS declarations for <em>outer</em> and
<em>inner</em> that don't alter the <a href="#normal-flow">normal
flow</a> of boxes:</p>

<PRE>
  #outer { color: red }
  #inner { color: blue }
</PRE>

<p>This results in something like the following:</p>

<P><img src="./images/flow-generic.gif"
     alt="Image illustrating the normal flow of text between parent and sibling boxes."></p>

<H3>Relative positioning</H3>

<P>To see the effect of <a href="#relative-positioning">relative
positioning</a>, consider the following CSS rules:

<PRE>
  BODY { line-height: 200% }
  #outer { position: relative; top: -12px; color: red }
  #inner { position: relative; top: 12px; color: blue }
</PRE>

<p>First, the <em>outer</em> text is flowed into its normal flow
position and dimensions at the end of line 1. Then, the entire box
(distributed over three lines) is shifted upwards by 12px.

<P>The contents of <em>inner</em>, as a child of <em>outer</em>, would
normally flow immediately after the words "of outer contents" (on line
1.5). However, the <em>inner</em> contents are themselves offset
relative to the <em>outer</em> contents by 12px downwards, back to
their original position on line 2.

<P>Note that the content following <em>outer</em> is not affected by the
relative positioning of <em>outer</em>.</P>

<P><img src="./images/flow-relative.gif"
     alt="Image illustrating the effects of relative positioning on a box's content."></p>

<P>Note also that if the relative positioning of <em>outer</em> were -24px, the
text of <em>outer</em> and the body text would have overlapped.

<H3>Floating a box</H3>

<P>Now consider the effect of <a href="#floats">floating</a> the
<em>inner</em> element's text to the right by means of the following
rules:

<PRE>
  #outer { color: red }
  #inner { float: right; width: 130px; color: blue }
</PRE>

<P>First, the <em>inner</em> box (whose width has been set explicitly)
is floated to the right margin. Then, the text of the <em>outer</em>
element that follows the inner element text flows in the space vacated
by the <em>inner</em> box. This flow respects the new right margin
established by the left border of the <em>inner</em> box.</P>

<P><img src="./images/flow-float.gif"
     alt="Image illustrating the effects of floating a box."></p>

<P>To show the effect of the <span
class="propinst-clear">'clear'</span> property, we add a <em>sibling</em>
element to the example:

<PRE class="html-example">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Comparison of positioning schemes II&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;P&gt;Beginning of body contents.
  &lt;SPAN id=outer&gt; Start of outer contents.
  &lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;
  &lt;SPAN id=sibling&gt; Sibling contents.&lt;/SPAN&gt;
  End of outer contents.&lt;/SPAN&gt;
  End of body contents.
  &lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The following rules:

<PRE class="example">
  #inner { float: right; width: 130px; color: blue }
  #sibling { color: red }
</PRE>

<P>cause the <em>inner</em> box to float to the right and the text of
the <em>sibling</em> element to flow in the vacated space:</P>

<P><img src="./images/flow-clear.gif"
     alt="Image illustrating the effects of floating a box without setting the clear property to control the flow of text around the box."></p>

<P>However, if the <span class="propinst-clear">'clear'</span>
property on the <em>sibling</em> element is set to 'right' (i.e., the
generated <em>sibling</em> box will not accept being positioned next
to floating boxes to its right), the <em>sibling</em> box is
moved below the float:

<PRE class="example">
  #inner { float: right; width: 130px; color: blue }
  #sibling { clear: right; color: red }
</PRE>

<P><img src="./images/flow-clear2.gif" 
alt="Image illustrating the effects of floating an element with setting the clear property to control the flow of text around the element."></p>

<H3>Absolute positioning</H3>

<p>Finally, we consider the effect of <a
href="#absolute-positioning">absolute positioning</a>.
Consider the following CSS declarations for <em>outer</em> and
<em>inner</em>:</p>

<PRE class="example">
  #outer { position: absolute; 
           top: 200px; 
           left: 200px; 
           width: 200px; 
           color: red }
  #inner { color: blue }
</PRE>

<p>which cause the top of the <em>outer</em> box to be positioned with
respect to the containing block (which we suppose is established
by the <a href="visudet.html#initial-containing-block">initial
containing block</a>).
The top side of the <em>outer</em> box is 200px from
the top of the containing block and the left side is 200px from the
left side. The child box of <em>outer</em> is flowed normally with
respect to its parent.</P>

<P><img src="./images/flow-absolute.gif"
   alt="Image illustrating the effects of absolutely positioning a box."></p>

<P>Note that because <em>outer</em> has been absolutely positioned, it
establishes a new containing block for descendant boxes (there aren't
any in this example).

<p>The following example shows an absolutely positioned box that
is a child of a relatively positioned box. Although the parent
<em>outer</em> box is not actually offset, setting its <span
class="propinst-position">'position'</span> property to 'relative'
causes its box to serve as the containing block for any descendant
boxes. Since the <em>outer</em> box is an inline box that is split
across several lines, only the first box (whose upper left-hand corner
is designated by a "@" in the illustration below) establishes the
containing block for the descendants.

<PRE class="example">
  #outer { position: relative; color: red }
  #inner { position: absolute; 
           top: 200px; 
           left: -100px; 
           height: 130px; 
           width: 130px; 
           color: blue }
</PRE>

<p>This results in something like the following:</p>

<P><img src="./images/flow-abs-rel.gif"
     alt="Image illustrating the effects of absolutely positioning a
box with respect to a containing block."></p>

<P>The following rules don't establish a new positioning
context for <em>inner</em>:

<PRE class="example">
  #outer { color: red }
  #inner {position: absolute; top: 200px; left: -100px; height:
    130px; width: 130px; color: blue;}
</PRE>

<P>but cause the <em>inner</em> box to be positioned with respect to
the containing block (which we assume here is
<a href="visudet.html#initial-containing-block">initial
containing block</a>).

<P><img src="./images/flow-static.gif"
     alt="Image illustrating the effects of absolutely positioning a box with respect to a coordinate system established by a normally positioned parent."></p>

<P>Relative and absolute positioning may be used to implement change
bars, as shown in the following example. We use a value of 'auto' for
the <span class="propinst-top">'top'</span> property, which results in
the box being placed at the "current" location, just as if the box
were being flowed into that space. The following HTML text:</p>

<pre>
&lt;P style=&quot;position: relative; margin-right: 10px; left: 10px;&quot;&gt;
I used two red hyphens to serve as a change bar. They
will &quot;float&quot; to the left of the line containing THIS
&lt;SPAN style=&quot;position: absolute; top: auto; left: 0px; color: red;&quot;&gt;--&lt;/SPAN&gt;
word.&lt;/P&gt;
</pre>

<p>might result in something like:</p>

<P><img src="./images/changebar.gif"
     alt="Image illustrating the use of floats to create a changebar effect."></p>

<H2><a name="z-order">Z-order</a>: Layered presentation</H2>
<P><em>In the following sections, the expression "in front of" 
means closer to the user as the user faces the screen.</em></P>

<P>CSS allows authors to specify the position of a box along three
axes. The <span class="index-def" title="stack level"><dfn>stack
level</dfn></span> of an element refers to the position of boxes it
generates in front of or behind other boxes. The stack level is
particularly relevant to boxes that overlap visually.

<P>The stack level of an element may be determined in two ways:</P>

<ul>
<li>Implicitly, by virtue of the element's position in the <a
href="conform.html#doctree">document tree</a>.
Boxes are stacked in the order their
source elements appear in the
document tree. Thus, a box is stacked in front of its parent and
preceding siblings and behind its children and following siblings.
<li>Explicitly, via the <span
class="propinst-z-index">'z-index'</span> property. 
</ul>

<H3><a name="stack-level">Specifying the stack level</a>: the <span
class="propinst-z-index">'z-index'</span> property</H3> 

<!-- #include src=properties/z-index.srb -->

<p>The <span class="propinst-z-index">'z-index'</span> property is
used to specify the stacking order of boxes outside the <a
href="#normal-flow">normal flow</a>. An element for which this
property is set establishes a <span class="index-def" title="stacking
context"><dfn>stacking context</dfn></span> in which its own <span
class="propinst-z-index">'z-index'</span> is 0.

<P>The values of this property have the following meanings:</p>

<dl>
<dt><strong>auto</strong>
<dd>The stack level of the generated box is given
by the element's position in the <a
href="conform.html#doctree">document tree</a>.
<dt><span class="value-inst-integer"><strong>&lt;integer&gt;</strong></span>
<dd>Specifies an explicit stack level for the generated box.
</dl>

<P>Elements for which the <span
class="propinst-z-index">'z-index'</span> property has been given an
integer value behave as follows:</P>

<ul>
    <li>Sibling boxes
        are stacked bottom-to-top in order of
    increasing <span class="propinst-z-index">'z-index'</span>
    value. When two siblings have the same <span
    class="propinst-z-index">'z-index'</span> value, the
    later sibling generates boxes in front of those generated by
    the earlier sibling.

    <li>Elements with negative <span
    class="propinst-z-index">'z-index'</span> values generate boxes
    behind level 0 boxes in the current stacking context. Elements with
    positive <span class="propinst-z-index">'z-index'</span> values
    generate boxes in front of level 0 boxes in the current stacking context.

   <li>A <span class="propinst-z-index">'z-index'</span> value of 0 is
       equivalent to a value of 'auto'.
</ul>

<p>The relative z-order of two elements that are neither siblings
nor parent/child can be determined by evaluation of the previous
rules for both elements' ancestors. </p>

<div class="html-example"><P>
<P>In the following example, the order of the elements, listed
back-to-front is: "image", "text2", and "text1".

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Z-order positioning&lt;/TITLE&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
.pile { position: absolute; left: 2in; top: 2in; width: 3in; height: 3in; }
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;
&lt;IMG alt="A butterfly image"
     src=&quot;butterfly.gif&quot; 
     class=&quot;pile&quot; 
     id=&quot;image&quot; 
     style=&quot;z-index: 1&quot;&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text1&quot; style=&quot;z-index: 3&quot;&gt;
   This text will overlay the butterfly image.
&lt;/DIV&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text2&quot; style=&quot;z-index: 2&quot;&gt;
   This text will underlay text1, but overlay the butterfly image
&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>


<p>This example demonstrates the notion of
<em>transparency</em>. The default behavior of a box is to allow boxes
behind it to be visible through transparent areas in its content. In
the example, each box transparently overlays the boxes below it. This
behavior can be overridden by using one of the existing
<a href="colors.html#background-properties">
background properties</a>.
</BODY>
</HTML>
