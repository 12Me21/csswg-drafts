<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: visuren.src,v 2.57 1998-04-30 22:14:17 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual formatting model</TITLE>
</HEAD>
<BODY>
<H1 align="center">Visual formatting model</H1>

<H2>Introduction to the visual formatting model</H2>

<P>This chapter and the next describe the <span class="index-def"
title="visual formatting model">visual formatting model</span>: how user
agents process the <a href="conform.html#doctree">document tree</a>
for visual <a href="media.html">media</a>.

<P>In the visual formatting model, each element in the document tree
generates zero or more boxes according to the <a href="box.html">box
model</a>. The layout of these boxes is governed by:</p>

<ul>
<li><a href="box.html#box-dimensions">box dimensions</a> and <a
href="#box-gen">type</a>.
<li><a href="#positioning-scheme">positioning scheme</a>
(normal flow, float, and absolute).
<li>relationships between elements
in the <a href="conform.html#doctree">document tree.</a>
<li>external information (e.g., viewport size, intrinsic
dimensions of images, etc.).
</ul>

<P>The properties defined in this chapter and the next apply to both
<a href="media.html#continuous-media-group">continuous media</a> and
<a href="media.html#paged-media-group">paged media</a>. However, the
meanings of the <a href="box.html#margin-properties">margin
properties</a> vary when applied to paged media (see the <a
href="page.html#page-model">page model</a> for details).

<P>The visual formatting model does not specify all aspects of
formatting (e.g., it does not specify a letter-spacing algorithm). <a
href="conform.html#conformance">Conforming user agents</a> may behave
differently for those formatting issues not covered by this
specification.

<h3>The viewport</h3>

<P>User agents for <a
href="media.html#continuous-media-group">continuous media</a>
generally offer users a <span class="index-def" title="viewport"><a
name="viewport"><dfn>viewport</dfn></a></span> (a window or other
viewing area on the screen) through which users consult a
document. User agents may change the document's layout when the
viewport is resized (see the <a
href="#initial-containing-block">initial containing block</a>).  When
the viewport is smaller than the document's initial containing block,
the user agent should offer a scrolling mechanism.  There is at most
one viewport per <a href="intro.html#canvas">canvas</a>, but user
agents may render to more than one canvas (i.e., provide different
views of the same document).


<H3><span class="index-def" title="containing block">
<a name="containing-block">Containing blocks</a></span>
</H3>

<P>In CSS2, many box positions and sizes are calculated with respect
to the edges
of a rectangular box called a <span class="index-def"
title="containing block"><dfn>containing block</dfn></span>.  In
general, generated boxes act as containing blocks for descendant
boxes; we say that a box "establishes" the containing block for its
descendants. The phrase "a box's containing block" means "the
containing block in which the box lives," not the one it generates.

<P>Each box is given a position with respect to its containing block,
but it is not confined by this containing block; it may <a
href="visufx.html#overflow">overflow</a>.

<P>The root of the <a href="conform.html#doctree">document tree</a>
generates a box that serves as the <span class="index-def"
title="initial containing block|containing block::initial"><a
name="initial-containing-block"><dfn>initial containing
block</dfn></a></span> for subsequent layout. 

<P>The width of the initial containing block may be specified with the
<span class="propinst-width">'width'</span> property for the root
element. If this property has the value 'auto', the user agent
supplies the initial width (e.g., the user agent uses the current
width of the <a href="#viewport">viewport</a>).

<P>The height of the initial containing block may be specified with
the <span class="propinst-height">'height'</span> property for the
root element. If this property has the value 'auto', the containing
block height will grow to accommodate the document's content.

<P>The initial containing block cannot be positioned or floated (i.e.,
user agents <a href="syndata.html#ignore">ignore</a> the <span
class="propinst-position">'position'</span> <span
class="propinst-float">'float'</span> properties for the root
element).

<P>The <a href="visudet.html#containing-block-details">details</a> of
how a containing block's dimensions are calculated are described in
the <a href="visudet.html">next chapter</a>.

<H2><a name="box-gen">Controlling box generation</a></h2>

<P>The following sections describe the types of boxes that may be
generated in CSS2. A box's type affects, in part, its behavior in the
visual formatting model. The <span
class="propinst-display">'display'</span> property, described below,
specifies a box's type.

<H3>Block-level elements and block boxes</h3>

<P><span class="index-def" title="block-level
element"><a name="block-level"><dfn>Block-level elements</dfn></a></span> are those elements of
the source document language that are formatted visually as
blocks (e.g., paragraphs). Several values of the <span
class="propinst-display">'display'</span> property make an element
block-level: 'block', 'list-item', 'compact' and 'run-in' (part of the
time; see <a href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>),
and 'table'.

<P>Block-level elements generate a <span class="index-def"
title="principal block box"><a name="principal-box"><dfn>principal
block box</dfn></a></span> that only contains <span class="index-def"
title="block box"><a name="block-box"><dfn>block
boxes</dfn></a></span>. The principal block box establishes the <a
href="#containing-block">containing block</a> for descendant boxes and
generated content and is also the box involved in any positioning
scheme.  Sibling principal block boxes participate in a <a
href="#block-formatting">block formatting context</a>.

<P>Some block-level elements generate additional boxes outside of the
principal box: 'list-item' elements and those with markers. These
additional boxes follow the principal box when it is 
<a href="#positioned-element">positioned</a>.

<h4><a name="anonymous-block-level">Anonymous block boxes</a></h4>

<p>In a document like this:

<pre>
&lt;DIV>
  Some text
  &lt;P>Some more text
&lt;/DIV>
</pre>

(and assuming the DIV and the P both have 'display: block'), the
DIV appears to have both inline content and block content. To make it
easier to define the formatting, we assume that there is an <em><span
class="index-def" title="anonymous">anonymous block box</span></em>
around "Some text".

<div class="figure">
<p><img src="images/anon-block.gif" alt="diagram showing the three
boxes for the example above"> <p class="caption">Diagram showing the
three boxes, of which one is anonymous, for the example above
</div>

<p>In other words: if a block box (such as that generated for
the DIV above) has another block box inside it (such as the P
above), then we force it to have <em>only</em> block boxes
inside it, by wrapping any inline boxes in an anonymous block box.

<div class="example">
<P>This model would apply in the following example if the 
the following rules:</p>

<PRE>
/* Note: HTML UAs may not respect these rules */
BODY { display: inline }
P    { display: block }
</PRE>

<P>were used with this HTML document:</p>

<PRE class="html-example">
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Anonymous text interrupted by a block&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
<em>This is anonymous text before the P.</em>
&lt;P&gt;This is the content of P.&lt;/&gt;
<em>This is anonymous text after the P.</em>
&lt;/BODY&gt;
</PRE>

<P>The BODY element contains a chunk (C1) of anonymous text followed
by a block-level element followed by another chunk (C2) of anonymous
text. The resulting boxes would be an anonymous block box for BODY,
containing an anonymous block box around C1, the P block box, and
another anonymous block box around C2.
</div>

<p>The properties of anonymous boxes are inherited from the
enclosing non-anonymous box (in the example: the one for
DIV). Non-inherited properties have their initial value. For example,
the font of the anonymous box is inherited from the DIV, but the
margins will be 0.

<H3>Inline-level elements and inline boxes</h3>

<P><span class="index-def" title="inline-level element">
<a name="inline-level"><dfn>Inline-level
elements</dfn></a></span> are those elements of the source document that
do not form new blocks of content; the content is distributed in lines
 (e.g., emphasized pieces of text
within a paragraph, inline images,
etc.). Several values of the <span
class="propinst-display">'display'</span> property make an element
inline: 'inline', 'inline-table', 
'compact' and 'run-in' (part of the time; see <a
href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>). 
Inline-level elements generate <a name="inline-box">inline boxes</a>.

<P>Inline boxes may participate in several formatting contexts:</p>

<ul>
<li>Within a block box, an inline boxes participate in an <a
href="#inline-formatting">inline formatting context</a>.
<li>A <a href="#compact">compact</a> inline box 
is given a position in the margin of a block box.
<li><a href="generate.html#markers">Marker</a> inline boxes are 
also given positions outside of a block box.
</ul>

<h4><a name="anonymous">Anonymous inline boxes</a></h4>

<p>In a document like this:

<pre>
&lt;P>Some &lt;EM>emphasized&lt;/em> text
</pre>

<p>The P generates a block box, with several inline boxes inside
it. The box for "emphasized" is an inline box generated by an inline
element (EM), but the other boxes ("Some" and "text") are inline boxes
generated by a block-level element (P). The latter are called <span
class="index-def" title="anonymous inline boxes">anonymous inline
boxes</span>, because they don't have an associated inline-level element.

<p>Such anonymous inline boxes inherit inheritable properties from
their block parent box. Non-inherited properties have their
initial value.

<p>In the example, the color of the anonymous initial boxes is
inherited from the P, but the background is transparent.

<p>If it is clear from the context which type of anonymous box is
meant, both anonymous inline boxes and anonymous block boxes are
simply called anonymous boxes in his specification.

<p>There are more types of anonymous boxes in the <a
href="tables.html#anonymous-boxes">table context</a>.

<H3><a name="compact">Compact boxes</a></h3>

<P>A <span class="index-def" title="compact box"><a name="compact"><dfn>compact
box</dfn></a></span> behaves as follows:</p>

<ul>
<li>If a <a href="#block-box">block</a> box (that does not
float and is not absolutely positioned) 
follows the compact box, the compact box is
formatted like a one-line inline box.  
The resulting box width is compared to one of the side margins of
the block box. 
The choice of left or right margin is determined
by the <span class="propinst-direction">'direction'</span> specified
for the element producing the <a href="#containing-block">
containing block</a> for the compact box and following box.
If the inline box width is less
than or equal to the margin, the inline box is given
a position in the margin as described immediately below.

<li>Otherwise, the compact box becomes a block box.
</ul>

<P>The compact box is given a position in the margin as follows: it is
outside (to the left or right) of the first <a href="#line-box">line
box</a> of the block, but it affects the calculation of that <a
href="visudet.html#line-height">line box's height</a>. The <span
class="propinst-vertical-align">'vertical-align'</span> property of
the compact box determines the vertical position of the compact box
relative to that line box. The horizontal position of the compact box
is always in the margin of the block box.

<P>An element that cannot be formatted on one line cannot be placed in
the margin of the following block. For example, a 'compact' element in
HTML that contains a BR element will always be formatted as a
block box (assuming the default style for BR, which inserts a
newline). For placing multi-line texts in the margin, the <span
class="propinst-float">'float'</span> property is often more appropriate.

<div class="html-example">
<p>The following example illustrates a compact box.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;A compact box example&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      DT { display: compact }
      DD { margin-left: 4em }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DL&gt;
      &lt;DT&gt;Short
        &lt;DD&gt;&lt;P&gt;Description goes here.
      &lt;DT&gt;too long for the margin
        &lt;DD&gt;&lt;P&gt;Description goes here.
    &lt;/DL&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<P>This example might be formatted as:

<pre>
<b>short</b>    Description goes here

<b>too long for the margin</b>
         Description goes here
</pre>

<p>The <span class="propinst-text-align">'text-align'</span> property
can be used to align the compact element inside the margin: against
the left edge of the margin ('left'), against the right edge
('right'), or centered in the margin ('center'). The value 'justify'
doesn't apply, and is handled as either 'left' or 'right', depending
on the <span class="propinst-direction">'direction'</span> of the
block-level element in whose margin the compact element is
formatted. ('left' if the direction is 'ltr', 'right' if it is 'rtl'.)

<P>Please consult the section on 
<a href="generate.html#compact-run-in-gen">generated content</a>
for information about how compact boxes interact with generated
content.

<H3><a name="run-in">Run-in boxes</a></h3>

<P>A <span class="index-def" title="run-in box"><dfn>run-in
box</dfn></span> behaves as follows:</p>

<ul>
<li>If a <a href="#block-box">block</a>
box (that does not float and is not
absolutely positioned) follows the run-in
box, the run-in box becomes the first inline box of the block box.  
<li>Otherwise, the run-in box becomes a block box.
</ul>

<p>A 'run-in' box is useful for run-in headers, as
in this example:

<div class="html-example">
<P>
<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;A run-in box example&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      H3 { display: run-in }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;H3&gt;A run-in heading.&lt;/H3&gt;
    &lt;P&gt;And a paragraph of text that
       follows it.
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<p>This example might be formatted as:

<pre>
  <b>A run-in heading.</b> And a
  paragraph of text that 
  follows it.
</pre>

<p>The properties of the run-in element are inherited from its
parent in the source tree, not from the block box it visually
becomes part of.

<P>Please consult the section on 
<a href="generate.html#compact-run-in-gen">generated content</a>
for information about how run-in boxes interact with generated
content.

<h3><a name="display-prop">The</a> <span
class="propinst-display">'display'</span> property</h3>

<!-- #include src=properties/display.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><span class="index-def" title="'block', definition of"><a
name="value-def-block"><strong>block</strong></a></span>

<dd>This value causes an element to generate a 
principal block box.

<dt><span class="index-def" title="'inline', definition of"><a
name="value-def-inline"><strong>inline</strong></a></span>

<dd>This value causes an element to generate one or more inline boxes.

<dt><span class="index-def" title="'list-item', definition of"><a
name="value-def-list-item"><strong>list-item</strong></a></span>
<dd>This value causes an element (e.g., LI in HTML) to generate a
principal block box and a list-item inline box. For information about
lists and examples of list formatting, please consult the section on
<a href="generate.html#lists">lists</a>.

<dt><span class="index-def" title="marker', definition of"><a
name="value-def-marker"><strong>marker</strong></a></span> 
<dd>This value declares <a href="generate.html">generated content</a>
before or after a box to be a marker. This value should only be
used with <a href="generate.html#before-after-content">:before and :after
pseudo-elements</a> attached to block-level elements.
In other cases, this value is interpreted as 'inline'.
Please consult the section on <a
href="generate.html#markers">markers</a> for more information.

<dt><strong>none</strong>

<dd><span class="index-def" title="'none'::as display value">This
value</span> causes an element to generate <b>no</b> boxes in the <a
href="intro.html#formatting-structure">formatting structure</a> (i.e.,
the element has no effect on layout).  Descendant elements do not
generate any boxes either; this behavior <strong>cannot</strong> be
overridden by setting the <span
class="propinst-display">'display'</span> property on the descendants.

<P>Please note that a display of 'none' does not create an invisible
box; it creates no box at all. CSS includes mechanisms that enable an
element to generate boxes in the formatting structure that affect
formatting but are not visible themselves. Please consult the section
on <a href="visufx.html#visibility">visibility</a> for details.

<dt><span class="index-def" title="'run-in', definition of"><a
name="value-def-run-in"><strong>run-in</strong></a></span>
and <span class="index-def" title="'compact', definition of"><a
name="value-def-compact"><strong>compact</strong></a></span>
<dd>These values create either block or 
inline boxes, depending on context. 
Properties apply to run-in and compact boxes based on their
final status (inline-level or block-level).  For example, the <span
class="propinst-white-space">'white-space'</span> property only
applies if the box becomes a block box.

<dt><span class="index-inst" title="'table'"><a
name="value-inst-table"><strong>table</strong></a></span>, <span
class="index-inst" title="'inline-table'"><a
name="value-inst-inline-table"><strong>inline-table</strong></a></span>, <span
class="index-inst" title="'table-row-group'"><a
name="value-inst-table-row-group"><strong>table-row-group</strong></a></span>,
<span class="index-inst" title="'table-column-group'"><a
name="value-inst-table-column-group"><strong>table-column-group</strong></a></span>,
<span class="index-inst" title="'table-header-group'"><a name="value-inst-table-header-group"><strong>table-header-group</strong></a></span>,
<span class="index-inst" title="'table-footer-group'"><a name="value-inst-table-footer-group"><strong>table-footer-group</strong></a></span>,
<span class="index-inst" title="'table-row'"><a
name="value-inst-table-row"><strong><strong>table-row</strong></strong></a></span>, <span
class="index-inst" title="'table-cell'"><a
name="value-inst-table-cell"><strong><strong>table-cell</strong></strong></a></span>, and <span
class="index-inst" title="'table-caption'"><a
name="value-inst-table-caption"><strong>table-caption</strong></a></span>
<dd>These values cause an element to behave like a table element
(subject to restrictions described in the chapter on <a
href="tables.html">tables</a>).
</dl>

<P>Note that although the <a href="cascade.html#initial-value">initial
value</a> of <span class="propinst-display">'display'</span> is
'inline', rules in the user agent's <a
href="cascade.html#default-style-sheet">default style sheet</a> may <a
href="cascade.html">override</a> this value. See the <a
href="sample.html">sample style sheet</a> for HTML 4.0 in the
appendix.

<div class="example"><P>
<P>Here are some examples of the <span
class="propinst-display">'display'</span> property:

<PRE>
P   { display: block }
EM  { display: inline }
LI  { display: list-item } 
IMG { display: none }      /* Don't display images */
</PRE>
</div>

<P><span class="index-inst" title="conformance"><a
href="conform.html#conformance">Conforming</a></span> HTML user agents
may <span class="index-inst" title="ignore"><a
href="syndata.html#ignore">ignore</a></span> the <span
class="propinst-display">'display'</span> property when specified in
author and user style sheets but must specify a value for it in the <a
href="cascade.html#default-style-sheet">default style sheet</a>.

<h2><a name="positioning-scheme">Positioning schemes</a></h2>

<P>In CSS2, a box may be laid out according to three <span
class="index-def" title="positioning scheme"><dfn>positioning
schemes</dfn></span></p>

<ol>
<li><a href="#normal-flow">Normal flow</a>. In CSS2, normal
flow includes <a href="#block-formatting">block formatting</a>
of <a href="#block-box">block</a> boxes, 
<a href="#inline-formatting">inline formatting</a>
of <a href="#inline-box">inline </a> boxes, <a
href="#relative-positioning">relative positioning</a> of
block or inline boxes, and positioning of
<a href="#compact">compact</a> and <a href="#run-in">run-in</a> boxes.
<li><a href="#floats">Floats</a>. In the float model,
a box is first laid out according to the normal flow, then 
taken out of the flow and shifted
to the left or right as far as possible. Content may
flow along the side of a float.
<li><a href="#absolute-positioning">Absolute positioning</a>. 
In the absolute positioning model, a box is removed from
the normal flow entirely (it has no impact on later siblings)
and assigned a position with respect to a containing block.
</ol>

<h3><a name="choose-position">Choosing a positioning scheme:</a> <span
class="propinst-position">'position'</span> property</h3>

<P>The <span class="propinst-position">'position'</span> and <span
class="propinst-float">'float'</span> properties determine which 
of the CSS2 positioning algorithms is used to calculate 
the coordinates of a box.

<!-- #include src=properties/position.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><strong>static</strong>

<dd>The box is a normal box, laid out according to the <a
href="#normal-flow">normal flow</a>. The <span
class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> properties do not apply. 
<strong>Note.</strong>The word
"static" may seem confusing&#8212;'fixed' is arguably more static than
'static'&#8212;but 'static' was chosen because the expectation is that it
will most often be used in scripts that "animate" elements by
modifying <span class="propinst-top">'top'</span>, <span
class="propinst-left">'left'</span>, <span
class="propinst-bottom">'bottom'</span>, and/or <span
class="propinst-right">'right'</span>.

<dt><strong>relative</strong>

<dd>The box coordinates are calculated according to the <a
href="#normal-flow">normal flow</a>, then the box is offset <a
href="#relative-positioning">relative</a> to its normal position. When
a box B is relatively positioned, the position of the following box is
calculated as though B were not offset.

<dt><strong>absolute</strong>
<dd> The box coordinates (and possibly size) are specified
with the <span class="propinst-left">'left'</span>,
<span class="propinst-right">'right'</span>, 
<span class="propinst-top">'top'</span>,
and <span class="propinst-bottom">'bottom'</span> properties.
These properties specify offsets with respect to the box's
<a href="#containing-block">containing block</A>. Absolutely
positioned boxes are taken out of the normal flow. This means
they have no impact on the layout of later siblings. Also,
though absolutely positioned boxes have margins, they
do not <a href="box.html#collapsing-margins">collapse</a>
with any other margins.

<dt><strong>fixed</strong>
<dd> The box coordinates are calculated according to the 'absolute'
model, but in addition, the box is <a
href="#fixed-positioning">fixed</a> with respect to some reference. In
the case of <a href="media.html#continuous-media-group">continuous
media</a>, the box is fixed with respect to the <a
href="#viewport">viewport</A> (and doesn't move when scrolled).  In
the case of <a href="media.html#paged-media-group">paged media</a>,
the box is fixed with respect to the page, even if that page is seen
through a <a href="#viewport">viewport</A> (in the case of a
print-preview, for example).  Authors may wish to specify 'fixed' in a
media-dependent way.  For instance, an author may want a box to remain
at the top of the <a href="#viewport">viewport</A> on the screen, but
not at the top of each printed page. The two specifications may be
separated by using an <a href="media.html#at-media-rule">@media
rule</a>, as in:

<div class="example"><P>
<PRE>   
@media screen { 
  H1#first { position: fixed } 
}
@media print { 
  H1#first { position: static }
}
</PRE>   
</div>
</dl>

<P>An element is said to be <span class="index-def" title="positioned
element"><a name="positioned-element"><dfn>positioned</dfn></a></span>
if its <span class="propinst-position">'position'</span> property has
a value other than 'static'. A positioned element generates
"positioned boxes." A positioned box's containing block must be
established by a positioned box (see the <a
href="visudet.html#containing-block-details">containing block
details</a>).

<H3><a name="position-props">Box offsets</a>: <span
class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span></H3>

<P>The position of a positioned box is established by four properties:

<!-- #include src=properties/top.srb -->

<P>This property specifies how far a box's top content edge is offset below
the top edge of the box's <a href="#containing-block">containing block</a>.

<!-- #include src=properties/right.srb -->

<P>This property specifies how far a box's right content edge is offset
to the left of the right edge of the box's <a
href="#containing-block">containing block</a>.

<!-- #include src=properties/bottom.srb -->

<P>This property specifies how far a box's bottom content edge is offset
above the bottom of the box's <a href="#containing-block">containing
block</a>.

<!-- #include src=properties/left.srb -->

<P>This property specifies how far a box's left content edge is offset
to the right of the left edge of the box's <a
href="#containing-block">containing block</a>.

<P>The values for the four properties have the following meanings:</p>

<dl>
<dt><strong><span class="value-inst-length">&lt;length&gt;</span></strong>
<dd>The offset is a fixed distance from the reference edge.

<dt><strong><span class="value-inst-percentage">&lt;percentage&gt;</span></strong>

<dd>The offset is a percentage of the containing block's width (for <span class="propinst-left">'left'</span> or <span
class="propinst-right">'right'</span>) or height (for <span
class="propinst-top">'top'</span> and <span
class="propinst-bottom">'bottom'</span>). For 'top'
and 'bottom', if the height of the
containing block is not specified explicitly 
(i.e., it depends on content height), the percentage value
is interpreted like 'auto'.
<dt><strong>auto</strong>
<dd>The effect of this value 
depends on which of related properties have the value 'auto' as
well. See the sections on the 
<a href="visudet.html#abs-non-replaced-width">width</a>
and <a href="visudet.html#abs-non-replaced-height">height</a>
of absolutely positioned, non-replaced elements for details.
</dl>

<P>For absolutely positioned boxes, the offsets are with respect to
the box's <a href="#containing-block">containing block</a>. For
relatively positioned boxes, the offsets are with respect to the outer
edges of the box itself (i.e., the box is given a position in the
normal flow, then offset from that position according to these
properties).

<H2><a name="normal-flow">Normal flow</a></H2> 

<P>Boxes in the normal flow belong to a <span class="index-def"
title="formatting context">formatting context</span>, which may be
block or inline, but not both simultaneously.  <a
href="#block-box">Block</a> boxes participate in a <a
href="#block-formatting">block formatting</a> context.  <a
href="#inline-box">Inline boxes</a> participate in an <a
href="#inline-formatting">inline formatting</a> context.

<h3><a name="block-formatting">Block formatting context</a></h3> 

<P>In a block formatting context, boxes are laid out one after the
other, vertically, beginning at the top of a containing block. The
vertical distance between two sibling boxes is determined by the <span
class="propinst-margin">'margin'</span> properties. Vertical margins
between adjacent block boxes in a block formatting context <a
href="box.html#collapsing-margins">collapse</a>.

<P>In a block formatting context, each box's left outer edge touches
the left edge of the containing block (for right-to-left formatting,
right edges touch). This is true even in the presence of floats
(although a box's <em>content</em> area may shrink due to the floats).

<P>For information about page breaks in paged media, please consult
the section on <a href="page.html#allowed-page-breaks">allowed
page breaks</a>.

<H3><a name="inline-formatting">Inline formatting context</a></H3>

<P>In an inline formatting context, boxes are laid out horizontally,
one after the other, beginning at the top of a containing
block. Horizontal margins, borders, and padding are respected between
these boxes. They may be aligned vertically in different ways: their
bottoms or tops may be aligned, or the baselines of text within them
may be aligned. The rectangular area that contains the boxes that form
a line is called a <span class="index-def" title="line box"><a
name="line-box"><dfn>line box</dfn></a></span>. The margin between the
first inline box in a line box and the near line box edge is
respected; the same holds for the last inline box and the opposite
line box edge.

<P>The width of a line box is determined by a <A
HREF="#containing-block">containing block</A>.  The height of a line
box is determined by the rules given in the section on <a
href="visudet.html#line-height">line height calculations</a>. A line
box is always tall enough for all of the boxes it contains. However,
it may be taller than the tallest box it contains (if, for example,
boxes are aligned so that baselines line up).  When the height of a
box B is less than the height of the line box containing it, the
vertical alignment of B within the line box is determined by the <span
class="propinst-vertical-align">'vertical-align'</span> property.

<P>When several inline boxes cannot fit within a single line box, they
are distributed among two or more vertically-stacked line boxes. Thus,
a paragraph is a vertical stack of line boxes. Line boxes are stacked
with no vertical separation and they never overlap.

<P>In left-to-right formatting, the left edge of a line box generally
touches the left edge of its containing block (right edges touch in
right-to-left formatting). However, floating boxes may come between
the containing block edge and the line box edge.  Thus, although line
boxes in the same inline formatting context generally have the same
width (that of the containing block), they may vary in width if
available horizontal space is reduced due to <a
href="#floats">floats</a>. Line boxes in the same inline formatting
context generally vary in height (e.g., one line might contain a tall
image while the others contain only text).

<P>When the total width of the inline boxes on a line is less than the
width of the line box containing them, their horizontal distribution
within the line box is determined by the <span
class="propinst-text-align">'text-align'</span> property.  If that
property has the value 'justify', the user agent may stretch the
inline boxes as well.

<P>Since an inline box may not exceed the width of a line box, long
inline boxes are split into several boxes and these boxes distributed
across several line boxes. When an inline box is split, margins,
borders, and padding have no visual effect where the split occurs.
Formatting of margins, borders, and padding may not be fully defined if
the split occurs within a bidirectional embedding.

<P>Inline boxes may also be split into several boxes <em>within the
same line box</em> due to <a href="#direction">bidirectional text
processing</a>.

<div class="html-example"><P> 
Here is an example of inline box construction. The following paragraph
(created by the HTML block-level element P) contains anonymous text
interspersed with the elements EM and STRONG:

<PRE>
&lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear
&lt;STRONG&gt;in this&lt;/STRONG&gt; sentence, dear.&lt;/P&gt;
</PRE>

<P>The P element generates a block box that contains five inline
boxes, three of which are anonymous:</p>

<ul>
<li>Anonymous: "Several"
<li>EM: "emphasized words"
<li>Anonymous: "appear"
<li>STRONG: "in this"
<li>Anonymous: "sentence, dear."
</ul>
 
<P>To format the paragraph, the user agent flows the five boxes into
line boxes. In this example, the box generated for the P element
establishes the containing block for the line boxes. If the containing
block is sufficiently wide, all the inline boxes will fit into a
single line box:

<PRE>
 Several <EM>emphasized words</EM> appear <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>If not, the inline boxes will be split up and distributed across
several line boxes. The previous paragraph might be split as follows:

<PRE>
Several <EM>emphasized words</EM> appear
<STRONG>in this</STRONG> sentence, dear.
</PRE>

or like this:

<PRE>
Several <EM>emphasized</EM>  
<EM>words</EM> appear <STRONG>in this</STRONG> 
sentence, dear.
</PRE>

</div>

<P>In the previous example, the EM box was split into two EM boxes
(call them "split1" and "split2"). Margins, borders,
padding, or text decorations have no visible effect after split1 or
before split2.

<div class="html-example"><P>
Consider the following example:

<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Example of inline flow on several lines&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      EM {
        padding: 2px; 
        margin: 1em;
        border-width: medium;
        border-style: dashed;
        line-height: 2.4em;
      }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>Depending on the width of the P, the boxes may be distributed as
follows:</P>

<div class="figure">
<P><img src="./images/inline-layout.gif"
     alt="Image illustrating the effect of line breaking on the
display of margins, borders, and padding."></p>
</div>

<ul>
<li> The margin is inserted before "emphasized" and after "words". 

<li> The padding is inserted before, above, and below
"emphasized" and after, above, and below "words". A
dashed border is rendered on three sides in each case.
</ul>
</div>

<H3><a name="relative-positioning">Relative positioning</a></H3>  

<P>Once a box has been laid out according to the <a
href="#normal-flow">normal flow</a>, it may be shifted relative to
this position. This is called <span class="index-def" title="relative
positioning"><dfn>relative positioning</dfn></span>. Offsetting a box
(B1) in this way has no effect on the box (B2) that follows: B2 is
given a position as if B1 were not offset and B2 is not re-positioned
after B1's offset is applied. This implies that relative positioning
may cause boxes to overlap.

<!-- The expression "normal flow shape" is confusing since,
in terms of line boxes, the shape is always rectangular -IJ -->

<p>Relatively positioned boxes keep their normal flow size, including
line breaks and the space originally reserved for them. A relatively
positioned box establishes a new a new <a
href="#containing-block">containing block</a> for normal
flow children and positioned descendants.

<P>A relatively positioned box is generated when the <span
class="propinst-position">'position'</span> property for an element
has the value 'relative'.  The offset is specified by the <span
class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties.

<P>Dynamic movement of relatively positioned boxes can produce
animation effects in scripting environments (see also the <span
class="propinst-visibility">'visibility'</span> property). Relative
positioning may also be used as a general form of superscripting and
subscripting except that line height is not automatically adjusted to
take the positioning into consideration. See the description of <a
href="visudet.html#line-height">line height calculations</a> for more
information.

<P>Examples of relative positioning are provided in the section <a
href="#comparison">comparing normal, relative, floating, and
absolute positioning</a>.

<H2><a name="floats">Floats</a></H2>

<P>A float is a box that is shifted to the left or right on the
current line. The most interesting characteristic of a floated box is
that content may flow along its side (or be prohibited from doing so
by the <span class="propinst-clear">'clear'</span> property). Content
flows down the right side of a left-floated box and down the left side
of a right-floated box. The following is an introduction to float
positioning and content flow; the exact <a
href="#float-rules">rules</a> governing float behavior are given in
the description of the <span class="propinst-float">'float'</span>
property.

<P>A floated box must have an explicit width (assigned via the <span
class="propinst-width">'width'</span> property, or its intrinsic width
in the case of replaced elements). Any floated box becomes a <a
href="#block-box">block box</a> that is shifted to the left or right
until its outer edge touches the containing block edge or the outer
edge of another float. The top of the floated box is aligned with the
top of the current line box (or bottom of the preceding block box if
no line box exists). If there isn't enough horizontal room on the
current line for the float, it is shifted downward, line by line,
until a line has room for it.

<P>Since a float is not in the flow, non-positioned block boxes
created before and after the float box flow vertically as if the float
didn't exist. However, line boxes created next to the float are
shortened to make room for the floated box.  Any content in the
current line before a floated box is reflowed in the first available
line on the other side of the float.

<P>Several floats may be adjacent, and this model also applies to
adjacent floats in the same line.

<div class="example"><P>
The following rule floats all IMG boxes with
<samp>class="icon"</samp> to the left (and
sets the left margin to '0'):</p>

<PRE>
IMG.icon { 
  float: left;
  margin-left: 0;
}
</PRE>
</div>


<div class="html-example"><P>
Consider the following HTML source and style sheet:</p>

<PRE>  
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Float example&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      IMG { float: left }
      BODY, P, IMG { margin: 2em }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;&lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
       Some sample text that has no other...
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The IMG box is floated to the left. The content that follows is
formatted to the right of the float, starting on the same line as the
float. The line boxes to the right of the float are shortened due to
the float's presence, but resume their "normal" width (that of the
containing block established by the P element) after the float.  This
document might be formatted as:</P>

<div class="figure">
<P><img src="./images/floateg.gif"
     alt="Image illustrating how floating boxes interact with
margins."></p>
</div>

<P>Formatting would have been exactly the same if the document had
been:

<PRE>
  &lt;BODY&gt;
    &lt;P&gt;Some sample text 
    &lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
             that has no other...
  &lt;/BODY&gt;
</PRE>

<P>because the content to the left of the float is displaced by
the float and reflowed down its right side.
</div>

<P>The margins of floating boxes never <a
href="box.html#collapsing-margins">collapse</a> with margins of
adjacent boxes. Thus, in the previous example, vertical margins do not
<a href="box.html#collapsing-margins">collapse</a> between the P box
and the floated IMG box.

<p>A float can overlap other boxes in the normal flow (e.g., when a
normal flow box next to a float has negative margins). When an inline
box overlaps with a float, it is formatted in front of the float. When
a block box overlaps, the background and borders of the block box are
"clipped" by the non-transparent parts of the float, but the content
is formatted in front of the float.

<div class="example">
<p>Here is another illustration, showing what happens when a float
overlaps borders of elements in the normal flow.

<div class="figure">
<p><img src="images/float2p.gif" alt="Image showing a floating image
that overlaps the borders of two paragraphs: the borders are
interrupted by the image.">

<p class="caption">The floating image is larger than the block that it
is a child of, so it interrupts the border of the block, and also the
border of the next block. Borders are "clipped" by floats.
</div>
</div>

<P>The following example illustrates the use of the <span
class="propinst-clear">'clear'</span> property to prevent content
from flowing next to a float.

<div class="example"><P>
This style rule means that no H1 element may have a floating
element to its left; this means that H1 elements will
flow starting below any left-floating box.

<PRE>
H1 { clear: left }
</PRE>
</div>

<div class="example">
<p>Here is an example illustrating the effect of 'clear: left' on two
paragraphs. Assuming a rule such as this:

<pre>
P { clear: left }
</pre>

<P>formatting might look like this:

<div class="figure">
<p><img src="images/floatclear.gif" alt="Image showing a floating
image and the effect of 'clear: left' on the two paragraphs.">

<p class="caption">Both paragraphs have set 'clear: left', which
causes the second paragraph to be "pushed down" to a position below
the float -- its top margin expands to accomplish this (see the <span
class="propinst-clear">'clear'</span> property).
</div>
</div>


<h3><a name="float-position">Positioning the float:</a> the
<span class="propinst-float">'float'</span> property</h3>

<!-- #include src=properties/float.srb -->

<P>This property specifies whether a box should float to the left,
right, or not at all. It may be set for elements that generate boxes
that are not absolutely positioned.  The values of this property have
the following meanings:</p>

<dl>
<dt><strong>left</strong>

<dd>The element generates a <a href="#block-box">block</a> box that is
floated to the left. Content flows on the right side of the box,
starting at the top (subject to the <span
class="propinst-clear">'clear'</span> property). The <span
class="propinst-display">'display'</span> is ignored, unless it has
the value 'none'.

<dt><strong>right</strong>

<dd>Same as 'left', but content flows on the left side of the box,
starting at the top.

<dt><strong>none</strong>

<dd>The box is not floated.
</dl>


<P><span class="index-def" title="float rules"><a
name="float-rules">Here are the precise rules</a></span> that
govern the behavior of floats:</p>

<OL>
<LI> The left <a href="box.html#outer-edge">outer edge</a> of a
left-floating box may not be to the left of the left edge of its <a
href="#containing-block">containing block</a>. An
analogous rule holds for right-floating elements.

<LI> If the current box is left-floating, and there are any left
floating boxes generated by elements earlier in the source document,
then for each such earlier box, either the left <a
href="box.html#outer-edge">outer edge</a> of the current box must be
to the right of the right <a href="box.html#outer-edge">outer edge</a>
of the earlier box, or its top must be lower than the bottom of the
earlier box. Analogous rules hold for right-floating boxes.

<LI>The right <a href="box.html#outer-edge">outer edge</a> of a
left-floating box may not be to the right of the left <a
href="box.html#outer-edge">outer edge</a> of any right-floating
box that is to the right of it. Analogous rules hold for
right-floating elements.

<LI>A floating box's <a href="box.html#outer-edge">outer top</a>
may not be higher than the top of its <a
href="#containing-block">containing block</a>.

<LI> The <a href="box.html#outer-edge">outer top</a> of a floating box
may not be higher than the outer top of any <a
href="#block-box">block</a> or <a
href="#floats">floated</a> box generated by an element
earlier in the source document.

<LI>The <a href="box.html#outer-edge">outer top</a> of an element's
floating box may not be higher than the top of any <span
class="index-inst" title="line-box"><a
href="#line-box">line-box</a></span> containing a box
generated by an element earlier in the source document.

<LI> A floating box must be placed as high as possible.

<LI> A left-floating box must be put as far to the left as
possible, a right-floating box as far to the right as possible. A
higher position is preferred over one that is further to the
left/right.
</OL>

<H3><a name="flow-control">Controlling flow next to floats:</a>
the <span class="propinst-clear">'clear'</span> property</H3> 

<!-- #include src=properties/clear.srb -->

<P>This property indicates which sides of an element's box(es) may
<em>not</em> be adjacent to an earlier floating box. (It may be that
the element itself has floating descendants; the <span
class="propinst-clear">'clear'</span> property has no effect on
those.)

<p>This property may only be specified for <a
href="#block-level">block-level</a> elements (including floats).  For
<a href="#compact">compact</a> and <a href="#run-in">run-in boxes</a>,
this property applies to the final block box to which the compact or
run-in box belongs.

<P>Values have the following meanings when applied to non-floating
block boxes:</P>

<dl>
<dt><strong>left</strong>

<dd>The top margin of the generated box is increased enough that the
top border edge is below the bottom outer edge of any left-floating
boxes that resulted from elements earlier in the source document.

<dt><strong>right</strong>

<dd>Same as left, but with respect to right-floating boxes.

<dt><strong>both</strong>

<dd>The generated box is moved below all floating
boxes of earlier elements in the source document..

<dt><strong>none</strong>

<dd>No constraint on the box's position with respect to floats.
</dl>

<p>When the property is set on floating elements, it results in a
modification of the <a href="#float-rules">rules</a> for
positioning the float. An extra constraint (#9) is added:

<ul>
<li>The top outer edge of the float must be below the bottom outer
edge of all earlier left-floating boxes (in the case of 'clear:
left'), or all earlier right-floating boxes (in the case of 'clear:
right'), or both ('clear: both').
</ul>
 

<H2><a name="absolute-positioning">Absolute positioning</a></H2>

<P>In the absolute positioning model, a box is assigned explicit
coordinates with respect to its containing block.  It is removed from
the normal flow entirely (it has no impact on later siblings).  An
absolutely positioned box establishes a new containing block for
normal flow children and positioned descendants.
However, the contents of an absolutely positioned element do not flow
around any other boxes. They may or may not obscure the contents of
another box, depending on the <a href="#stack-level">stack levels</a>
of the overlapping boxes.

<H3><a name="fixed-positioning">Fixed positioning</a></H3>

<P>Fixed positioning is a subcategory of absolute positioning. The
only difference is that for a fixed positioned box, the containing
block is established by the <a href="#viewport">viewport</A>.  For <a
href="media.html#continuous-media-group">continuous media</a>, fixed
boxes do not move when the document is scrolled. In this respect, they
are similar to <a href="colors.html#background-properties">fixed
background images</a>.  For <a href="page.html">paged media</a>, boxes
with fixed positions are repeated on every page. This is useful for
placing, for instance, a signature at the bottom of each page.

<div class="html-example">
<P>Authors may use fixed positioning to create frame-like presentations.
Consider the following frame layout:</P>

<div class="figure">
<P><img src="./images/frame.gif"
     alt="Image illustrating a frame-like layout with position='fixed'."></p>
</div>

<P>This might be achieved with the following HTML document and
style rules:</P>

<PRE>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;A frame document with CSS2&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      BODY { height: 8.5in } /* Required for percentage heights below */
      #header {
        position: fixed;
        width: 100%;
        height: 15%;
        top: 0;
        right: 0;
        bottom: auto;
        left: 0;
      }
      #sidebar {
        position: fixed;
        width: 10em;
        height: auto;
        top: 15%;
        right: auto;
        bottom: 100px;
        left: 0;
      }
      #main {
        position: fixed;
        width: auto;
        height: auto;
        top: 15%;
        right: 0;
        bottom: 100px;
        left: 10em;
      }
      #footer {
        position: fixed;
        width: 100%;
        height: 100px;
        top: auto;
        right: 0;
        bottom: 0;
        left: 0;
      }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DIV id="header"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="sidebar"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="main"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="footer"&gt; ...  &lt;/DIV&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</DIV>

<h2>Relationships between 'display', 'position', and 'float'</h2>

<P>The three properties that affect box generation and layout -- <span
class="propinst-display">'display'</span>, <span
class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> -- interact as follows:</p>

<ol>
<li>If <span class="propinst-display">'display'</span>
has the value 'none',
user agents must <a href="syndata.html#ignore">ignore</a>
<span class="propinst-position">'position'</span> and
<span class="propinst-float">'float'</span>. In this
case, the element generates no box.

<li>Otherwise, if <span class="propinst-position">'position'</span>
has the value 'absolute' or 'fixed', <span
class="propinst-display">'display'</span> is set to 'block' and <span
class="propinst-float">'float'</span> is set to 'none'.  The position
of the box will be determined by the <span
class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span> and <span
class="propinst-left">'left'</span> properties and the box's
containing block.

<!-- What about 'relative'? Does 'relative' make the box a block box?
If not make sure to review definition of "positioned element". Also,
make sure containing block (visudet.src) definition is correct. -IJ -->


<li>Otherwise, if <span class="propinst-float">'float'</span> has a
value other than 'none', <span
class="propinst-display">'display'</span> is set to 'block' and the
box is floated.

<li>Otherwise, the remaining <span
class="propinst-display">'display'</span> properties apply
as specified.
</ol>

<div class="note"><P>
<em><strong>Note.</strong> CSS2 does not
specify layout behavior when values for these properties are changed
by scripts.  For example, what happens when an element having 'width:
auto' is repositioned? Do the contents reflow, or do they maintain
their original formatting?  The answer is outside the scope of this
document, and such behavior is likely to differ in initial
implementations of CSS2.
</em>
</div>

<H2><a name="comparison">Comparison of normal flow, floats,  
and absolute positioning</a></H2>
<P>To illustrate the differences between normal flow, relative
positioning, floats, and absolute positioning, we provide a series of
examples based on the following HTML fragment:

<pre class="html-example">
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Comparison of positioning schemes&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;Beginning of body contents.
      &lt;SPAN id="outer"&gt; Start of outer contents.
      &lt;SPAN id="inner"&gt; Inner contents.&lt;/SPAN&gt;
      End of outer contents.&lt;/SPAN&gt;
      End of body contents.
    &lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<P>In this document, we assume the following rules:</p>

<PRE class="example">
BODY { display: block; line-height: 200%; 
       width: 400px; height: 400px }
P    { display: block }
SPAN { display: inline }
</PRE>

<p>The final positions of boxes generated by the <em>outer</em> and
<em>inner</em> elements vary in each example. In each illustration,
the numbers to the left of the illustration indicate the <a
href="#normal-flow">normal flow</a> position of the double-spaced (for
clarity) lines. (Note: the illustrations use different horizontal and
vertical scales.)</p>

<H3>Normal flow</H3>

<p>Consider the following CSS declarations for <em>outer</em> and
<em>inner</em> that don't alter the <a href="#normal-flow">normal
flow</a> of boxes:</p>

<PRE class="example">
#outer { color: red }
#inner { color: blue }
</PRE>

<P>The P element contains all inline content: <a
href="#anonymous">anonymous inline text</a> and two SPAN
element. Therefore, all of the content will be laid out
in an inline formatting context, within a containing block
established by the P element, producing something like:</p>

<div class="figure">
<P><img src="./images/flow-generic.gif"
     alt="Image illustrating the normal flow of text between parent and sibling boxes."></p>
</div>

<H3>Relative positioning</H3>

<P>To see the effect of <a href="#relative-positioning">relative
positioning</a>, we specify:</P>

<PRE class="example">
#outer { position: relative; top: -12px; color: red }
#inner { position: relative; top: 12px; color: blue }
</PRE>

<p>Text flows normally up to the <em>outer</em> element.  The
<em>outer</em> text is then flowed into its normal flow position and
dimensions at the end of line 1. Then, the inline boxes containing the
text (distributed over three lines) are shifted as a unit by '-12px'
(upwards).

<P>The contents of <em>inner</em>, as a child of <em>outer</em>, would
normally flow immediately after the words "of outer contents" (on line
1.5). However, the <em>inner</em> contents are themselves offset
relative to the <em>outer</em> contents by '12px' (downwards), back to
their original position on line 2.

<P>Note that the content following <em>outer</em> is not affected by the
relative positioning of <em>outer</em>.</P>

<div class="figure">
<P><img src="./images/flow-relative.gif"
     alt="Image illustrating the effects of relative positioning on a
box's content."></p>
</div>

<P>Note also that had the offset of <em>outer</em> been '-24px', the
text of <em>outer</em> and the body text would have overlapped.

<H3>Floating a box</H3>

<P>Now consider the effect of <a href="#floats">floating</a> the
<em>inner</em> element's text to the right by means of the following
rules:

<PRE class="example">
#outer { color: red }
#inner { float: right; width: 130px; text-align: top; color: blue }
</PRE>

<P>Text flows normally up to the <em>inner</em> box, which is pulled
out of the flow and floated to the right margin (its <span
class="propinst-width">'width'</span> has been assigned explicitly).
Line boxes to the left of the float are shortened, and the 
document's remaining text flows into them.</p>

<div class="figure">
<P><img src="./images/flow-float.gif"
     alt="Image illustrating the effects of floating a box."></p>
</div>

<P>To show the effect of the <span
class="propinst-clear">'clear'</span> property, we add a <em>sibling</em>
element to the example:

<PRE class="html-example">
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Comparison of positioning schemes II&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;Beginning of body contents.
      &lt;SPAN id=outer&gt; Start of outer contents.
      &lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;
      &lt;SPAN id=sibling&gt; Sibling contents.&lt;/SPAN&gt;
      End of outer contents.&lt;/SPAN&gt;
      End of body contents.
    &lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The following rules:

<PRE class="example">
#inner { float: right; width: 130px; 
         text-align: top; color: blue }
#sibling { color: red }
</PRE>

<P>cause the <em>inner</em> box to float to the right as before and the
document's remaining text to flow into the vacated space:</P>

<div class="figure">
<P><img src="./images/flow-clear.gif"
     alt="Image illustrating the effects of floating a box without
setting the clear property to control the flow of text around the
box."></p>
</div>

<P>However, if the <span class="propinst-clear">'clear'</span>
property on the <em>sibling</em> element is set to 'right' (i.e., the
generated <em>sibling</em> box will not accept a position next to
floating boxes to its right), the <em>sibling</em> content begins to
flow below the float:

<PRE class="example">
#inner { float: right; width: 130px; 
         text-align: top; color: blue }
#sibling { clear: right; color: red }
</PRE>

<div class="figure">
<P><img src="./images/flow-clear2.gif" 
alt="Image illustrating the effects of floating an element with setting the clear property to control the flow of text around the element."></p>
</div>

<H3>Absolute positioning</H3>

<p>Finally, we consider the effect of <a
href="#absolute-positioning">absolute positioning</a>.
Consider the following CSS declarations for <em>outer</em> and
<em>inner</em>:</p>

<PRE class="example">
#outer { 
    position: absolute; 
    top: 200px; left: 200px; 
    width: 200px; 
    color: red;
}
#inner { color: blue }
</PRE>

<P>which cause the top of the <em>outer</em> box to be positioned with
respect to its containing block. The containing block for a positioned
box is established by the nearest positioned ancestor (or, if none
exists, the <a href="#initial-containing-block">initial containing
block</a>, as in our example). The top side of the <em>outer</em> box
is '200px' below the top of the containing block and the left side is
'200px' from the left side. The child box of <em>outer</em> is flowed
normally with respect to its parent.</P>

<div class="figure">
<P><img src="./images/flow-absolute.gif"
   alt="Image illustrating the effects of absolutely positioning a box."></p>
</div>

<p>The following example shows an absolutely positioned box that is a
child of a relatively positioned box. Although the parent
<em>outer</em> box is not actually offset, setting its <span
class="propinst-position">'position'</span> property to 'relative'
means that its box may serve as the containing block for positioned
descendants. Since the <em>outer</em> box is an inline box that is
split across several lines, the first inline box's top and left
edges (at the location designed by the "@" in the following illustration)
serve as references for 'top' and 'left' offsets.

<!-- Change the above if the WG changes the semantics of c.b.s
established by inline elements -IJ -->

<PRE class="example">
#outer { 
  position: relative; 
  color: red 
}
#inner { 
  position: absolute; 
  top: 200px; left: -100px; 
  height: 130px; width: 130px; 
  color: blue;
}
</PRE>

<p>This results in something like the following:</p>

<div class="figure">
<P><img src="./images/flow-abs-rel.gif"
     alt="Image illustrating the effects of absolutely positioning a
box with respect to a containing block."></p>
</div>

<P>If we do not positioned the <em>outer</em> box:</P>

<PRE class="example">
#outer { color: red }
#inner {
  position: absolute; 
  top: 200px; left: -100px; 
  height: 130px; width: 130px; 
  color: blue;
}
</PRE>

<P>the containing block for <em>inner</em> becomes the <a
href="#initial-containing-block">initial containing block</a> (in our
example). The following illustration shows where the <em>inner</em>
box would end up in this case.</P>


<div class="figure">
<P><img src="./images/flow-static.gif"
     alt="Image illustrating the effects of absolutely positioning a box with respect to a coordinate system established by a normally positioned parent."></p>
</div>

<div class="html-example"><P>
Relative and absolute positioning may be used to implement change
bars, as shown in the following example. The following document:

<pre>
&lt;P style=&quot;position: relative; margin-right: 10px; left: 10px;&quot;&gt;
I used two red hyphens to serve as a change bar. They
will &quot;float&quot; to the left of the line containing THIS
&lt;SPAN style=&quot;position: absolute; top: auto; left: -1em; color: red;&quot;&gt;--&lt;/SPAN&gt;
word.&lt;/P&gt;
</pre>

<p>might result in something like:</p>

<div class="figure">
<P><img src="./images/changebar.gif"
     alt="Image illustrating the use of floats to create a changebar effect."></p>
</div>

<P>First, the paragraph (whose containing block sides are shown in the
illustration) is flowed normally. Then it is offset '10px' from the
left edge of the containing block (thus, a right margin of '10px' has
been reserved in anticipation of the offset).  The two hyphens acting
as change bars are taken out of the flow and positioned at the current
line (due to 'top: auto'), '-1em' from the left edge of its containing
block (established by the P in its final position).  The result is
that the change bars seem to "float" to the left of the current
line.</p>
</div>

<H2>Layered presentation</H2>
<P><em>In the following sections, the expression "in front of" 
means closer to the user as the user faces the screen.</em></P>

<P>In CSS2, each box has a position in three dimensions. In addition
to their horizontal and vertical positions, boxes lie along a "z-axis"
and are formatted one on top of the other.  Z-axis positions are
particularly relevant when boxes overlap visually. This section
discusses how boxes may be positioned along the z-axis.


<P>Each box belongs to one <span class="index-def" title="stacking
context"><dfn>stacking context</dfn></span>. Each box in a given
stacking context has an integer <span class="index-def" title="stack
level"><a name="stack-level"><dfn>stack level</dfn></a></span>, which
is its position on the z-axis relative to other boxes in the same
stacking context.  Boxes with greater stack levels are always formatted
in front of boxes with lower stack levels.  Boxes may have negative
stack levels.  Boxes with the same stack level in a stacking context
are stacked bottom-to-top according to document tree order.

<!-- Say depth-first traversal? -IJ --> 

<P>The <a href="conform.html#root">root</a> element creates a <span
class="index-def" title="root stacking context"><dfn>root stacking
context</dfn></span>, but other elements may establish <span
class="index-def" title="local stacking context"><dfn>local stacking
contexts</dfn></span>. Stacking contexts are inherited. A local
stacking context is atomic; boxes in other stacking contexts may not
come between any of its boxes.

<P>An element that establishes a local stacking context generates a
box that has two stack levels: one for the stacking context it creates
(always '0') and one for the stacking context to which it belongs
(given by the <span class="propinst-z-index">'z-index'</span>
property).

<P>An element's box has the same stack level as its parent's box
unless given a different stack level with the <span
class="propinst-z-index">'z-index'</span> property.

<H3><a name="z-index">Specifying the stack level</a>: the <span
class="propinst-z-index">'z-index'</span> property</H3> 

<!-- #include src=properties/z-index.srb -->

<p>For an absolutely or relatively positioned box, the <span
class="propinst-z-index">'z-index'</span> property specifies:

<ol>
<li>The stack level of the box in the current stacking context.
<li>Whether the box establishes a local stacking context.
</ol>

<P>Values have the following meanings:</p>

<dl>
<dt><span class="index-inst" title="&lt;integer&gt;"><span
class="value-inst-integer"><strong>&lt;integer&gt;</strong></span></span>
<dd>This integer is the stack level of the generated box
in the current stacking context. The box 
also establishes a local stacking context in which its stack
level is '0'.
<dt><strong>auto</strong>
<dd>The stack level of the generated box in the current stacking
context is the same as its parent's box. The
box does not establish a new local stacking context.
</dl>

<div class="html-example"><P>
<P>In the following example, the stack levels of
the boxes (named with their "id" attributes) are:
"text2"=0, "image"=1, "text3"=2, and "text1"=3. The
"text2" stack level is inherited from the root box. The
others are specified with the <span
class="propinst-z-index">'z-index'</span> property.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Z-order positioning&lt;/TITLE&gt;
    &lt;STYLE type="text/css"&gt;
      .pile { 
        position: absolute; 
        left: 2in; 
        top: 2in; 
        width: 3in; 
        height: 3in; 
      }
    &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG id="image" class="pile" 
           src="butterfly.gif" alt="A butterfly image"
           style="z-index: 1"&gt;

    &lt;DIV id="text1" class="pile" 
         style="z-index: 3"&gt;
      This text will overlay the butterfly image.
    &lt;/DIV&gt;

    &lt;DIV id="text2"&gt;
      This text will be beneath everything.
    &lt;/DIV&gt;

    &lt;DIV id="text3" class="pile" 
         style="z-index: 2"&gt;
      This text will underlay text1, but overlay the butterfly image
    &lt;/DIV&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>


<p>This example demonstrates the notion of
<em>transparency</em>. The default behavior of a box is to allow boxes
behind it to be visible through transparent areas in its content. In
the example, each box transparently overlays the boxes below it. This
behavior can be overridden by using one of the existing
<a href="colors.html#background-properties">
background properties</a>.

<h2><a name="direction">Text direction:</a>
the <span class="propinst-direction">'direction'</span>
and <span class="propinst-unicode-bidi">'unicode-bidi'</span>
properties
</h2>

<P>The characters in certain scripts are written from right to
left. In some documents, in particular those written with the Arabic
or Hebrew script, and in some mixed-language contexts, text in a
single (visually displayed) block may appear with mixed
directionality. This phenomenon is called <span class="index-def"
title="bidirectionality (bidi)"><dfn>bidirectionality</dfn></span>, or
"bidi" for short.

<P>The Unicode standard ([[UNICODE]], section 3.11) defines a complex
algorithm for determining the proper directionality of text. The
algorithm consists of an implicit part based on character properties,
as well as explicit controls for embeddings and overrides. CSS2 relies
on this algorithm to achieve proper bidirectional rendering. The <span
class="propinst-direction">'direction'</span> and <span
class="propinst-unicode-bidi">'unicode-bidi'</span> properties allow
authors to specify how the elements and attributes of a document
language map to this algorithm.

<P>If a document contains right-to-left characters, and if the user
agent displays these characters (with appropriate glyphs, not
arbitrary substitutes such as a question mark, a hex code, a black
box, etc.), the user agent must apply the bidirectional
algorithm. This seemingly one-sided requirement reflects the fact
that, although not every Hebrew or Arabic document contains
mixed-directionality text, such documents are much more likely to
contain left-to-right text (e.g., numbers, text from other languages)
than are documents written in left-to-right languages.

<P>Because the directionality of a text depends on the structure and
semantics of the document language, these properties should in most
cases be used only by designers of document type descriptions (DTDs),
or authors of special documents. If a default style sheet specifies
these properties, authors and users should not specify rules to
override them. A typical exception would be to override bidi behavior
in a user agent if that user agent transliterates Yiddish (usually
written with Hebrew letters) to Latin letters at the user's request.

<P>The HTML 4.0 specification ([HTML40], section 8.2) defines
bidirectionality behavior for HTML elements.  <a
href="conform.html#conformance">Conforming</a> HTML user agents may
therefore ignore the <span
class="propinst-direction">'direction'</span> and <span
class="propinst-unicode-bidi">'unicode-bidi'</span> properties in
author and user style sheets. The style sheet rules that would
achieve the bidi behavior specified in [[HTML40]] are given in <a
href="sample.html#bidi">the sample style sheet</a>.  The HTML 4.0
specification also contains more information on bidirectionality
issues.

<!-- #include src=properties/direction.srb -->

<P>This property specifies the base writing direction of blocks and
the direction of embeddings and overrides (see <span
class="propinst-unicode-bidi">'unicode-bidi'</span>) for the Unicode
bidirectional algorithm. In addition, it specifies the direction of <a
href="tables.html">table</a> column layout, the direction of
horizontal <a href="visufx.html#overflow">overflow</a>, and the
position of an incomplete last line in a block in case of 'text-align:
justify'.

<P>Values for this property have the following meanings:</P>

<dl>
<dt><strong>ltr</strong> 
<dd>Left-to-right direction.
<dt><strong>rtl</strong>
<dd> Right-to-left direction.
</dl>

<P>For the <span class="propinst-direction">'direction'</span>
property to have any effect on inline-level elements, the <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property's value
must be 'embed' or 'override'.

<div class="note"><P>
<em><strong>Note.</strong> 
The <span class="propinst-direction">'direction'</span> property, when
specified for table column elements, is not inherited by cells in the
column since columns don't exist in the document tree. Thus, CSS
cannot easily capture the "dir" attribute inheritance rules described
in [[HTML40]], section 11.3.2.1.
</em>
</div>

<!-- #include src=properties/unicode-bidi.srb -->

<P>Values for this property have the following meanings:</p>

<dl>
<dt><strong>normal</strong>
<dd>The element does not open an additional level of embedding with
respect to the bidirectional algorithm. For inline-level elements,
implicit reordering works across element boundaries.

<dt><strong>embed</strong>

<dd>If the element is inline-level, this value
opens an additional level of embedding with respect to the
bidirectional algorithm. The direction of this embedding level is
given by the <span class="propinst-direction">'direction'</span>
property. Inside the element, reordering is done implicitly. This
corresponds to adding a LRE (U+202A; for 'direction: ltr') or RLE
(U+202B; for 'direction: rtl') at the start of the element and a PDF
(U+202C) at the end of the element.

<dt><strong>bidi-override</strong>

<dd>If the element is inline-level or a block-level element that
contains only inline-level elements, this creates an override. This
means that inside the element, reordering is strictly in sequence
according to the <span class="propinst-direction">'direction'</span>
property; the implicit part of the bidirectional algorithm is
ignored. This corresponds to adding a LRO (U+202D; for 'direction:
ltr') or RLO (U+202E; for 'direction: rtl') at the start of the
element and a PDF (U+202C) at the end of the element.

</dl>

<P>The final order of characters in each block-level element is the
same as if the bidi control codes had been added as described above,
markup had been stripped, and the resulting character sequence had
been passed to an implementation of the Unicode bidirectional
algorithm for plain text that produced the same line-breaks as the
styled text. In this process, non-textual entities such as images are
treated as neutral characters, unless their <span
class="propinst-unicode-bidi">'unicode-bidi'</span> property has a
value other than 'normal', in which case they are treated as strong
characters in the <span class="propinst-direction">'direction'</span>
specified for the element.

<P>Please note that in order to be able to flow inline boxes in a
uniform direction (either entirely left-to-right or entirely
right-to-left), more inline boxes (including anonymous inline boxes)
may have to be created, and some inline boxes may have to be split up
and reordered before flowing.

<P>Because the Unicode algorithm has a limit of 15 levels of
embedding, care should be taken not to use <span
class="propinst-unicode-bidi">'unicode-bidi'</span> with a value other
than 'normal' unless appropriate. In particular, a value of 'inherit'
should be used with extreme caution. However, for elements that are,
in general, intended to be displayed as blocks, a setting of
'unicode-bidi: embed' is preferred to keep the element together in
case display is changed to inline (see example below).

<p>The following example shows an XML document with bidirectional
text. It illustrates an important design principle: <span
class="index-inst" title="DTD">DTD</span> designers should take bidi
into account both in the language proper (elements and attributes) and
in any accompanying style sheets. The style sheets should be designed
so that bidi rules are separate from other style rules. The bidi rules
should not be overridden by other style sheets so that the document
language's or DTD's bidi behavior is preserved.

<div class="example"><P>
In this example, 
lowercase letters stand for inherently left-to-right characters and
uppercase letters represent inherently right-to-left characters:

<pre class="xml-example">
&lt;HEBREW&gt;
  &lt;PAR&gt;HEBREW1 HEBREW2 english3 HEBREW4 HEBREW5&lt;/PAR&gt;
  &lt;PAR&gt;HEBREW6 &lt;EMPH&gt;HEBREW7&lt;/EMPH&gt; HEBREW8&lt;/PAR&gt;
&lt;/HEBREW&gt;
&lt;ENGLISH&gt;
  &lt;PAR&gt;english9 english10 english11 HEBREW12 HEBREW13&lt;/PAR&gt;
  &lt;PAR&gt;english14 english15 english16&lt;/PAR&gt;
  &lt;PAR&gt;english17 &lt;HE-QUO&gt;HEBREW18 english19 HEBREW20&lt;/HE-QUO&gt;&lt;/PAR&gt;
&lt;/ENGLISH&gt;
</pre>

<p>Since this is XML, the style sheet is responsible for setting the
writing direction. This is the style sheet:</p>

<pre class="example">
/* Rules for bidi */
HEBREW, HE-QUO  {direction: rtl; unicode-bidi: embed}
ENGLISH         {direction: ltr; unicode-bidi: embed} 

/* Rules for presentation */
HEBREW, ENGLISH, PAR  {display: block}
EMPH                  {font-weight: bold}
</pre>

<p>The HEBREW element is a block with a right-to-left base direction,
the ENGLISH element is a block with a left-to-right base
direction. The PARs are blocks that inherit the base direction from
their parents. Thus, the first two PARs are read starting at the top
right, the final three are read starting at the top left.  Please note
that HEBREW and ENGLISH are chosen as element names for explicitness
only; in general, element names should convey structure without
reference to language.

<p>The EMPH element is inline-level, and since its value for <span
class="propinst-unicode-bidi">'unicode-bidi'</span> is 'normal' (the
initial value), it has no effect on the ordering of the text. The
HE-QUO element, on the other hand, creates an embedding.

<p>The formatting of this text might look like this if the line length
is long:

<pre class="ascii-art">
               5WERBEH 4WERBEH english3 2WERBEH 1WERBEH

                                8WERBEH <b>7WERBEH</b> 6WERBEH

english9 english10 english11 13WERBEH 12WERBEH

english14 english15 english16

english17 20WERBEH english19 18WERBEH
</pre>

<p>Note that the HE-QUO embedding causes HEBREW18 to be to the right
of english19.

<p>If lines have to be broken, it might be more like this:

<pre class="ascii-art">
       2WERBEH 1WERBEH
  -EH 4WERBEH english3
                 5WERB

   -EH <b>7WERBEH</b> 6WERBEH
                 8WERB

english9 english10 en-
glish11 12WERBEH
13WERBEH

english14 english15
english16

english17 18WERBEH
20WERBEH english19
</pre>

<p>Because HEBREW18 must be read before english19, it is on the line
above english19. Just breaking the long line from the earlier
formatting would not have worked. Note also that the first syllable
from english19 might have fit on the previous line, but hyphenation of
left-to-right words in a right-to-left context, and vice versa, is
usually suppressed to avoid having to display a hyphen in the middle
of a line.
</div><!-- example -->

</BODY>
</HTML>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:nil
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:nil
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
