<!DOCTYPE HTML SYSTEM "http://www.w3.org/TR/WD-html40/sgml/HTML4.dtd">
<html lang="en">
<!-- $Id: visuren.src,v 1.3 1997-08-05 17:31:09 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Flow model</TITLE>
<LINK rel="next" href="flowobj2.html">
<LINK rel="previous" href="media.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">Flow model</H1>
The following sections specify how CSS affects the flow of elements
onto the canvas. We

<H2>The box model</H2>
<!--
   Box model (basis of visual CSS. everything in boxes)
       Defined.

   Boxes are hierarchical (see document tree). Children are placed
    inside of their parent element unless positioned
    explicitly. 
-->

<H3>Box width</H3>
<!--
     The (horizontal) width of a parent is fixed. See below for the
    calculation of an element's width. It is always given
    by the width property (e.g., the width does not depend on the
    content). The width of an element is independent of its children.

      Exception: replaced elements. In this case, width is "intrinsic"
      (i.e., based on content.)

      A child may extend horizontally beyond the bounding box of a parent when:

	a) It is floated and is too large for its parent.
	b) It is positioned absolutely.
	c) It has negative margins.

      (See overflow)

      [Today, width calculation of absolute elements differs.]

-->

<H3>Box height</H3>
<!--
     The (vertical) height is the minimal height necessary to include
    the vertical content of the element and that of all its flowed
    children. This is the height necessary *before* any relative
    offset of children. One exception: the height of an element is set
    with the 'height' property. 
-->
<H2>The flow</H2>
<!--
   Sibling boxes may be laid out horizontally (inline) or
      vertically (block-level). 
-->

<H3>Inline elements</H3>
<!--
      a) Inline: The boxes form lines that may be broken. 
         The alignment of inline boxes
	 depends on the 'vertical-alignment' property.

         The group of lines forms a block. The alignment of objects
         in lines within the block depends on the 'text-align' property.
         The inline sequence ends at the first block-level element 
         (start or end). See section on line-height for details.
-->

<H3>Block elements</H3>
<!--
      include lists


      b) Block level: The boxes are laid out one after the other,
	 vertically. Their horizontal position and vertical separation
         depends on the 'margin' properties.

         Separation depends on margins. Top and bottom margins
         collapse. (Horizontal ones do not).
-->
         
<H3>Relative offset</H3>  
<!--
    However, once elements have been assigned their position according
    to the flow model, they may be offset relative to this
    position. This is called "relative positioning" (cf. the
    'position' property). Offsetting an element has no effect on its
    siblings; they are not "reflowed" as a result of an offset. (e.g.,
    overlapping is possible). 

    Note: Some UAs may ignore the 'left' and 'top' properties if
    the 'position' property is set to 'static' (i.e., set 'position' to
    'relative' when you set 'left' and 'top')
-->
<H2>Outside the flow</H2>
<!--
    A) Float and absolute positioning. 
    - Float has an influence on the flow, absolute positioning has no
    impact on the flow of later siblings (i.e., later siblings "act"
    as though their absolute sister does not exist). Absolute
    positioning does affect the flow of children elements (i.e.,
    children move with their parent unless positioned absolutely).

    B) Display: none.
-->

<H3>Floats</H3>
<H3>Absolute positioning</H3>

<H2>Stacking elements</H2>
<!-- 

    - The stack level of an element depends on:
      a) Default: An element's place in the hierarchy (with respect to
	 parent and siblings).
           - A child is stacked in front of its parent
	   - A child is stacked in front of its older siblings
         (In this case, z-index has the default value of 0/'auto'.)

      b) Explicit: An element's natural stack level may be overridden
      by the 'z-index' property. The resulting stack level depends on
      the value and sign of the 'z-index' property relative to the
      parent (negative means behind, positive means in front of). The
      absolute value influences position relative to siblings (i.e.,
      they are sorted according to their z-index value. When same,
      later siblings in front).

    - It is not possible to position an element behind a grandparent.
    - Position relative to cousins (see 3.6 bullets)

    - The same algorithm applies to absolutely positioned elements, but
      who is the parent in this case?
-->

<H2>The box model</H2>
<P> CSS2 assumes a simple box-oriented formatting model where each
element results in one or more rectangular boxes. (Elements that have
a 'display' value of 'none' are not formatted and will therefore not
result in a box.) All boxes have a core content area with optional
surrounding padding, border and margin areas.

<PRE>
    _______________________________________
   |                                       |
   |           margin (transparent)        |
   |   _________________________________   |
   |  |                                 |  |
   |  |        border                   |  |
   |  |   ___________________________   |  |
   |  |  |                           |  |  |
   |  |  |     padding               |  |  |
   |  |  |   _____________________   |  |  |
   |  |  |  |                     |  |  |  |
   |  |  |  |  content            |  |  |  |
   |  |  |  |_____________________|  |  |  |
   |  |  |___________________________|  |  |
   |  |_________________________________|  |
   |_______________________________________|

            |    element width    |

   |               box width               |

</PRE>

<P> The size of the margin, border and padding are set with the <a
href="#margin-properties">margin</a>, <a
href="#padding-properties">padding</a>, and <a
href="#border-properties">border</a> properties, respectively.  The
padding area uses the same background as the element itself (set with
the <a href="./colors.html#background-properties">background
properties </a>). The color and style for the border is set with the
<a href="#border-properties">border properties</a>.  The margins are
always transparent, so the parent element will shine through.

<P> The size of the box is the sum of the element width
(i.e. formatted text or image) and the padding, the border and the
margin areas.


<H2><A NAME="block-level-elements">Block-level elements</a></H2>

<P> Elements with a 'display' value of 'block' or 'list-item' are
<span class="index-def" title="block-level"><em>block-level</em></span>
elements. Also, floating elements (elements with
a 'float' value other than 'none') are considered to be block-level
elements.

<P> The following example shows how margins and padding format a 'UL'
element with two children. To simplify the diagram there are no
borders. Also, the single-letter "constants" in this example are not
legal CSS2 syntax, but is a convenient way to tie the style sheet
values to the figure.

<PRE>
    &lt;STYLE type="text/css"&gt;
      UL { 
        background: red; 
        margin: A B C D;      
        padding: E F G H;
      }
      LI { 
        color: white;    
        background: blue;     /* so text is white on blue */ 
        margin: a b c d; 
        padding: e f g h;
      }
    &lt;/STYLE&gt;
    ..
    &lt;UL&gt;
      &lt;LI&gt;1st element of list
      &lt;LI&gt;2nd element of list
    &lt;/UL&gt;
</PRE>

<PRE>
   _______________________________________________________
  |                                                       |
  |    A      UL margin (transparent)                     |
  |    _______________________________________________    |
  | D |                                               | B |
  |   |    E   UL padding (red)                       |   |
  |   |    _______________________________________    |   |
  |   | H |                                       | F |   |
  |   |   |    a   LI margin (transparent,        |   |   |
  |   |   |        so red shines through)         |   |   |
  |   |   |    _______________________________    |   |   |
  |   |   | d |                               | b |   |   |
  |   |   |   |    e    LI padding (blue)     |   |   |   |
  |   |   |   |                               |   |   |   |
  |   |   |   | h  1st element of list      f |   |   |   |
  |   |   |   |                               |   |   |   |
  |   |   |   |    g                          |   |   |   |
  |   |   |   |_______________________________|   |   |   |
  |   |   |                                       |   |   |
  |   |   |     max(a, c)                         |   |   | &lt;- note the max
  |   |   |    _______________________________    |   |   |
  |   |   |   |                               |   |   |   |
  |   |   | d |    e    LI padding (blue)     |   |   |   |
  |   |   |   |                               |   |   |   |
  |   |   |   | h  2nd element of list      f |   |   |   |
  |   |   |   |                               |   |   |   |
  |   |   |   |    g                          |   |   |   |
  |   |   |   |_______________________________|   |   |   |
  |   |   |                                       |   |   |
  |   |   |   c    LI margin (transparent,        |   |   |
  |   |   |        so red shines through)         |   |   |
  |   |   |_______________________________________|   |   |
  |   |                                               |   |
  |   |    G                                          |   |
  |   |_______________________________________________|   |
  |                                                       |
  |   C                                                   |
  |_______________________________________________________|
</PRE>

<P> Technically, padding and margin properties are not inherited. But,
as the example shows, the placement of an element is relative to
ancestors and siblings, so these elements' padding and margin
properties have an effect on their children.

<P> If there had been borders in the above example they would have
appeared between the padding and the margins.

<P> The following diagram introduces some useful terminology:

<PRE>
                               --------------- <B>&lt;-- top</B>
                                 top margin
                               ---------------
                                 top border
                               ---------------
                                top padding
                               +-------------+ <B>&lt;-- inner top</B>
    |        |        |        |             |         |         |         |
    |--left--|--left--|--left--|-- content --|--right--|--right--|--right--|
    | margin | border | padding|             | padding | border  | margin  |
    |        |        |        |             |         |         |         |
                               +-------------+ <B>&lt;-- inner bottom</B>
    <B>^</B>                          <B>^</B>             <B>^</B>                             <B>^</B>
    <B>left</B>         <B>left inner edge</B>             <B>right inner edge</B>          <B>right</B>
    <B>outer</B>                                                              <B>outer</B>
    <B>edge</B>                        bottom padding                          <B>edge</B>
                               ---------------
                                 bottom border
                               ---------------
                                 bottom margin
                               --------------- <B>&lt;-- bottom</B>
</PRE>


<P> The <EM>left outer edge</EM> is the edge of an element with its
padding, border and margin taken into account. The <EM>left inner
edge</EM> is the edge of the content only, inside any padding, border
or margin. Ditto for right. The <EM>top</EM> is the top of the object
including any padding, border and margin; it is only defined for
inline and floating elements, not for non-floating block-level
elements. The <EM>inner top</EM> is the top of the content, inside any
padding, border or margin. The <EM>bottom</EM> is the bottom of the
element, outside any padding border and margin; it is only defined for
inline and floating elements, not for non-floating block-level
elements. The <EM>inner bottom</EM> is the bottom of the element,
inside any padding, border and margin.

<P> The <EM>width</EM> of an element is the width of the content,
i.e., the distance between left inner edge and right inner edge. The
<EM>height</EM> is the height of the content, i.e., the distance from
inner top to inner bottom.

<H3><A NAME="vertical-formatting">Vertical formatting</A></H3>

<P> The width of the margin on non-floating block-level elements
specifies the minimum distance to the edges of surrounding boxes. Two
or more adjoining vertical margins (i.e., with no border, padding or
content between them) are collapsed to use the maximum of the margin
values. In most cases, after collapsing the vertical margins the
result is visually more pleasing and closer to what the designer
expects. In the example above, the margins between the two LI elements
are collapsed by using the maximum of the first LI element's <span
class="propinst">'margin-bottom'</span> and the second LI element's
<span class="propinst">'margin-top'</span>.  Similarly, if the padding
between the UL and the first LI element (the "E" constant) had
been zero, the margins of the UL and first LI elements would have been
collapsed.


<P> In the case of negative margins, the absolute maximum of the
negative adjoining margins is deducted from the maximum of the
positive adjoining margins. If there are no positive margins, the
absolute maximum of the negative adjoining margins is deducted from
zero.

<H3><A name="horizontal-formatting">Horizontal formatting</A></H3> 

<P> The horizontal position and size of a non-floating, block-level
element is determined by seven properties: <span
class="propinst">'margin-left'</span>, <span
class="propinst">'border-left'</span>, <span
class="propinst">'padding-left'</span>, <span
class="propinst">'width'</span>, <span
class="propinst">'padding-right'</span>, <span
class="propinst">'border-right'</span>, and <span
class="propinst">'margin-right'</span>. The sum of these seven is always
equal to the 'width' of the parent element.

<P> By default, the <span class="propinst">'width'</span> of an
element is 'auto'. If the element is not a replaced element, this
means that the <span class="propinst">'width'</span> is calculated by
the UA so that the sum of the seven properties mentioned above is
equal to the parent width. If the element is a replaced element, a
value of 'auto' for <span class="propinst">'width'</span> is
automatically replaced by the element's intrinsic width.

<P> Three of the seven properties can be set to 'auto': <span
class="propinst">'margin-left'</span>, <span
class="propinst">'width'</span>, and <span
class="propinst">'margin-right'</span>. For replaced elements, a value
of 'auto' on <span class="propinst">'width'</span> is replaced by the
intrinsic width, so for them there can only be two 'auto' values.

<P> The <span class="propinst">'width'</span> has a non-negative
UA-defined minimum value (which may vary from element to element and
even depend on other properties). If <span
class="propinst">'width'</span> goes below this limit, either because
it was set explicitly, or because it was 'auto' and the rules below
would make it too small, the value will be replaced with the minimum
value instead.

<P> If <EM>exactly one</EM> of <span
class="propinst">'margin-left'</span>, <span
class="propinst">'width'</span>, or <span
class="propinst">'margin-right'</span> is 'auto', the UA will assign
that property a value that will make the sum of the seven equal to the
parent's width.

<P> If <EM>none</EM> of the properties are 'auto', the value of
<span class="propinst">'margin-right'</span> will be assigned 'auto'.

<P> If <EM>more than one</EM> of the three is 'auto', and one of them
is <span class="propinst">'width'</span>, than the others
(<span class="propinst">'margin-left'</span> and/or <span
class="propinst">'margin-right'</span>) will be set to zero and <span
class="propinst">'width'</span> will get the value needed to make the
sum of the seven equal to the parent's width.

<P> Otherwise, if both <span class="propinst">'margin-right'</span>
and <span class="propinst">'margin-right'</span> are 'auto', they will
be set to equal values. This will center the element inside its
parent.

<P> If 'auto' is set as the value for one of the seven properties in
an element that is inline or floating, it will be treated as if it
were set to zero.

<P> Unlike vertical margins, horizontal margins are not collapsed.

<H3><A NAME="list-item-elements">List-item elements</A></H3>
    
<P> Elements with a <span class="propinst">'display'</span> property
value of 'list-item' are formatted as block-level elements, but
preceded by a list-item marker. The type of marker and its placement
is determined by the <span class="propinst">'list-style'</span>
property. For example:

<PRE>
  &lt;STYLE type="text/css"&gt;
    UL         { list-style: outside }
    UL.compact { list-style: inside }
  &lt;/STYLE&gt;
  
  &lt;UL&gt;
    &lt;LI&gt;first list item comes first
    &lt;LI&gt;second list item comes second
  &lt;/UL&gt;

  &lt;UL class=compact&gt;
    &lt;LI&gt;first list item comes first
    &lt;LI&gt;second list item comes second
  &lt;/UL&gt;
</PRE>

<P> The above example may be formatted as:

<PRE>
  * first list item 
    comes first

  * second list item
    comes second


  * first list
  item comes first

  * second list
  item comes second
</PRE>

<P> In right-to-left text, the markers would have been on the right
side of the box. 

<H3><A NAME="floating-elements">Floating elements</A></H3>

<P> Using the <span class="propinst">'float'</span> property, an
element can be declared to be outside the normal flow of elements and
is then formatted as a block-level element. For example, by setting
the <span class="propinst">'float'</span> property of an image to
'left', the image is moved to the left until the margin, padding or
border of another block-level element is reached. The normal flow will
wrap around on the right side. The margins, borders and padding of the
element itself will be honored, and the margins never collapse with
the margins of adjacent elements.

<P> A floating element is positioned subject to the following
constraints (see the section on <A href="#block-level-elements">block
level elements</A> for an explanation of the terms):

<OL>
<LI> The left outer edge of a left-floating element may not be to the
left of the left inner edge of its parent element. Analogously for
right floating elements.

<LI> The left outer edge of a left floating element must be to the
right of the right outer edge of every earlier (in the HTML source)
left-floating element or the top of the former must be lower than the
bottom of the latter. Analogously for right floating elements.

<LI> The right outer edge of a left-floating element may not be to the
right of the left outer edge of any right-floating element that is to
the right of it. Analogously for right-floating elements.

<LI> A floating element's top may not be higher than the inner top of
its parent.

<LI> A floating element's top may not be higher than the top of any
earlier floating or block-level element.

<LI> A floating element's top may not be higher than the top of any
<span class="index-inst" title="line-box">line-box</span> (see the
section on <a href="./text.html">text</a>) with content that precedes
the floating element in the HTML source.

<LI> A floating element must be placed as high as possible.

<LI> A left-floating element must be put as far to the left as
possible, a right-floating element as far to the right as possible. A
higher position is preferred over one that is further to the
left/right.
</OL>

<PRE>
  &lt;STYLE type="text/css"&gt;
    IMG { float: left }
    BODY, P, IMG { margin: 2em }
  &lt;/STYLE&gt;

  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG src=img.gif&gt;
      Some sample text that has no other...
  &lt;/BODY&gt;
</PRE>

<P> The above example could be formatted as:

<PRE>
   ________________________________________
  |
  |          max(BODY margin, P margin)
  |          ______________________________
  |    |    |             Some sample text
  | B  | P  | IMG margins that has no other
  | O  |    |    _____    purpose than to 
  | D  | m  |   |     |   show how floating
  | Y  | a  |   | IMG |   elements are moved
  |    | r  |   |     |   to the side of the
  | m  | g  |   |_____|   parent element
  | a  | i  |             while honoring
  | r  | n  |             margins, borders
  | g  |    |             and padding. Note
  | i  |    |how adjacent vertical margins  
  | n  |    |are collapsed between non-
  |    |    |floating block-level elements.
</PRE>

<P> Note that the margin of the P elements enclose the floating
IMG element. 

<P> There are two situations when floating elements can overlap with
the margin, border and padding areas of other elements:

<UL>
<LI> when the floating element has a negative margin: negative margins
on floating elements are honored as on other block-level elements.

<LI> when the floating element is wider or higher than the element it
is inside

</UL>

<H2><A NAME="inline-elements">Inline elements</A></H2>

<P> Elements that are not formatted as block-level elements are <span
class="index-def" title="inline"><em>inline</em></span> elements. An
inline element can share line space with other elements. Consider this
example:

<PRE>
  &lt;P&gt;Several &lt;EM&gt;emphasized&lt;/EM&gt; words &lt;STRONG&gt;appear&lt;/STRONG&gt;.&lt;/P&gt;
</PRE>

<P> The P element is normally block-level, while EM and STRONG
are inline elements. If the P element is wide enough to format the
whole element on one line, there will be two inline elements on the
line:

<PRE>
  Several <EM>emphasized</EM> words <STRONG>appear</STRONG>.
</PRE>

<P> If there is not enough room on one line an inline element will be
split into several boxes:

<PRE>
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
</PRE>

<P> The above example may be formatted as:

<PRE>
  Several <EM>emphasized</EM>
  <EM>words</EM> appear here.
</PRE>

<P> If the inline element has margins, borders, padding or text
decorations attached, these will have no effect where the element is
broken: 

<PRE>
           ----------
  Several |<EM>emphasized</EM>
           ----------
  -----
  <EM>words</EM>| appear here.
  -----
</PRE>

<P> (The "figure" above is slightly distorted due to the use of ASCII
graphics.  See the section <A HREF="./text.html#line-height">line
height</a> for a description of how to calculate the height of lines).

<H2><A NAME="replaced-elements">Replaced elements</A></H2>
  
<P> A replaced element is an element which is replaced by content
pointed to from the element. E.g., in HTML, the IMG element is
replaced by the image pointed to by the 'src' attribute. One can
assume that replaced elements come with their own intrinsic
dimensions. If the value of the <span class="propinst">'width'</span>
property is 'auto', the intrinsic width is used as the width of the
element. If a value other than 'auto' is specified in the style sheet,
this value is used and the replaced element is resized accordingly
(the resize method will depend on the media type). The <span
class="propinst">'height'</span> property is used in the same manner.

<P> Replaced elements can be either block-level or inline.

<H2>Explicit positioning</H2>
<p>Designers may want to control the position of HTML
elements explicitly to produce rich, static HTML documents. They also want
powerful layout control to enable dynamic, animated HTML-based
content. The following sections describe the mechanisms available to
authors for greater accuracy in page description and
layout for both purposes. </p>

<p>Authors may explicitly position HTML in two ways: <a
href="#relative-positioning"><span class="index-def"
title="positioning, relative|relative positioning"> </span>relative
positioning</a> (specifying offset relative to their natural position
in the document's flow) and <a href="#absolute-positioning"><span
class="index-def" title="positioning, absolute|absolute positioning">
</span>absolute positioning</a> (positioning elements arbitrarily and
outside the document's flow).

<div class="note"><P>
<em><strong>Note.</strong>
Dynamic aspects of managing positioned elements, such
as hiding, displaying and movement can only be performed using an
external scripting language.
</em>
</div>

<H3>Positioning contexts</H3>
<P>Absolute and relative positioning rely on several notions
collectively known as <em>positioning contexts</em>.

<P>A <span class="index-def" title="box positioning
context|positioning, box positioning context"><em>box positioning
context</em></span> is is based on the CSS box-oriented formatting
model. In this context, positioning properties (<span
class="propinst">'left'</span>, <span class="propinst">'top'</span>)
work like the <span class="propinst">'margin'</span> properties. In a
box positioning context, 'left: 10px' means that the left edge of the
element being positioned will be placed 10 pixels inside the left
inner edge of the element that established the positioning
context. Percentages are based on the width/height of the element that
established the positioning context. As with margins, negative values
are allowed, but there may be implementation-specific limits.

<P>A <span class="index-def" title="Cartesian positioning
context|positioning, Cartesian positioning context"><em>Cartesian
positioning context</em></span>, on the other hand, is based on a
two-dimensional coordinate system with its origin ('left: 0; top: 0')
established at the initial rendering position of a relatively
positioned element. For left-to-right, top-to-bottom languages, this
corresponds to the top left extent of the first rendered constituent
of the element.  X coordinates (<span class="propinst">'left'</span>)
increase toward the right, while Y coordinates (<span
class="propinst">'top'</span>) increase toward the bottom. The origin
established by a relatively positioned element moves with that element
when that element is repositioned.

<P>The <span class="index-def" title="default positioning
context|positioning, default positioning context"><em>default
positioning context</em></span> is the one created implicitly by the
element at the top of the document tree (e.g., in HTML, the HTML
element). The default positioning context may be box or Cartesian depending

<P>The <span class="index-def" title="current positioning
context|positioning, current positioning context"><em>current
positioning context</em></span> is the positioning context currently
in effect. The current positioning context can be established in three ways:

<ol> 

<li>Elements with a <span class="propinst">'position'</span> value of
'absolute' establish a <span class="index-inst" title="box positioning
context">box positioning context</span>for their child elements.
 
<li>Elements with a <span class="propinst">'position'</span> value of
'relative' establish a <span class="index-inst" title="Cartesian
positioning context">Cartesian positioning context</span>for their
child elements.

<li>If no other positioning context is imposed, 
the current positioning context is the default positioning context.

</ol>

<P>Positioning contexts apply only to <span
class="propinst">'absolute'</span> positioned elements with respect to
horizontal and vertical positioning, but apply to both <span
class="propinst">'absolute'</span> and <span
class="propinst">'relative'</span> elements with respect to z-order.


<H3>Absolute positioning</H3>
<P>The examples in the following sections are based on the following HTML
fragment.

<p>
<tt>&lt;BODY&GT;<br>
&lt;P&gt;Beginning of body contents.<br>
&lt;SPAN id=outer&gt; Start of outer contents.<br>
&lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&GT;<br>
End of outer contents.&lt;/SPAN&GT;<br>
End of body contents.<br>
&lt;/P&GT;<br>
&lt;/BODY&GT;</tt></p>

<p>Each example declares different CSS styles for <i>outer</i>
and <i>inner</i>.</p>

<H3>Relative positioning</H3>
<H3>Floating elements</H3>
<H3>Visibility and positioning</H3>

</BODY>
</HTML>
