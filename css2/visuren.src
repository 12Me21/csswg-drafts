<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: visuren.src,v 1.62 1998-01-13 14:08:38 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual rendering model</TITLE>
<LINK rel="next" href="visudet.html">
<LINK rel="previous" href="media.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center"><a name="visual-rendering-model">Visual rendering model</a></H1>

<H2>Introduction to the visual rendering model</H2>

<P>This chapter describes the <span class="index-def" title="visual
rendering model">visual rendering model</span>, how user agents
process the <a href="conform.html#doctree">document tree</a> for
visual <a href="media.html">media</a>.

<P>In the visual rendering model, each element in the document tree
generates zero or more <a href="#box-model">rectangular boxes</a> that
are then rendered. Some boxes belong to the "normal flow" of boxes
while others are considered to be "outside the flow". A box in the
normal flow has a <span class="index-def" title="preceding box"> <a
name="preceding-box"><dfn>preceding box</dfn></a></span> in the normal
flow (unless it is the first box) and a <span class="index-def"
title="preceding box"> <a name="following-box"><dfn>following
box</dfn></a></span> in the normal flow (unless it is the last box).
The order of boxes is given by a post-order traversal of the 
<a href="conform.html#doctree">document tree</a>. 

<!-- Is a "preceding box" one that is generated by a "preceding
element"? (see conform.src for "preceding element") -IJ -->

<P>Most boxes establish a <span class="index-def" title="containing
block"><a name="containing-block"
href="visudet.html#containing-block">containing block</A></span>
whose edges serve as references for the layout of descendent boxes
(see the <a href="visudet.html">next chapter</a> for details). The
CSS visual rendering model is recursive: a box establishes reference
edges for its descendents and is itself positioned with respect to its
containing block. A box is not confined by its containing block --
it is positioned with respect to its edges and may even <a
href="visufx.html#overflow">overflow</a> those edges.

<P>The <a href="#box-model">box model</a> describes the generation of
boxes. The normal, float, and absolute positioning models describe the
<a href="#layout">layout</a> of these boxes with respect to containing
blocks.

<P>The properties defined in this chapter apply to both <a
href="media.html#continuous-media-group">continuous media</a> and <a
href="media.html#paged-media-group">paged media</a>. However, the
meanings of some properties may vary when applied to paged media (see
the <a href="page.html#page-model">page model</a> for details).

<P>The <a href="visudet.html">next chapter</a> supplies the details
of the visual rendering model. However, the model does not specify all
aspects of formatting (e.g., it does not specify a letter-spacing
algorithm). <a href="conform.html#conformance">Conforming user
agents</a> may behave differently for those formatting issues not
covered by this specification.

<h3>The viewport</h3>

<P>User agents for <a
href="media.html#continuous-media-group">continuous media</a>
generally offer users a <span class="index-def" title="viewport"><a
name="viewport"><dfn>viewport</dfn></a></span> (a window or other
viewing area on the screen) through which users consult a
document. User agents may change the document's layout when the
viewport is resized (see the <a
href="visudet.html#initial-containing-block">initial containing
block</a>).  When the viewport is smaller than the document's
containing block, the user agent should offer a scrolling mechanism.
There is at most one viewport per <a
href="intro.html#canvas">canvas</a>, but user agents may offer users
several views of a document.

<H2><a name="box-model">The box model</a></H2>

<P>The CSS box model describes how rectangular boxes are generated for
source elements in the <a href="conform.html#doctree">document
tree</a>.  The <A href="page.html">page box</A> is a special kind of
box that is described in detail on the section on <A
href="page.html">paged media</a>.

<H3><a name="box-gen">Controlling box generation:</a> the <span
class="propinst-display">'display'</span> property</H3>

The <span class="propinst-display">'display'</span> property
determines whether an element generates a box, and if so, what type of
box it generates.

<!-- #include src=properties/display.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><span class="index-def" title="'block', definition of"><a
name="value-def-block"><strong>'block'</strong></a></span>

<dd>Block-level elements are those elements of the document language that,
by default, are formatted visually as blocks (e.g., paragraphs).  This
value causes an element to generate a <a
name="block-level">block-level</a> box. A block-level box acts as a <a
href="#containing-block">containing block</a> for its descendent
boxes, which are either block-level boxes or inline boxes (but not
both).  Sibling block-level boxes participate in a <a
href="#block-formatting">block formatting context</a>.

<P>Some elements generate boxes that behave like block-level boxes:</p>
<ul>
<li><a href="#compact-and-run-in">compact and run-in boxes</a>
that behave like blocks.
<li>Tables (<span class="propinst-display">'display'</span>='table').
</ul>

<P>Properties that apply to block-level elements also
apply to elements generating block-level-acting boxes. <strong>Note.</strong>
references to block-level boxes in the specification also imply
block-level-acting boxes unless explicitly stated otherwise.</p>

<dt><span class="index-def" title="'inline', definition of"><a
name="value-def-inline"><strong>'inline'</strong></a></span>

<dd>Inline elements are those elements of the document language that
do not cause paragraph breaks (e.g., pieces of text, inline images,
etc.). This value causes an element to generate an <a name="inline">inline</a>
box.  An <a href="#inline">inline</a> box participates in an <a
href="#inline-formatting">inline formatting context</a> with its
siblings and children.

<P>Some elements generate boxes that behave like inline boxes:</p>
<ul>
<li><a href="#compact-and-run-in">compact and run-in boxes</a>
that behave like inline boxes.
</ul>

<P>Properties that apply to inline elements also
apply to elements generating inline-acting boxes. <strong>Note.</strong>
references to inline boxes in the specification also imply
inline-acting boxes unless explicitly stated otherwise.

<dt><span class="index-def" title="'list-item', definition of"><a
name="value-def-list-item"><strong>'list-item'</strong></a></span>
<dd>This value causes an element to generate a <a
href="#block-level">block-level</a> box that also has a 
list-item marker box. For example, in HTML, the LI 
element will typically have this <span
class="propinst-display">'display'</span> value.
For information about lists and examples of list formatting,
please consult the section on <a href="lists.html">lists</a>.

<dt><span class="index-def" title="'none', definition of"><a
name="value-def-none"><strong>'none'</strong></a></span> 

<dd>This value causes an element to generate <b>no</b> boxes in the <a
href="intro.html#rendering-structure">rendering structure</a> (i.e.,
the element has no effect on layout).  Descendant elements do not
generate any boxes either; this behavior <strong>cannot</strong> be
overridden by setting the <span
class="propinst-display">'display'</span> property on the descendants.

<P>Please note that a display of 'none' does not create an invisible
box; it creates no box at all. CSS includes mechanisms that enable an
element to generate boxes in the rendering structure that affect
formatting but are not visible themselves. Please consult the section
on <a href="visufx.html#visibility">visibility</a> for details.

<dt><span class="index-def" title="'run-in', definition of"><a
name="value-def-run-in"><strong>'run-in'</strong></a></span>
and <span class="index-def" title="'compact', definition of"><a
name="value-def-compact"><strong>'compact'</strong></a></span>
<dd>These values create a box that is block-level 
or inline, depending on context. These values are described below.

<dt><span class="index-def" title="'table', definition
of"><a name="value-def-table"><strong>'table'</strong></a></span>, <span
class="index-def" title="'row-group', definition of"><a
name="value-def-row-group"><strong>'row-group'</strong></a></span>, <span
class="index-def" title="'col-group', definition of"><a
name="value-def-col-group"><strong>'col-group'</strong></a></span>, <span
class="index-def" title="'row', definition of"><a
name="value-def-row"><strong>'row'</strong></a></span>, <span class="index-def"
title="'col', definition of"><a
name="value-def-col"><strong>'col'</strong></a></span>, <span class="index-def"
title="'cell', definition of"><a
name="value-def-cell"><strong>'cell'</strong></a></span>, and <span class="index-def"
title="'caption', definition of"><a
name="value-def-caption"><strong>'caption'</strong></a></span>
<dd>These values cause an arbitrary element to behave
like a <a href="tables.html#table-elements">table element</a>.
</dl>

<P>Note that although the <a href="cascade.html#initial-value">initial
value</a> of <span class="propinst-display">'display'</span> is
'inline', the user agent's <a
href="cascade.html#default-style-sheet">default style sheet</a> may <a
href="cascade.html">override</a> this value for each element of the <a
href="conform.html#doclanguage">document language</a>.  See the <a
href="sample.html">sample style sheet</a> in the appendix for
information about the default values of the <span
class="propinst-display">'display'</span> property for HTML 4.0.

<div class="example"><P>
<P>Here are some examples of the <span
class="propinst-display">'display'</span> property:

<PRE>
  P   { display: block }
  EM  { display: inline }
  LI  { display: list-item } 
  IMG { display: none }      /* Don't display images */
</PRE>
</div>

<P>So that authors do not stray from the intended behavior of HTML
elements, <span class="index-inst" title="conformance"><a
href="conform.html#conformance">conforming HTML user agents</a></span>
may <span class="index-inst" title="skip"><a
href="syndata.html#skip">skip</a></span> the <span
class="propinst-display">'display'</span> property when specified in
author and user style sheets but must specify a value for it in the
<a href="cascade.html#default-style-sheet">default style sheet</a>.

<H4><a name="compact-and-run-in">Compact and run-in boxes</a></h4>

<P>A <span class="index-def" title="compact box"><a name="compact"><dfn>compact
box</dfn></a></span> behaves as follows:

<ul>
<li>If a <a href="#block-level">block-level</a> or 
<a href="#inline">inline</a> box (that does
not float and is not absolutely positioned) 
<a href="#following-box">follows</a> the compact box,
the compact box is formatted like a one-line inline box. If
the resulting <a href="#the-box-width">box width</a> is less
than or equal to the left margin of the block-level box, the inline
box is positioned in the margin as described immediately below.
If the writing direction of the following block-level box is right-to-left
(the <span class="propinst-direction">'direction'</span>
property value is 'rtl'), the inline box
is placed in the right margin.
<li>Otherwise, the compact box behaves like a block-level box.
</ul>

<P>The compact box is positioned in the margin as follows: it is
outside (to the left or right) of the first <a href="#line-box">line
box</a> of the block, but it affects the calculation of that <a
href="visudet.html#box-height">line box's height</a>. The <span
class="propinst-vertical-align">'vertical-align'</span> property of
the compact box determines the vertical position of the compact box
relative to that line box. The horizontal position of the compact box
is always in the margin of the block-level box, as far to the outside
as possible.

<div class="html-example">
<p>The following example illustrates a compact box.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;A compact box example&lt;/TITLE&gt;
&lt;STYLE type="text/css"&gt;
  DT {display: compact}
  DD {margin-left: 4em}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;DL&gt;
  &lt;DT&gt;Short
    &lt;DD&gt;&lt;P&gt;Description goes here.
  &lt;DT&gt;too long for the margin
     &lt;DD&gt;&lt;P&gt;Description goes here.
&lt;/DL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<P>This example might be rendered as:

<pre>
<b>short</b>    Description goes here

<b>too long for the margin</b>
         Description goes here
</pre>

<P>A <span class="index-def" title="run-in box"><a name="run-in"><dfn>run-in
box</dfn></a></span> behaves as follows:

<ul>
<li>If a <a href="#block-level">block-level</a> or <a
href="#inline">inline</a> box (that does not float and is not
absolutely positioned) <a href="#following-box">follows</a> the run-in
box, the run-in box behaves like an inline child of the block-level
box.  
<li>Otherwise, the run-in box behaves like a block-level box.
</ul>

<p>A 'run-in' box, on the other hand, is useful for run-in headers, as
in this example:

<div class="html-example">
<P>
<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;A run-in box example&lt;/TITLE&gt;
&lt;STYLE type="text/css"&gt;
  H3 {display: run-in}
  H3:after {content: ". "}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H3&gt;A run-in heading&lt;/H3&gt;
&lt;P&gt;And a paragraph of text that
follows it.
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<p>This example might be rendered as:

<pre>
<b>A run-in heading.</b> And a
paragraph of text that
follows it.
</pre>

<p>Properties apply to run-in and compact boxes based on their
final status (inline or block-level).  For example, the <span
class="propinst-white-space">'white-space'</span> property only
applies if the box behaves like a block-level box.

<H3><a name="box-dimensions">Box dimensions</a></H3> 

<P>Each box has a
<span class="index-def" title="box content|content::of a box">
<a name="box-content-area"><dfn>content area</dfn></a></span> (e.g.,
text, an image, etc.) and optional surrounding 
<span class="index-def" title="box padding|padding::of a box">
<a name="box-padding-area"><dfn>padding</dfn></a></span>,
<span class="index-def" title="box border|border::of a box">
<a name="box-border-area"><dfn>border</dfn></a></span>, and 
<span class="index-def" title="box margin|margin::of a box">
<a name="box-margin-area"><dfn>margin</dfn></a></span> areas; the size
of each area is specified by properties defined in the <a
href="visudet.html">next chapter</a>.  The following diagram shows
how these areas relate and the terminology used to refer to pieces of
margin, border, and padding:</P>

<img src="./images/boxdim.gif"
     alt="Image illustrating the relationship between content, padding, borders, and margins.">

<P>The padding, border, and padding can be broken down into left,
right, top, and bottom segments (e.g., in the diagram, "LM" for left
margin, "RM" for right margin, "TM" for top margin, "BM" for bottom
margin, etc.).

<P>There are four edges to every box:</P>

<dl>
<dt><span class="index-def"
title="content edge"><a name="content-edge"><strong>content edge</strong></a></span>
or <span class="index-def" title="inner edge"><a name="inner-edge"><strong>inner edge</strong></a></span>
<dd>The content edge surrounds the element's <a href="conform.html#rendered-content">rendered content</a>.
<dt><span class="index-def" title="padding edge"><a name="padding-edge"><strong>padding edge</strong></a></span>
<dd>The padding edge surrounds the box padding. If the padding
has 0 width, the padding edge is the same as the content edge.
The padding edge of a box defines the edges of the
<a href="#containing-block">containing block</a> established by the box.
<dt><span class="index-def" title="border edge"><a name="border-edge"><strong>border edge</strong></a></span>
<dd>The border edge surrounds the box border. If the padding
has 0 width, the border edge is the same as the padding edge.
<dt><span class="index-def" title="margin edge"><a name="margin-edge"><strong>margin edge</strong></a></span>
or <span class="index-def" title="outer edge"><a name="outer-edge"><strong>outer
edge</strong></a></span>
<dd>The margin edge surrounds the box margin. If the margin
has 0 width, the margin edge is the same as the border edge.
</dl>

<P>Each edge may be broken down into a left, right, top, and bottom
edge. However, the top and bottom are only defined for <a
href="#inline">inline</a> and inline-acting <a
href="#compact-and-run-in">compact and run-in</a> boxes, and <a
href="#floats">floating</a> boxes.  In other contexts, margins either
don't matter (e.g., absolutely positioned boxes) or they collapse
(e.g., block-level boxes), so top and bottom have no meaning.

<P>The dimensions of the content area of a box -- the <span
class="index-def" title="box:content width"><a
name="content-width"><dfn>content width</dfn></a></span> and <span
class="index-def" title="box:content height"><a
name="content-height"><dfn>content height</dfn></a></span> -- may be
established in one of several ways:</p>

<dl>
<dt><em>Explicitly</em>
<dd> The <span class="propinst-width">'width'</span> and
<span class="propinst-height">'height'</span> properties specify
a dimension explicitly. Except for <a href="tables.html">table</a>
cells, specified values other than 'auto' for
<span class="propinst-width">'width'</span> and
<span class="propinst-height">'height'</span> cannot be overridden
for a generated box.
<dt><em>Box widths are calculated top-down</em>
<dd>Box widths calculated automatically are calculated top-down:
the box's width is established by its dimensions and the width
of its containing block. 
Please consult the sections on <a
href="visudet.html#box-width">box width calculations</a> for details.
<dt><em>Box heights are calculated bottom-down</em>
<dd>Box heights are determined by the 
<a href="conform.html#rendered-content">rendered content</a> of
an element. Please consult the section on <a
href="visudet.html#box-height">box height calculations</a> for
details.
<dt><em><a name="intrinsic-dim">Intrinsic dimensions</a></em>
<dd>The <a href="conform.html">rendered content</a> of a <a
href="conform.html#replaced-element">replaced element</a> may have
"intrinsic dimensions" that user agents use as the <a
href="cascade.html#computed-value">computed</a> content 
width and height (e.g., the unscaled width and height of an included
image). If the intrinsic dimensions are overridden, the 
replaced content is scaled by the user agent.
When scaling an image, the aspect ratio of the image is preserved
if values for the <span class="propinst-width">'width'</span> and
<span class="propinst-height">'height'</span> properties are set to
'auto'.
<dt><em>Hybrid calculations</em>
<dd>The dimension of a table cell is determined by both the cell's
contents and the surrounding available space.
</dl>

<P>The <span class="index-def" title="box::box width"><a
name="the-box-width"><dfn>box width</dfn></a></span> (resp., <span
class="index-def" title="box::box height"><a
name="the-box-height"><dfn>box height</dfn></a></span>) of the box is
given by the sum of the content width (resp., content height), the
padding, the border, and the margin.

<P>If an inline box spans several lines (i.e., spans more than one <a
href="#line-box">line box</a>), the <a
href="visudet.html#margin-properties">margin</a>, <a
href="visudet.html#border-properties">border</a>, and <a
href="visudet.html#padding-properties">padding</a> properties do not
apply between the lines (see the section on <a
href="visudet.html#line-height">line height calculations</a> for
details.

<P>Note that there are no properties to set the color of margins and
padding; margins are always transparent and padding areas always uses
the background of the element itself.

<H3><a name="mpb-examples">Example of margins, padding, and borders</a></H3> 

This example illustrates how margins, padding, and borders
interact. The example HTML document:

<PRE class="html-example">
    &lt;HTML&gt;
    &lt;HEAD&gt;
    &lt;STYLE type="text/css"&gt;
      UL { 
        background: orange; 
        margin: 12px 12px 12px 12px;
        padding: 3px 3px 3px 3px;
                                     /* No borders set */
      }
      LI { 
        color: white;                /* text color is white */ 
        background: blue;            /* Content, padding will be blue */
        margin: 12px 12px 12px 12px;
        padding: 12px 0px 12px 12px; /* Note 0px padding right */
        list-style: none             /* no glyphs before a list item */
                                     /* No borders set */
      }
      LI.withborder {
        border-style: dashed;
        border-width: medium;        /* sets border width on all sides */
        border-color: green;
      }
    &lt;/STYLE&gt;
    &lt;/HEAD&gt;
    &lt;BODY&gt;
    &lt;UL&gt;
      &lt;LI&gt;First element of list
      &lt;LI class="withborder"&gt;Second element of list is longer
           to illustrate wrapping.
    &lt;/UL&gt;
    &lt;/BODY&gt;
    &lt;/HTML&gt;
</PRE>

<P>results in a <a href="conform.html#doctree">document tree</a> with
(among other relationships) a UL element that has two LI
children. 

<P>The first of the following diagrams illustrates what this example
would produce. The second illustrates the relationship between the
margins, padding, and borders of the UL elements and those of its
children LI elements.</P>

<img src="./images/boxdimeg.gif"
     alt="Image illustrating how parent and child margins, borders,
and padding relate.">

<P>Note that:</p>

<ul>

<li>The <a href="#content-width">content width</a> for each LI box is
calculated top-down; the <a href="#containing-block">containing
block</a> for the each LI box is the box generated by the UL element.

<li>The height of each LI box is given by its <a
href="#content-height">content height</a>, plus padding, borders, and
margins. Note that vertical margins between the LI boxes <a
href="visudet.html#collapsing-margins">collapse.</a>

<li>The right padding of the LI boxes has been set to zero width
(the <span class="propinst-padding">'padding'</span> property). The
effect is apparent in the second illustration.

<li>The foreground color of the LI boxes has been set to white for
legibility against a blue background (the <span
class="propinst-color">'color'</span> property).

<li>The margins of the LI boxes are transparent -- margins are always
transparent -- so the background color of the UL boxes (orange)
shines through them. However, the (blue) background of the
LI boxes changes the color of the LI padding and content (the <span
class="propinst-background">'background'</span> property).

<li>The second LI element specifies a dashed border (the
<span class="propinst-border-style">'border-style'</span> property).
</ul>

<H2><a name="layout">Box layout</a></H2>

<P>The remainder of the visual rendering model describes how user
agents lay out boxes. Layout is affected by:

<ul>
<li><a href="#box-dimensions">Box dimensions</a> and <a
href="#box-gen">type</a>.
<li><a href="#positioning-scheme">Position scheme</a>.
<li>Relationships between elements
in the <a href="conform.html#doctree">document tree.</a>
<li>External information (e.g., viewport size, intrinsic
dimensions of images, etc.).
</ul>

<h3><a name="positioning-scheme">Positioning schemes</a></h3>

<P>In CSS2, a box may be laid out according to three <span
class="index-def" title="positioning scheme"><dfn>positioning
schemes</dfn></span>

<ol>
<li><a href="#normal-flow">Normal flow</a>. The normal
flow includes <a href="#block-formatting">block formatting</a>
of <a href="#block-level">block level</a> elements, 
<a href="#inline-formatting">inline formatting</a>
of <a href="#inline">inline</a> elements, <a
href="#relative-positioning">relative positioning</a> of
block-level or inline elements, and positioning of
<a href="#compact-and-run-in">compact and run-in</a> boxes.
<li><a href="#floats">Floats</a>. The floating model translates
a box's position to the left or right of where
it would normally appear in the flow. For instance, authors may
float paragraph boxes in order to place them side-by-side.
<li><a href="#absolute-positioning">Absolute positioning</a>. Authors
may specify the absolute position of a box (with respect to
a containing block).
</ol>

<P>The primary difference between a floating box and one that is
absolutely positioned is that absolute positioning has no impact on
the flow of later siblings; later siblings are laid out as though
their absolutely positioned sister did not exist at all. Later
siblings of floating boxes flow with respect to the final
position of the floating box.

<h4><a name="choose-position">Choosing a positioning scheme:</a> <span
class="propinst-position">'position'</span> property</h4>

<P>The <span class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> properties determine which CSS2
positioning algorithms are used to calculate the coordinates of a box.

<!-- #include src=properties/position.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><strong>'normal'</strong>
<dd>The box coordinates are calculated according to the
<a href="#normal-flow">normal flow</a>.

<dt><strong>'relative'</strong>
<dd>The box coordinates are calculated according to the <a
href="#normal-flow">normal flow</a>, then the box is 
offset <a href="#relative-positioning">relative</a> to its normal
position. Note that the position of the <a href="#following-box">
following box</a> is established independently of the offset.

<dt><strong>'absolute'</strong>
<dd> The box coordinates (and possibly size) are calculated 
in <a href="#absolute-positioning">absolute</a> terms
with respect to the box's <a
href="#containing-block">containing block</A>.

<dt><strong>'fixed'</strong>
<dd> The box coordinates are calculated according to the
'absolute' model, but in addition, the box is <a
href="#fixed-positioning">fixed</a> with
respect to some reference. In the case of 
<a href="media.html#continuous-media-group">continuous media</a>,
the box is fixed with respect to the <a href="#viewport">viewport</A>
(and doesn't move when scrolled).
In the case of 
<a href="media.html#paged-media-group">paged media</a>,
the box is fixed with respect to the page. Fixed boxes
are fixed with respect to pages that are seen through a 
<a href="#viewport">viewport</A>.
<strong>Note.</strong>
Authors may wish to specify 'fixed' in a media-dependent way (e.g.,
information should appear on every screen but not on every page).
</dl>

<div class="note"><P> <em><strong>Note.</strong> The value 'normal'
causes some user agents to <span class="index-inst" title="skip"><a
href="syndata.html#skip">skip</a></span> the <span
class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> properties. To ensure that values of
<span class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> are taken into account, authors
should explicitly set the value of the <span
class="propinst-position">'position'</span> property to 'relative'.
</em>
</div>

<H4><a name="position-props">Box offsets</a>: <span
class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span></H4>

<P>The position of an <a href="#relative-positioning">relatively</A>
or <a href="#absolute-positioning">absolutely</A> (including <a
href="#fixed-positioning">fixed</A>) positioned boxes is established
by four properties:

<!-- #include src=properties/top.srb -->

<P>This property specifies how far a box's top border edge is offset below
the top edge of the box's <a href="#containing-block">containing block</a>.

<!-- #include src=properties/right.srb -->

<P>This property specifies how far a box's right border edge is offset
to the left of the right edge of the box's <a
href="#containing-block">containing block</a>.

<!-- #include src=properties/bottom.srb -->

<P>This property specifies how far a box's bottom border edge is offset
above the bottom of the box's <a href="#containing-block">containing
block</a>.

<!-- #include src=properties/left.srb -->

<P>This property specifies how far a box's left border edge is offset
to the right of the right edge of the box's <a
href="#containing-block">containing block</a>.

<P>The values for the four properties have the following meanings:

<dl>
<dt><strong><span class="value-inst-length">&lt;length&gt;</span></strong>
<dd>The offset is a fixed distance from the reference edge.

<dt><strong><span class="value-inst-percentage">&lt;percentage&gt;</span></strong>

<dd>The offset is a percentage of the containing block's width (for <span class="propinst-left">'left'</span> or <span
class="propinst-right">'right'</span>) or height (for <span
class="propinst-top">'top'</span> and <span
class="propinst-bottom">'bottom'</span>).

<dt><strong>auto</strong>
<dd>The offset is automatically calculated based on the width and
height of the box.
</dl>

<P>For absolutely positioned boxes, the offsets are with respect to
the box's <a href="#containing-block">containing block</a>. For
relatively positioned boxes, the offsets are with respect to the outer
edges of the box itself before the offset is applied.

<P>For absolutely positioned boxes, the values of the <span
class="propinst-left">'left'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-top">'top'</span>, and <span
class="propinst-bottom">'bottom'</span> properties replace the roles
of the corresponding <a href="visudet.html#margin-properties">margin
properties</a> (i.e., absolutely positioned boxes do not have
margins but do have padding and borders).

<P>For more information about the width and height of boxes, please
consult the sections on <a href="visudet.html#box-width">box width
calculations</a> and <a href="visudet.html#box-height">box height
calculations</a> respectively.

<H3><a name="normal-flow">Normal flow</a></H3> 

<P>Boxes in the normal flow belong to a <span class="index-def"
title="formatting context">formatting context</span>, which may be
block or inline, but not both simultaneously. 

<P><a href="#block-level">Block-level</a> boxes and <a
href="#anonymous">anonymous</a> boxes) participate in an <a
href="#block-formatting">block formatting</a> context.

<P><a href="#inline">Inline</a> boxes and boxes
that may behave like inline boxes (<a href="#run-in">run-in</a>,
<a href="#compact">compact</a>, and <a href="#anonymous">anonymous</a>
boxes) participate in an <a href="#inline-formatting">inline
formatting</a> context.

<h4><a name="anonymous">Anonymous boxes</a></h4>

<P>Inline elements and block-level elements whose <a
href="conform.html#rendered-content">rendered content</a> contains
text that is not the content of an inline element have <span
class="index-def" title="anonymous
elements"><dfn>anonymous</dfn></span> children in the <a
href="conform.html#doctree">document tree</a>. These anonymous
elements inherit property values (colors, fonts, etc.). They generate
boxes that contain chunks of text as content.  By default, anonymous
boxes act like inline boxes. However, they may act like block-level
boxes if context demands (e.g., an inline <a href="#run-in">run-in</a>
box that behaves like a block-level box).  Decisions about the
construction of anonymous boxes depend on many factors (language,
hyphenation, etc.)  and lie outside the scope of this specification.

<h4><a name="block-formatting">Block formatting context</a></h4> 

<P>In a block formatting context, boxes are laid out one after the
other, vertically. The vertical distance between two sibling boxes is
determined by the <span class="propinst-margin">'margin'</span>
properties. Vertical margins between adjacent block-level boxes <a
href="./visudet.html#collapsing-margins">collapse</a>.

<P>To lay out boxes horizontally in CSS2, authors may either <a
href="#floats">float</a> them or position them <a
href="#absolute-positioning">absolutely</a>.

<P>For information about page breaks in paged media, please consult
the section on <a href="page.html#allowed-page-breaks">allowed
page breaks</a>.

<H4><a name="inline-formatting">Inline formatting context</a></H4>

<P>In an inline formatting context, boxes are laid out one after the
other within a horizontal space defined by a <A
HREF="#containing-block">containing block</A>.  Horizontally adjacent
boxes flow into a <span class="index-def" title="line box"><a
name="line-box"><dfn>line box</dfn></a></span>. When boxes cannot fit
within a single line box, they are distributed among two or more
vertically-stacked line boxes. Thus, a paragraph is generally
with a block-level box whose contents flow into a vertical
stack of line boxes.

<P>Line boxes in the same inline formatting context generally have the
same width but may vary in width if flow is affected by <a
href="#floats">floating elements</a>. Adjacent line boxes usually vary
in height (e.g., one line might contain an image while the others
contain only text). The final height of each line box is determined by
the rules given in the section on <a
href="visudet.html#line-height">line height calculations</a>.

<P> When the height of a box B is less than the height of the line box
containing it, the vertical alignment of B within the line box is
determined by the <span
class="propinst-vertical-align">'vertical-align'</span> property.

<P>When a box is less wide than the width of the line box containing
it, its horizontal alignment within the line box is determined by the
<span class="propinst-text-align">'text-align'</span> property.  When
a box is wider than a line box, it it may be split into several boxes
and these boxes distributed across several line boxes.

<div class="html-example"><P> For example, the following paragraph
(created by the HTML block-level element P) contains anonymous text
interspersed with the elements EM and STRONG:

<PRE>
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear
  &lt;STRONG&gt;in this&lt;/STRONG&gt; sentence, dear.&lt;/P&gt;
</PRE>

<P>In terms of the document tree, P has five children:

<ul>
<li>Anonymous: "Several"
<li>EM: "emphasized words"
<li>Anonymous: "appear"
<li>STRONG: "in this"
<li>Anonymous: "sentence, dear."
</ul>
 
<P>To format the paragraph, the user agent creates a box for each
child and flows the boxes into line boxes. Since the parent box in
normal flow acts as the containing block for an inline box, the width
of the P box determines the width of these line boxes.  If the
width of P is sufficient, all the inline boxes will fit into a single
line box:

<PRE>
  Several <EM>emphasized words</EM> appear <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>If the boxes do not fit within a single line box, they will
be split up and distributed across several line boxes.  The previous
paragraph might be split as follows:

<PRE>
  Several <EM>emphasized words</EM> appear
  <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>or like this:

<PRE>
  Several <EM>emphasized</EM>  
  <EM>words</EM> appear
  <STRONG>in this</STRONG> 
  sentence, dear.
</PRE>

</div>

<P>In the previous example, the EM box was split into two EM boxes
(call them "split1" and "split2"). If a box split this way has
margins, borders, padding, or text decorations, these have no visible
effect after split1 or before split2 (i.e., the border is not drawn
and the margin and padding are not included).

<div class="html-example"><P>
Consider the following example:

<PRE>
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;TITLE&gt;Example of inline flow on several lines&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
  EM { padding: 2px ; 
       margin: 1em ;
       border-width: medium;
       border-style: dashed;
       line-height: 2.4em;
  }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>

<P>Depending on the width of the P, the boxes may be distributed as
follows:</P>

<img src="./images/inline-layout.gif"
     alt="Image illustrating the effect of line breaking on the display of margins, borders, and padding.">

<ul>
<li> The margin is inserted before "emphasized" and after "words". 

<!-- The next point is not clear to me. -IJ -->
<li> The padding is inserted before, above, and below
"emphasized" and after, above, and below "words". A
dashed border is rendered on three sides in each case.
</ul>
</div>

<P>Note that with a small line height, the padding and borders
around text in different lines may overlap.

<h4><a name="direction">Direction of inline flow</a>: the <span
class="propinst-direction">'direction'</span> property</h4>

<!-- #include src=properties/direction.srb -->

<P>This property determines whether the direction of flow in an <a
href="#inline-formatting">inline formatting context</a> is
left-to-right or right-to-left. It also specifies the direction of <a
href="./tables.html">table layout</a>.

<P>Values have the following meanings:</P>

<dl>
<dt><strong>ltr</strong> 
<dd>Left to right flow. This is the default value.
<dt><strong>rtl</strong>
<dd> Right to left flow.
<dt><strong>ltr-override</strong>
<dd>[Ian: What does this mean?]
<dt><strong>rtl-override</strong>
<dd>[Ian: What does this mean?]
</dl>

<P>[Ian: Examples here.]


<P>For a left-to-right <a href="#inline-formatting">inline formatting
context</a>, the horizontal distance between the right side of a box
and the left side of the <a href="#following-box">following box</a>
(or right side of the parent box if no following box exists) is
determined by the source element's <span
class="propinst-margin">'margin'</span> properties. For right-to-left
flow, the horizontal distance between the left side of a box and the
right side of the <a href="#preceding-box">preceding box</a> (or left
side of the parent box is no preceding box exists) is similarly
determined by the source element's <span
class="propinst-margin">'margin'</span> properties.

<H4><a name="relative-positioning">Relative positioning</a></H4>  

<P>Once a box has been assigned a position according to the <a
href="#normal-flow">normal flow</a>, it may be shifted relative to
this position. This is called <span class="index-def" title="relative
positioning"><dfn>relative positioning</dfn></span>. Offsetting a box
in this way has no effect on the following box: it is positioned as if
the preceding box were not offset and it is not repositioned after the
offset is applied. This implies that relative positioning may cause
boxes to overlap.

<p>Relatively positioned boxes keep their normal flow shape, including
line breaks and the space originally reserved for them. A relatively
positioned box establishes a new <A
HREF="#containing-block">containing block</A> for descendant
boxes. 

<P>A relatively positioned box is generated when the <span
class="propinst-position">'position'</span> property for an element
has the value 'relative'.  The offset is specified by the <span
class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties.

<P>Dynamic movement of relatively positioned boxes can produce
animation effects in scripting environments (see the section on <a
href="./visufx.html#dynamic-positioning">dynamic positioning</a> for
details). Relative positioning may also be used as a general form of
superscripting and subscripting except that line height is not
automatically adjusted to take the positioning into consideration. See
the description of <a href="visudet.html#line-height">line height
calculations</a> for more information.

<P>Examples of relative positioning are provided in the section <a
href="#comparison">comparing normal, relative, floating, and
absolute positioning</a>.

<H3><a name="floats">Floats</a>: the <span
class="propinst-float">'float'</span> and <span
class="propinst-clear">'clear'</span> properties</H3>

<P>A floating box is given a position, width, and height according to
the <a href="#normal-flow">normal flow</a>, then taken out of the flow
and shifted to the left or right until its <a href="#outer-edge">outer
edge</a> is flush with the current left or right edge (which may be
established by a <a href="#containing-block">containing block</a> or
another floated box).

<P>User agents take the outer edge of a floating box into account when
positioning subsequent boxes; the outer edge of a float becomes the
current edge for flowed or floated boxes to the left or right side.
The margins of floating boxes never <a
href="visudet.html#collapsing-margins">collapse</a> with margins of
adjacent boxes.

<!-- #include src=properties/float.srb -->

<P>This property specifies whether a box should float to the left,
right, or not at all. It may be set for elements that generate boxes
that are not positioned absolutely (including fixed boxes).  The
values have the following meanings:</p>

<dl>
<dt><strong>left</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box (i.e., <span class="propinst-display">'display'</span>
is set to 'block') in the <a href="#normal-flow">normal flow</a>,
then shifts the box to the left. Text wraps on the right
side of the box.
<dt><strong>right</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box (i.e., <span class="propinst-display">'display'</span>
is set to 'block') in the <a href="#normal-flow">normal flow</a>,
then shifts the box to the right. Text wraps on the left
side of the box.
<dt><strong>none</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box in the <a href="#normal-flow">normal flow</a> and leaves
it there.
</dl>

<!-- Hakon: we can't say 'display' is skipped since 'none' still has
an effect -->

<div class="example"><P>
The following rule positions all IMG elements with
<samp>class="icon"</samp> along the left side of the parent element:

<PRE>
  IMG.icon { 
    float: left;
    margin-left: 0;
  }
</PRE>
</div>


<div class="html-example"><P>
The following HTML source:

<PRE>  
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;STYLE type="text/css"&gt;
    IMG { float: left }
    BODY, P, IMG { margin: 2em }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
      Some sample text that has no other...
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>

<P>might be formatted as:</P>

<img src="./images/floateg.gif"
     alt="Image illustrating how floating elements interact with margins.">

<P>Note that the margin of the P element encloses the floating
IMG element and that the vertical margins do not collapse.
</div>

<H4>Controlling boxes adjacent to floating boxes</H4> 

<!-- #include src=properties/clear.srb -->

<P>When set for an element generating a box B, this property indicates
which sides of B may <strong>not</strong> be adjacent to a floating
box. This property may only be specified for elements that generate
<a href="#block-level">block-level</a> boxes.

<P>A box B in the normal flow that "clears" a float or a series of
floats behaves as follows:

<ul>
<li>B participates in a <a href="#block-formatting">block formatting
context</a> with the <a href="#preceding-box">preceding box</a> in
the flow (i.e., vertical margins <a
href="visudet.html#collapsing-margins">collapse</a>, etc.), but
below the bottom-most float it clears.
<li>The margin of B is increased enough so that its border
top is positioned at or below the margin bottom of the bottom-most
float it clears. 
</ul>

<P>The floats cleared by B must be generated by elements that precede
the element in the <a href="conform.html#doctree">document tree</a>
that generated B.

<P>Consult the section on <a
href="visudet.html#floating-constraints">floating constraints</a> for
more additional positioning information.

<P>Values have the following meanings:</P>

<dl>
<dt><strong>left</strong>
<dd>If the box has a float or series of floats to its left, 
it is positioned according to the above rules. Otherwise
the box is positioned normally.
<dt><strong>right</strong>
<dd>If the box has a float or series of floats to its right,
it is positioned according to the above rules. Otherwise
the box is positioned normally.
<dt><strong>both</strong>
<dd>If the box has a float or series of floats to either
its left or right, it is positioned according to the above rules. 
Otherwise the box is positioned normally.
<dt><strong>none</strong>
<dd>The box may be placed next to
floating boxes to the left or right.
</dl>

<div class="example"><P>
The following style rule means that no H1 element may have a floating
element to its left; this means that H1 elements will
be positioned below any floating box.

<PRE>
  H1 { clear: left }
</PRE>
</div>

<P>For <a href="#compact-and-run-in">compact and run-in boxes</a>,
this property applies to the final block-level box to which the
compact or run-in box belongs.

<H3><a name="absolute-positioning">Absolute positioning</a></H3>

<!--
<p>Absolutely positioned boxes act like block-level boxes, but
since they do not belong to the normal flow, the following properties
do not apply to them: <span class="propinst-float">'float'</span>,
<span class="propinst-clear">'clear'</span>, <span
class="propinst-display">'display'</span> (and therefore <span
class="propinst-list-style-type">'list-style-type'</span>), and all
the <a href="visudet.html#margin-properties">margin properties</a>.
-->

<p>Like other boxes, an absolutely positioned element is positioned
with respect to a <A HREF="#containing-block">containing block</A>.
It also establishes a new containing block for descendant boxes.
However, the contents of an absolutely positioned element do not flow
around any other boxes. They may or may not obscure the contents of
another box, depending on the <a href="#z-order">z-order</a> of the
overlapping boxes.

<H4><a name="fixed-positioning">Fixed positioning</a></H4>

<P>Fixed positioning is a variant of absolute positioning. The only
difference is that for a fixed positioned box, the containing block is
established by the <a href="#viewport">viewport</A>. This is similar
to the 'fixed' value on the <span
class="propinst-background-position">'background-position'</span>
property.

<P>For <a href="media.html#continuous-media-group">continuous
media</a>, fixed boxes do not move when the document is scrolled. In
this respect, they are similar to <a
href="./colors.html#background-properties">fixed background
images</a>.

<P>For <a href="page.html">paged media</a>, boxes with fixed
positions are repeated on every page. This is useful for placing, for
instance, a signature at the bottom of each page.

<div class="html-example">
<P>Authors may use fixed positioning to create frame-like presentations
Consider the following frame layout:</P>

<img src="./images/frame.gif"
     alt="Image illustrating a frame-like layout with position='fixed'.">

<P>This might be achieved with the following HTML document and
style rules:</P>

<PRE>
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;TITLE&gt;A frame document with CSS2&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
    #header {
       position: fixed;
       width: 100%;
       height: 15%;       
       top: 0;
       right: 0;
       bottom: auto;
       left: 0;
    }
    #sidebar {
       position: fixed;
       width: 10em;
       height: auto;
       top: 15%;
       right: auto;
       bottom: 100px;
       left: 0;
    }
    #main {
       position: fixed;
       width: auto;
       height: auto;
       top: 15%;
       right: 0;
       bottom: 100px;
       left: 10em;
    }
    #footer {
       position: fixed;
       width: 100%;
       height: 100px;
       top: auto;
       right: 0;
       bottom: 0;
       left: 0;
    }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DIV id="header"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="sidebar"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="main"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="footer"&gt; ...  &lt;/DIV&gt;
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>
</DIV>

<h3>Summary of box generation and layout</h3>

<P>When specified for the same elements, the three properties that
affect box generation and layout -- <span
class="propinst-display">'display'</span>, <span
class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> -- interact according to the
following precedences (highest to lowest):

<ol>
<li>If <span class="propinst-display">'display'</span>
has the value 'none',
user agents must <a href="syndata.html#skip">skip</a>
<span class="propinst-position">'position'</span> and
<span class="propinst-float">'float'</span>. In this
case, the element generates no box.
<li>Otherwise, if 
<span class="propinst-position">'position'</span> has
the value 'absolute' or 'fixed', then user agents must
set 
<span class="propinst-display">'display'</span> to 'block'
and <span class="propinst-float">'float'</span> to 'none'
and <a href="#absolute-positioning">absolutely position</a>
the generated box.
<li>Otherwise, if 
<span class="propinst-float">'float'</span> has a value
other than 'none', then user agents must set
<span class="propinst-display">'display'</span> to 'block'
and <a href="#floats">float</a> the generated box.
<li>Otherwise, the remaining <span
class="propinst-display">'display'</span> properties apply
as specified.
</ol>

<H3><a name="comparison">Comparison of normal, relative, floating, absolute positioning</a></H3>
<P>To illustrate the relationship between normal flow, relative
positioning, floats, and absolute positioning, we provide a series of
examples based on the following HTML fragment:

<pre class="html-example">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Comparison of positioning schemes&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;P&gt;Beginning of body contents.
  &lt;SPAN id="outer"&gt; Start of outer contents.
  &lt;SPAN id="inner"&gt; Inner contents.&lt;/SPAN&gt;
  End of outer contents.&lt;/SPAN&gt;
  End of body contents.
  &lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<p>The final positions of boxes generated by the <em>outer</em> and
<em>inner</em> elements vary in each example. In each illustration,
the numbers to the left of the illustration indicate the <a
href="#normal-flow">normal flow</a> position of the double-spaced (for
clarity) lines.</p>

<P>&nbsp;</P>
<H4>Normal flow</H4>

<p>Consider the following CSS declarations for <em>outer</em> and
<em>inner</em> that don't alter the <a href="#normal-flow">normal
flow</a> of boxes:</p>

<PRE>
  #outer { color: red }
  #inner { color: blue }
</PRE>

<p>This results in something like the following:</p>

<img src="./images/flow-generic.gif"
     alt="Image illustrating the normal flow of text between parent and sibling boxes.">

<H4>Relative positioning</H4>

<P>To see the effect of <a href="#relative-positioning">relative
positioning</a>, consider the following CSS rules:

<PRE>
  BODY { line-height: 200% }
  #outer { position: relative; top: -12px; color: red }
  #inner { position: relative; top: 12px; color: blue }
</PRE>

<p>First, the <em>outer</em> text is flowed into its normal flow
position and dimensions at the end of line 1. Then, the entire box
(distributed over three lines) is shifted upwards by 12px.

<P>The contents of <em>inner</em>, as a child of <em>outer</em>, would
normally flow immediately after the words "of outer contents" (on line
1.5). However, the <em>inner</em> contents are themselves offset
relative to the <em>outer</em> contents by 12px downwards, back to
their original position on line 2.

<P>Note that the content following <em>outer</em> is not affected by the
relative positioning of <em>outer</em>.</P>

<img src="./images/flow-relative.gif"
     alt="Image illustrating the effects of relative positioning on a box's content.">

<P>Note also that if the relative positioning of <em>outer</em> were -24px, the
text of <em>outer</em> and the body text would have overlapped.

<H4>Floating a box</H4>

<P>Now consider the effect of <a href="#floats">floating</a> the
<em>inner</em> element's text to the right by means of the following
rules:

<PRE>
  #outer { color: red }
  #inner { float: right; width: 130px; color: blue }
</PRE>

<P>First, the <em>inner</em> box (whose width has been set explicitly)
is floated to the right margin. Then, the text of the <em>outer</em>
element that follows the inner element text flows in the space vacated
by the <em>inner</em> box. This flow respects the new right margin
established by the left border of the <em>inner</em> box.</P>

<img src="./images/flow-float.gif"
     alt="Image illustrating the effects of floating a box.">

<P>To show the effect of the <span
class="propinst-clear">'clear'</span> property, we add a <em>sibling</em>
element to the example:

<PRE class="html-example">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Comparison of positioning schemes II&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;P&gt;Beginning of body contents.
  &lt;SPAN id=outer&gt; Start of outer contents.
  &lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;
  &lt;SPAN id=sibling&gt; Sibling contents.&lt;/SPAN&gt;
  End of outer contents.&lt;/SPAN&gt;
  End of body contents.
  &lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The following rules:

<PRE class="example">
  #inner { float: right; width: 130px; color: blue }
  #sibling { color: red }
</PRE>

<P>cause the <em>inner</em> box to float to the right and the text of
the <em>sibling</em> element to flow in the vacated space:</P>

<img src="./images/flow-clear.gif"
     alt="Image illustrating the effects of floating a box without setting the clear property to control the flow of text around the box.">

<P>However, if the <span class="propinst-clear">'clear'</span>
property on the <em>sibling</em> element is set to 'right' (i.e., the
generated <em>sibling</em> box will not accept being positioned next
to floating boxes to its right), the <em>sibling</em> box is
moved below the float:

<PRE class="example">
  #inner { float: right; width: 130px; color: blue }
  #sibling { clear: right; color: red }
</PRE>

<img src="./images/flow-clear2.gif" 
alt="Image illustrating the effects of floating an element with setting the clear property to control the flow of text around the element.">

<H4>Absolute positioning</H4>

<p>Finally, we consider the effect of <a
href="#absolute-positioning">absolute positioning</a>.
Consider the following CSS declarations for <em>outer</em> and
<em>inner</em>:</p>

<PRE class="example">
  #outer { position: absolute; 
           top: 200px; 
           left: 200px; 
           width: 200px; 
           color: red }
  #inner { color: blue }
</PRE>

<p>which cause the top of the <em>outer</em> box to be positioned with
respect to the containing block (which we suppose is established
by the <a href="visudet.html#initial-containing-block">initial
containing block</a>).
The top side of the <em>outer</em> box is 200px from
the top of the containing block and the left side is 200px from the
left side. The child box of <em>outer</em> is flowed normally with
respect to its parent.</P>

<img src="./images/flow-absolute.gif"
   alt="Image illustrating the effects of absolutely positioning a box.">

<P>Note that because <em>outer</em> has been absolutely positioned, it
establishes a new containing block for descendant boxes (there aren't
any in this example).

<p>The following example shows an absolutely positioned box that
is a child of a relatively positioned box. Although the parent
<em>outer</em> box is not actually offset, setting its <span
class="propinst-position">'position'</span> property to 'relative'
causes its box to serve as the containing block for any descendant
boxes. Since the <em>outer</em> box is an inline box that is split
across several lines, only the first box (whose upper left-hand corner
is designated by a "@" in the illustration below) establishes the
containing block for the descendants.

<PRE class="example">
  #outer { position: relative; color: red }
  #inner { position: absolute; 
           top: 200px; 
           left: -100px; 
           height: 130px; 
           width: 130px; 
           color: blue }
</PRE>

<p>This results in something like the following:</p>

<img src="./images/flow-abs-rel.gif"
     alt="Image illustrating the effects of absolutely positioning a
box with respect to a containing block.">

<P>The following rules don't establish a new positioning
context for <em>inner</em>:

<PRE class="example">
  #outer { color: red }
  #inner {position: absolute; top: 200px; left: -100px; height:
    130px; width: 130px; color: blue;}
</PRE>

<P>but cause the <em>inner</em> box to be positioned with respect to
the containing block (which we assume here is
<a href="visudet.html#initial-containing-block">initial
containing block</a>).

<img src="./images/flow-static.gif"
     alt="Image illustrating the effects of absolutely positioning a box with respect to a coordinate system established by a normally positioned parent.">

<P>Relative and absolute positioning may be used to implement change
bars, as shown in the following example. We use a value of 'auto' for
the <span class="propinst-top">'top'</span> property, which results in
the box being placed at the "current" location, just as if the box
were being flowed into that space. The following HTML text:</p>

<pre>
&lt;P style=&quot;position: relative; margin-right: 10px; left: 10px;&quot;&gt;
I used two red hyphens to serve as a change bar. They
will &quot;float&quot; to the left of the line containing THIS
&lt;SPAN style=&quot;position: absolute; top: auto; left: 0px; color: red;&quot;&gt;--&lt;/SPAN&gt;
word.&lt;/P&gt;
</pre>

<p>might result in something like:</p>

<img src="./images/changebar.gif"
     alt="Image illustrating the use of floats to create a changebar effect.">

<H2><a name="z-order">Z-order</a>: Layered presentation</H2>
<P><em>In the following sections, the expression "in front of" 
means closer to the user as the user faces the screen.</em></P>

<P>CSS allows authors to specify the position of a box in three
dimensions. The <span class="index-def" title="stack level"><dfn>stack
level</dfn></span> of an element refers to the position 
of boxes it generates in front of or
behind other boxes. The stack level is particularly relevant to boxes
that overlap visually.

<P>The stack level of an element may be determined in two ways:</P>

<ul>
<li>Implicitly, by virtue of the element's position in the <a
href="conform.html#doctree">document tree</a>.
Boxes are stacked in the order their
source elements appear in the
document tree. Thus, a box is stacked in front of its parent and
preceding siblings and behind its children and following siblings.
<li>Explicitly, via the <span
class="propinst-z-index">'z-index'</span> property. 
</ul>

<H3><a name="stack-level">Specifying the stack level</a>: the <span
class="propinst-z-index">'z-index'</span> property</H3> 

<!-- #include src=properties/z-index.srb -->

<p>The <span class="propinst-z-index">'z-index'</span> property is
used to specify the stacking order of boxes outside the <a
href="#normal-flow">normal flow</a>. An element for which this
property is set establishes a <span class="index-def" title="stacking
context"><dfn>stacking context</dfn></span> in which its own <span
class="propinst-z-index">'z-index'</span> is 0.

<P>The values of this property have the following meanings:</p>

<dl>
<dt><strong>auto</strong>
<dd>The stack level of the generated box is given
by the element's position in the <a
href="conform.html#doctree">document tree</a>.
<dt><span class="index-inst" title="&lt;integer&gt;"><span class="value-inst-integer"><strong>&lt;integer&gt;</strong></span></span>
<dd>Specifies an explicit stack level for the generated box.
</dl>

<P>Elements for which the <span
class="propinst-z-index">'z-index'</span> property has been given an
integer value behave as follows:</P>

<ul>
    <li>Sibling boxes
        are stacked bottom-to-top in order of
    increasing <span class="propinst-z-index">'z-index'</span>
    value. When two siblings have the same <span
    class="propinst-z-index">'z-index'</span> value, the
    later sibling generates boxes in front of those generated by
    the earlier sibling.

    <li>Elements with negative <span
    class="propinst-z-index">'z-index'</span> values generate boxes
    behind level 0 boxes in the current stacking context. Elements with
    positive <span class="propinst-z-index">'z-index'</span> values
    generate boxes in front of level 0 boxes in the current stacking context.

   <li>A <span class="propinst-z-index">'z-index'</span> value of 0 is
       equivalent to a value of 'auto'.
</ul>

<p>The relative z-order of two elements that are neither siblings
nor parent/child can be determined by evaluation of the previous
rules for both elements' ancestors. </p>

<P>By default, a positioned element will be placed just in front of
its parent. It is not possible to position an element behind a
grandparent.

<div class="html-example"><P>
<P>In the following example, the order of the elements, listed
back-to-front is: "image", "text2", and "text1".

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Z-order positioning&lt;/TITLE&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
.pile { position: absolute; left: 2in; top: 2in; width: 3in; height: 3in; }
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;
&lt;IMG alt="A butterfly image"
     src=&quot;butterfly.gif&quot; 
     class=&quot;pile&quot; 
     id=&quot;image&quot; 
     style=&quot;z-index: 1&quot;&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text1&quot; style=&quot;z-index: 3&quot;&gt;
   This text will overlay the butterfly image.
&lt;/DIV&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text2&quot; style=&quot;z-index: 2&quot;&gt;
   This text will underlay text1, but overlay the butterfly image
&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>


<p>This example demonstrates the notion of
<em>transparency</em>. The default behavior of a box is to allow boxes
behind it to be visible through transparent areas in its content. In
the example, each box transparently overlays the boxes below it. This
behavior can be overridden by using one of the existing
<a href="colors.html#background-properties">
background properties</a>.
</BODY>
</HTML>
