<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: visuren.src,v 1.57 1997-12-30 14:37:47 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual rendering model</TITLE>
<LINK rel="next" href="flowobj2.html">
<LINK rel="previous" href="media.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center"><a name="visual-rendering-model">Visual rendering model</a></H1>

<H2>Introduction to the visual rendering model</H2>

<P>This chapter gives an overview of the <span class="index-def"
title="visual rendering model">visual rendering model</span>, which
describes how user agents process the <a
href="convent.html#doctree">document tree</a> for visual <a
href="media.html">media</a>. In the visual rendering model, each
element in the document tree generates zero or more <a
href="#box-model">rectangular boxes</a> in the <a
href="intro.html#rendering-structure">rendering structure</a>.  The <a
href="#box-model">box model</a> describes the generation of these
boxes. The <a href="#flow-model">visual flow model</a> describes the
layout of these boxes (i.e, how each one receives its final position
on the <a href="media.html#canvas">canvas</a>).  The <a
href="flowobj2.html">next chapter</a> supplies the details of the
visual rendering model.

<P>The properties defined in this chapter apply to both <a
href="media.html#continuous-media-group">continuous media</a> and <a
href="media.html#paged-media-group">paged media</a>. However, the
meanings of some properties may vary when applied to paged media (see
the <a href="page.html#page-model">page model</a> for details).

<P>The visual rendering model does not specify all aspects of
formatting (e.g., it does not specify a letter-spacing algorithm). <a
href="convent.html#conformance">Conforming</a> user agents may behave
differently for those formatting issues not covered by this
specification.

<H3><a name="continuous-media">Rendering to continuous media</a></H3>

<P>User agents producing output for <a
href="media.html#continuous-media-group">continuous media</a> may
implement the <a href="media.html#canvas">canvas</a> as an
"infinitely" long rectangle (or however long the rendered document is)
that has a fixed width. Users see the canvas through a user agent's
<span class="index-def" title="viewport"><a
name="viewport"><dfn>viewport</dfn></a></span>, a window or other
viewing area on the screen. The canvas may be larger or smaller than
the viewport. Typically, when the canvas is larger than the viewport,
the user agent will offer the user a scrolling mechanism to bring
hidden parts into view.

<P>The user agent generally determines the dimensions of the
continuous canvas and may change them when the viewport is resized.

<P>When a rendered document doesn't cover the entire canvas, the user
agent should fill in those parts of the canvas not covered by the
document with the background of the root element of the document tree.
In the case of HTML, however, user agents should observe the following
precedence rules to fill in the background: if the value of the <span
class="propinst-background">'background'</span> property for the HTML
element is different from 'transparent' then use it, else use the
value of the <span class="propinst-background">'background'</span>
property for the BODY element. If the resulting value is
'transparent', the rendering is undefined. 

<div class="html-example"><P>
According to these rules, the canvas underlying the following document
will have a "marble" background and the background of the box
generated by the BODY element (which may or may not fully cover the
canvas) will be red:

<PRE>
  &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;STYLE type="text/css"&gt;
     { background: url(http://style.com/marble.png) }
  &lt;/STYLE&gt;
  &lt;TITLE&gt;Setting the canvas background&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY style="background: red"&gt;
  &lt;P&gt;My background is red.
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>
</div>


<div class="note"><P>
<em><strong>Note.</strong> the document language may not define an
element that gives direct access to the canvas. For HTML, until other
means of addressing the canvas become available, we recommend that
authors set canvas properties on the BODY element.
</em>
</div>

<H2><a name="box-model">The box model</a></H2>

<P>The CSS box model describes how rectangular boxes are generated for
source elements in the <a href="convent.html#doctree">document
tree</a>.  The <A HREF="page.html">page box</A> is a special kind of
box that is described in detail on the section on <A
href="page.html">paged media</a>.

<H3><a name="box-gen">Controlling box generation:</a> the <span
class="propinst-display">'display'</span> property</H3>

The <span class="propinst-display">'display'</span> property
determines whether an element generates a box, and if so, what type of
box it generates.

<!-- #include src=properties/display.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><span class="index-def" title="'block', definition of"><a
name="value-def-block"><strong>'block'</strong></a></span>
<dd>Causes an element to generate a <a name="block-level">block-level</a> box.
A block-level box participates in a <a
href="#vertical-formatting">vertical formatting context</a> with its
siblings. It also establishes a new formatting context for its
children, which may be vertical or horizontal.

<dt><span class="index-def" title="'inline', definition of"><a
name="value-def-inline"><strong>'inline'</strong></a></span>
<dd>Causes an element to generate an <a name="inline">inline</a> box.
An <a href="#inline">inline</a> box participates in a 
<a href="#horizontal-formatting">horizontal
formatting context</a> with its siblings. Children of an inline
box participate in the same horizontal formatting context.

<dt><span class="index-def" title="'list-item', definition of"><a
name="value-def-list-item"><strong>'list-item'</strong></a></span>
<dd>Causes an element to generate a <a
href="#block-level">block-level</a> box that also has a 
list-item marker. For example, in HTML, the LI 
element will typically have this <span
class="propinst-display">'display'</span> value.
For information about lists and examples of list formatting,
please consult the section on <a href="lists.html">lists</a>.

<dt><span class="index-def" title="'none', definition of"><a
name="value-def-none"><strong>'none'</strong></a></span> <dd>Causes an
element to generate <b>no</b> boxes in the <a
href="intro.html#rendering-structure">rendering structure</a> (i.e.,
the element has no effect on layout).  Descendant elements do
not generate any boxes either; this behavior <strong>cannot</strong> be
overridden by setting the <span
class="propinst-display">'display'</span> property on those elements.

<P>Please note that a display of 'none' does not create an invisible
box; it creates no box at all. CSS includes mechanisms that enable an
element to generate boxes in the rendering structure that affect
formatting but are not visible themselves. Please consult the section
on <a href="flowobj2.html#visibility">visibility</a> for details.

<dt><span class="index-def" title="'run-in', definition of"><a
name="value-def-run-in"><strong>'run-in'</strong></a></span>
and <span class="index-def" title="'compact', definition of"><a
name="value-def-compact"><strong>'compact'</strong></a></span>
<dd>These values create a box that may be block-level 
or inline, depending on context. These values are described below.

<dt><span class="index-def" title="'table', definition
of"><a name="value-def-table"><strong>'table'</strong></a></span>, <span
class="index-def" title="'row-group', definition of"><a
name="value-def-row-group"><strong>'row-group'</strong></a></span>, <span
class="index-def" title="'col-group', definition of"><a
name="value-def-col-group"><strong>'col-group'</strong></a></span>, <span
class="index-def" title="'row', definition of"><a
name="value-def-row"><strong>'row'</strong></a></span>, <span class="index-def"
title="'col', definition of"><a
name="value-def-col"><strong>'col'</strong></a></span>, <span class="index-def"
title="'cell', definition of"><a
name="value-def-cell"><strong>'cell'</strong></a></span>, and <span class="index-def"
title="'caption', definition of"><a
name="value-def-caption"><strong>'caption'</strong></a></span>
<dd>These values cause an arbitrary element to behave
like a <a href="tables.html#table-elements">table element</a>.
</dl>

<P>Note that although the <a href="cascade.html#initial-value">initial
value</a> of <span class="propinst-display">'display'</span> is
'inline', the user agent's <a
href="cascade.html#default-style-sheet">default style sheet</a> may <a
href="cascade.html">override</a> this value for each element of the <a
href="convent.html#doclanguage">document language</a>.  See the <a
href="sample.html">sample style sheet</a> in the appendix for
information about the default layout behavior of HTML 4.0.

<div class="example"><P>
<P>Here are some examples of the <span
class="propinst-display">'display'</span> property:

<PRE>
  P   { display: block }
  EM  { display: inline }
  LI  { display: list-item }
  IMG { display: none }      /* Don't display images */
</PRE>
</div>

<P>A <span class="index-def" title="compact box"><dfn>compact
box</dfn></span> is considered an inline box that is placed in the
margin of the following block-level box if there is enough
room. Otherwise, it is considered a <a
href="#block-level">block-level</a> box.

<P>A <span class="index-def" title="run-in box"><dfn>run-in
box</dfn></span> is treated like an inline child of the following
block-level box, if one exists. Otherwise, it is considered a <a
href="#block-level">block-level</a> box.

<div class="html-example">
<p>The following example illustrates a compact box.

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;A compact box example&lt;/TITLE&gt;
&lt;STYLE type="text/css"&gt;
  DT {display: compact}
  DD {margin-left: 4em}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;DL&gt;
  &lt;DT&gt;Short
    &lt;DD&gt;&lt;P&gt;Description goes here.
  &lt;DT&gt;too long for the margin
     &lt;DD&gt;&lt;P&gt;Description goes here.
&lt;/DL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<P>This example might be rendered as:

<pre>
<b>short</b>    Description goes here

<b>too long for the margin</b>
         Description goes here
</pre>

<div class="html-example">
<p>A 'run-in' box, on the other hand,
is useful for run-in headers, as in this example:

<pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;A run-in box example&lt;/TITLE&gt;
&lt;STYLE type="text/css"&gt;
  H3 {display: run-in}
  H3:after {content: ". "}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H3&gt;A run-in heading&lt;/H3&gt;
&lt;P&gt;And a paragraph of text that
follows it.
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</div>

<p>This example might be rendered as:

<pre>
<b>A run-in heading.</b> And a
paragraph of text that
follows it.
</pre>

<p>For a 'compact' box to be rendered as an <a
href="#inline">inline</a> box, it must be followed by a <a
href="#block-level">block-level</a> box "BLB" that doesn't <a
href="#floats">float</a> and is not <a
href="#absolute-positioning">positioned absolutely</a>. "BLB" must
have a <span class="propinst-margin-left">'margin-left'</span> (or
<span class="propinst-margin-right">'margin-right'</span> if it's
<span class="propinst-direction">'direction'</span> is 'rtl') that is
wide enough for the compact box. That means: the compact box, when
rendered as an inline box, must be a single <a href="#line-box">line
box</a> (no line breaks) whose overall width (including margins,
border and padding) does not exceed the margin of "BLB".

<p>The compact box is outside (to the left or right) of the first <a
href="#line-box">line box</a> of the block, but it takes part in the
calculation of that line box's height. The <span
class="propinst-vertical-align">'vertical-align'</span> property of
the compact box determines its vertical position relative to that line
box.

<p>The horizontal position is always in the margin of the block-level
box, as far to the outside as possible. The compact box's left margin
(or right, if the block-level box's <span
class="propinst-direction">'direction'</span> is 'rtl') determines the
position.

<p>A 'run-in' box is rendered exactly like a block-level box if the
following sibling box is not <a href="#block-level">block-level</a> or
is <a href="#floats">floating</a> or <a
href="#absolute-positioning">positioned absolutely</a>. Otherwise the
run-in box is treated like a child of the following block-level box.

<p>Properties apply to a run-in box depending on whether it behaves
like a block-level or inline box. For example, the <span
class="propinst-white-space">'white-space'</span> property only
applies if the element behaves like a block-level box.

<H3><a name="box-dimensions">Box dimensions</a></H3> 

<P>The primary box model properties control <a
href="#box-dimensions">box dimensions</a>; they are divided into three
groups: <a href="flowobj2.html#margin-properties">margin
properties</a>, <a href="flowobj2.html#padding-properties">padding
properties</a>, and <a href="flowobj2.html#border-properties">border
properties</a>, described in the <a href="flowobj2.html">next
chapter</a>. 

<P>Each box has a core content area (e.g., text, an image, etc.) and
optional surrounding padding, border and margin areas. The following
diagram shows how these areas relate and the terminology used to refer
to pieces of margin, border, and padding:</P>

<img src="./images/boxdim.gif"
     alt="Image illustrating the relationship between content, padding, borders, and margins.">

<P>The padding, border, and padding can be broken down into left,
right, top, and bottom segments (e.g., in the diagram, "LM" for left
margin, "RM" for right margin, "TM" for top margin, "BM" for bottom
margin, etc.).

<P>There are four edges to every box:</P>

<dl>
<dt><span class="index-def"
title="content edge"><strong>content edge</strong></span>
or <span class="index-def" title="inner edge"><strong>inner edge</strong></span>
<dd>The content edge surrounds the element's rendered content.
<dt><span class="index-def" title="padding edge"><strong>padding edge</strong></span>
<dd>The padding edge surrounds the box padding. If the padding
has 0 width, the padding edge is the same as the content edge.
<dt><span class="index-def" title="border edge"><strong>border edge</strong></span>
<dd>The border edge surrounds the box border. If the padding
has 0 width, the border edge is the same as the padding edge.
<dt><span class="index-def" title="margin edge"><strong>margin edge</strong></span>
or <span class="index-def" title="outer edge"><strong>outer
edge</strong></span>
<dd>The margin edge surrounds the box margin. If the margin
has 0 width, the margin edge is the same as the border edge.
</dl>

<P>Each edge may be broken down into a left, right top, and bottom
edge. 

<!-- Is this true?? It seems strange to me -IJ 
The top and bottom are only defined for inline and <a
href="#floats">floating elements</a>, not for non-floating <a
href="#block-level">block-level</a> boxes.
-->

<P>The <span class="index-def" title="box:content width"><dfn>content
width</dfn></span> of a box (i.e., the distance between the left and
right content edges) is given by the <span
class="propinst-width">'width'</span> property of the element that
generated the box (see the <a href="flowobj2.html#box-width">box width
calculations</a> for details). The <span class="index-def"
title="box:content height"><dfn>content height</dfn></span> of a box
(i.e., the distance between the top and bottom content edges) is
determined by the content of an element and its descendants in the <a
href="convent.html#doctree">document tree</a> (see the <a
href="flowobj2.html#box-height">box height calculations</a> for
details).

<P>The <span class="index-def" title="box::box width"><dfn>box
width</dfn></span> (resp., <span class="index-def" title="box::box
height"><dfn>box height</dfn></span>) of the box is given by the sum
of the content width (resp., content height), the padding, the border,
and the margin.  The size of the margin, border and padding are set
with the <a href="flowobj2.html#margin-properties">margin</a>, <a
href="flowobj2.html#padding-properties">padding</a>, and <a
href="flowobj2.html#border-properties">border</a> properties,
respectively.

<P>If an inline box spans several lines (i.e., spans more than one <a
href="#line-box">line box</a>), the <a
href="flowobj2.html#margin-properties">margin</a>, <a
href="flowobj2.html#border-properties">border</a>, and <a
href="flowobj2.html#padding-properties">padding</a> properties do not
apply between the line boxes.

<P>Note that there are no properties to set the color of margins and
padding; margins are always transparent and padding areas always uses
the background of the element itself.

<H3><a name="mpb-examples">Example of margins, padding, and borders</a></H3> 

This example illustrates how margins, padding, and borders
interact. The example HTML document:

<PRE class="html-example">
    &lt;HTML&gt;
    &lt;HEAD&gt;
    &lt;STYLE type="text/css"&gt;
      UL { 
        background: orange; 
        margin: 12px 12px 12px 12px;
        padding: 3px 3px 3px 3px;
                                     /* No borders set */
      }
      LI { 
        color: white;                /* text color is white */ 
        background: blue;            /* Content, padding will be blue */
        margin: 12px 12px 12px 12px;
        padding: 12px 0px 12px 12px; /* Note 0px padding right */
        list-style: none             /* no glyphs before a list item */
                                     /* No borders set */
      }
      LI.withborder {
        border-style: dashed;
        border-width: medium;        /* sets border width on all sides */
        border-color: green;
      }
    &lt;/STYLE&gt;
    &lt;/HEAD&gt;
    &lt;BODY&gt;
    &lt;UL&gt;
      &lt;LI&gt;First element of list
      &lt;LI class="withborder"&gt;Second element of list is longer
           to illustrate wrapping.
    &lt;/UL&gt;
    &lt;/BODY&gt;
    &lt;/HTML&gt;
</PRE>

<P>results in a <a href="convent.html#doctree">document tree</a> with
(among other relationships) a UL element that has two LI
children. According to the <a href="#flow-model"> visual flow
model</a>, the LI elements are laid out vertically (one after the
other) and form the content of the UL.

<P>The first of the following diagrams illustrates what this example
would produce. The second illustrates the relationship between the
margins, padding, and borders of the UL elements and those of its
children LI elements.</P>

<img src="./images/boxdimeg.gif"
     alt="Image illustrating how parent and child margins, borders,
and padding relate.">

<P>Note that:</p>

<ul>

<li>The width of content for each LI element has not been explicitly
set through the <span class="propinst-width">'width'</span> property.
Therefore, due to the initial 'auto' value on <span
class="propinst-width">'width'</span> and the rules of the <a
href="flowobj2.html#box-height">box height calculations</a>, the width
allotted for the content of each LI element is the width of the parent
element's (UL) content less the margins, padding, and border of the LI
elements. The width of the UL element is determined by the width of
its parent, not shown explicitly here.

<li>The height of each LI element's contents is determined by the
height of the content. The height of the UL element's content is
determined by the sum of the heights of the LI elements' content, plus
LI margins, padding, and borders (see the section on <a
href="flowobj2.html#box-height">box height calculations</a> for
details). Note that <a
href="flowobj2.html#collapsing-margins">vertical margins between the
LI boxes collapse.</a>

<li>The initial border style is 'none', and this value must be changed
for a border to be rendered. In the example above, only the second
list-item element changes the border style.

<li>The right side padding of the LI elements has been set to zero
width. The effect is apparent in the second illustration.

<li>The foreground color of the LI elements has been set
to white for legibility against a blue background.

<li>The margins and padding of the LI elements are transparent (due to
the initial value), so the background color of the UL elements
(orange) shines through the transparent LI margins. However, the
(blue) background color (blue) of the LI elements changes the color of
the LI padding and content.

<li>Although padding and margin properties are not inherited, the LI
elements are still offset by the UL margin.
</ul>

<H2><a name="flow-model">The visual flow model</a></H2>

<P>The visual flow model describes how boxes are positioned, based on
relationships of source elements in the <a
href="convent.html#doctree">document tree</a>, box dimensions, and
canvas dimensions.

<P>In CSS2, all box coordinates are calculated with respect to a
rectangular box called a <a name="containing-block"
href="flowobj2.html#containing-block">containing block</A> (defined
precisely in the <a href="flowobj2.html">next chapter</a>).  The
default containing block is the box generated for the root element of
the <a href="convent.html#doctree">document tree</a>.

<P>The containing block of a box in the <a href="#normal-flow">normal
flow</a> is typically the box generated by the parent element.
However, any element for which the <span
class="propinst-position">'position'</span> property has been set to a
value other than 'static' generates a box that establishes a new
containing block for descendant boxes. 

<!-- Should this say "within their containing block"? Also,
"bounding box" not defined -IJ -->

<P>Generally, child boxes are positioned within the box of their
parent. However, a child box may extend horizontally beyond the
bounding box of its parent in certain situations. These are described
in the section on <a href="flowobj2.html#overflow">overflow</a>.

<h3>Box positions</h3>

<P>By default, boxes are laid out according to the <a
href="#normal-flow">normal flow</a> algorithm. At times, authors may
want to control the positioning of a box explicitly, removing it from
the normal flow. There are three ways to place a box outside the
normal flow:</P>

<ul>

<li>Create a <a href="#floats">floating box</a> that floats
to the left or right of where
it would normally appear in the flow. For instance, authors may
float paragraph boxes in order to place them side-by-side.

<li>Use <a href="#absolute-positioning">absolute positioning</a>.

<li>Set the value of the <span
class="propinst-display">'display'</span> property to 'none' (in which
case, the element does not generate a box at all).
</ul>

<P>The primary difference between a floating box and one that is
absolutely positioned is that absolute positioning has no impact on
the flow of later siblings; later siblings are laid out as though
their absolutely positioned sister did not exist at all. Later
siblings of floating boxes flow with respect to the final
position of the floating box.

<P>Floating and absolutely positioned boxes do affect the flow of
their children: children elements always flow relative to the position
of their parent (the floater or absolutely positioned element) unless
positioned absolutely themselves.

<h4><a name="position-scheme">Choosing a positioning scheme:</a> <span
class="propinst-position">'position'</span> property</h4>

<P>The <span class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> properties determine which CSS2
positioning algorithms are used to calculate the coordinates of a box.

<!-- #include src=properties/position.srb -->

<P>The values of this property have the following meanings:</P>

<dl>
<dt><strong>'static'</strong>
<dd>The box coordinates are calculated according to the
<a href="#normal-flow">normal flow</a>.

<dt><strong>'relative'</strong>
<dd>The box coordinates are calculated according to the <a
href="#normal-flow">normal flow</a>, then the box is 
offset <a href="#relative-positioning">relative</a> to its normal
position.

<dt><strong>'absolute'</strong>
<dd> The box coordinates (and possibly size) are calculated 
in <a href="#absolute-positioning">absolute</a> terms
with respect to the box's <a
href="flowobj2.html#containing-block">containing block</A>.

<dt><strong>'fixed'</strong>
<dd> The box coordinates are calculated as for
<a href="#absolute-positioning">'absolute'</a>, but
in addition, the box is <a
href="#fixed-positioning">fixed</a> to the canvas (i.e., doesn't
move when the canvas is scrolled, paged, etc.). <strong>Note.</strong>
Authors may wish to specify 'fixed' in a media-dependent way (e.g.,
information should appear on every screen but not on every page).
</dl>

<div class="note"><P>
<em><strong>Note.</strong>
The value 'static'  causes some user agents to
ignore the <span class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> properties. To ensure that values of
<span class="propinst-left">'left'</span> and <span
class="propinst-top">'top'</span> are taken into account, authors should
explicitly set the value of the <span
class="propinst-position">'position'</span> property to 'relative'.
</em>
</div>


<H4><a name="position-props">Box offsets</a>: <span
class="propinst-top">'top'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span></H4>

<P>The position of an <a href="#relative-positioning">relatively</A>
or <a href="#absolute-positioning">absolutely</A> (including <a
href="#fixed-positioning">fixed</A>) positioned boxes is established
by four properties:

<!-- #include src=properties/top.srb -->

<!-- #include src=properties/right.srb -->

<!-- #include src=properties/bottom.srb -->

<!-- #include src=properties/left.srb -->

<P>Each of these four properties specifies an offset between the outer
edge of a generated box and a reference edge. In the case of
absolutely positioned boxes, the offsets are with respect to the inner
edges of the <a href="#containing-block">containing block</a>. In the
case of relatively positioned boxes, the offsets are with respect to
the edges of the box itself in its normal flow position.

<P>The values have the following meanings:

<dl>
<dt><strong><span class="value-inst-length">&lt;length&gt;</span></strong>
<dd>The offset is a fixed distance from the edge.

<dt><strong><span class="value-inst-percentage">&lt;percentage&gt;</span></strong>

<dd>The offset is a percentage of the containing block's width (for <span class="propinst-left">'left'</span> or <span
class="propinst-right">'right'</span>) or height (for <span
class="propinst-top">'top'</span> and <span
class="propinst-bottom">'bottom'</span>).

<dt><strong>auto</strong>
<dd>The offset is automatically calculated based on the width and
height of the box.
</dl>

<P>For absolutely positioned boxes, the values of the <span
class="propinst-left">'left'</span>, <span
class="propinst-right">'right'</span>, <span
class="propinst-top">'top'</span>, and <span
class="propinst-bottom">'bottom'</span> properties take over the roles
of the corresponding <a href="flowobj2.html#margin-properties">margin
properties</a> (i.e., absolutely positioned boxes do not have
margins but do have padding and borders).

<P>For more information about the width and height of boxes, please
consult the sections on <a href="flowobj2.html#box-width">box width
calculations</a> and <a href="flowobj2.html#box-height">box height
calculations</a> respectively.

<H3><a name="normal-flow">Normal flow</a></H3> 

<P>Boxes in the normal flow belong to a <span class="index-def"
title="formatting context">formatting context</span>, which may be
horizontal or vertical, but not both simultaneously.

<P>Inline elements and block-level elements that contain text that is
not the content of an inline element have <span class="index-def"
title="anonymous elements"><a
name="anonymous"><dfn>anonymous</dfn></a></span> children in the <a
href="convent.html#doctree">document tree</a>. These anonymous
elements inherit property values (colors, fonts, etc.). They generate
boxes that contain chunks of text as content.  By default, anonymous
boxes participate in a horizontal formatting context. Decisions about
the construction of anonymous boxes depend on many factors (language,
hyphenation, etc.)  and lie outside the scope of this specification.

<h4><a name="vertical-formatting">Vertical formatting context</a></h4> 

<P>In a vertical formatting context, boxes are laid out one after the
other, vertically.

<P>The vertical distance between two sibling elements is determined by
the <span class="propinst-margin">'margin'</span> properties. Vertical
margins between adjacent block-level boxes collapses, as described in
the section on <a href="./flowobj2.html#collapsing-margins">collapsing
margins</a>.

<P>For information about page breaks in paged media, please consult
the section on <a href="page.html#allowed-page-breaks">allowed
page breaks</a>.

<H4><a name="horizontal-formatting">Horizontal formatting context</a></H4>

<P>In a horizontal formatting context, boxes are laid out one after
the other within a horizontal space defined by a <A
HREF="flowobj2.html#containing-block">containing block</A>. 

<P>Horizontally adjacent boxes flow into a <span class="index-def"
title="line box"><a name="line-box"><dfn>line
box</dfn></a></span>. When boxes cannot fit within a single line box,
they are distributed among two or more vertically stacked line
boxes. Thus, a paragraph is a stack of adjacent line boxes (not
separated by margin, border, or padding).

<P>Line boxes in the same paragraph have the same width but may vary
in height (e.g., one line might contain an image while the others
contain only text). The final height of each line box is determined by
the rules given in the section on <a
href="flowobj2.html#line-height">line height calculations</a>. 

<P> When the height of a box B is less than the height of the line box
containing it, the vertical alignment of B within the line box is
determined by the <span
class="propinst-vertical-align">'vertical-align'</span> property.

<P>When an box is less wide than the width of the line box containing
it, its horizontal alignment within the line box is determined by the
<span class="propinst-text-align">'text-align'</span> property.  When
a box is wider than a line box, it it may be split into several boxes
and these boxes distributed across several line boxes.

<div class="html-example"><P>
For example, the following paragraph (created by the HTML block-level
element P) contains text separated by 
the inline elements EM and STRONG:

<PRE>
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear
  &lt;STRONG&gt;in this&lt;/STRONG&gt; sentence, dear.&lt;/P&gt;
</PRE>

<P>In terms of the document tree, P has five children:

<ul>
<li>Anonymous: "Several"
<li>EM: "emphasized words"
<li>Anonymous: "appear"
<li>STRONG: "in this"
<li>Anonymous: "sentence, dear."
</ul>
 
<P>To format the paragraph, the user agent creates a box for each
child and flows the boxes into line boxes. Since the parent element in
normal flow generates the containing block for horizontal formatting,
the width of the P element determines the width of these line boxes.
If the width of P is sufficient, all the inline boxes will fit into a
single line box:

<PRE>
  Several <EM>emphasized words</EM> appear <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>If the boxes do not fit within a single line box, they will
be split up and distributed across several line boxes.  The previous
paragraph might be split as follows:

<PRE>
  Several <EM>emphasized words</EM> appear
  <STRONG>in this</STRONG> sentence, dear.
</PRE>

<P>or like this:

<PRE>
  Several <EM>emphasized</EM>  
  <EM>words</EM> appear
  <STRONG>in this</STRONG> 
  sentence, dear.
</PRE>

</div>

<P>In the previous example, the EM box was split into two EM boxes
(call them "split1" and "split2"). If a box split this way has
margins, borders, padding, or text decorations, these have no visible
effect after split1 or before split2 (i.e., the border is not drawn
and the margin and padding are not included).

<div class="html-example"><P>
Consider the following example:

<PRE>
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;TITLE&gt;Example of horizontal flow on several lines&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
  EM { padding: 2px ; 
       margin: 1em ;
       border-width: medium;
       border-style: dashed;
       line-height: 2.4em;
  }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;Several &lt;EM&gt;emphasized words&lt;/EM&gt; appear here.&lt;/P&gt;
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>

<P>Depending on the width of the P, the boxes may be distributed as
follows:</P>

<img src="./images/inline-layout.gif"
     alt="Image illustrating the effect of line breaking on the display of margins, borders, and padding.">

<ul>
<li> The margin is inserted before "emphasized" and after "words". 

<!-- The next point is not clear to me. -IJ -->
<li> The padding is inserted before, above, and below
"emphasized" and after, above, and below "words" (i.e.,
neither after "emphasized" nor before "words"). A
dashed border surrounds the padding.  
</ul>
</div>

<P>Note that with a small line height, the padding and borders
around text in different lines may overlap.

<h4><a name="direction">Direction of horizontal flow</a>: the <span
class="propinst-direction">'direction'</span> property</h4>

<!-- #include src=properties/direction.srb -->

<P>This property determines whether the direction of flow in a <a
href="#horizontal-formatting">horizontal formatting context</a> is
left-to-right or right-to-left. It also specifies the direction of <a
href="./tables.html">table layout</a>.

<P>Values have the following meanings:</P>

<dl>
<dt><strong>ltr</strong> 
<dd>Left to right flow. This is the default value.
<dt><strong>rtl</strong>
<dd> Right to left flow.
<dt><strong>ltr-override</strong>
<dd>[Ian: What does this mean?]
<dt><strong>rtl-override</strong>
<dd>[Ian: What does this mean?]
</dl>

<P>[Ian: Examples here.]


<P>For left-to-right flow, the horizontal distance between the left
side of a box and its preceding sibling's right side (or parent's
right side if no preceding sibling exists) is determined by the <span
class="propinst-margin">'margin'</span> properties. For right-to-left
flow, the horizontal distance is between the right side of a box and
its preceding sibling's left side (or parent's left side if no
preceding sibling exists).

<H3><a name="relative-positioning">Relative positioning</a></H3>  

<P>Once a box has been assigned a position according to the <a
href="#normal-flow">normal flow</a>, it may be shifted relative to
this position. This is called <span class="index-def" title="relative
positioning"><dfn>relative positioning</dfn></span>. Offsetting a box
in this way has no effect on sibling boxes; they are not "reflowed" as
a result of the offset. This implies that relative positioning may
cause boxes to overlap.

<p>Relatively positioned boxes keep their normal flow shape, including
line breaks and the space originally reserved for them.  Dynamic
movement of relatively positioned boxes can provide animation
effects in scripting environments (see the section on <a
href="./flowobj2.html#dynamic-positioning">dynamic positioning</a> for
details).</p>

<P>A relatively positioned box is generated when the <span
class="propinst-position">'position'</span> property for an element
has the value 'relative'.  The offset is specified by the <span
class="propinst-top">'top'</span>, <span
class="propinst-bottom">'bottom'</span>, <span
class="propinst-left">'left'</span>, and <span
class="propinst-right">'right'</span> properties.

<P>A relatively positioned box establishes a new <A
HREF="flowobj2.html#containing-block">containing block</A> for
descendant boxes. See the section on <a
href="#absolute-positioning">absolutely positioned elements</A> for
more on this.

<p>Relative positioning may also be used as a general form of
superscripting and subscripting except that line height is not
automatically adjusted to take the positioning into consideration. See
the description of <a href="flowobj2.html#line-height">line height
calculations</a> for more information.

<P>Examples of relative positioning are provided in the section <a
href="#comparison">comparing normal, relative, floating, and
absolute positioning</a>.

<H3><a name="floats">Floats</a>: the <span
class="propinst-float">'float'</span> and <span
class="propinst-clear">'clear'</span> properties</H3>

<P>A floating box is one that is given a position according to the <a
href="#normal-flow">normal flow</a>, then shifted to the left or right
until the margin, padding, or border of another <a
href="#block-level">block-level</a> box is reached.

<P>User agents take the boundaries of floating boxes into account when
flowing subsequent boxes, i.e., boxes that follow flow around the
floating box. The margins, borders and padding of the floating box are
honored, and the margins never collapse with the margins of adjacent
boxes.

<P>Setting the <span class="propinst-float">'float'</span> property
for an element may cause its generated box to float.  This property is
most often used with inline images, but also applies to elements with
text content.

<!-- #include src=properties/float.srb -->

<P>The values have the following meanings:</p>

<dl>
<dt><strong>left</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box in the <a href="#normal-flow">normal flow</a>,
then shifts the box to the left. Text wraps on the right
side of the box.
<dt><strong>right</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box in the <a href="#normal-flow">normal flow</a>,
then shifts the box to the right. Text wraps on the left
side of the box.
<dt><strong>none</strong>
<dd>Makes the generated box a <a href="#block-level">block-level</a>
box in the <a href="#normal-flow">normal flow</a> and leaves
it there.
</dl>

<!-- Hakon: we can't say 'display' is ignored since 'none' still has
an effect -->

<div class="example"><P>
The following rule positions all IMG elements with
<samp>class="icon"</samp> along the left side of the parent element:

<PRE>
  IMG.icon { 
    float: left;
    margin-left: 0;
  }
</PRE>
</div>


<div class="html-example"><P>
The following HTML source:

<PRE>  
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;STYLE type="text/css"&gt;
    IMG { float: left }
    BODY, P, IMG { margin: 2em }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;P&gt;
      &lt;IMG src=img.gif alt="This image will illustrate floats"&gt;
      Some sample text that has no other...
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>

<P>might be formatted as:</P>

<img src="./images/floateg.gif"
     alt="Image illustrating how floating elements interact with margins.">

<P>Note that the margin of the P element encloses the floating
IMG element and that the vertical margins do not collapse.
</div>

<H4>Controlling floats</H4> 

<P>The <span class="propinst-clear">'clear'</span> property specifies
whether a box generated by an element will allow floating elements on
its sides.

<!-- #include src=properties/clear.srb -->

<P>When set for an element generating a box B, this property indicates
which sides of B may not be adjacent to sides of a floating
box. Values have the following meanings:</P>

<dl>
<dt><strong>left</strong>
<dd>B may not be positioned next to any floating boxes to
its left; when flowed, B will therefore be moved to the next available
line below.
<dt><strong>right</strong>
<dd>B may not be positioned next to any floating boxes to
its right; when flowed, B will therefore be moved to the next available
line below.
<dt><strong>both</strong>
<dd>B may not be placed next to floating
boxes on either side.
<dt><strong>none</strong>
<dd>B may be placed next to
floating boxes to the left or right.
</dl>

<div class="example"><P>
The following style rule means that no H1 element may have a floating
element to its left. All H1 elements will be positioned at the current
left margin. 

<PRE>
  H1 { clear: left }
</PRE>
</div>

<P>Consult the section on <a
href="flowobj2.html#floating-constraints">floating constraints</a> for
more information about controlling floats.

<H3><a name="absolute-positioning">Absolute positioning</a></H3>

<!--
<p>Absolutely positioned boxes act like block-level boxes, but
since they do not belong to the normal flow, the following properties
do not apply to them: <span class="propinst-float">'float'</span>,
<span class="propinst-clear">'clear'</span>, <span
class="propinst-display">'display'</span> (and therefore <span
class="propinst-list-style-type">'list-style-type'</span>), and all
the <a href="flowobj2.html#margin-properties">margin properties</a>.
-->

<p>Absolutely positioned elements are positioned with respect to a <A
HREF="flowobj2.html#containing-block">containing block</A>.  An
absolutely positioned box establishes a new containing block for
descendant boxes.

<P>The contents of an absolutely positioned element do not flow around
any other boxes. They may or may not obscure the contents of another
box, depending on the <a href="#z-order">z-order</a> of the
overlapping boxes.

<P>An absolutely positioned box lives inside of this containing
block, as illustrated below:</p>

<img src="./images/box-coord.gif" alt="Illustration of a containing block">

<H4><a name="fixed-positioning">Fixed positioning</a></H4>

<P>Fixed positioning is a variant of absolute positioning. The only
difference is that for a fixed positioned box, the containing block is
established by the <a href="#viewport">viewport</A>. This is similar
to the 'fixed' value on the <span
class="propinst-background-position">'background-position'</span>
property.

<P>For <a href="#continuous-media">continuous media</a>, fixed boxes
do not move when the document is scrolled. In this respect, they are
similar to <a href="./colors.html#background-properties">fixed
background images</a>. 

<P>For <a href="page.html">paged media</a>, boxes with fixed
positions are repeated on every page. This is useful for placing, for
instance, a signature at the bottom of each page.

<div class="html-example">
<P>Authors may use fixed positioning to create frame" presentations
(see <a rel="biblioentry" href="./refs.html#ref-HTML40">[HTML40]</a>).
Consider the following frame layout:</P>

<img src="./images/frame.gif"
     alt="Image illustrating a frame-like layout with position='fixed'.">

<P>This might be achieved with the following HTML document and
style rules:</P>

<PRE>
  &lt;HTML&gt;
  &lt;HEAD&gt;
  &lt;TITLE&gt;A frame document with CSS2&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
    #header {
       position: fixed;
       width: 100%;
       height: 15%;       
       top: 0;
       right: 0;
       bottom: auto;
       left: 0;
    }
    #sidebar {
       position: fixed;
       width: 10em;
       height: auto;
       top: 15%;
       right: auto;
       bottom: 100px;
       left: 0;
    }
    #main {
       position: fixed;
       width: auto;
       height: auto;
       top: 15%;
       right: 0;
       bottom: 100px;
       left: 10em;
    }
    #footer {
       position: fixed;
       width: 100%;
       height: 100px;
       top: auto;
       right: 0;
       bottom: 0;
       left: 0;
    }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
    &lt;DIV id="header"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="sidebar"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="main"&gt; ...  &lt;/DIV&gt;
    &lt;DIV id="footer"&gt; ...  &lt;/DIV&gt;
  &lt;/BODY&gt;
  &lt;/HTML&gt;
</PRE>
</DIV>

<H3><a name="comparison">Comparison of normal, relative, floating, absolute positioning</a></H3>
<P>To illustrate the relationship between normal flow, relative
positioning, floats, and absolute positioning, we provide a series of
examples based on the following HTML fragment:

<pre class="html-example">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Comparison of positioning schemes&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;P&gt;Beginning of body contents.
  &lt;SPAN id="outer"&gt; Start of outer contents.
  &lt;SPAN id="inner"&gt; Inner contents.&lt;/SPAN&gt;
  End of outer contents.&lt;/SPAN&gt;
  End of body contents.
  &lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<p>The final positions of boxes generated by the <em>outer</em> and
<em>inner</em> elements vary in each example. In each illustration,
the numbers to the left of the illustration indicate the <a
href="#normal-flow">normal flow</a> position of the double-spaced (for
clarity in this example) lines.</p>

<P>&nbsp;</P>
<H4>Normal flow</H4>

<p>Consider the following CSS declarations for <em>outer</em> and
<em>inner</em> that don't alter the <a href="#normal-flow">normal
flow</a> of boxes:</p>

<PRE>
  #outer {color: red;}
  #inner {color: blue;}
</PRE>

<p>This results in something like the following:</p>

<img src="./images/flow-generic.gif"
     alt="Image illustrating the normal flow of text between parent and sibling boxes.">

<H4>Relative positioning</H4>

<P>To see the effect of <a href="#relative-positioning">relative
positioning</a>, consider the following CSS rules:

<PRE>
  BODY {line-height: 200%}
  #outer {position: relative; top: -12px; color: red;}
  #inner {position: relative; top: 12px; color: blue;}
</PRE>

<p>First, the <em>outer</em> text is flowed into its normal flow
position and dimensions at the end of line 1. Then, the entire box
(distributed over three lines) is shifted upwards by 12px.

<P>The contents of <em>inner</em>, as a child of <em>outer</em>, would
normally flow immediately after the words "of outer contents" (on line
1.5). However, the <em>inner</em> contents are themselves offset
relative to the <em>outer</em> contents by 12px downwards, back to
their original position on line 2.

<P>Note that the content following <em>outer</em> is not affected by the
relative positioning of <em>outer</em>.</P>

<img src="./images/flow-relative.gif"
     alt="Image illustrating the effects of relative positioning on a box's content.">

<P>Note also that if the relative positioning of <em>outer</em> were -24px, the
text of <em>outer</em> and the body text would have overlapped.

<H4>Floating a box</H4>

<P>Now consider the effect of <a href="#floats">floating</a> the
<em>inner</em> element's text to the right by means of the following
rules:

<PRE>
  #outer {color: red;}
  #inner {float: right; width: 130px; color: blue;}
</PRE>

<P>First, the <em>inner</em> box (whose width has been set explicitly)
is floated to the right margin. Then, the text of the <em>outer</em>
element that follows the inner element text flows in the space vacated
by the <em>inner</em> box. This flow respects the new right margin
established by the left border of the <em>inner</em> box.</P>

<img src="./images/flow-float.gif"
     alt="Image illustrating the effects of floating a box.">

<P>To show the effect of the <span
class="propinst-clear">'clear'</span> property, we add a <em>sibling</em>
element to the example:

<PRE class="html-example">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Comparison of positioning schemes II&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;P&gt;Beginning of body contents.
  &lt;SPAN id=outer&gt; Start of outer contents.
  &lt;SPAN id=inner&gt; Inner contents.&lt;/SPAN&gt;
  &lt;SPAN id=sibling&gt; Sibling contents.&lt;/SPAN&gt;
  End of outer contents.&lt;/SPAN&gt;
  End of body contents.
  &lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The following rules:

<PRE>
  #inner {float: right; width: 130px; color: blue;}
  #sibling {color: red;}
</PRE>

<P>cause the <em>inner</em> box to float to the right and the text of
the <em>sibling</em> element to flow in the vacated space:</P>

<img src="./images/flow-clear.gif"
     alt="Image illustrating the effects of floating a box without setting the clear property to control the flow of text around the box.">

<P>However, if the <span class="propinst-clear">'clear'</span>
property on the <em>sibling</em> element is set to 'right' (i.e., the
generated <em>sibling</em> box will not accept being positioned next
to floating boxes to its right), the <em>sibling</em> box flows on
the next available line below:

<PRE>
  #inner {float: right; width: 130px; color: blue;}
  #sibling {clear: right; color: red;}
</PRE>

<img src="./images/flow-clear2.gif" 
alt="Image illustrating the effects of floating an element with setting the clear property to control the flow of text around the element.">

<H4>Absolute positioning</H4>

<p>Finally, we consider the effect of <a
href="#absolute-positioning">absolute positioning</a> on a
box. Consider the following CSS declarations for <em>outer</em> and
<em>inner</em>:</p>

<PRE>
  #outer {position: absolute; top: 200px; left: 200px; width: 200px; color: red;}
  #inner {color: blue;}
</PRE>

<p>which cause the top of the <em>outer</em> box to be positioned with
respect to the containing block (which we suppose is established
by the root of the
document tree). The top side of the <em>outer</em> box is 200px from
the top of the containing block and the left side is 200px from the
left side. The child box of <em>outer</em> is flowed normally with
respect to its parent.</P>

<img src="./images/flow-absolute.gif"
   alt="Image illustrating the effects of absolutely positioning a box.">

<P>Note that because <em>outer</em> has been absolutely positioned, it
establishes a new containing block for descendant boxes (there aren't
any in this example).

<p>The following example shows an absolutely positioned box that
is a child of a relatively positioned box. Although the parent
<em>outer</em> box is not actually offset, setting its <span
class="propinst-position">'position'</span> property to 'relative'
causes its box to serve as the containing block for any descendant
boxes. Since the <em>outer</em> box is an inline box that is split
across several lines, only the first box (whose upper left-hand corner
is designated by a "@" in the illustration below) establishes the
containing block for the descendants.

<PRE>
  #outer {position: relative; color: red;}
  #inner {position: absolute; top: 200px; left: -100px; height:
     130px; width: 130px; color: blue;}
</PRE>

<p>This results in something like the following:</p>

<img src="./images/flow-abs-rel.gif"
     alt="Image illustrating the effects of absolutely positioning a
box with respect to a containing block.">

<P>Recall that statically positioning a box is equivalent to using the
<span class="propinst-position">'position'</span> property to put the
box back in the normal flow. Statically positioned boxes do not
establish a containing block for descendant boxes. Thus, the following
rules:

<PRE>
  #outer {position: static; color: red;}
  #inner {position: absolute; top: 200px; left: -100px; height:
    130px; width: 130px; color: blue;}
</PRE>

<P>are equivalent to:

<PRE>
  #outer {color: red;}
  #inner {position: absolute; top: 200px; left: -100px; height:
    130px; width: 130px; color: blue;}
</PRE>

<P>and cause the <em>inner</em> box to be positioned with respect to
the containing block (which we assume here is established by the root
of the document tree).</P>

<img src="./images/flow-static.gif"
     alt="Image illustrating the effects of absolutely positioning a box with respect to a coordinate system established by a statically positioned parent.">

<P>Relative and absolute positioning may be used to implement change
bars, as shown in the following example. We use a value of 'auto' for
the <span class="propinst-top">'top'</span> property, which results in
the box being placed at the "current" location in the document
window, just as if the box were being flowed into that space. The
following HTML text:</p>

<pre>
&lt;P style=&quot;position: relative; margin-right: 10px; left: 10px;&quot;&gt;
I used two red hyphens to serve as a change bar. They
will &quot;float&quot; to the left of the line containing THIS
&lt;SPAN style=&quot;position: absolute; top: auto; left: 0px; color: red;&quot;&gt;--&lt;/SPAN&gt;
word.&lt;/P&gt;
</pre>

<p>might result in something like:</p>

<img src="./images/changebar.gif"
     alt="Image illustrating the use of floats to create a changebar effect.">

<H2><a name="z-order">Z-order</a>: Layered presentation</H2>
<P><em>In the following sections, the expression "in front of" 
means closer to the user as the user faces the screen.</em></P>

<P>CSS allows authors to specify the position of a box in three
dimensions. The <span class="index-def" title="stack level"><dfn>stack
level</dfn></span> of an element refers to its position in front of or
behind other boxes. The stack level is particularly relevant to boxes
that overlap visually.

<P>The stack level of a box may be determined in two ways:</P>

<ul>
<li>Implicitly, by virtue of source element's position in the <a
href="convent.html#doctree">document tree</a>.
Boxes are stacked in the order their
source elements appear in the
document tree. Thus, a box is stacked in front of its parent and
preceding siblings and behind its children and following siblings.
<li>Explicitly, via the <span
class="propinst-z-index">'z-index'</span> property. 
</ul>

<H3><a name="stack-level">Specifying the stack level</a>: the <span
class="propinst-z-index">'z-index'</span> property</H3> 

<!-- #include src=properties/z-index.srb -->

<p>The <span class="propinst-z-index">'z-index'</span> property is
used to specify the stacking order of boxes generated by elements with
<span class="propinst-position">'position'</span> set to 'relative',
'absolute', or 'fixed'. Each such element establishes a <span
class="index-def" title="stacking context"><dfn>stacking
context</dfn></span> in which its own <span
class="propinst-z-index">'z-index'</span> is 0.

<P>The values of this property have the following meanings:</p>

<dl>
<dt><strong>auto</strong>
<dd>The stack level of the generated box will be that
established by the element's
position in the <a
href="convent.html#doctree">document tree</a>.
<dt><span class="index-inst" title="&lt;integer&gt;"><span class="value-inst-integer"><strong>&lt;integer&gt;</strong></span></span>
<dd>Specifies an explicit stack level for the generated box.
</dl>

<P>Elements for which the <span
class="propinst-z-index">'z-index'</span> property has been given an
integer value behave as follows:</P>

<ul>
    <li>Sibling elements generate boxes that 
        are stacked bottom-to-top in order of
    increasing <span class="propinst-z-index">'z-index'</span>
    value. When two siblings have the same <span
    class="propinst-z-index">'z-index'</span> value, the
    later sibling generates boxes in front of those generated by
    the earlier sibling.

    <li>Elements with negative <span
    class="propinst-z-index">'z-index'</span> values generate boxes
    behind level 0 boxes in the current stacking context. Elements with
    positive <span class="propinst-z-index">'z-index'</span> values
    generate boxes in front of level 0 boxes in the current stacking context.

   <li>A <span class="propinst-z-index">'z-index'</span> value of 0 is
       equivalent to a value of 'auto'.
</ul>

<p>The relative z-order of two elements that are neither siblings
nor parent/child can be determined by evaluation of the previous
rules for both elements' ancestors. </p>

<P>By default, a positioned element will be placed just in front of
its parent. It is not possible to position an element behind a
grandparent.

<div class="html-example"><P>
<P>In the following example, the order of the elements, listed
back-to-front is: "image", "text2", and "text1".

<pre>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Z-order positioning&lt;/TITLE&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
.pile { position: absolute; left: 2in; top: 2in; width: 3in; height: 3in; }
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;
&lt;IMG alt="A butterfly image"
     src=&quot;butterfly.gif&quot; 
     class=&quot;pile&quot; 
     id=&quot;image&quot; 
     style=&quot;z-index: 1&quot;&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text1&quot; style=&quot;z-index: 3&quot;&gt;
   This text will overlay the butterfly image.
&lt;/DIV&gt;

&lt;DIV class=&quot;pile&quot; id=&quot;text2&quot; style=&quot;z-index: 2&quot;&gt;
   This text will underlay text1, but overlay the butterfly image
&lt;/DIV&gt;</pre>
&lt;/BODY&gt;
&lt;/HTML&gt;
</div>


<p>The previous example demonstrates the notion of
<em>transparency</em>. The default behavior of a box is to allow boxes
behind it to be visible through transparent areas in its content. In
the example, each box transparently overlays the boxes below it. This
behavior can be overridden by utilizing one of the existing
background-related properties (e.g., <span
class="propinst-background">'background'</span>).
</BODY>
</HTML>
