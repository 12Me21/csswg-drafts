<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: intro.src,v 2.3 1998-02-10 22:27:00 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Introduction to CSS2</TITLE>
</HEAD>
<BODY>
<H1 align="center">Introduction to CSS2</H1> 

<H2>A brief CSS2 tutorial for HTML</H2>

<P> In this tutorial, we show how easy it can be to design simple
style sheets. For this tutorial, you will need to know a little <a
rel="biblioentry" href="./refs.html#ref-HTML40"
class="informref">[HTML40]</a> and some basic desktop publishing
terminology.

<P>We begin with a small HTML document:</p>

<PRE class="html-example">
&lt;HTML&gt;
  &lt;TITLE&gt;Bach's home page&lt;/TITLE&gt;
  &lt;BODY&gt;
    &lt;H1&gt;Bach's home page&lt;/H1&gt;
    &lt;P&gt;Johann Sebastian Bach was a prolific composer.
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>To set the text color of the H1 elements to blue, you can write the
following CSS rule:</P>

<PRE class="example">
  H1 { color: blue }
</PRE>

<P>A CSS rule consists of two main parts: <a
href="selector.html">selector</a> ('H1') and declaration ('color:
blue'). The declaration has two parts: property ('color') and value
('blue'). While the example above tries to influence only one of the
properties needed for rendering an HTML document, it qualifies as a
style sheet on its own. Combined with other style sheets (one
fundamental feature of CSS is that style sheets are combined) it will
determine the final presentation of the document.

<P> The <a rel="biblioentry" href="./refs.html#ref-HTML40" class="informref">[HTML40]</a>
specification defines how style sheet rules may be specified for HTML
documents: either within the HTML document, or via an external style
sheet. To put the style sheet into the document, use the STYLE
element:</p>

<PRE class="html-example">
&lt;HTML&gt;
  &lt;TITLE&gt;Bach's home page&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
    H1 { color: blue }
  &lt;/STYLE&gt;
  &lt;BODY&gt;
    &lt;H1&gt;Bach's home page&lt;/H1&gt;
    &lt;P&gt;Johann Sebastian Bach was a prolific composer.
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P> For maximum flexibility, we recommend that authors specify
external style sheets; they may be changed without modifying the
source HTML document, and they may be shared among several
documents. To link to an external style sheet, you can use the LINK
element:</p>

<PRE class="html-example">
&lt;HTML&gt;
  &lt;TITLE&gt;Bach's home page&lt;/TITLE&gt;
  &lt;LINK rel="stylesheet" href="bach.css" type="text/css"&gt;
  &lt;BODY&gt;
    &lt;H1&gt;Bach's home page&lt;/H1&gt;
    &lt;P&gt;Johann Sebastian Bach was a prolific composer.
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The LINK element specifies:</p>

<ul>
<li> the type of link: to a "stylesheet".
<li> the location of the style sheet via the href attribute. <!--Here, the file
<samp>bach.css</samp> is in the same directory as the source HTML
document. -->
<li>the type of style sheet being linked: "text/css".
</ul>

<!--
<P>Let's extend our example to include a simple list of
three favorite Bach compositions:

<PRE class="html-example">
&lt;HTML&gt;
  &lt;TITLE&gt;Bach's home page&lt;/TITLE&gt;
  &lt;LINK rel="stylesheet" href="bach.css" type="text/css"&gt;
  &lt;BODY&gt;
    &lt;H1&gt;Bach's home page&lt;/H1&gt;
    &lt;P&gt;Johann Sebastian Bach was a prolific composer. Some
    Bach compositions that the editors prefer include:
    &lt;UL&gt;
    &lt;LI&gt; Mass in B-minor
    &lt;LI&gt; The Well-Tempered Clavier
    &lt;LI&gt; The Brandenburg Concertos
    &lt;/UL&gt;    
  &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>


<P>With CSS2, authors may specify the exact formatting of lists: the
indentation of the list items, the separation of the list items, the
style of the bullet (for unordered lists), the type of numbering (for
ordered lists), etc. (see the section on 
<a href="lists.html">lists</a> for more information). In this example, we
specify the bullet style for each list item to be a PNG image named
"bach.png":</p>

<PRE class="example">
   UL { list-style-image: url(bach.png) }
</PRE>

-->
<!-- Add image, printing, info, positioning, fonts -->


<div class="note"><P>
<p><em><strong>Note.</strong> To hide style sheets from older HTML user
agents, authors may comment out the content of the STYLE element.
Please consult <a rel="biblioentry" href="./refs.html#ref-HTML40"
class="informref">[HTML40]</a> for more information.
</em>
</div>

<H2>A brief CSS2 tutorial for XML</H2>

<P>CSS can be used with any structured document format, for example
[XML]. In fact, XML depends more on style sheets than HTML since
authors can make up their own elements which user agents don't know
how to display.

<P>Here is a simple XML fragment:

<PRE class="xml-example">
  &lt;ARTICLE&gt;
    &lt;HEADLINE&gt;Fredrick the Great meets Bach&lt;/HEADLINE&gt;
    &lt;AUTHOR&gt;Johann Nikolaus Forkel&lt;/AUTHOR&gt;
    &lt;LOCATION&gt;Potsdam&lt;/LOCATION&gt;
    &lt;PARA&gt;
      One evening, just as he was getting his 
      &lt;INSTRUMENT&gt;flute&lt;/INSTRUMENT&gt; ready and his
      musicians were assembled, an officer brought him a list of
      the strangers who had arrived.
    &lt;/PARA&gt;
  &lt;/ARTICLE&gt;   
</PRE>

<P>To display this fragment in a document-like fashion, we must first
declare which elements are inline (i.e., do not cause line breaks) and
which are block-level (i.e., cause line breaks). 

<PRE class="example">
  INSTRUMENT { display: inline }
  ARTICLE, HEADLINE, AUTHOR, LOCATION, PARA { display: block }
</PRE>

<P>The first rule declares INSTRUMENT to be inline, and the second
rule, with its comma-separated list of selectors, declares all the
other elements to be block-level.

<P>It's not yet clear how style sheets will be linked to XML
documents, but assuming the above CSS fragment is combined with the
XML fragment, a visual user agent could format the result as:

<PRE>
Fredrick the Great meets Bach
Johann Nikolaus Forkel
Potsdam
One evening, just as he was getting his flute ready 
and his musicians were assembled, an officer brought 
him a list of the strangers who had arrived.
</PRE>

<P>Notice that the word "flute" remains within the paragraph since it
is the content of the inline element INSTRUMENT.

<P>Still, the text isn't formatted the way you would expect. For
example, the headline font size should be larger than then rest of the
text, and you may want to display the author's name in italic:</P>

<PRE class="example">
  INSTRUMENT { display: inline }
  ARTICLE, HEADLINE, AUTHOR, LOCATION, PARA { display: block }
  HEADLINE { font-size: 1.5em }
  AUTHOR { font-style: italic }
</PRE>

<P>[add image, description]

<P>Adding more rules to the style sheet will allow you to further
improve the presentation of the document. 

<H2>The CSS2 processing model</H2>

<P>This section presents one possible model of how user
agents that support CSS work. This is only a conceptual model; real
implementations may vary.

<P>In this model, a user agent processes a source
by going through the following steps:</P>

<ol>
<li>Parse the source document and create a <a
href="conform.html#doctree">document tree</a> from the source
document.</li>

<li>Identify the target <a href="media.html">media type</a>.

<li>Retrieve all style sheets associated with the document that are
specified for the target <a href="media.html">media type</a>.

<li>Annotate every node of the document tree by assigning a single
value to every <a href="syndata.html#properties">property</a> that is
applicable to the target <a href="media.html">media type</a>.
Properties are assigned values according to the mechanisms described
in the section on <a href="cascade.html">cascading and
inheritance</a>. 

<P>Part of the calculation of values depends on the formatting
algorithm appropriate for the target <a href="media.html">media
type</a>. For example, if the target medium is the screen, user agents
apply the <a href="visuren.html">visual rendering model</a>. If the
destination medium is the printed page, user agents apply the <a
href="page.html#page-model">page model</a>. If the destination medium
is an aural rendering device (e.g., speech synthesizer), user agents
apply the <a href="aural.html">aural rendering model</a>.

<li>From the annotated document tree, generate a 
<span class="index-def" title="rendering structure">
<a name="rendering-structure"><dfn>rendering
structure</dfn></a></span>.  The rendering structure may differ
significantly from the document tree. First , the rendering structure
need not be "tree-shaped" at all -- the nature of the structure
depends on the implementation.
Second the rendering structure may contain more or less information
than the document tree. For instance, if an element in the document
tree has a value of 'none' for the <span
class="propinst-display">'display'</span> property, that element will
generate nothing in the rendering structure.  A list element, on the
other hand, may generate more information in the rendering structure:
the list element's content and list style information (e.g., a bullet
image).

<!-- Is the next statement still true? If so, it should probably
     be made specific and moved to visudet.src -->

<!-- 
<P>If an element A is an ancestor of an element D, all rendering
objects generated for A must be above the rendering objects
rendered for D in the tree of rendering objects. For box
and page box rendering objects, this implies that, to 
find a containing box for a node, a user agent need only search
upward in the tree of rendering objects (not left, right, or down).
-->

<li>Transfer the rendering structure to the target medium (e.g., print
the results, display them on the screen, render text as speech,
etc.).
</ol>

<P>Step 1 lies outside the scope of this specification (see, for
example, <a rel="biblioentry" href="./refs.html#ref-DOM"
class="informref">[DOM]</a>).

<P>Steps 2-5 are addressed by the bulk of this specification.

<P>Step 6 lies outside the scope of this specification.</p>

<h3>The canvas</h3>

<P>For all media, the term <span class="index-def" title="canvas"> <a
name="canvas"><dfn>canvas</dfn></a></span> describes "the space where
the rendering structure is rendered."  The canvas is infinite for each
dimension of the space, but rendering generally occurs within
a finite region of the canvas, established by the user agent
according to the target medium. For instance, user agents rendering
to a screen generally impose a minimum width and choose an initial
width based on the dimensions of the <a href="visuren.html#viewport">
viewport</a>. User agents rendering to a page generally impose
width and height constraints. Aural user agents may impose limits
in audio space, but not in time. 

<h3>CSS2 addressing model</h3>

<P>CSS2 <a href="selector.html">selectors</a> and properties
allow authors to refer to the following "entities" from within
a style sheet:</P>

<ul>
<li>Elements in the document tree and certain relationships between
them (see the section on <a href="selector.html">selectors</a>).

<li>Attributes of elements in the document tree, and values of those
attributes (see the section on <a
href="selector.html#attribute-selectors">attribute selectors</a>).

<li>Some parts of element content (see the <a
href="selector.html#first-line">:first-line</a> and <a
href="selector.html#first-letter">:first-letter</a> pseudo-elements.

<li>Elements of the document tree when they are in a certain state
(see the section on <a href="selector.html#pseudo-classes">pseudo-classes</a>).

<li>Some aspects of the <a href="#canvas">canvas</a> where
the document will be rendered.

<li>Some system information (see the section on <a href="ui.html">user
interface</a>).
</ul>

<H2>CSS design principles</H2>

<P>CSS2, as CSS1 before it, is based on set of design principles:</p>


<UL>

<LI>
<P><STRONG>Backward compatibility</STRONG>. User agents supporting CSS2
will be able to understand CSS1 style sheets, while CSS1 user agents are
able to read CSS2 style sheets and discarding parts they don't
understand. Also, user agents with no CSS support will be able to view
style-enhances documents. Of course, the stylistic enhancements made
possible by CSS will not be rendered, but all content will be
presented.</P>
</LI>

<LI>
<P><STRONG>Complementary to structured documents</STRONG>. Style
sheets complement structured documents (e.g. HTML and XML), providing
stylistic information for the marked-up text. It should be easy to
change the style sheet with little or no impact on the markup.</P>
</LI>

<LI>
<P><STRONG>Vendor, platform and device independence</STRONG>. Style
sheets enable documents to be remain vendor, platform and device
independent. Style sheets themselves are also vendor and platform
independent, but CSS2 allows you to target a style sheet for a group of
devices (e.g. printers).</P>
</LI>

<LI>
<P><STRONG>Maintainability</STRONG>. By pointing to style sheets from
documents, Webmasters can simplify site maintenance and retain
consistent look and feel throughout the site. For example, if
organization's background color changes, only one file needs to be
changed.</P>
</LI>

<LI>
<P><STRONG>Simplicity</STRONG>. CSS2 is more complex than CSS1, but
it remains a simple style language which is human read- and
writable. The CSS properties are kept independent of each other to the
largest extent possible and there generally only one way to achieve a
certain effect.</P>
</LI>

<LI>
<P><STRONG>Network performance</STRONG>. CSS provides for compact
encodings of how to present content. Compared to images or audio
files, which are often used by authors to achieve certain rendering
effects, using style sheets will decrease the size of the
content. Also, fewer network connections have to be opened which
further increases network performance.</P>
</LI>

<LI>
<P><STRONG>Flexibility</STRONG>. CSS can be applied to content in
several ways. The key feature is the ability to cascade style
information specified in: the default UA style sheet, user style
sheets, linked style sheets, the document head, and in attributes for
the elements forming the document body.</P>
</LI>

<LI>
<P><STRONG>Richness</STRONG>. Providing authors with a rich set of
rendering effects increases the richness of the Web as a medium of
expression. Designers have been longing for functionality commonly
found e.g. in desktop publishing and slide-show applications. Some of
the requested rendering effects conflict with device independence, but
CSS2 goes a long way of granting designers their requests.</P>
</LI>

<LI>
<P><STRONG>Alternate language bindings</STRONG>. The set of CSS
properties described in this specification form a consistent
formatting model for visual and aural presentations. This formatting
model can be accessed through the CSS language, but bindings to other
languages are also possible. For example, a JavaScript program may
dynamically change the value a certain element's <span
class="propinst-color">'color'</span> property.</P>
</LI>

<LI>
<P><STRONG>Accessibility</STRONG>. Last, but not least, using CSS will
increase accessibility to Web documents. By retaining textual
information in text form, both robots indexing Web pages and human
users will have more options for digesting the content. Users can
provide their personal style sheets if author-suggested style sheets
hinders accessibility. The cascading mechanism negotiates between, and
combines, different style sheets.</P>
</LI>

</UL>


</BODY>
</HTML>
