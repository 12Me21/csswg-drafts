<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: syndata.src,v 2.5 1998-02-11 14:24:11 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>CSS2 syntax and basic data types</TITLE>
</HEAD>
<BODY>
<H1 align="center">CSS2 syntax and basic data types</H1>
<H2><a name="syntax">Syntax</a></H2>

<P>This section describes a grammar common to any version of
CSS (including CSS2). Future versions of CSS will adhere to this core
syntax, although they may add additional syntactic constraints.

<P>These descriptions are normative. They are also
complemented by the normative grammar rules presented in <a
href="grammar.html">Appendix B</a>.

<H3><a name="tokenization">Tokenization</a></H3>

<P>All levels of CSS, level 1, level 2, but also any future levels,
use the same core syntax. This allows UAs to parse (though not, of
course, completely understand) style sheets written in levels of CSS
that didn't exist at the time the UAs were created. Designers can use
this feature to create style sheets that work with downlevel UA, while
also exercising the possibilities of the latest levels of CSS.

<P>CSS style sheets consist of a sequence of tokens. The list of
tokens for CSS2 is as follows. The definitions use Lex-style regular
expressions. Octal codes refer to <a rel="biblioentry"
href="./refs.html#ref-ISO10646">[ISO10646]</a> As in Lex, in case of
multiple matches, the longest match determines the token.

<TABLE>
<THEAD>
<TR><TH>Token		<TH>Definition
</THEAD>
<TR><TD colspan=2><HR>
<TR><TD>IDENT		<TD><code><var>{ident}</var></code>
<TR><TD>ATKEYWORD	<TD><code>@<var>{ident}</var></code>
<TR><TD>STRING		<TD><code><var>{string}</var></code>
<TR><TD>HASH		<TD><code>#<var>{name}</var></code>
<TR><TD>NUMBER		<TD><code><var>{num}</var></code>
<TR><TD>PERCENTAGE	<TD><code><var>{num}</var>%</code>
<TR><TD>DIMENSION	<TD><code><var>{num}{ident}</var></code>
<TR><TD>URI		<TD><code>url\(<var>{w}{string}{w}</var>\)<br>
		|url\(<var>{w}</var>([!#$%&amp;*-~]|{nonascii}|{escape})*<var>{w}</var>\)</code>
<TR><TD>UNICODE-RANGE	<TD><code>U\+[0-9A-F?]{1,6}(-[0-9A-F]{1,6})?</code>
<TR><TD>CDO		<TD><code>\&lt;!--</code>
<TR><TD>CDC		<TD><code>--&gt;</code>
<TR><TD>;		<TD><code>;</code>
<TR><TD>{		<TD><code>\{</code>
<TR><TD>}		<TD><code>\}</code>
<TR><TD>(		<TD><code>\(</code>
<TR><TD>)		<TD><code>\)</code>
<TR><TD>[		<TD><code>\[</code>
<TR><TD>]		<TD><code>\]</code>
<TR><TD>S		<TD><code>[ \t\r\n\f]+</code>
<TR><TD>COMMENT		<TD><code>\/\*[^*]*\*+([^/][^*]*\*+)*\/</code>
<TR><TD>FUNCTION	<TD><code>{ident}\(</code>
<TR><TD>INCLUDES	<TD><code>~=</code>
<TR><TD>DELIM		<TD><var>any other character</var>
</TABLE>

<P>The macros in curly braces ({}) above are defined as follows:

<TABLE>
<THEAD>
<TR><TH>Macro	<TH>Definition
</THEAD>
<TR><TD colspan=2><HR>
<TR><TD>ident	<TD><code><var>{nmstart}{nmchar}*</var></code>
<TR><TD>nmstart	<TD><code>[a-zA-Z]|<var>{nonascii}</var>|<var>{escape}</var></code>
<TR><TD>nonascii<TD><code>[^\0-\4177777]</code>
<TR><TD>unicode	<TD><code>\\[0-9a-f]{1,6}[ \n\r\t\f]?</code>
<TR><TD>escape	<TD><code>{unicode}|\\[ -~\200-\4177777]</code>
<TR><TD>nmchar	<TD><code>[a-z0-9-]|<var>{nonascii}</var>|<var>{escape}</var></code>
<TR><TD>num	<TD><code>[0-9]+|[0-9]*\.[0-9]+</code>
<TR><TD>string	<TD><code><var>{string1}</var>|<var>{string2}</var></code>
<TR><TD>string1	<TD><code>\"([\t !#$%&amp;(-~]|\\\n|\'|<var>{nonascii}</var>|<var>{escape}</var>)*\"</code>
<TR><TD>string2	<TD><code>\'([\t !#$%&amp;(-~]|\\\n|\"|<var>{nonascii}</var>|<var>{escape}</var>)*\'</code>
</TABLE>

<P>Below is the core syntax for CSS. The sections that follow describe
how to use it. <a href="grammar.html">Appendix B</a> describes a
more restrictive grammar that is closer to the CSS level 2 language.

<PRE>
stylesheet  : [ CDO | CDC | S | statement ]*;
statement   : ruleset | at-rule;
at-rule     : ATKEYWORD S* any* [ block | ';' S* ];
block       : '{' S* [ any | block | ATKEYWORD S* | ';' ]* '}' S*;
ruleset     : selector '{' S* declaration? [ ';' S* declaration ]* '}' S*;
selector    : any+;
declaration : property ':' S* value;
property    : IDENT S*;
value       : [ any | block | ATKEYWORD S* ]+;
any         : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
              | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
              | '(' any* ')' | '[' any* ']' ] S*;
</PRE>

<P><a name="whitespace">COMMENT</a> tokens do not occur
in the grammar (to keep it readable), but any number of these tokens
may appear anywhere.

<P>In some cases, user agents must "skip" part of an illegal style
sheet. This specification defines <span class="index-def"
title="skip"><a name="skip"><dfn>skip</dfn></a></span> to mean that
the user agent parses the illegal string (from beginning to end), but
then <span class="index-inst" title="skip"><a
href="#skip">skips</a></span> the string.

<!-- How are "beginning" and "end" defined? -IJ -->

<P>An <span class="index-def" title="identifier"> <a
name="identifier"><dfn>identifier</dfn></a></span> consists of
letters, digits, hyphens, non-ASCII, and <a
href="#escaped-characters">escaped characters.</a>


<H3>Characters and case</H3>
<P>  The following rules always hold:</p>

<UL>
    <LI> All CSS style sheets are <span class="index-inst" title="case
    sensitivity">case-insensitive</span>, except for parts that are
    not under the control of CSS. For example, the case-sensitivity of
    value of the HTML attributes 'id' and 'class', of font names, and
    of URIs lies outside the scope of this specification. Note in
    particular that element names are case-insensitive in HTML, but
    case-sensitive in XML.

    <LI> In CSS2, <a href="selector.html">selectors</a> (element
    names, classes and IDs) can contain only the characters
    [A-Za-z0-9] and <a rel="biblioentry"
    href="./refs.html#ref-ISO10646">[ISO10646]</a> characters 161 and
    higher, plus the hyphen (-); they cannot start with a hyphen or a
    digit. They can also contain escaped characters and any <a
    rel="biblioentry" href="./refs.html#ref-ISO10646">[ISO10646]</a>
    character as a numeric code (see next item). 

    <P>Note that <a rel="biblioentry"
    href="./refs.html#ref-UNICODE">[UNICODE]</a> is code-by-code
    equivalent to <a rel="biblioentry"
    href="./refs.html#ref-ISO10646">[ISO10646]</a>.

    <LI> <a name="escaped-characters">The backslash</a> (\) followed
    by at most six hexadecimal digits (0..9A..F) stands for the <a
    rel="biblioentry" href="./refs.html#ref-ISO10646">[ISO10646]</a>
    character with that number. If a digit or letter follows the
    hexadecimal number, the end of the number needs to be made
    clear. There are two ways to do that:

    <ol>
    <li>with a space (or other whitespace character): "\26 B" ("&B")
    <li>by providing exactly 6 hexadecimal digits: "\000026B" ("&B")
    </ol>

    <p>In fact, the two methods may be combined. Only one whitespace
    character is ignored after a hexadecimal escape. Note that this means
    that a "real" space after the escape sequence must itself either be
    escaped or doubled.

    <LI> Any character except a hexadecimal digit can be escaped to
    remove its special meaning, by putting a backslash (\) in front,
    For example, <samp>"\""</samp> is a string consisting of one
    double quote. 

    <LI> The two preceding items define <span class="index-inst"
    title="backslash
    escapes"><EM>backslash-escapes</EM></span>. Backslash-escapes are
    always considered to be part of an <a href="#identifier">
    identifier</a> or a
    string (i.e., "\7B" is not punctuation, even though "{" is, and
    "\32" is allowed at the start of a class name, even though "2" is
    not).
  </UL>

<H3>Statements</H3>

<P> A CSS style sheet, for any version of CSS, consists of a list of
<span class="index-inst" title="statements"><em>statements</em></span>
(see the grammar above).  There are two kinds of statements: <span
class="index-inst" title="at-rules|@-rules"><em>at-rules</em></span>
and <span class="index-inst" title="rule sets"><em>rule
sets.</em></span> There may be <a href="#whitespace">whitespace</a>
around the statements.

<P>In this specification, the expressions "immediately before" or
"immediate after" mean with no intervening white space or comments.

<!-- Should comments be defined as white space? -->

<H3><a name="at-rules">At-rules</a></H3> 

<P> At-rules start with an <DFN>at-keyword</DFN>, which is an <a
href="#identifier">identifier</a> beginning with '@' (for example,
'@import', '@page', etc.).

<P> An at-rule consists of everything up to and including the next
semicolon (;) or the next <a href="#block">block,</a> whichever comes
first. A CSS UA that encounters an unrecognized at-rule must 
<span class="index-inst" title="skip"><a href="#skip">skip</a></span>
the whole of the @-rule and continue parsing after it.

<P> CSS2 user agents have some additional constraints, e.g., they must
also <span class="index-inst" title="skip"><a
href="#skip">skip</a></span> any '@import' rule that occurs inside a
<a href="#block">block</a> or that doesn't precede all rule sets.

<div class="illegal-example"><P>
Here is an example. Assume a CSS2 parser encounters this style sheet:

<PRE>
  @import "subs.css";
  H1 { color: blue }
  @import "list.css";
</PRE>

<P> The second '@import' is illegal according to CSS2. The CSS2 parser
<span class="index-inst" title="skip"><a href="#skip">skips</a></span>
the whole at-rule, effectively reducing the style sheet to:

<PRE>
  @import "subs.css";
  H1 { color: blue }
</PRE>
</div>

<div class="illegal-example"><P>
In the following example, the second '@import' rule is invalid,
since it occurs inside a '@media' <a href="#block">block</a>.

<PRE>
  @import "subs.css";
  @media print {
    @import "print-main.css";
    BODY { font-size: 10pt }
  }
  H1 {color: blue }
</PRE>
</div>

<H3><a name="block">Blocks</a></H3> 

<P> A <span class="index-inst" title="block"><em>block</em></span>
starts with a left curly brace ({) and ends with the matching right
curly brace (}). In between there may be any characters, except that
parentheses (()), brackets ([]) and braces ({}) must always occur in
matching pairs and may be nested. Single (') and double quotes (")
<!-- " --> must also occur in matching pairs, and characters between them
are parsed as a <span class="index-inst" title="string">string</span>.
See <a href="#tokenization">Tokenization</a> above for the definition
of a string.


<div class="illegal-example">
<P> Here is an example of a block. Note that the right brace between
the double quotes does not match the opening brace of the block, and that the
second single quote is an <a href="#escaped-characters">escaped
character</a>, and thus doesn't match the first single quote:

<PRE>
  { causta: "}" + ({7} * '\'') }
</PRE>

<P>Note that the above rule is not legal CSS2, but it is still
a block as defined above.
</div>

<H3>Rule sets, declaration blocks, and selectors</H3> 

<P> A rule set consists of a selector followed by a 
declaration block.

<P> A <span class="index-def"
title="declaration-block"><dfn>declaration-block</dfn></span> (also
called a {}-block in the following text) starts with a left curly
brace ({) and ends with the matching right curly brace (}). In between
there must be a list of one or more semicolon-separated (;)
declarations.

<P>The <span class="index-def"
title="selector"><em>selector</em></span> (see also the section on <a
href="selector.html">selectors</a>) consists of everything up to (but
not including) the first left curly brace ({).  A selector always goes
together with a {}-block. When a UA can't parse the selector (i.e., it
is not valid CSS2), it should <span class="index-inst" title="skip"><a
href="#skip">skip</a></span> the {}-block as well.

<div class="note"><P> <em><strong>Note.</strong> CSS2 gives a special
meaning to the comma (,) in selectors. However, since it is not known
if the comma may acquire other meanings in future versions of CSS, the
whole statement should be <span class="index-inst" title="skip"><a
href="#skip">skipped</a></span> if there is an error anywhere in the
selector, even though the rest of the selector may look reasonable in
CSS2.</em>
</div>

<DIV class=illegal-example>
<P>For example, since the "&amp;" is not a legal token in a CSS2
selector, a CSS2 UA must 
<span class="index-inst" title="skip"><a href="#skip">skip</a></span>
the whole second line, and not set the color of H3 to red:
<PRE>
H1, H2 {color: green }
H3, H4 &amp; H5 {color: red }
H6 {color: black }
</PRE>
</DIV>

<div class="example"><P>
<P>Here is a more complex example. The first two pairs of curly braces
are inside a string, and do not mark the end of the selector. This is
a legal CSS2 statement.
<PRE>
    P[example="public class foo
{
    private int x;

    foo(int x) {
        this.x = x;
    }

}"] { color: red }
</PRE>
</div>

<H3><a name="declaration">Declarations</a> and <a
name="properties">properties</a></H3>

<P> A <span class="index-def"
title="declaration"><dfn>declaration</dfn></span> is either empty or
consists of a <span class="index-inst"
title="property">property</span>, followed by a colon (:), followed by
a value. Around each of these there may be <a
href="#whitespace">whitespace</a>.

<p>Multiple declarations for the same selector may be
organized into semicolon (;) separated groups.</p>

<div class="example"><p>
Thus, the following rules:</p>  
<pre>
  H1 { font-weight: bold }
  H1 { font-size: 12pt }
  H1 { line-height: 14pt }
  H1 { font-family: Helvetica }
  H1 { font-variant: normal }
  H1 { font-style: normal }
</pre>

<p>are equivalent to:</p>

<pre>
  H1 { 
    font-weight: bold; 
    font-size: 12pt;
    line-height: 14pt; 
    font-family: Helvetica; 
    font-variant: normal;
    font-style: normal;
  }
</pre>
</div>

<P>A property is an <a href="#identifier">identifier</a>. Any
character may occur in the value, but parentheses (()), brackets ([]),
braces ({}), single quotes (') and double quotes (") <!-- " --> must
come in matching pairs. Parentheses, brackets, and braces may be
nested. Inside the quotes, characters are parsed as a string.

<P><span class="index-def" title="value">Values</span> are specified
separately for each property, but in any case are built from
identifiers, strings, numbers, lengths, percentages, URIs, colors,
angles, times, and frequencies.

<P> To ensure that new properties and new values for existing
properties can be added in the future, a UA must <span
class="index-inst" title="skip"><a href="#skip">skip</a></span> a
declaration with an invalid property name or an invalid value. Every
CSS2 property has its own syntactic and semantic restrictions on the
values it accepts.

<div class="illegal-example"><P>
For example, assume a CSS2 parser encounters this style sheet:

<PRE>
  H1 { color: red; font-style: 12pt }  /* Invalid value: 12pt */
  P { color: blue;  font-vendor: any;  /* Invalid prop.: font-vendor */
      font-variant: small-caps }
  EM EM { font-style: normal }
</PRE>

<P> The second declaration on the first line has an invalid value
'12pt'. The second declaration on the second line contains an
undefined property 'font-vendor'. The CSS2 parser will <span
class="index-inst" title="skip"><a href="#skip">skip</a></span> these
declarations, effectively reducing the style sheet to:

<PRE class="example">
  H1 { color: red; }
  P { color: blue;  font-variant: small-caps }
  EM EM { font-style: normal }
</PRE>
</div>

<H3><a name="comments">Comments</a></H3> 

<P><span class="index-inst" title="comments">Comments </span> begin
with the characters "/*" and end with the characters "*/". They may
occur anywhere where <a href="#whitespace">whitespace</a> can occur
and their contents have no influence on the rendering.  Comments may
not be nested.

<P>CSS also allows the SGML comment delimiters ("&lt;!--" and
"--&gt;") in certain places, but they do not delimit CSS
comments. They are permitted so that style rules appearing in an HTML
source document (in the STYLE element) may be hidden from pre-HTML3.2
user agents. See <a rel="biblioentry" href="./refs.html#ref-HTML40"
class="informref">[HTML40]</a> for more information.

<H2><a name="parsing-errors">Rules for handling parsing
errors</a></H2>

<P>User agents are required to obey the following rules
when it encounters these parsing errors:</p>

<UL>
<LI><strong>Unknown properties.</strong> User agents must <span
class="index-inst" title="skip"><a href="#skip">skip</a></span> a <a
href="syndata.html#declaration">declaration</a> with an unknown
property. For example, if the style sheet is:

<PRE class="illegal-example">
  H1 { color: red; rotation: 70minutes }
</PRE>

<P> the UA will treat this as if the style sheet had been

<PRE class="example">
  H1 { color: red }
</PRE>

<LI><strong>Illegal values.</strong> User agents must treat illegal
values, <EM>or values with illegal parts</EM>, as if the entire declaration
weren't there at all:

<PRE class="illegal-example">
  IMG { float: left }       /* CSS2 */
  IMG { float: left here }  /* "here" is not a value of 'float' */
  IMG { background: "red" } /* keywords cannot be quoted in CSS2 */
  IMG { border-width: 3 }   /* a unit must be specified for length values */
</PRE>

<P> In the above example, a CSS2 parser would honor the first rule and
<span class="index-inst" title="skip"><a href="#skip">skip</a></span>
the rest, as if the style sheet had been:

<PRE class="example">
  IMG { float: left }
  IMG { }
  IMG { }
  IMG { }
</PRE>

<P>A UA conforming to a future CSS specification may accept one or
more of the other rules as well.</P>

<LI>User agents must <span class="index-inst" title="skip"><a
href="#skip">skip</a></span> an invalid at-keyword together with
everything following it, up to and including the next semicolon (;) or
brace pair ({...}), whichever comes first. For example, assume the
style sheet reads:

<PRE class="illegal-example">
  @three-dee {
    @background-lighting {
      azimuth: 30deg;
      elevation: 190deg;
    }
    H1 { color: red }
  }
  H1 { color: blue }
</PRE>

<P> The '@three-dee' at-rule is not part of CSS2. Therefore, the whole
at-rule (up to, and including, the third right curly brace) is <span
class="index-inst" title="skip"><a href="#skip">skipped.</a></span> A
CSS2 UA <span class="index-inst" title="skip"><a
href="#skip">skips</a></span> it, effectively reducing the style sheet
to:</P>

<PRE class="example">
  H1 { color: blue }
</PRE>

</UL>


<H2>Values</H2>

<H3>Integers and real numbers</H3>

<P>Some value types may have integer values (denoted by <span
class="index-def" title="&lt;integer&gt;::definition of"><a
name="value-def-integer" class="value-def">&lt;integer&gt;</a></span>)
or real number values (denoted by <span class="index-def"
title="&lt;number&gt;::definition of"><a name="value-def-number"
class="value-def">&lt;number&gt;</a></span>).  Real numbers and
integers are specified in decimal notation only. An &lt;integer&gt;
consists of one or more digits "0" to "9". A &lt;number&gt; can either
be an &lt;integer&gt;, or it can be zero of more digits followed by a
dot (.) followed by one or more digits. Both integers and real numbers
may be preceded by a "-" or "+" to indicate the sign.

<P>Note that many properties that allow an integer or real number as a
value actually restrict the value to some range, often to a
non-negative value.

<H3><A NAME="length-units">Lengths</A></H3>

<P> The format of a length value (denoted by <span class="index-def"
title="&lt;length&gt;::definition of"><a name="value-def-length"
class="value-def">&lt;length&gt;</a></span> in this specification) is
an optional sign character ('+' or '-', with '+' being the default)
immediately followed by a <span
class="value-inst-number">&lt;number&gt;</span> (with or without a
decimal point) immediately followed by a unit identifier (e.g., px,
deg, etc.). After the number '0', the unit identifier is optional.

<P> Some properties allow negative length units, but this may
complicate the formatting model and there may be
implementation-specific limits. If a negative length value cannot be
supported, it should be converted to the nearest value that can be
supported.

<P><a name="absrel-units">There are two types of length units:
relative and absolute.</a> <span class="index-def" title="relative
units"><em>Relative length</em></span> units specify a length relative
to another length property. Style sheets that use relative units will
more easily scale from one medium to another (e.g., from a computer
display to a laser printer).

<P>Relative units are: em, ex, and px.

<div class="example"><P>
<PRE>
  H1 { margin: 0.5em }      /* em: the height of the element's font */
  H1 { margin: 1ex }        /* ex: the height of the letter 'x' */
  P  { font-size: 12px }    /* px: pixels, relative to viewing device */
</PRE>
</div>

<P>The 'em' unit refers to the <span class="index-def"
title="em-height"><a name="em-height"><dfn>em-height</dfn></a></span>.
In CSS, the em-height is equal to the <span class="index-inst"
title="font size">font size</span> used when rendering an element's
text. It may be used for vertical or horizontal measurement. The 'ex'
unit is equal to the font's <span class="index-def"
title="x-height"><dfn>x-height</dfn></span> (the height of the letter
'x') of the element's font. A font need not contain the letter "M" to
have an 'em' size or the letter "x" to have an x-height; the font
should still define the two units.

<!-- Incomplete -->

<P>Both 'em' and 'ex' refer to the font size of an element except when
used in the <span class="propinst-font-size">'font-size'</span>
property, where they are relative to the font size inherited from the
parent element. 

<div class="example"><P>
<P>The rule:

<PRE>
  H1 { line-height: 1.2em }
</PRE>

<P>means that the line height of H1 elements will be 20% greater
than the font size of the H1 elements. On the other hand:

<PRE>
  H1 { font-size: 1.2em }
</PRE>

<P>means that the font-size of H1 elements will be 20% greater than
the font size inherited by H1 elements.
</div>

<P>When specified for the root of the <a href="conform.html#doctree">
document tree</a> (e.g., HTML or BODY in HTML), 'em' and 'ex' refer to
the property's <a href="cascade.html#initial-value">initial value</a>.

<P>Please consult the section on <a href="visudet.html#line-height">line
height calculations</a> for more information about line heights
in the <a href="visuren.html">visual flow model</a>.

<P><a name="pixel-units">Pixel units</a> are relative to the
resolution of the viewing device, i.e., most often a computer
display. If the pixel density of the output device is very different
from that of a typical computer display, the UA should rescale pixel
values. The suggested <span class="index-def" title="reference
pixel"><EM>reference pixel</EM></span> is the visual angle of one
pixel on a device with a pixel density of 90dpi and a distance from
the reader of an arm's length. For a nominal arm's length of 28
inches, the visual angle is about 0.0227 degrees.

<P>Child elements do not inherit the relative values specified for
their parent; they inherit the <a
href="cascade.html#computed-value">computed values</a>.  For example:</p>

<div class="example"><P>
<PRE>
  BODY {
    font-size: 12pt;
    text-indent: 3em;  /* i.e., 36pt */
  }
  H1 { font-size: 15pt } 
</PRE>

<P> In these rules, the 'text-indent' value of H1 elements will be
36pt, not 45pt, if H1 is a child of the BODY element.
</div>

<P><span class="index-def" title="absolute length"><em> Absolute
length</em></span> units are only useful when the physical properties
of the output medium are known. The absolute units are:
in (inches), cm (centimeters), mm (millimeters), pt (points), and pc
(picas). 

<div class="example"><P>
For example:
<PRE>
  H1 { margin: 0.5in }      /* inches, 1in = 2.54cm */
  H2 { line-height: 3cm }   /* centimeters */
  H3 { word-spacing: 4mm }  /* millimeters */
  H4 { font-size: 12pt }    /* points, 1pt = 1/72 in */
  H4 { font-size: 1pc }     /* picas, 1pc = 12pt */
</PRE>
</div>

<P> In cases where the specified length cannot be supported, UAs
should try to approximate. For all CSS2 properties, further
computations and inheritance should be based on the approximated
value.

<H3> <A NAME="percentage-units">Percentages</A></H3>

<P> The format of a percentage value (denoted by <span
class="index-def" title="&lt;percentage&gt;::definition of"><a
name="value-def-percentage"
class="value-def">&lt;percentage&gt;</a></span> in this specification)
is an optional sign character ('+' or '-', with '+' being the default)
immediately followed by a number immediately followed by '%'.

<P> Percentage values are always relative to another value, for
example a length. Each property that allows percentages also defines
the value to which the percentage refers. The value may be that of
another property for the same element, a property for an ancestor
element, or a value of the rendering context (e.g., the width of a <a
href="visuren.html#containing-block">containing block</a>). When a
percentage value is set for a property of the root of the <a
href="conform.html#doctree">document tree</a> and the percentage is
defined as referring to the inherited value of some property X, the
resultant value is the percentage times the <a
href="cascade.html#initial-value">initial value</a> of property X.

<div class="example"><P> Since child elements inherit the <a
href="cascade.html#computed-value">computed values</a> of their
parent, in the following example, the children of the P element will
inherit a value of 12pt for <span
class="propinst-line-height">'line-height'</span> (i.e., 12pt), not
the percentage value (120%):

<PRE>
  P { font-size: 10pt }
  P { line-height: 120% }  /* relative to 'font-size', i.e., 12pt */
</PRE>
</div>

<H3><A NAME="uri">URIs</A></H3>

<P>This specification uses the term 
<span class="index-def" title="Uniform Resource Identifier (URI)">
Uniform Resource Identifier (URI)</span> as defined in <a
rel="biblioentry" href="./refs.html#ref-URI"
class="normref">[URI]</a> (see also <a rel="biblioentry"
href="./refs.html#ref-RFC1630" class="informref">[RFC1630]</a>).

<P>Note that URIs include URLs (as defined in <a rel="biblioentry"
href="./refs.html#ref-RFC1738" class="normref">[RFC1738]</a> and
<a rel="biblioentry" href="./refs.html#ref-RFC1808"
class="normref">[RFC1808]</a>).

<P>Relative URIs are resolved to full URIs using a base URI. <a
rel="biblioentry" href="./refs.html#ref-RFC1808"
class="normref">[RFC1808]</a>, section 3, defines the normative
algorithm for this process.

<P>URI values in this specification are denoted by <span
class="index-def" title="&lt;uri&gt;::definition of"><a
name="value-def-uri" class="value-def">&lt;uri&gt;</a></span>.

<P>For historical reasons, the functional notation used to designate
URI values is "url()".

<div class="example"><P>
For example:
<PRE>
  BODY { background: url(http://www.bg.com/pinkish.gif) }
</PRE>
</div>

<P> The format of a URI value is 'url(' followed by optional <a
href="#whitespace">whitespace</a> followed by an optional single quote
(') or double quote (") <!-- " --> character followed by the URI
itself, followed by an optional single quote (') or double quote (")
<!-- " --> character followed by optional whitespace followed by
')'. Quote characters that are not part of the URI itself must be
balanced.

<P> Parentheses, commas, whitespace characters, single quotes (') and
double quotes (") <!-- " --> appearing in a URI must be escaped with a
backslash: '\(', '\)', '\,'.

<P> In order to create modular style sheets that are not dependent on
the absolute location of a resource, authors may specify the location
of <a href="colors.html#background-properties">background images</a>
with partial URIs.  Partial URIs (as defined in <a rel="biblioentry"
href="./refs.html#ref-RFC1808" class="normref">[RFC1808]</a>) are
interpreted relative to the base URI of the style sheet, not relative
to the base URI of the source document.

<div class="example">
<P>For example, suppose the following rule is located in a style sheet
designated by the URI <tt>http://www.myorg.org/style/basic.css</tt>:
<PRE>
  BODY { background: url(yellow) }
</PRE>

<P>The background of the source document's BODY will be tiled with
whatever image is described by the resource designated
by the URI <tt>http://www.myorg.org/style/yellow</tt>.
</div>

<P>User agents may vary in how they handle URIs that designate
unavailable or inapplicable resources.

<H3><a name="color-units">Colors</a></H3>

A <span class="index-def" title="&lt;color&gt;::definition of"><a
name="value-def-color" class="value-def">&lt;color&gt;</a></span>
is either a keyword or a numerical RGB specification.

<P> The suggested list of keyword color names is: aqua, black, blue,
fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver,
teal, white, and yellow. These 16 colors are taken from the Windows
VGA palette, and their RGB values are not defined in this
specification.

<PRE class="example">
  BODY {color: black; background: white }
  H1 { color: maroon }
  H2 { color: olive }
</PRE>

<P>The RGB color model is used in numerical color
specifications. These examples all specify the same color:

<PRE class="example">
  EM { color: #f00 }              /* #rgb */
  EM { color: #ff0000 }           /* #rrggbb */
  EM { color: rgb(255,0,0) }      /* integer range 0 - 255 */
  EM { color: rgb(100%, 0%, 0%) } /* float range 0.0% - 100.0% */
</PRE>

<P>In addition to these color keywords, users may specify keywords that
correspond to the colors used by certain objects in the user's
environment. Please consult the section on <a
href="./ui.html#system-colors">system colors</a> for more information.

<P> The format of an RGB value in hexadecimal notation is a '#'
immediately followed by either three or six hexadecimal
characters. The three-digit RGB notation (#rgb) is converted into
six-digit form (#rrggbb) by replicating pairs of digits, not by adding
zeros. For example, #fb0 expands to #ffbb00. This makes sure that
white (#ffffff) can be specified with the short notation (#fff) and
removes any dependencies on the color depth of the display.

<P> The format of an RGB value in the functional notation is 'rgb('
followed by a comma-separated list of three numerical values (either
three integer values in the range of 0-255, or three percentage
values, typically in the range of 0.0% to 100.0%) followed by ')'. <a
href="#whitespace">Whitespace</a> characters are allowed around the
numerical values.

<P>Values outside the device gamut should be clipped. For a device
whose gamut is sRGB, the three rules below are equivalent:

<PRE class="example">
  EM { color: rgb(255,0,0) }       /* integer range 0 - 255 */
  EM { color: rgb(300,0,0) }       /* clipped to 255 */
  EM { color: rgb(110%, 0%, 0%) }  /* clipped to 100% */
</PRE>

<P>All RGB colors are specified in the sRGB color space (see <a
rel="biblioentry" href="./refs.html#ref-SRGB"
class="normref">[SRGB]</a>).  UAs may vary in the fidelity with which
they represent these colors, but using sRGB provides an unambiguous
and objectively measurable definition of what the color should be,
which can be related to international standards (see <a
rel="biblioentry" href="./refs.html#ref-COLORIMETRY"
class="normref">[COLORIMETRY]</a>). 

<P>Conforming UAs may limit their color-displaying efforts to
performing a gamma-correction on them. sRGB specifies a display gamma
of 2.2 under specified viewing conditions. UAs should adjust the
colors given in CSS such that, in combination with an output device's
"natural" display gamma, an effective display gamma of 2.2 is
produced. See the section on <a
href="notes.html#gamma-correction">gamma correction</a> for further
details. Note that only colors specified in CSS are affected; e.g.,
images are expected to carry their own color information.

<H3>Angles</H3>
<P>Angle values (denoted by <span class="index-def"
title="&lt;angle&gt;::definition of"><a
name="value-def-angle">&lt;angle&gt;</a></span> in the text) are used
with <a href="./aural.html">aural cascading style sheets</a>.

<P>Their format is an optional sign character ('+' or '-', with '+'
being the default) immediately followed by a <span class="index-inst"
title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span> immediately
followed by an angle unit identifier. After a '0' number, the unit
identifier is optional.

<P>These following are legal angle unit identifiers:</p>

<ul>
<li><strong>deg</strong>: degrees
<LI><strong>grad</strong>: gradient
<LI><strong>rad</strong>: radians
</UL>

<p>Angle values may be negative. They should be normalized to the
range 0-360deg by the UA. For example, -10deg and 350deg are
equivalent. The angle value must be followed immediately by the angle
unit.

<H3>Times</H3>

<P>Time values (denoted by <span class="index-def" title="&lt;time&gt;::definition of"><a name="value-def-time">&lt;time&gt;</a></span> in the
text) are used with <a href="./aural.html">aural cascading style
sheets</a>.

<P>Their format is a <span class="index-inst"
title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span> immediately
followed by a time unit identifier. After a '0' number, the unit
identifier is optional.

<P>The following are legal time unit identifiers:</p>

<UL>
<LI><strong>ms</strong>: milliseconds
<LI><strong>s</strong>: seconds
</UL>

<p>Time values may not be negative. The time value must be followed
immediately by the time unit.

<H3>Frequencies</H3>

<P>Frequency values (denoted by <span class="index-def"
title="&lt;frequency&gt;::definition of"><a
name="value-def-frequency">&lt;frequency&gt;</a></span> in the text)
are used with <a href="./aural.html">aural cascading style
sheets</a>.

<P>Their format is a <span class="index-inst"
title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span> immediately
followed by a frequency unit identifier. After a '0' number, the unit
identifier is optional.

<p>There are two legal frequency unit identifiers:</p>

<ul>
<li><strong>Hz</strong>: Hertz 
<li><strong>kHz</strong>: kilo Hertz
</ul>

<div class="example"><P>
For example, 200Hz (or 200hz) is a bass sound, and 6kHz (or 6khz) 
is a treble sound.
</div>

<P>The frequency value must be followed immediately by the frequency
unit.

<h3><a name="strings">Strings</a></H3>

<P><span class="index-def" title="strings">Strings</span> can either
be written with double quotes or with single quotes. Double quotes
cannot occur inside double quotes, unless escaped (as '\"' or as
'\22'). Analogously for single quotes ("\'" or "\27"). Examples:

<pre>
"this is a 'string'"
"this is a \"string\""
'this is a "string"'
'this is a \'string''
</pre>

<P>A string cannot directly contain a <span class="index-inst"
title="newline">newline</span>. To include a newline in a string, use
the escape "\A" (hexadecimal A is the line feed character in Unicode,
but represents the generic notion of "newline" in CSS). Sometimes it
is safer to write "\00000A", since that will avoid the situation where
the character following the "A" can be interpreted as a hexadecimal
digit. For example, in the string

<pre>"A. one\AB. two"</pre>

<p>the UA will see an escape sequence "\AB" (&#171;) instead of \A.

<p>It is possible to break strings over several lines, for aesthetic
or other reasons, but in such a case the newline itself has to be
escaped with a "\". For instance, the following two selectors are
exactly the same:

<pre class="example">
A[TITLE="a not s\
o very long title"] {border: double}
A[TITLE="a not so very long title"] {border: double}
</pre>

<H2>CSS document representation</H2> 

<P>A CSS style sheet is a sequence of characters from the Universal
Character Set, defined in <a rel="biblioentry"
href="./refs.html#ref-ISO10646">[ISO10646]</a>. For transmission and
storage, these characters must be <span class="index-def"
title="character encoding">encoded</span> by a character encoding that
supports the ASCII character set (e.g., ISO 8859-x, SHIFT JIS, etc.).
For a good introduction to character sets and character encodings,
please consult <a rel="biblioentry" href="./refs.html#ref-HTML40"
class="informref">[HTML40]</a>, Chapter 5.

<P>When a style sheet is embedded in another document, the style sheet
shares the character encoding of the whole document. ("Embedded" here
means textual inclusion, not embedded byte sequences.)  For
example, in <a rel="biblioentry" href="./refs.html#ref-HTML40"
class="informref">[HTML40]</a>, the "charset" attribute of many
elements (META, LINK, A, etc.) designates the character encoding, as
in:</p>

<pre>
&lt;META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;
</pre>

<P>When a style sheet resides in a separate file, user agents must
observe the following <span class="index-inst" title="character
encoding::user agent's determination of">priorities</span> when
determining a document's <span class="index-inst" title="character
encoding::default|default::character encoding">character
encoding</span> (from highest priority to lowest):</p>

<ol>
<li>An HTTP "charset" parameter in a "Content-Type" field.
<li>The <span class="index-def" title="@charset">@charset</span>
at-rule. 
<li>Mechanisms of the language of the
referencing document (e.g., in HTML, the "charset" 
attribute of the LINK element). 
</ol>

<P>When present, only one @charset rule may appear in an external
style sheet -- it must <em>not</em> appear in an embedded style sheet
-- and it must be the first line in the document (not preceded by any
other characters). After "@charset", authors specify the name of a
character encoding. The name must be a charset name as described in <a
href="refs.html#ref-IANA" class="normref">[IANA]</a> registry (see <a
rel="biblioentry" href="./refs.html#ref-CHARSETS"
class="informref">[CHARSETS]</a> for a complete list). For
example:</p>

<div class="example"><P>
@charset "ISO-8859-1";
</div>

<P>This specification does not mandate which character encodings
a user agent must support.

<P>What purpose does the @charset construct serve if user agents
cannot understand it before they know the character encoding?  It acts
as a verification mechanism. In the case HTTP headers do not provide
character encoding information, user agents may attempt to guess the
character set, and should they succeed, the @charset allows them to
double check their guess. For this reason, character encodings in
which the ASCII characters are encoded as themselves are more likely
to help user agents determine the correct character encoding than
other encodings schemes.

<!-- More examples of good encodings to use? -IJ -->

<!-- Encodings not to use? (cf. HTML 4.0) -IJ -->

<h3>Referring to characters not represented in a character encoding</h3>

<P>A style sheet may have to refer to characters that cannot be
represented in the current character encoding.  These characters must
be written as <a href="#escaped-characters">escaped</a> references to
<a rel="biblioentry" href="./refs.html#ref-ISO10646">[ISO10646]</a>
characters. These escapes are the equivalent of numeric character
references in HTML or XML documents (see <a rel="biblioentry"
href="./refs.html#ref-HTML40">[HTML40], Chapters 5 and 25).</a>

<P>The character escape mechanism should be used when only a few
characters must be represented this way. If most of a document
requires escaping, authors should encode it with a more appropriate
encoding (e.g., if the document contains a lot of Greek characters,
authors might use ISO 8859-7 or UTF 8).

<P>Intermediate processors using a different character encoding may
translate these escaped sequences into byte sequences of that
encoding. <strong>Note.</strong> Intermediate processors must not, on
the other hand, alter escape sequences that cancel the special meaning
of an ASCII character.

<P><a href="conform.html#conformance">Conforming user agents</a> must
correctly map to Unicode all characters in any character encodings
that they recognize (or they must behave as if they did). 

<P>For instance, "B&amp;W?" may be written as "B\&amp;W\?"  or
"B\26 W\3F". For example, a document transmitted as ISO-8859-1
(Latin-1) cannot contain Greek letters directly:
"&#954;&#959;&#965;&#961;&#959;&#962;" (Greek: "kouros") has to be
written as "\3BA\3BF\3C5\3C1\3BF\3C2". 

<div class="note"><P>
<em><strong>Note.</strong>
In <a rel="biblioentry" href="./refs.html#ref-HTML40" 
class="informref">[HTML40]</a>, 
numeric character references may appear in "style" attribute
values but not in the content of the STYLE element. Because of this
asymmetry, we recommend that authors use the CSS character 
escape mechanism rather than numeric character references.
For example, authors should write:</em></p>

<pre class="html-example">
   &lt;SPAN style="voice-family: D\FCrst"&gt;...&lt;/SPAN&gt;
</pre>

<P><em>rather than:</em></p>

<pre class="html-example">
   &lt;SPAN style="voice-family: D&amp;amp;#FC;rst"&gt;...&lt;/SPAN&gt;
</pre>
</div>

</BODY>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->

