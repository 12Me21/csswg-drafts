<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: syndata.src,v 1.19 1997-10-20 03:14:02 ian Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>CSS2 syntax and basic data types</TITLE>
<LINK rel="next" href="selector.html">
<LINK rel="previous" href="convent.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">CSS2 syntax and basic data types</H1>
<H2><a name="syntax">Syntax</a></H2>

<P>This section describes a grammar common to any version of
CSS (including CSS2). Future versions of CSS will adhere to this core
syntax, although they may add additional syntactic constraints.

<P>The following descriptions are normative. They are also
complemented by the normative grammar rules presented in <a
href="grammar.html">Appendix B</a>.

<H3>Characters and case</H3>
<P>  The following rules always hold:

<UL>
    <LI> All CSS style sheets are <span class="index-inst" title="case
    sensitivity">case-insensitive</span>, except for parts that are
    not under the control of CSS. For example, the case-sensitivity of
    the HTML attributes 'id' and 'class', of font names, and of URLs
    lies outside the scope of this specification.

    <LI> In CSS2, selectors (element names, classes and IDs) can
    contain only the characters [A-Za-z0-9] and <a rel="biblioentry"
    href="./refs.html#ref-UNICODE">[UNICODE]</a> characters 161-255,
    plus the hyphen (-); they cannot start with a hyphen or a digit;
    they can also contain escaped characters and any Unicode character
    as a numeric code (see next item).

    <LI> <a name="#escaped-characters">The backslash</a> (\) followed
    by at most four hexadecimal digits (0..9A..F) stands for the <a
    rel="biblioentry" href="./refs.html#ref-UNICODE">[UNICODE]</a>
    character with that number.

    <LI> Any character except a hexadecimal digit can be escaped to
    remove its special meaning, by putting a backslash (\) in front,
    For example, <samp>"\""</samp> is a string consisting of one
    double quote.

    <LI> The two preceding items define <span class="index-inst"
    title="backslash
    escapes"><EM>backslash-escapes</EM></span>. Backslash-escapes are
    always considered to be part of an identifier, except inside
    strings (i.e., "\7B" is not punctuation, even though "{" is, and
    "\32" is allowed at the start of a class name, even though "2" is
    not).
  </UL>

<H3>Statements</H3>
<P> A CSS style sheet, for any version of CSS, consists of a list of
<span class="index-inst" title="statements"><em>statements</em></span>.
There are two kinds of statements: <span class="index-inst"
title="at-rules|@-rules"><em>at-rules</em></span> and <span
class="index-inst" title="rule sets"><em>rule sets</em> </span>. There
may be whitespace (spaces, tabs, newlines) around the statements.

<H3>At-rules</H3>
<P> At-rules start with an <DFN>at-keyword</DFN>, which is an
identifier with an '@' at the start (for example, '@import', '@page',
etc.). An identifier consists of letters, digits, hyphens, and 
<a href="#escaped-characters">escaped characters.</a>

<P> An at-rule consists of everything up to and including the next
semicolon (;) or the next block (defined shortly), whichever comes
first. A CSS2 UA that encounters an at-rule that starts with an
at-keyword other than '@import' ignores the whole of the at-rule and
continue parsing after it. It also ignores any at-rule that starts
with '@import' if it doesn't occur at the top of the style sheet,
i.e., if it occurs after any rules (even ignored rules).  

<div class="example"><P>
Here is an example. Assume a CSS2 parser encounters this style sheet:

<PRE>
  @import "subs.css";
  H1 { color: blue }
  @import "list.css";
</PRE>

<P> The second '@import' is illegal according to CSS2. The CSS2 parser
skips the whole at-rule, effectively reducing the style sheet to:

<PRE>
  @import "subs.css";
  H1 {color: blue}
</PRE>
</div>

<H3>Blocks</H3> 
<P> A <span class="index-inst"
title="block"><em>block</em></span> starts with a left curly brace ({)
and ends with the matching right curly brace (}). In between there may
be any characters, except that parentheses (()), brackets ([]) and
braces ({}) always occur in matching pairs and may be nested. Single
(') and double quotes (") <!-- " --> also occur in matching pairs, and
characters between them are parsed as a <span class="index-inst"
title="string">string</span>.  See the tokenizer in <a
href="grammar.html">Appendix B</a> for the definition of a string.

<div class="example"><P> Here is an example of a block. Note that the
right brace between the quotes does not match the opening brace of the
block, and that the second single quote is an <a
href="#escapted-characters">escaped character</a>, and thus doesn't
match the opening quote:

<PRE>
  { causta: "}" + ({7} * '\'') }
</PRE>
</div>

<H3>Rule sets, declaration blocks, and selector-strings</H3> 

<P> A rule set consists of a selector-string followed by a 
declaration block.

<P> A <span class="index-def"
title="declaration-block"><em>declaration-block</em></span> (also
called a {}-block in the following text) starts with a left curly
brace ({) and ends with the matching right curly brace (}). In between
there is a list of zero or more <DFN>declarations,</DFN> separated by
semicolons (;).

<P>The <span class="index-def"
title="selector-string"><em>selector-string</em></span> consists of
everything up to (but not including) the first left curly brace ({).
A selector-string does not start with an "@", does not include a "{",
that always goes together with a {}-block. When a UA can't parse the
selector-string (i.e., it is not valid CSS2), it should skip the
{}-block as well.

<P>Implementations may want to collect the uninterpreted string of
characters up to but not including the first "{" to find the
declaration, and then attempt to lexically analyze the selector
string.

<div class="example"><P>
For example, assume a CSS2 parser encounters this style sheet:
<PRE>
  H1 { color: blue }
  P[align], UL { color: red; font-size: large } /* ILLEGAL */
  P EM { font-weight: bold }
</PRE>

<P> The second line contains a selector-string that is illegal in
CSS2. The CSS2 UA will skip the rule set, reducing the style sheet to:

<PRE>
  H1 { color: blue }
  P EM { font-weight: bold }
</PRE>
</div>

<div class="example"><P>
<P>Similarly, the following rule:

<PRE>
    P[align & justify
        { color: red; font-size: large }
</PRE>

<P>would be parsed without problem while:

<PRE>
    P[example="public class foo
{
    private int x;

    foo(int x) {
        this.x = x;
    }

}"]          /* ILLEGAL since {}-block missing */
</PRE>
<!-- " -->
<P>would not since it is not followed by a {}-block.
</div>

<H3>Properties</H3>

<P> A declaration consists of a <span class="index-inst"
title="property"><em>property</em></span>, a colon (:) and a
<DFN>value</DFN>. Around each of these there may be whitespace. 

A property is an identifier, as defined earlier. Any character may
occur in the value, but parentheses (()), brackets ([]), braces ({}),
single quotes (') and double quotes (") 
<!-- " -->
must come in matching pairs. Parentheses, brackets, and braces may be
nested. Inside the quotes, characters are parsed as a string.

<P> To ensure that new properties and new values for existing
properties can be added in the future, a UA must skip a declaration
with an invalid property name or an invalid value. Every CSS2 property
has its own syntactic and semantic restrictions on the values it
accepts.

<div class="example"><P>
For example, assume a CSS2 parser encounters this style sheet:

<PRE>
  H1 { color: red; font-style: 12pt }
  P { color: blue;  font-vendor: any;  font-variant: small-caps }
  EM EM { font-style: normal }
</PRE>

<P> The second declaration on the first line has an invalid value
'12pt'. The second declaration on the second line contains an
undefined property 'font-vendor'. The CSS2 parser will skip these
declarations, reducing the style sheet to:

<PRE>
  H1 { color: red; }
  P { color: blue;  font-variant: small-caps }
  EM EM { font-style: normal }
</PRE>
</div>

<H3><a name="comments">Comments</a></H3> 

<P><span class="index-inst" title="comments">Comments </span> begin
with the characters "/*" and end with the characters "*/". They may
occur anywhere where whitespace can occur and are considered to be
whitespace. CSS2 defines additional places where whitespace can occur
(such as inside values) and comments are allowed there as well.

<P>Style rules appearing in a source document (e.g., in the STYLE 
element of HTML) may be commented out using the comment syntax of
the document language.

<H3>Error handling</H3>
<P> To ensure that UAs supporting just CSS2 will be able to parse
style sheets containing higher level features, this section defines
what the UA must do when it encounters certain constructs that are not
valid in CSS2. 

<UL>
    <LI>User agents must ignore a declaration with an unknown property. For
    example, if the style sheet is 

<PRE> H1 { color: red; rotation: 70minutes }
</PRE>

<P> the UA will treat this as if the style sheet had been

<PRE>  H1 { color: red; }
</PRE>

 <LI>User agents must treat illegal values, <EM>or values with illegal
		parts</EM>, as if the declaration weren't there at all:

<PRE>
  IMG { float: left }       /* CSS2 */
  IMG { float: left top }   /* "top" is not a value of 'float' */
  IMG { background: "red" } /* keywords cannot be quoted in CSS2 */
  IMG { border-width: 3 }   /* a unit must be specified for length values */
</PRE>

<P> In the above example, a CSS2 parser would honor the first rule and
ignore the rest, as if the style sheet had been:

<PRE>
  IMG { float: left }
  IMG { }
  IMG { }
  IMG { }
</PRE>

<P>A UA conforming to a future CSS specification may accept one or
more of the other rules as well.

<LI>User agents must ignore an invalid at-keyword together with everything
following it, up to and including the next semicolon (;) or brace pair
({...}), whichever comes first. For example, assume the style sheet
reads:

<PRE>
  @three-dee {
    @background-lighting {
      azimuth: 30deg;
      elevation: 190deg;
    }
    H1 { color: red }
  }
  H1 {color: blue}
</PRE>

<P> The '@three-dee' is illegal according to CSS2. Therefore, the
whole at-rule (up to, and including, the third right curly brace) is
ignored. The CSS2 UA skips it, effectively reducing the style sheet
to:

<PRE>
  H1 {color: blue}
</PRE>
</UL>

<H2><a href="data-types">Basic Data types</a></H2>
<H3>Integers and numbers</H3>

<P>Some value types may have integer values, denoted by <span
	  class="index-def" title="&lt;integer&gt;, definition of"><a
	    name="value-def-integer"
	    class="value-def">&lt;integer&gt;</a></span> in this
	specification.

<P>Some value types may have real number values, denoted by <span
	  class="index-def" title="&lt;number&gt;, definition of"><a
	    name="value-def-number"
	    class="value-def">&lt;number&gt;</a></span> in this
	specification. A number may or may not have a decimal point.

<P>In CSS2, numbers and integers are in decimal notation only. An
&lt;integer> consists of one or more digits "0" to "9". A &lt;number>
can either be an &lt;integer>, or it can be zero of more digits
followed by a dot followed by one or more digits. Both integers and
numbers may be preceded by a "-" or "+" to indicate the sign.

<P>Note that many properties that allow a number or integer as value
actually restrict the value to some range, often to a non-negative
value.

<H3><A NAME="length-units">Lengths</A></H3>

<P> The format of a length value (denoted by <span class="index-def"
title="&lt;length&gt;, definition of"><a name="value-def-length"
class="value-def">&lt;length&gt;</a></span> in this specification) is
an optional sign character ('+' or '-', with '+' being the default)
immediately followed by a number (with or without a decimal point)
immediately followed by a unit identifier (a two-letter
abbreviation). After a '0' number, the unit identifier is optional.

<P> Some properties allow negative length units, but this may
complicate the formatting model and there may be
implementation-specific limits. If a negative length value cannot be
supported, it should be clipped to the nearest value that can be
supported.

<P><a href="absrel-units">There are two types of length units: relative and absolute.</a> <span
class="index-def" title="relative units"><em>Relative
length</em></span> units specify a length relative to another length
property. Style sheets that use relative units will more easily scale
from one medium to another (e.g., from a computer display to a laser
printer).

<P><A HREF="#percentage-units">Percentage units</A> (described below) and
keyword values (e.g. 'x-large') offer similar advantages.

<P> These relative units are supported: em, ex, and px.

<div class="example"><P>
<PRE>
  H1 { margin: 0.5em }      /* ems, the height of the element's font */
  H1 { margin: 1ex }        /* x-height, ~ the height of the letter 'x' */
  P  { font-size: 12px }    /* pixels, relative to canvas */
</PRE>
</div>

<P>The 'em' unit is is equal to the <span class="index-inst"
title="font size">font size</span> used when rendering an element's
text. The 'ex' unit is equal to the font's x-height (the height of the
letter 'x') of the element's font. A font need not contain the letter
"M" to have an 'em' size or the letter "x" to have an x-height; the
font should still define the two units.

<!-- Incomplete -->

<P>Both 'em' and 'ex' refer to the font size of an element except when
used in the <span class="propinst-font-size">'font-size'</span>
property, where they are relative to the font size inherited from the
parent element. It is considered an error if these units are used for
the <span class="propinst-font-size">'font-size'</span> property on
the root element.

<div class="example"><P>
<P>The rule:

<PRE>
H1 { line-height: 1.2em }
</PRE>

<P>means that the line height of the H1 elements will be 20% greater
than the font size of the H1 elements. On the other hand:

<PRE>
H1 { font-size: 1.2em }
</PRE>

<P>means that the font-size of H1 elements will be 20% greater than
the font size inherited by H1 elements.
</div>

<P><span class="index-def" title="pixel units">Pixel units</span> are
relative to the resolution of the canvas, i.e., most often a computer
display. If the pixel density of the output device is very different
from that of a typical computer display, the UA should rescale pixel
values. The suggested <span class="index-def" title="reference
pixel"><EM>reference pixel</EM></span> is the visual angle of one
pixel on a device with a pixel density of 90dpi and a distance from
the reader of an arm's length. For a nominal arm's length of 28
inches, the visual angle is about 0.0227 degrees.

<P> Child elements inherit the computed value, not the relative value.
For example:

<div class="example"><P>
<PRE>
  BODY {
    font-size: 12pt;
    text-indent: 3em;  /* i.e. 36pt */
  }
  H1 { font-size: 15pt }
</PRE>

<P> In the example above, the 'text-indent' value of H1 elements
will be 36pt, not 45pt. Note that H1 elements inherit from the
BODY element in HTML.
</div>

<P><span class="index-def" title="absolute length"><em> Absolute
length</em></span> units are only useful when the physical properties
of the output medium are known. These absolute units are supported:
	in, cm, mm, pt, and pc. 

<div class="example"><P>
For example:
<PRE>
  H1 { margin: 0.5in }      /* inches, 1in = 2.54cm */
  H2 { line-height: 3cm }   /* centimeters */
  H3 { word-spacing: 4mm }  /* millimeters */
  H4 { font-size: 12pt }    /* points, 1pt = 1/72 in */
  H4 { font-size: 1pc }     /* picas, 1pc = 12pt */
</PRE>
</div>

<P> In cases where the specified length cannot be supported, UAs
should try to approximate. For all CSS2 properties, further
computations and inheritance should be based on the approximated
value.

<H3> <A NAME="percentage-units">Percentages</A></H3>

<P> The format of a percentage value (denoted by <span
class="index-def" title="&lt;percentage&gt;, definition of"><a
name="value-def-percentage"
class="value-def">&lt;percentage&gt;</a></span> in this specification)
is an optional sign character ('+' or '-', with '+' being the default)
immediately followed by a number immediately followed by '%'.

<P> Percentage values are always relative to another value, for
example a length unit. Each property that allows percentage units also
defines what value the percentage value refer to.

<div class="example"><P>
For example, Children elements of P will inherit the
computed value of <span class="propinst-line-height">'line-height'</span>
(i.e., 12pt), not the percentage (see
the <span class="value-inst-percentage">&lt;percentage&gt;</span>value).

<PRE>
  P { font-size: 10pt }
  P { line-height: 120% }  /* relative to 'font-size', i.e. 12pt */
</PRE>
</div>

<H3><A NAME="url">URLs</A></H3>

<P> A Uniform Resource Locator, or <span class="index-def"
title="URL">URL</span> (denoted by <span class="index-def"
title="&lt;url&gt;, definition of"><a name="value-def-url"
class="value-def">&lt;url&gt;</a></span> in this specification) is
identified with a functional notation. 

<div class="example"><P>
For example:
<PRE>
  BODY { background: url(http://www.bg.com/pinkish.gif) }
</PRE>
</div>

<P> The format of a URL value is 'url(' followed by optional white
space followed by an optional single quote (') or double quote (")
<!-- " --> character followed by the URL itself (as defined in <a
rel="biblioentry" href="./refs.html#ref-RFC1738">[RFC1738]</a>)
followed by an optional single quote (') or double quote (") <!-- "
--> character followed by optional whitespace followed by ')'. Quote
characters that are not part of the URL itself must be balanced.

<P> Parentheses, commas, whitespace characters, single quotes (') and
double quotes (") <!-- " --> appearing in a URL must be escaped with a
backslash: '\(', '\)', '\,'.

<P> In order to create modular style sheets that are not dependent on
the absolute location of a resource, authors may specify the location
of background images with partial URLs.  Partial URLs (as defined in
<a rel="biblioentry" href="./refs.html#ref-RFC1808">[RFC1808]</a>) are
interpreted relative to the source of the style sheet, not relative to
the document (i.e., the URL of the style sheet containing the partial
URL serves as the base URL for the resolution of the partial URL).

<div class="example">
<P>For example, suppose the following rule is located in a style sheet
named <tt>basic.css</tt>:
<PRE>
  BODY { background: url(yellow) }
</PRE>

<P>The background of the source document's BODY will be tiled with
whatever image is described by the resource named <tt>yellow</tt> in the same
directory as <tt>basic.css</tt>.
</div>

<P>A URL that designates a file of the wrong type is considered an
erroneous URL. User agents may vary in how they handle such cases.

<H3><a name="color-units">Colors</a></H3>

A <span class="index-def" title="&lt;color&gt;, definition of"><a
name="value-def-color" class="value-def">&lt;color&gt;</a></span>
is a either a keyword or a numerical RGB specification.

<P> The suggested list of keyword color names is: aqua, black, blue,
fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver,
teal, white, and yellow. These 16 colors are taken from the Windows
VGA palette, and their RGB values are not defined in this
specification.

<PRE>
  BODY {color: black; background: white }
  H1 { color: maroon }
  H2 { color: olive }
</PRE>
  <P>
  The RGB color model is being used in numerical color specifications. These
  examples all specify the same color:
  <PRE>
  EM { color: #f00 }              /* #rgb */
  EM { color: #ff0000 }           /* #rrggbb */
  EM { color: rgb(255,0,0) }      /* integer range 0 - 255 */
  EM { color: rgb(100%, 0%, 0%) } /* float range 0.0% - 100.0% */
</PRE>

<P>In addition to these color keywords, users may specify keywords the
correspond to the colors used by certain objects in the user's
environment. Please consult the section on <a
href="./ui.html#system-colors">system colors</a> for more information.

<P> The format of an RGB value in hexadecimal notation is a '#'
immediately followed by either three or six hexadecimal
characters. The three-digit RGB notation (#rgb) is converted into
six-digit form (#rrggbb) by replicating digits, not by adding
zeros. For example, #fb0 expands to #ffbb00. This makes sure that
white (#ffffff) can be specified with the short notation (#fff) and
removes any dependencies on the color depth of the display.

<P> The format of an RGB value in the functional notation is 'rgb('
followed by a comma-separated list of three numerical values (either
three integer values in the range of 0-255, or three percentage values
in the range of 0.0% to 100.0%) followed by ')'. Whitespace characters
are allowed around the numerical values.

<P> Values outside the numerical ranges should be clipped. The three
rules below are therefore equivalent:

<PRE>
  EM { color: rgb(255,0,0) }       /* integer range 0 - 255 */
  EM { color: rgb(300,0,0) }       /* clipped to 255 */
  EM { color: rgb(110%, 0%, 0%) }  /* clipped to 100% */
</PRE>

<P> RGB colors are specified in the sRGB color space 
<a rel="biblioentry" href="./refs.html#ref-SRGB">[SRGB]</a>
UAs may vary in the fidelity with which they
represent these colors, but use of sRGB provides an unambiguous and
objectively measurable definition of what the color should be, which
can be related to international standards <a rel="biblioentry" href="./refs.html#ref-COLORIMETRY">[COLORIMETRY]</a>.

<P> UAs may limit their efforts in displaying colors to performing a
gamma-correction on them. sRGB specifies a display gamma of 2.2 under
specified viewing conditions. UAs adjust the colors given in CSS such
that, in combination with an output device's "natural" display gamma,
an effective display gamma of 2.2 is produced. See the section on <a
href="notes.html#gamma-correction">gamma correction</a> for further
details. Note that only colors specified in CSS are affected; e.g.,
images are expected to carry their own color information.

<H3>Angles</H3>
<P>Angle units (denoted by <span class="index-def"
title="&lt;angle&gt;, definition of"><a
name="value-def-angle">&lt;angle&gt;</a></span> in the text) are used
with <a href="./aural.html">aural cascading style sheets</a>.

<P>These following are legal angle units:

<UL>
<LI>deg: degrees
<LI>grad: gradient
<LI>rad: radians
</UL>

<p>Values in these units may be negative. They should be normalized to
the range 0-360deg by the UA. For example, 10deg and 350 deg are
equivalent.

<H3>Time</H3>

<P>Time units (denoted by <span class="index-def" title="&lt;time&gt;,
definition of"><a name="value-def-time">&lt;time&gt;</a></span> in the
text) are used with <a href="./aural.html">aural cascading style
sheets</a>.

<P>These following are legal time units:

<UL>
<LI>ms: milliseconds
<LI>s: seconds
</UL>

<p>Time values may not be negative.

<H3>Frequencies</H3>

<P>Frequency units (denoted by <span class="index-def"
title="&lt;frequency&gt;, definition of"><a
name="value-def-frequency">&lt;frequency&gt;</a></span> in the text)
are used with <a href="./aural.html">aural cascading style
sheets</a>.

<p>There are two legal frequency units:

<ul>
<li>Hz: Hertz 
<li>kHz: kilo Hertz
</ul>

<div class="example"><P>
For example, 200Hz is a bass sound, and 6kHz is a treble sound.
</div>

<H2>CSS embedded in HTML</H2> 

<P> CSS style sheets may be embedded in HTML documents, and to be able
to hide style sheets from older UAs, it is convenient put the style
sheets inside HTML comments. The HTML comment tokens "&lt;!--" and
"--&gt;" may occur before, after, and in between the statements. They
may have whitespace around them.

<P> The "class" attribute of HTML allows more characters in a class
name than the set allowed for selectors above. In CSS2, these
characters have to be <a href="#escaped-characters">escaped</a> or
written as Unicode numbers: "B&amp;W?" can be written as "B\&amp;W\?"
or "B\26W\3F", "&#186;&#191;&Aring;&Aacute;&#191;&Acirc;" (Greek: "kouros") has to
be written as "\3BA\3BF\3C5\3C1\3BF\3C2". It is expected that in later
versions of CSS, more characters can be entered directly.

</BODY>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
