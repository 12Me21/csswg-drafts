<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: cascade.src,v 2.10 1998-03-09 16:22:00 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Assigning property values, Cascading, and Inheritance</TITLE>
</HEAD>
<BODY>
<H1 align="center">Assigning property values, Cascading, and Inheritance</H1>

<H2>Specified, computed, and actual values</h2>
<P>Once a user agent has parsed a document and constructed a <a
href="conform.html#doctree">document tree</a>, it must assign, for
every element in the tree, a value to every property that applies to the
target <a href="media.html">media type</a>. 

<P>The final value of a property is the result of a three-step
calculation: the value is determined through specification (the
"specified value"), then resolved into an absolute value if necessary
(the "computed value"), and finally transformed according to
the limitations of the local environment (the "actual value").

<h3>
<span class="index-def" title="specified value">
<a name="specified-value">Specified values</a></span></h3>

<P>User agents must first assign a specified value to a property based
on the following mechanisms (in order of precedence):</p>

<ol>
<li>If the <a href="#cascade">cascade</a> results in a value,
use it. If the value is 'inherit', use the value of the parent
element.

<li>Otherwise, if the value is <a href="#inheritance">inherited</a>,
use it.

<li>Otherwise use the property's <span class="index-def"
title="initial value">initial value</span>. The <a
name="initial-value">initial value</a> of each property is indicated
in the property's definition.
</ol>

<P>The root of the <a href="conform.html#doctree">document tree</a>
cannot use values from the parent element since it has no parent. As a
substitute, the initial value should be used whenever the root element
needs a value from a parent element.

<h3><span class="index-def" title="computed value">
<a name="computed-value">Computed values</a>
</span>
</h3>

<P>Specified values may be absolute (i.e., they are not specified
relative to another value, as in 'red' or '2mm') or relative (i.e.,
they are specified relative to another value, as in 'auto', '2em', and
'12%'). For absolute values, no computation is needed to find the
computed value.  Relative values, on the other hand, must be
transformed into computed <a href="syndata.html#values">values</a>
as described in the chapter on <a href="syndata.html">syntax</a>.
Each property defines the meaning of that property's percentage
values.

<h3><span class="index-def" title="actual value">
<a name="actual-value">Actual values</a></span></h3>

<P>A computed value is in principle ready to be used, but a user agent
may not be able to make use of the value in a given environment. For
example, a user agent may not have a computed font size available, in
which case the user agent must approximate the computed value.  The
actual value is the computed value after any approximations have been
applied.


<P>Whenever an element inherits a value, it inherits an
actual value.

<h3>Order of value calculation</h3>
<P><em>This section is under construction</em>

<!-- Finish me! -IJ -->

<P>Due to dependencies among properties, user agents must 
<a href="cascade.html#computed-value">compute</a> some property
values in a specific order.</P>

<ul>
<li><span class="propinst-font-size">'font-size'</span> must be
computed before any property that uses <a
href="syndata.html#absrel-units">relative length</a> units.

<li><span class="propinst-display">'display'</span>, <span
class="propinst-position">'position'</span>, and <span
class="propinst-float">'float'</span> must be computed before other
<a href="visuren.html">visual flow</a> properties.

<li><span class="propinst-line-height">'line-height'</span> must be
computed before <span
class="propinst-vertical-align">'vertical-align'</span>.

<li>An element's width and height must be computed before 
<span class="propinst-background-position">'background-position'</span>.
</ul>

<H2><a name="inheritance">Inheritance</a></h2>

<P>Some actual values are inherited by the children of an element in
the <a href="conform.html#doctree">document tree</a>.

<P>All properties accept the 'inherit' keyword. For an inherited
property, this value is merely an explicit statement of the
inheritance. For a property that is not inherited according to its
definition, this value forces inheritance.

<div class="html-example"><P>
Suppose there is an H1 element with an emphasizing element (EM)
inside:</p>

<PRE>
  &lt;H1&gt;The headline &lt;EM&gt;is&lt;/EM&gt; important!&lt;/H1&gt;
</PRE>

<P>If no color has been assigned to the EM element, the emphasized
"is" will inherit the color of the parent element, so if H1 has the
color blue, the EM element will likewise be in blue.
</div>

<!--
<P>Other style properties are likewise inherited, e.g., <span
class="propinst-font-family">'font-family'</span> and <span
class="propinst-font-size">'font-size'</span>.
-->

<P>The root of the document tree cannot inherit values.

<P> To set a "default" style property for a document, authors may set
the property on the root of the document tree. In HTML, for example,
the HTML or BODY elements can serve this function. Note that this will
work even if the author omits the BODY tag in the HTML source since
the HTML parser will infer the missing tag.

<div class="example"><P> 
For example, since the <span class="propinst-color">'color'</span>
property is inherited, all descendants of the BODY element will
inherit the color 'black':

<PRE>
    BODY { color: black; }
</PRE>

<P>Not all style properties are inherited, for example <span
class="propinst-background">'background'</span>. But in the case of
<span class="propinst-background">'background'</span>, the <em>visual
effect</em> may be propagated to descendants. A
background specified for the root element, as in:</p>

<PRE>
    BODY { background: url(texture.gif) white; }
</PRE>

<P>will shine through any descendants unless they specify a value for
<span class="propinst-background-color">'background-color'</span>
other than 'transparent' (the initial value).
</div>

<div class="example"><P> 
The following example illustrates that <a href="#specified-value">
specified</a> percentage values are not inherited; only 
<a href="#actual-value">actual values</a> are inherited. Consider
the style sheet:

<pre>
  BODY { font-size: 10pt }
  H1 { font-size: 120% }
</pre>

<p>and the document fragment:

<pre class="html-example">
  &lt;BODY&gt;
    &lt;H1&gt;A &lt;EM&gt;large&lt;/EM&gt; heading&lt;/H1&gt;
  &lt;/BODY&gt;
</pre>

<p>The <a href="#computed-value">computed value</a> of the <span
class="prop-inst-font-size">'font-size'</span> property for the H1
element is 12pt (120% times 10pt). If the user agent has the
appropriate 12pt font available, 12pt will also be the property's <a
href="#actual-value">actual value</a> and the EM will inherit that
value for the <span class="propinst-font-size">'font-size'</span>
property. However, if the user agent does not have the 12pt font
available, it may assign an actual value of, for example, 11pt to the
<span class="propinst-font-size">'font-size'</span> property of the H1
element. In that case, the EM will inherit a value of 11pt for the
same property.
</div>

<h3>The <span class="index-def" title="inherit, definition
of"><a name="value-def-inherit">inherit</a></span>
value</h3>

<P>Each property may also have a specified value of 'inherit', which
means that, for a given element, the property takes the same <a
href="#actual-value">actual value</a> as the property for the
element's parent.

<!-- Add an example here. Check out:
http://lists.w3.org/Archives/Member/w3c-css-wg/1998JanMar/0054.html
-IJ -->

<H2><a name="cascade">The cascade</a></h2>

<P>Style sheets may have three different origins: author, user, and
user agent.</p>

<ul>
<li><strong>Author</strong>. The author specifies style sheets
for a source document according to the conventions of the document
language. For instance, in HTML, style sheets may be included in the
document or linked externally.

<li><strong>User</strong>: The user may be able to specify style
information for a particular document. For example, the user may
specify a file that contains a style sheet or the user agent may
provide an interface that generates a user style sheet (or behave as
if it did).

<li><strong>User agent</strong>: <a
href="conform.html#conformance">Conforming user agents</a> must apply
a <span class="index-def" title="default style sheet"><a
name="default-style-sheet"><dfn>default style sheet</dfn></a></span>
(or behave as if they did) prior to all other style sheets for a
document. A user agent's default style sheet should present the
elements of the document language in ways that satisfy general
presentation expectations for the document language (e.g., for visual
browsers, the EM element in HTML is presented using an italic
font). See <a href="sample.html">"A sample style sheet for HTML
4.0"</a> for a recommended default style sheet for HTML 4.0 documents.

<P>Note that the default style sheet may change if system settings are
modified by the user (e.g., system colors). However, due to
limitations in a user agent's internal implementation, it may be
impossible to change the values in the default style sheet.
</ul>

<P>Style sheets from these three origins will overlap in scope, and
they interact according to the cascade.

<P>The CSS <span class="index-def" title="cascade">cascade</span>
assigns a weight to each style rule. When several rules apply, the one
with the greatest weight takes precedence.

<P>By default, rules in a user's personal style sheets have less
weight than rules in the author's style sheets. Thus, if there are
conflicts between the style sheets of an incoming document and the
reader's personal sheets, the author's rules will be used. Both reader
and author rules override the UA's default style sheet.

<P>Imported style sheets also cascade and their weight depends on
their import order. Rules specified in a given style sheet override
rules imported from other style sheets. Imported style sheets can
themselves import and override other style sheets, recursively, and
the same precedence rules apply.

<H3><a name="cascading-order">Cascading order</a></H3>

<P>To find the value for an element/property combination, user agents
must apply the following algorithm:</p>

<OL>
    <LI>
      Find all declarations that apply to the element and property in
      question, for the target <a href="media.html">media type</a>.
      Declarations apply if the associated selector <A
      HREF="selector.html">matches</A> the element in question. If no
      declarations apply, terminate the algorithm.

    <LI>
      Sort the declarations by weight.
      <span class="index-def" title="important">"!important"</span>
      declarations in the user's style sheet have more weight than
      all other declarations.

    <LI>
      Sort by origin: the author's style sheets override the user's
      style sheets which override the default style sheet. An imported
      style sheet has the same origin as the style sheet from which it
      is imported. 

    <LI>
      Sort by specificity of selector: more specific selectors will
      override more general ones. <!-- The definition and calculation
      of specificity depends on the document language (see below). [I
      don't think so. BB]--> 
      Pseudo-elements and pseudo-classes are counted as normal
      elements and classes, respectively.

    <LI> Sort by order specified: if two rules have the same weight,
    the latter specified wins. Rules in imported style sheets are
    considered to be before any rules in the style sheet itself.
</OL>

<P>The search for the property value must be terminated when any of
the above steps yields a rule that has a higher weight than the other
rules that apply to the same element/property combination.

<P>Note that "!important" may occur in author's and UA's style sheets,
but only has an effect in the user's style sheets.

<P> Apart from the "!important" setting on individual declarations,
this strategy gives author's style sheets higher weight than those of
the reader. It is therefore important that the User Agent gives the
user the ability to turn off the influence of a certain style sheet,
e.g., through a pull-down menu.

<H3><a name="important-rules">!override and !important rules</a></H3>

<P>CSS attempts to create a balance of power between author
and user style sheets. Authors are given "extra power" in the
cascade (see point 3 above) so that, by default, the author's
stylistic intentions will prevail. However, CSS offers two mechanisms 
that give more weight to user preferences: !important and !override
declarations.

<P>An "!important" declaration (the keywords "!" and "important"
follow the declaration) takes precedence over a normal declaration.
Both author and user style sheets may contain "!important" declarations,
and author "!important" rules override user "!important" rules.

<P>An "!override" declaration (the keywords "!" and "override" follow
the declaration) takes precedence over an "!important" declaration.
<em>Only</em> user style sheets may contain "!override" declarations,
giving the user the final say in the cascade.

<P>Declaring a shorthand property (e.g., <span
class="propinst-background">'background'</span>) to be "!important"
(respectively, "!override") is equivalent to declaring all of its
sub-properties to be "!important" (respectively, "!override").

<div class="example"><P>
The first rule of the user's style sheet in the following example
contains two "!override" declarations. These user preferences will
override all rules that have H1 as a <a
href="selector.html#subject">subject</a>, namely the author's H1
rule. For the P element, on the other hand, the <span
class="propinst-font-size">'font-size'</span> will be '18pt' and the
<span class="propinst-font-style">'font-style'</span> will be 'italic'
since the author's "!important" rule takes precedence.</p>

<PRE>
  /* From the user's style sheet */
  H1 { color: black ! override; background: white ! override }
  P  { font-size: 18pt ! important; font-style: normal ! important}

  /* From the author's style sheet */
  H1 { color: yellow ! important; background: blue ! important }
  P  { font-size: 12pt; font-style: italic ! important }
</PRE>
</div>


<H3><a name="specificity">Calculating a selector's specificity</a></H3>
<P>A selector's specificity is calculated as follows:</p>

<ul>
<li>(a) count the number of ID attributes in the selector
<li>(b) count the number of other attributes and pseudo-classes 
in the selector
<li>(c) count the number of element names in the selector
<li>(d) ignore pseudo-elements.
</ul>

<P>Concatenating the three numbers (in a number system with a large
base) gives the specificity. 

<div class="example"><P>
Some examples:

<PRE>
  LI            {}  /* a=0 b=0 c=1 -&gt; specificity =   1 */
  UL LI         {}  /* a=0 b=0 c=2 -&gt; specificity =   2 */
  UL OL+LI      {}  /* a=0 b=0 c=3 -&gt; specificity =   3 */
  H1 + *[REL=up]{}  /* a=0 b=1 c=1 -&gt; specificity =  11 */
  UL OL LI.red  {}  /* a=0 b=1 c=3 -&gt; specificity =  13 */ 
  LI.red.level  {}  /* a=0 b=2 c=1 -&gt; specificity =  21 */
  #x34y         {}  /* a=1 b=0 c=0 -&gt; specificity = 100 */ 
</PRE>
</div>


<P>In HTML, values of an element's "style" attribute are style sheet
rules. These rules have no selectors, but for the purpose of step 4 of
the cascade algorithm, they are considered to have an ID selector
(specificity = 100).

<div class="html-example"><P>
<PRE>
&lt;HEAD&gt;
&lt;STYLE type="text/css"&gt;
  #x97z { color: blue }
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P ID=x97z style="color: red"&gt;
&lt;/BODY&gt;
</PRE>

<P> In the above example, the color of the P element would be
red. Although the specificity is the same for both declarations, the
declaration in the "style" attribute will override the one in the
STYLE element because of cascading rule 4.
</div>

<H3>Precedence of non-CSS presentational hints</H3> 

<P>The UA may choose to honor presentational hints from other sources
than style sheets, for example the FONT element or the "align"
attribute in HTML. If so, the non-CSS presentational hints must be
translated to the corresponding CSS rules with specificity equal to
1. The rules are assumed to be at the start of the author style sheet
and may be overridden by subsequent style sheet rules.

<div class="note">
<P><em><strong>Note.</strong>
In a transition phase, this policy will make it easier for
stylistic attributes to coexist with style sheets.
</em>
</div>

</BODY>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
