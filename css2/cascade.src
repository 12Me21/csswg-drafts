<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: cascade.src,v 2.36 2002-07-08 14:57:50 bbos Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Assigning property values, Cascading, and Inheritance</TITLE>
</HEAD>
<BODY>
<H1 align="center">Assigning property values, Cascading, and Inheritance</H1>

<H2>Specified, computed, and actual values</h2>
<P>Once a user agent has parsed a document and constructed a <a
href="conform.html#doctree">document tree</a>, it must assign, for
every element in the tree, a value to every property that applies to the
target <a href="media.html">media type</a>. 

<P>The final value of a property is the result of a three-step
calculation: the value is determined through specification (the
"specified value"), then resolved into an absolute value if necessary
(the "computed value"), and finally transformed according to
the limitations of the local environment (the "actual value").

<h3>
<span class="index-def" title="specified value">
<a name="specified-value">Specified values</a></span></h3>

<P>User agents must first assign a specified value to a property based
on the following mechanisms (in order of precedence):</p>

<ol>
<li>If the <a href="#cascade">cascade</a> results in a value,
use it.

<li>Otherwise, if the property is <a
href="#inheritance">inherited</a>, use the value of the parent
element, generally the computed value.

<li>Otherwise use the property's <span class="index-def"
title="initial value">initial value</span>. The <a
name="initial-value">initial value</a> of each property is indicated
in the property's definition.
</ol>

<P>Since it has no parent, the root of the <a
href="conform.html#doctree">document tree</a> cannot use values from
the parent element; in this case, the initial value is used if
necessary.


<h3><span class="index-def" title="computed value">
<a name="computed-value">Computed values</a>
</span>
</h3>

<P>Specified values may be absolute (i.e., they are not specified
relative to another value, as in 'red' or '2mm') or relative (i.e.,
they are specified relative to another value, as in 'auto', '2em', and
'12%'). For absolute values, no computation is needed to find the
computed value.

<p>Relative values, on the other hand, must be transformed into
computed values: percentages must be multiplied by a reference value
(each property defines which value that is), values with relative
units (em, ex, px) must be made absolute by multiplying with the
appropriate font or pixel size, 'auto' values must be computed by the
formulas given with each property, certain keywords ('smaller',
'bolder', 'inherit') must be replaced according to their definitions.

<P>In most cases, elements inherit computed values. However, there are
some properties whose specified value may be inherited (e.g., the
number value for the <span
class="propinst-line-height">'line-height'</span> property). 
In the cases where child elements do not inherit the computed value,
this is described in the property definition.

<h3><span class="index-def" title="actual value">
<a name="actual-value">Actual values</a></span></h3>

<P>A computed value is in principle ready to be used, but a user agent
may not be able to make use of the value in a given environment. For
example, a user agent may only be able to render borders with integer
pixel widths and may therefore have to approximate the computed
width. The actual value is the computed value after any approximations
have been applied.

<H2><a name="inheritance">Inheritance</a></h2>

<P>Some values are inherited by the children of an element in
the <a href="conform.html#doctree">document tree</a>. Each property <a
href="about.html#property-defs">defines</a> whether it is inherited or
not.

<div class="html-example"><P>
Suppose there is an H1 element with an emphasizing element (EM)
inside:</p>

<PRE>
&lt;H1&gt;The headline &lt;EM&gt;is&lt;/EM&gt; important!&lt;/H1&gt;
</PRE>

<P>If no color has been assigned to the EM element, the emphasized
"is" will inherit the color of the parent element, so if H1 has the
color blue, the EM element will likewise be in blue.
</div>

<P> To set a "default" style property for a document, authors may set
the property on the root of the document tree. In HTML, for example,
the "html" or "body" elements can serve this function.

<div class="example"><P> 
For example, since the <span class="propinst-color">'color'</span>
property is inherited, all descendants of the "body" element will
inherit the color 'black':

<PRE>
body { color: black; }
</PRE>
</div>

<P>Specified percentage values are not inherited; computed values are.

<div class="example"><P> 
For example, given the following style sheet:</P>

<pre>
body { font-size: 10pt }
h1 { font-size: 120% }
</pre>

<p>and this document fragment:

<pre class="html-example">
&lt;BODY&gt;
  &lt;H1&gt;A &lt;EM&gt;large&lt;/EM&gt; heading&lt;/H1&gt;
&lt;/BODY&gt;
</pre>

<p>the <span class="prop-inst-font-size">'font-size'</span> property
for the H1 element will have the computed value '12pt' (120% times
10pt, the parent's value). Since the computed value of <span
class="propinst-font-size">'font-size'</span> is inherited, the EM
element will have the computed value '12pt' as well.  If the
user agent does not have the 12pt font available, the
actual value of <span class="propinst-font-size">'font-size'</span>
for both H1 and EM might be, for example, '11pt'.
</div>

<h3>The <span class="index-def" title="inherit, definition
of"><a name="value-def-inherit">'inherit'</a></span>
value</h3>

<P>Each property may also have a specified value of 'inherit', which
means that, for a given element, the property takes the same <a
href="#computed-value">computed value</a> as the property for the
element's parent. The inherited value, which is normally only used as
a fallback value, can be strengthened by setting 'inherit' explicitly.
It can also be used on properties that are not normally inherited.

<div class="example"><P>In the example below, the <span
class="propinst-color">'color'</span> and <span
class="propinst-background">'background'</span> properties are set on
the BODY element. On all other elements, the 'color' value will be
inherited and the background will be transparent. If these rules are
part of the user's style sheet, black text on a white background will
be enforced throughout the document.

<PRE>
body {
  color: black !important; 
  background: white !important;
}

* { 
  color: inherit !important; 
  background: transparent;
}
</PRE>

</div>


<!-- Add another example?. Check out:
http://lists.w3.org/Archives/Member/w3c-css-wg/1998JanMar/0054.html
-IJ, HWL -->

<H2><a name="at-import">The @import rule</a></h2>

<P>The <span class="index-def"
title="@import"><dfn>'@import'</dfn></span> rule allows users to
import style rules from other style sheets. Any @import rules must
precede all rule sets in a style sheet. The '@import' keyword must be
followed by the URI of the style sheet to include. A string is also
allowed; it will be interpreted as if it had url(...) around it.

<div class="example"><P> 
The following lines are equivalent in meaning and illustrate both
'@import' syntaxes (one with "url()" and one with a bare string):</p>

<PRE>
@import "mystyle.css";
@import url("mystyle.css");
</PRE>
</div>

<p>So that user agents can avoid retrieving resources for unsupported
<a href="media.html">media types</a>, authors may specify
media-dependent <span class="index-inst"
title="@import">@import</span> rules.  These <span class="index-def"
title="conditional import|media-dependent import">conditional
imports</span> specify comma-separated media types after the URI.

<div class="example">
<p>The following rules illustrate how @import rules can be made media-dependent:</p>

<pre>
@import url("fineprint.css") print;
@import url("bluish.css") projection, tv;
</pre>
</div>

<p>In the absence of any media types, the import is
unconditional. Specifying 'all' for the medium has the same effect.

<H2><a name="cascade">The cascade</a></h2>

<P>Style sheets may have three different origins: author, user, and
user agent.</p>

<ul>
<li><strong>Author</strong>. The author specifies style sheets
for a source document according to the conventions of the document
language. For instance, in HTML, style sheets may be included in the
document or linked externally.

<li><strong>User</strong>: The user may be able to specify style
information for a particular document. For example, the user may
specify a file that contains a style sheet or the user agent may
provide an interface that generates a user style sheet (or behave as
if it did).

<li><strong>User agent</strong>: <a
href="conform.html#conformance">Conforming user agents</a> must apply
a <span class="index-def" title="default style sheet"><a
name="default-style-sheet"><dfn>default style sheet</dfn></a></span>
(or behave as if they did) prior to all other style sheets for a
document. A user agent's default style sheet should present the
elements of the document language in ways that satisfy general
presentation expectations for the document language (e.g., for visual
browsers, the EM element in HTML is presented using an italic
font). See <a href="sample.html">A sample style sheet for HTML
</a> for a recommended default style sheet for HTML documents.

<P>Note that the default style sheet may change if system settings are
modified by the user (e.g., system colors). However, due to
limitations in a user agent's internal implementation, it may be
impossible to change the values in the default style sheet.
</ul>

<P>Style sheets from these three origins will overlap in scope, and
they interact according to the cascade.

<P>The CSS <span class="index-def" title="cascade">cascade</span>
assigns a weight to each style rule. When several rules apply, the one
with the greatest weight takes precedence.

<P>By default, rules in author style sheets have more weight than
rules in user style sheets. Precedence is reversed, however, for
"!important" rules. All user and author rules have more weight
than rules in the UA's default style sheet.

<P>Imported style sheets also cascade and their weight depends on
their import order. Rules specified in a given style sheet override
rules of the same weight imported from other style sheets. Imported
style sheets can themselves import and override other style sheets,
recursively, and the same precedence rules apply.

<H3><a name="cascading-order">Cascading order</a></H3>

<P>To find the value for an element/property combination, user agents
must apply the following sorting order:</p>

<OL>
    <LI>
      Find all declarations that apply to the element and property in
      question, for the target <a href="media.html">media type</a>.
      Declarations apply if the associated selector <A
      HREF="selector.html">matches</A> the element in question.

    <LI>Sort by weight (normal or important) and origin (author, user, or user agent). In ascending order:

<ol>
<li>user agent style sheets
<li>user normal style sheets
<li>author normal style sheets
<li>author important style sheets
<li>user important style sheets
</ol>

    <LI>
      Sort by <a href="#specificity">specificity</a> 
      of selector: more specific
      selectors will override more general ones.  Pseudo-elements and
      pseudo-classes are counted as normal elements and classes,
      respectively.

    <LI> Finally, sort by order specified: if two rules have the same
    weight, origin and specificity,
    the latter specified wins. Rules in imported style sheets are
    considered to be before any rules in the style sheet itself.

</OL>

<P> Apart from the "!important" setting on individual declarations,
this strategy gives author's style sheets higher weight than those of
the reader. It is therefore important that the user agent give the
user the ability to turn off the influence of a certain style sheet,
e.g., through a pull-down menu.

<H3><a name="important-rules">!important rules</a></H3>

<P>CSS attempts to create a balance of power between author
and user style sheets. By default, rules in an author's style
sheet override those in a user's style sheet (see cascade
rule 3). 

<P>However, for balance, an "!important" declaration (the keywords "!"
and "important" follow the declaration) takes precedence over a normal
declaration.  Both author and user style sheets may contain
"!important" declarations, and user "!important" rules override author
"!important" rules. This CSS feature improves accessibility
of documents by giving users with special requirements (large
fonts, color combinations, etc.) control over presentation.


<!-- HWL 20020423: removed historical note -->

<!--
<div class="note"><P>
<em><strong>Note.</strong>
This is a semantic change since CSS1. In CSS1, author "!important"
rules took precedence over user "!important" rules. </em>
</div>
-->

<P>Declaring a <span class="index-inst" title="shorthand
property">shorthand property</span> (e.g., <span
class="propinst-background">'background'</span>) to be "!important" is
equivalent to declaring all of its sub-properties to be "!important".

<div class="example"> 

<P>The first rule in the user's style sheet in the following example
contains an "!important" declaration, which overrides the corresponding
declaration in the author's style sheet.  The second declaration
will also win due to being marked "!important". However, the third
rule in the user's style sheet is not "!important" and will therefore
lose to the second rule in the author's style sheet (which happens to
set style on a shorthand property). Also, the third author rule will
lose to the second author rule since the second rule is
"!important". This shows that "!important" declarations have a
function also within author style sheets.

<PRE>
/* From the user's style sheet */
p { text-indent: 1em ! important }
p { font-style: italic ! important }
p { font-size: 18pt }

/* From the author's style sheet */
p { text-indent: 1.5em !important }
p { font: 12pt sans-serif !important }
p { font-size: 24pt }
</PRE>
</div>


<H3><a name="specificity">Calculating a selector's specificity</a></H3>
<P>A selector's specificity is calculated as follows:</p>

<ul>

<li>count 1 if the selector is a 'style' attribute rather than a
selector, 0 otherwise (= a) (In HTML, values of an element's "style"
attribute are style sheet rules. These rules have no selectors, so
a=1, b=0, c=0, and d=0.)

<li>count the number of ID attributes in the selector (= b)

<li>count the number of other attributes and pseudo-classes 
in the selector (= c)

<li>count the number of element names in the selector (= d)

<li>ignore pseudo-elements.
</ul>

<P>Concatenating the four numbers a-b-c-d (in a number system with a large
base) gives the specificity. 

<div class="example"><P>
Some examples:

<PRE>
 *             {}  /* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */
 li            {}  /* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */
 ul li         {}  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */
 ul ol+li      {}  /* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */
 h1 + *[rel=up]{}  /* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */
 ul ol li.red  {}  /* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */
 li.red.level  {}  /* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */
 #x34y         {}  /* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */
 style=""          /* a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 */
</PRE>
</div>

<div class="html-example"><P>
<PRE>
&lt;HEAD&gt;
&lt;STYLE type="text/css"&gt;
  #x97z { color: red }
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P ID=x97z style="color: green"&gt;
&lt;/BODY&gt;
</PRE>

<P>In the above example, the color of the P element would be
green. The declaration in the "style" attribute will override the one in
the STYLE element because of cascading rule 3, since it has a higher
specificity.
</div>

<p>Note: The specificity is based only on the form of the selector. In
particular, a selector of the form "[id=p33]" is counted as an
attribute selector (a=0, b=0, c=1, d=0), even if the id attribute is
defined as an "ID" in the source document's DTD.

<H3>Precedence of non-CSS presentational hints</H3> 

<p>If the user agent chooses to honor presentational hints from other
sources than style sheets, these hints must be given the same weight
as the user agent's default style sheet.

<div class="note">
<P><em><strong>Note.</strong>
Non-CSS presentational hints had a higher weight in CSS2.</em>
</div>

<!-- HWL 20020423: replaced description of presentational hints -->
<!--
<P>The UA may choose to honor presentational hints from other sources
than style sheets, for example the FONT element or the ALIGN
attribute in HTML. If so, the non-CSS presentational hints must be
translated to the corresponding CSS rules with specificity equal to
zero. The rules are assumed to be at the start of the author style sheet
and may be overridden by subsequent style sheet rules.

<div class="note">
<P><em><strong>Note.</strong>
In a transition phase, this policy will make it easier for
stylistic attributes to coexist with style sheets.
</em>
</div>

<div class="note">
<P><em><strong>Note.</strong>
In CSS1, the non-CSS presentational hints were given a specificity
equal to 1, not 0. The change is due to the introduction of the
universal selector, which has a specificity of 0.
</em>
</div>
-->

</BODY>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->

