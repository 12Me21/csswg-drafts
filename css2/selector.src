<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: selector.src,v 1.18 1997-09-24 22:15:19 ian Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Selectors</TITLE>
<LINK rel="next" href="cascade.html">
<LINK rel="previous" href="syndata.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">Selectors</H1>
<H2><a name="type-selectors">Type selectors</a></H2>
In CSS, pattern matching rules determine which style rules apply to
elements in a document. Patterns, called <span class="index-def"
title="selectors"><em>selectors</em></span>, may range from simple
element names to rich contextual patterns.

<P>The simplest selector is the name of an element from the object
language, called a <span class="index-def" title="type
selector"><em>type selector</em></span>. Type selectors match all
instances of the element in the document. Element names are case-insensitive.

<div class="example">
For example, the following rule matches all H1 elements in a document:

<PRE>
  H1 { font-family: Helvetica }
</PRE>
</div>

<H2><a name="grouping">Grouping</a></H2>

<P>When element selectors share the same declarations, they may be
grouped into comma-separated lists.

<div class="example">
In this example, we condense three rules with identical declarations
into one. Thus,

<PRE>
  H1 { font-family: Helvetica }
  H2 { font-family: Helvetica }
  H3 { font-family: Helvetica }
</PRE>

<P>is equivalent to:

<PRE>
  H1, H2, H3 { font-family: Helvetica }
</PRE>
</div>

<P> Furthermore, multiple declarations for the same selector may be
organized into semi-colon separated groups.

<div class="example"><P>
Thus, the following rules:  
<PRE>
  H1 { font-weight: bold }
  H1 { font-size: 12pt }
  H1 { line-height: 14pt }
  H1 { font-family: Helvetica }
  H1 { font-variant: normal }
  H1 { font-style: normal }
</PRE>

<P>are equivalent to:

<PRE>
  H1 { 
    font-weight: bold; 
    font-size: 12pt;
    line-height: 14pt; 
    font-family: Helvetica; 
    font-variant: normal;
    font-style: normal;
  }
</PRE>
</div>

<P> In addition, some properties are <span class="index-def"
title="shorthand"><em>shorthand</em></span> rules that allow authors
to specify the values of several properties with a single
property. For instance, the <span class="propinst-font">'font'</span>
property is a shorthand property for setting <span
class="propinst-font-style">'font-style'</span>, <span
class="propinst-font-variant">'font-variant'</span>, <span
class="propinst-font-weight">'font-weight'</span>, <span
class="propinst-font-size">'font-size'</span>, <span
class="propinst-line-height">'line-height'</span>, and <span
class="propinst-font-family">'font-family'</span> all at once.

	  
<div class="example"><P>
The multiple style rules of the previous example:

<PRE>
  H1 { 
    font-weight: bold; 
    font-size: 12pt;
    line-height: 14pt; 
    font-family: Helvetica; 
    font-variant: normal;
    font-style: normal;
  }
</PRE>

<P>may be rewritten with a single shorthand property:

<PRE>
  H1 { font: bold 12pt/14pt Helvetica }
</PRE>

<P>Note that since <span
class="propinst-font-variant">'font-variant'</span> and <span
class="propinst-font-style">'font-style'</span> take their default
values of 'normal' in this example, these values have been omitted
from the shorthand form.
</div>

<H2><a name="contextual-selectors">Contextual selectors</a></H2>

<P>At times, authors may want selectors to match elements that appear
in a certain context, such as "only those EM elements that are within
an H1 element".  In these cases, <span class="index-def"
title="contextual selector"><em>contextual selector</em></span> add
specificity. Context is defined as an ancestor/descendent relationship
between elements in the document tree. Sibling relationships (one
element after another) are discussed in the section on <a
href="#sequential-selectors">sequential selectors</a>.

<P>An <span class="index-def" title="arbitrary contextual
selector"><em>arbitrary contextual selector</em></span> matches when
an element is an arbitrary descendent of some ancestor element (i.e.,
it may be any generation below the ancestor element. An arbitrary
contextual selector is made up of two or more <a
href="#type-selectors">type selectors</a> separated by white space. A
contextual selector may also contain <a
href="#attribute-selectors">attribute selectors</a>.

<div class="example"><P>
For example, consider the following rules:

<PRE>
  H1 { color: red }
  EM { color: red }
</PRE>

<P>Although the intention of these rules is to add emphasis to text by
changing its color, the effect will be lost in a case such as:

<PRE>
&lt;H1&gt;This headline is &lt;EM&gt;very&lt;/EM&gt; important&lt;/H1&gt;
</PRE>

<P>We address this case by adding an arbitrary contextual rule
to the previous two that sets the text color to blue whenever an EM
occurs anywhere within an H1:

<PRE>
  H1 { color: red }
  EM { color: red }
  H1 EM { color: blue }
</PRE>

<P>The third rule will also match the following fragment:

<PRE>
  &lt;H1&gt;This 
     &lt;SPAN class="myclass"&gt;headline is &lt;EM&gt;very&lt;/EM&gt;
     important&lt;&lt;/SPAN&gt;&lt;/H1&gt;
</PRE>
</div>

<P>A <span class="index-def" title="direct contextual selector">
<em>direct contextual selector</em></span> matches when an element is the
direct descendent of some parent element. An arbitrary contextual
selector is made up of two or more <a href="#type-selectors">type
selectors</a> separated by a tilde (~). A contextual selector may also
contain <a href="#attribute-selectors">attribute selectors</a>.

<div class="example"><P>
The following rules vary the appearance of nested list items:

<PRE>
  OL ~ OL { list-style: upper-alpha }
  OL ~ OL ~ OL { list-style: lower-alpha }
</PRE>

<P>The first rule matches all OL elements exactly one level below
another OL element. The second rule matches all OL elements with
exactly two OL ancestors.
</div>

<P>Contextual selectors may be grouped according to the <a
href="grouping">rules for grouping</a> listed above.

<H2><a name="sequential-selectors">Sequential selectors</a></H2>
<P>Often, special formatting rules apply when two types of elements
appear next to each other in a document. For example, when block-level
elements are laid-out, the vertical space between them collapses. In
this case, the special formatting is handled by the rules for <a
href="./flowobj2.html#collapsing-margins">collapsing margins</a>, but
in other cases of sequential selectors, authors may want to specify
their own special formatting rules.

<P>Sequential selectors have the following syntax: the first selector
is surrounded by slashes ("/") and the second is not. 

<div class="example"><P>
Thus, the following rule states that when a P element follows a MATH
element, it should not be indented:

<PRE>
  /MATH/ P { text-indent: 0 } 
</PRE>

<P>The next example brings an H2 that follows an H1 closer to it:

<PRE>
  /H1/ H2 { margin-top: -5mm }   
</PRE>
</div>

<P>Sequential selectors may be used along with other types of
selectors (e.g., <a href="#attribute-selectors">attribute
selectors</a>).

<div class="example"><P> 
Thus, for example, the following rule is
similar to the one in the previous example, except that the special
formatting only occurs when H1 has <samp>class="opener"</samp> (see
the section on <a href="#attribute-selectors">attribute
selectors</a>):

<PRE>
  /H1.opener/ H2 { margin-top: -5mm }   
</PRE>

<P>The following rule sets the font weight to "bold" for any EM element 
that is the descendent of the <em>first</em> paragraph in a document. Note
that in this rule, the sequential selector "// P" is the parent of "EM":

<PRE>
  // P EM { font-weight : bold }
</PRE>

<P>Similarly, the following rule suppresses indentation for the first
paragraph (P) of a DIV:

<PRE>
  DIV // P { text-indent: 0 }
</PRE>
</div>

<P>As these examples illustrate, the syntax "//" means "no preceding
sibling element". The last example would match the P inside the DIV
of the following fragment:

<PRE>
  &lt;P&gt; The last P before the note.
  &lt;DIV class="note"&gt;
  &lt;P&gt; The first P inside the note.
  &lt;/DIV&gt;
</PRE>

<P>but would <em>not</em> match the second P in the following
fragment:

<PRE>
  &lt;P&gt; The last P before the note.
  &lt;DIV class="note"&gt;
  &lt;H2&gt;Note&lt;/H2&gt;
  &lt;P&gt; The first P inside the note.
  &lt;/DIV&gt;
</PRE>

<H2><a name="pseudo-elements">Pseudo-elements</a> and <a
name="pseudo-classes">pseudo-classes</a></H2>

<P> In CSS2, style is normally attached to an element based on its
position in the document tree. This simple model is sufficient for
many cases, but some common publishing scenarios (such as changing the
font size of the first letter of a paragraph) may be independent of
the document tree. For instance, in <a rel="biblioentry"
href="./refs.html#ref-HTML40">[HTML40]</a>, no element refers to the
first line of a paragraph, and therefore no simple CSS selector may
refer to it.

<P>CSS introduces the concepts of <span class="index-def"
title="pseudo-elements">pseudo-elements</span> and <span
class="index-def"
title="pseudo-classes"><em>pseudo-classes</em></span> to extend the
addressing model and permit formatting based on information that lies
outside the document tree. Pseudo-elements refer to sub-parts of an
element's content (e.g., the first letter or first line of a
paragraph, etc.). Pseudo-classes refer to elements that are grouped
dynamically (e.g., all links that have been visited, all left-hand pages,
etc.)

<P>Although pseudo-elements and pseudo-classes do not exist in the
document tree, their behavior is defined as if they did. Each
pseudo-element and pseudo-class may be modeled by a <span
class="index-def" title="fictional tag sequence"><em>fictional tag
sequence</em></span>, a fragment of document source that includes
imaginary elements from the object language.

<P>For instance, suppose we want to specify style information for the
first line of a paragraph only. CSS defines a pseudo-element named
":first-line" which may be used as part of a selector:

<PRE>
  P:first-line { font-style: small-caps }
</PRE>

<P>The above rule means "change the font style of the first line of
every paragraph to small-caps". However, the selector "P:first-line"
does not match any real HTML element. It does match a pseudo-element
that conforming user agents will insert at the beginning of every
paragraph.

<P>Note that the length of the first line depends on a number of
factors, including the width of the page, the font size, etc. Suppose
for this example that the paragraph is broken into the lines indicated
in the example. Thus, an ordinary HTML paragraph such as:

<PRE>
  &lt;P&gt;This is a somewhat long HTML paragraph that will
  be broken into several lines. The first line will be
  identified by a fictional tag sequence. The other lines will 
  be treated as ordinary lines in the paragraph.&lt;/P&gt;
</PRE>

<P>will be "rewritten" by user agents to include the fictional tag
sequence for :first-line. 

<PRE>
  &lt;P&gt;
  &lt;P:first-line&gt;This is a somewhat long HTML paragraph that will&lt;/P:first-line&gt;
  be broken into several lines. The first line will be
  identified by a fictional tag sequence. The other lines will 
  be treated as ordinary lines in the paragraph.&lt;/P&gt;
</PRE>

<P>If a pseudo-element breaks up a real element, the necessary extra
tags must be regenerated in the fictional tag sequence. Thus, if we 
mark up the previous paragraph with a SPAN element:

<PRE>
  &lt;P&gt;&lt;SPAN class="test"&gt;This is a somewhat long HTML paragraph that will
  be broken into several lines.&lt;/SPAN&gt; The first line will be
  identified by a fictional tag sequence. The other lines will 
  be treated as ordinary lines in the paragraph.&lt;/P&gt;
</PRE>

<P>The user agent must generate the appropriate start and end tags for
SPAN when inserting the fictional tag sequence for :first-line.

<PRE>
  &lt;P&gt;&lt;P:first-line&gt;&lt;SPAN class="test"&gt;This is a somewhat long HTML paragraph that will&lt;/SPAN&gt;&lt;/P:first-line&gt;
  &lt;SPAN&gt;be broken into several lines.&lt;/SPAN&gt; The first line will be
  identified by a fictional tag sequence. The other lines will 
  be treated as ordinary lines in the paragraph.&lt;/P&gt;
</PRE>

<P> Pseudo-element and pseudo-class names are case-insensitive.

<div class="note"><P>
<em><strong>Note.</strong>
In CSS2, only one pseudo-element can be specified per
selector. This may change in future versions of CSS.
</em>
</div>

<H3>Overlapping pseudo-elements</H3>

<P> Several pseudo element rules may refer to the same content.

<div class="example"><P>
In the following example, the first letter of each P element will be
green with a font size of 24pt. The rest of the first line (as
formatted on the canvas) will be blue while the rest of the paragraph
will be red.

<PRE>
  P { color: red; font-size: 12pt }
  P:first-letter { color: green; font-size: 200% }
  P:first-line { color: blue }

  &lt;P&gt;Some text that ends up on two lines&lt;/P&gt;
</PRE>

<P>Assuming that a line break will occur before the word "ends", the
<span class="index-inst" title="fictional tag sequence">fictional tag
sequence</span> for this fragment is:

<PRE>
  &lt;P&gt;
  &lt;P:first-line&gt;
  &lt;P:first-letter&gt; 
  S 
  &lt;/P:first-letter&gt;ome text that 
  &lt;/P:first-line&gt; 
  ends up on two lines 
  &lt;/P&gt;
</PRE>

<P>Note that the :first-letter element is inside the :first-line
element.  Properties set on :first-line will be inherited by
:first-letter, but are overridden if the same property is set on
:first-letter.
</div>

<H3>Pseudo-elements with contextual selectors</H3>

<P> In a contextual selector, pseudo-elements are only allowed at the
end of the selector. 


<div class="example"><P>
The following example illustrates this with the
<span class="index-inst" title=":first-letter">:first-letter</span>
pseudo element.

<PRE>
  BODY P:first-letter { color: purple }
</PRE>
</div>

<P> Pseudo-classes may also be used in contextual selectors. 

<div class="example"><P>
The following example sets the border color to blue of all images that
descend from A elements that have not yet been visited:
<PRE>
  A:link IMG { border: solid blue }
</PRE>
</div>

<H3>Typographical pseudo-elements: <a name="first-line">:first-line</a> and
<a name="first-letter">:first-letter</a></H3>

<P> Some common typographical effects are associated not with
structural elements but rather with typographical items as formatted
on the canvas. In CSS2, two such typographical items can be addressed
through <span class="index-inst"
title="pseudo-elements">pseudo-elements</span>: the first line of an
element, and the first letter.

<P>Conforming UAs may ignore all rules with :first-line or
:first-letter in the selector, or, alternatively, may only support a
subset of the properties on these pseudo-elements. See the section on
<a href="convent.html#conformance">conformance</a> for further information.

<H4><span class="index-def" title="pseudo-elements, :first-line|:first-line">:first-line</span></H4>

<P> The :first-line pseudo-element is used to apply special styles to
the first line as formatted on the canvas.

<div class="example"><P>
For example, on a text-based UA, this text:

<PRE>
  &lt;STYLE type="text/css"&gt;
    P:first-line { font-style: small-caps }
  &lt;/STYLE&gt;

  &lt;P&gt;The first line of an article in Newsweek.
</PRE>

<P>could be formatted as:

<PRE>
  THE FIRST LINE OF AN
  article in Newsweek.
</PRE>

<P> The <span class="index-inst" title="fictional tag sequence">fictional tag sequence</span> in the above example is:

<PRE>
  &lt;P&gt;
  &lt;P:first-line&gt;
  The first line of an 
  &lt;/P:first-line&gt;
  article in Newsweek.
  &lt;/P&gt;
</PRE>

<P> The :first-line end tag is inserted at the end of the first line
as formatted on the canvas.
</div>

<P> The <span class="index-inst" title="pseudo-elements,
:first-line">:first-line</span> pseudo-element can only be attached to a 
block-level element.

<P> The :first-line pseudo-element is similar to an inline element,
but with certain restrictions. Only the following properties apply to
a :first-line element: 
<a href="fonts.html#font-properties">font properties</a>, 
<a href="colors.html#color-properties">color properties</a>, 
<a href="colors.html#background-properties">background properties</a>, 
<span class="propinst-word-spacing">'word-spacing'</span>, <span
class="propinst-letter-spacing">'letter-spacing'</span>, <span
class="propinst-text-decoration">'text-decoration'</span>, <span
class="propinst-vertical-align">'vertical-align'</span>, <span
class="propinst-text-transform">'text-transform'</span>, <span
class="propinst-line-height">'line-height'</span>, and <span
class="propinst-clear">'clear'</span>, 

<H4><span class="index-def" title="pseudo-elements,
:first-letter|:first-letter">:first-letter</span></H4>


<P> The :first-letter pseudo-element is used for <span
class="index-inst" title="initial caps">"initial caps"</span> and
<span class="index-inst" title="drop caps">"drop caps"</span>, which
are common typographical effects. It is similar to an inline element
if its <span class="propinst-float">'float'</span> property is 'none',
otherwise it is similar to a floating element. 

<P>These are the properties that apply to :first-letter pseudo-elements:
<a href="fonts.html#font-properties">font properties</a>, 
<a href="colors.html#color-properties">color properties</a>, 
<a href="colors.html#background-properties">background properties</a>, 
<span class="propinst-text-decoration">'text-decoration'</span>, 
<span class="propinst-vertical-align">'vertical-align'</span> (only if
	'float' is 'none'), <span 
class="propinst-text-transform">'text-transform'</span>, <span
class="propinst-line-height">'line-height'</span>, 
<a href="flowobj.html#margin-properties">margin properties</a>, 
<a href="flowobj.html#padding-properties">padding properties</a>, 
<a href="flowobj.html#border-properties">border properties</a>, 
<span class="propinst-float">'float'</span>, and <span
class="propinst-clear">'clear'</span>. 

<div class="example"><P>
<P>The following CSS2 will make a dropcap initial letter span two lines:

<PRE>
&lt;HTML&gt;
 &lt;HEAD&gt;
  &lt;TITLE&gt;Title&lt;/TITLE&gt;
  &lt;STYLE type="text/css"&gt;
   P              { font-size: 12pt; line-height: 12pt }
   P:first-letter { font-size: 200%; font-style: italic; font-weight: bold; float: left }
   SPAN           { text-transform: uppercase }
  &lt;/STYLE&gt;
 &lt;/HEAD&gt;
 &lt;BODY&gt;
  &lt;P&gt;&lt;SPAN&gt;The first&lt;/SPAN&gt; few words of an article in The Economist.&lt;/P&gt;
 &lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>This example might be formatted as follows:</P>

<img src="./images/first-letter.gif"
     alt="Image illustrating the combined effect of the :first-letter and :first-line pseudo-elements">


<P>If a text-based UA supports the :first-letter pseudo-element, a
best-attempt at formatting the above might produce:

<PRE>
  ___
   | HE FIRST few
   | words of an 
  article in the
  Economist.
</PRE>

<P> The <span class="index-inst" title="fictional tag
 sequence">fictional tag sequence</span> is:

<PRE>
  &lt;P&gt;
  &lt;SPAN&gt;
  &lt;P:first-letter&gt;
  T
  &lt;/P:first-letter&gt;he first
  &lt;/SPAN&gt; 
  few words of an article in the Economist.
  &lt;/P&gt;
</PRE>

<P> Note that the :first-letter pseudo-element tags abut the content
(i.e., the initial character), while the :first-line pseudo-element
start tag is inserted right after the start tag of the element to
which it is attached.
</div>

<P> The UA defines what characters are inside the :first-letter
element. Quotes that precede the first letter should be
included, as in:</P>

<img src="./images/first-letter2.gif"
     alt="Quotes that precede the first letter should be included.">

<P>If a text-based UA supports the :first-letter pseudo-element, a
best-attempt at formatting the above might produce:

<PRE>
  ||   /\    bird in 
      /  \   the hand
     /----\  is worth
    /      \ two in
  the bush," says an 
  old proverb.
</PRE>
<!-- " -->

<P> When the paragraph starts with other punctuation (e.g., parenthesis
and ellipsis points) or other characters that are normally not
considered letters (e.g.,  digits and mathematical symbols),
:first-letter pseudo-elements are usually ignored.

<P> The :first-letter pseudo-element can only be attached to a
block-level element.

<div class="note"><P>
<em><strong>Note.</strong>
Some languages may have specific rules about how to treat certain
letter combinations. In Dutch, for example, if the letter combination
"ij" appears at the beginning of a word, they should both be
considered within the :first-letter pseudo-element.
</em>
</div>

<H3>Anchor pseudo-classes in HTML:
<span class="index-def" title="pseudo-classes, :link|:link">:link</span>,
<span class="index-def" title="pseudo-classes, :visited|:visited">:visited</span>,
and 
<span class="index-def" title="pseudo-classes, :active|:active">:active</span>
</H3>


<P>user agents commonly display unvisited HTML links differently from
previously visited ones. In CSS2, authors may refer to three
categories of links: visited, unvisited, and a currently selected
link (e.g., by the mouse). Each category of link has a corresponding
pseudo-class:

<PRE>
  A:link { color: red }       /* unvisited link */
  A:visited { color: blue }   /* visited links */
  A:active { color: lime }    /* active links */
</PRE>

<P> user agents are not required to reformat a currently displayed
document due to anchor pseudo-class transitions. For instance, a style
sheet may legally specify that the <span
class="propinst-font-size">'font-size'</span> of an 'active' link
should be larger that a 'visited' link, but the UA is not required to
dynamically reformat the document when the reader selects the
'visited' link. 

<P> In CSS2, anchor pseudo-classes have no effect on elements other
than A. Therefore, the element type can be omitted from the
selector. 

<div class="note"><P> 
<em><strong>Note.</strong>
user agents may choose to move an element from
'visited' to 'link' after a certain time.
</em>
</div>

<div class="example"><P>
The following two CSS2 declarations are equivalent and
select the same HTML elements:

<PRE>
  A:link { color: red }
  :link { color: red }
</PRE>
</div>


<H2><a name="attribute-selectors">Attribute selectors</a></H2>

<P>CSS2 allows authors to specify rules that match according to
attributes defined in the object language. A rule may match based on
the simple presence of the attribute or on one more values for the attribute.
Attribute names are case-insensitive.

<div class="example"><P>
For example, the following rule matches all H1 elements (in HTML) that
specify the "href" attribute, whatever its value:</P>

<PRE>
   H1[href] { color: blue; }
</PRE>
</div>

<div class="example"><P>
In the following example, the rule matches all SPAN elements whose
"class" attribute has the value "example":</P>

<PRE>
   SPAN[class=example] { color: blue; }
</PRE>
</div>

<P>In general, attribute values are case-sensitive.

<P>Object languages may allow multi-valued attributes, typically
space-separated lists such as the following:

<PRE>
&lt;SPAN class="fish, fresh-water, edible"&gt;perch&lt;/SPAN&gt;
</PRE>

<P>To accommodate value lists such as this, CSS2 defines the following
attribute selection mechanism:

<dl>
<dt><strong>The "=" sign</strong>

<dd>For the rule to apply, the string following "=" must match at
least one member of the set of attribute values.

<dt><strong>The "==" sign</strong>
<dd>For the rule to apply, the string following "==" must match the
attribute value exactly.
</dl>

<div class="example"><P>
The following rules illustrate the defines between "=" and "==":</P>
<PRE>
   A[rel="copyright"] {...} /* matches, e.g., &lt;A rel="copyright, copyleft, ..." *?
   td[colspan="2"] {...}    /* matches only &lt;TD colspan="2"&gt; ... */
</PRE>
</div>

<H3><a name="html-attribute-selectors">Attribute selectors in HTML</a></H3>

<P>Although authors may refer to any HTML attributes with the generic
syntax "[attribute=value]", CSS2 defines a special syntax for two 
<a rel="biblioentry" href="./refs.html#ref-HTML40">[HTML40]</a>
attributes: "class" and "id".

<H3>The class attribute</H3> 

<P>The HTML "class" attribute allows authors to group elements
together and specify style information to the entire group. The
CSS2 shortcut syntax for "class" is a selector followed by a "." and
then the class value, with no intervening white space. The selector
may be empty, in which case the rule applies to any element whose
"class" attribute matches the value.

<div class="example"><P>
For example, we can assign style information to all elements with
<samp>class="pastoral"</samp>:

<PRE>
  .pastoral { color: green }  /* all elements with class=pastoral */
</PRE>

<P>or just to H1 elements with <samp>class="pastoral"</samp>:

<PRE>
  H1.pastoral { color: green }  /* H1 elements with class=pastoral */
</PRE>

<P>Given these rules, the first H1 instance below would not have green
text, while the second would:

<PRE>
  &lt;H1&gt;Not green&lt;/H1&gt;
  &lt;H1 class="pastoral"&gt;Very green&lt;/H1&gt;
</PRE>

<P>Note that "H1.pastoral" is equivalent to "H1[class=pastoral]".
</div>

<P> The normal inheritance rules apply to classed elements; they
inherit values from their parent in the document structure.

<P> To match a subset of "class" values, each value must be preceded
by a ".", in any order. 

<div class="example"><P>
For example, the following rule matches any P element whose "class" attribute
has been assigned a list of space-separated values that includes "pastoral"
and "marine":

<PRE> 
   P.pastoral.marine { color: green }
</PRE>

<P>This rule matches when <samp>class="pastoral blue aqua
marine"</samp> but does not match for <samp>class="pastoral
blue"</samp>.

<P>Similarly, the following aural style sheet rules allow a script
to be read aloud in different voices for each role:

<PRE>
   P.role.romeo  { voice-family: romeo, male }
   P.role.juliet { voice-family: juliet, female }
</PRE>
</div>

<div class="note"><P>
<em><strong>Note.</strong>
CSS gives so much power to the "class" attribute, that in many cases
it doesn't even matter what HTML element the class is set on -- you
can make any element emulate almost any other. Relying on this power
is not recommended, since it removes the level of structure that has a
universal meaning (HTML elements).  A structure based on "class" is only
useful within a restricted domain, where the meaning of a class has
been mutually agreed upon.
</em>
</div>

<H3>The class attribute in other object languages</H3> 
<P>CSS2 allows authors to use the class syntax (the ".") even
for languages other than HTML. For other languages, however, authors
must specify which attribute will be acting as the "class" attribute.
This is done with the <span class="index-def" title="@class">@class</span>
rule, which has the form "@class &lt;attribute-name&gt;;". 

<div class="example"><P>
For instance, to specify that the "type" attribute of XML has the role
of assigning class information, authors should include the following
declaration in their style sheets:

<PRE>
   @class type;
</PRE>

<P>Then, a rule for XML such as:

<PRE>
   PARA.romeo { ... }
</PRE>

<P>would be equivalent to:

<PRE>
   PARA[type=romeo] { ... }
</PRE>
</div>

<P>@class declarations must obey the following rules:

<ul>
<li>An @class declaration must appear before the first selector in the
current file.
<li>If it occurs more than once, only the last instance applies.
<li>If it occurs, it only applies to the current file and not to any
imported style sheets.
</ul>

<H3>The id attribute</H3>
<P>The HTML "id" attribute allows authors to assign a unique
name to an element. CSS2 allows authors to specify style rules that
apply to a single instance of an element, based on its "id" value.

<P>To match an element with a given "id" value, the selector must contain
"#" followed by the "id" value.

<div class="example"><P> 
In the following example, the style rule
contains no selector information and therefore matches any element
that has <samp>id="z98y"</samp>. The rule will thus match for the P element:

<PRE>
  &lt;HEAD&gt;
  &lt;STYLE&gt;
  #z98y { letter-spacing: 0.3em }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P id=z98y&gt;Wide text&lt;/P&gt;
  &lt;/BODY&gt;
</PRE>

<P>In the next example, however, the style rule will only match an H1
element that has <samp>id="z98y"</samp>. The rule will not match for
the P element:

<PRE>
  &lt;HEAD&gt;
  &lt;STYLE&gt;
  H1#z98y { letter-spacing: 0.5em }
  &lt;/STYLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P id=z98y&gt;Wide text&lt;/P&gt;
  &lt;/BODY&gt;
</PRE>
</div>

<div class="note"><P>
<em><strong>Note.</strong>
While style sheets have been designed to augment document
structure, this feature will allow authors to create documents that
present well on the canvas without taking advantage of the structural
elements of HTML. This use of style sheets is discouraged.
</em>
</div>

<H3>Pseudo-elements and pseudo-classes with attribute selectors</H3>

<P> Pseudo-classes can be combined with normal classes. In this case,
the class name precedes the pseudo-class name in the selector.

<div class="example"><P>
In the following example, if the link in the above example has been
visited, it will be rendered in blue.

<PRE>
  A.external:visited { color: blue }

  &lt;A class="external" href="http://out.side/"&gt;external link&lt;/A&gt;
</PRE>

</div>

<P> Pseudo-elements can also be combined with attribute selectors:

<div class="example"><P>
<PRE>
  P.initial:first-letter { color: red }

  &lt;P class="initial"&gt;First paragraph&lt;/A&gt;
</PRE>

<P> The above example would make the first letter of all P elements
with "class=initial" red. 
</div>

<P>When combined with classes or pseudo-classes, pseudo-elements must
be specified at the end of the selector.

<H3>Colliding attribute selectors and pseudo-classes</H3>
<P>CSS syntax allows the following rules to co-exist:

<PRE>
  A:link { color: red }      /* The :link pseudo-class */
  A.link { color: green }    /* In HTML, class=link */
  A#link { color: blue }     /* In HTML, id=link */
</PRE>

<P>Since a link may have class="link", id="link", and belong to the
pseudo-class :link simultaneously (i.e., be unvisited), user agents
must resolve the colliding rules. User agents must do so according to
the <a href="./cascade.html#cascading-order">cascading order</a>
defined in the section on the cascade.

</BODY>
</html>
