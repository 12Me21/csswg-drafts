<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html version="-//W3C//DTD HTML 4.0//EN" lang="en">
<!-- $Id: tables.src,v 1.10 1997-09-24 09:57:04 bbos Exp $ -->
<head>
<meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">
<title>Tables</title>
<link href="ui.html" rel="next">
<link href="lists.html" rel="previous">
<link href="style/default.css" rel="STYLESHEET" type="text/css">
</head>
<body>
<h1 align="center"><a name="visual-tables">Tables</a></h1>

<p>Tables are used to show the relations between pieces of data, by
arranging them into labeled rows and columns. CSS2 assumes that the
data is already structured as a table, since its facilities for
rearranging elements are very limited.</p>

<p>Most of the CSS properties apply to table elements in the same
manner they apply block-level elements. However, due to different
constraints on the size and position of cells, some properties behave
differently for tables. A few properties apply <em>only</em> to
tables.</p>

<h2>Table layout</h2>

<p>A table is made up of one table element, several columns possibly
grouped into column groups, and several rowgroups, containing rows,
which in turn contain cells. (For speech style sheets, the cells are
further subdivided into header and data cells.) The spatial layout is
governed by a grid. All boxes that make up the table have to align
with the grid.</p>

<p>One can think of a table as built from six layers. Each layer hides
the lower layers from view, unless it is transparent (or has
transparent parts). See the figure.</p>

<p><img src="images/tbl-layers.gif" alt="schema of table layers"></p>

<ol>
<li>
<p>The lowest layer is a single plane, representing (the background
of) the table box itself. (Note that like all boxes, it may be
transparent).</p>
</li>
<li>
<p>The next layer contains (the backgrounds of) the column groups. The
columns groups are as tall as the table, but they need not cover the
whole table horizontally.</p>
</li>
<li>
<p>On top of the column groups are the areas representing the column
boxes. Like column groups, columns are as tall as the table, but need
not cover the whole table horizontally.</p>
</li>
<li>
<p>Next is the layer containing the row groups. Each row group is as
wide as the table. Together, the row groups completely cover the table
from top to bottom.</p>
</li>
<li>
<p>The last but one layer contains the rows. The rows also cover the
whole table.</p>
</li>
<li>
<p>The topmost layer contains the cells themselves, and the borders in
between them.</p>
</li>
</ol>

<p>All boxes are rectangular and are aligned with the grid: they
occupy a whole number of grid cells, determined according to the
following rules.</p>

<p>Columns are placed next to each other in the order they occur. Each
one occupies the number of grid columns given by its <span
class="propinst-column-span">'column-span'</span> property. A column
group occupies the same columns as the columns contained in it. [Is
this true? BB] The first column may be either on the left or on the
right, depending on the value of the <span class="propinst-direction">'direction'</span> property of the
table.</p>

<p>Each row box occupies one row of grid cells. Together, the row
boxes fill the table from top to bottom in the order they occur in the
source document. A row group occupies the same grid cells as the rows
inside the row group.</p>

<p>Each cell occupies a rectangle of <span
class="propinst-column-span">'column-span'</span> grid cells wide and
<span class="propinst-row-span">'row-span'</span> grid cells high. The
top row of this rectangle of grid cells must be in the row occupied by
the cell's parent. The rectangle must be as far to the left as
possible, but may not overlap with any other cell, and must be to the
right of all cells in the same row that are earlier in the source
document. (If the <span class="propinst-direction">'direction'</span>
of the table is 'right-to-left', interchange "left" and "right" in the
previous sentence.) [HTML allows some parts of cells to overlap, but
is hard to see a use for this.  Should we nevertheless allow this?
BB]</p>

<p>Cells are <span class="propinst-row-span">'row-span'</span> high only if there are enough rows: a cell
cannot extend below the last row box, it is made shorter until it
fits.</p>

<p>Note that there may be "holes" left between the cells. These holes
are transparent, and the lower layers of the table are visible through
them. Example:</p>

<div class="example">
<pre>
TABLE {background: #ff0} TD {background: red; border: double black}
... &lt;TABLE&gt; &lt;TR&gt;&lt;TD&gt; 1 &lt;TD rowspan=2&gt; 2
&lt;TD&gt; 3 &lt;TD&gt; 4 &lt;TR&gt;&lt;TD colspan=2&gt; 5
&lt;/TABLE&gt;
</pre>
</div>

<p><img src="images/tbl-empty.gif" alt='table with a "hole" in lower
left corner'></p>

<h4><a name="propdef-column-span">'column-span'</a></h4>

<!-- #include src=properties/column-span.srb -->

<p>How many columns a cell spans. A cell box occupies a rectangle of
<span class="propinst-column-span">'column-span'</span> by <span
class="propinst-row-span">'row-span'</span> grid cells in a table. An example of its
use is:</p>

<div class="example">
<pre>
[COLSPAN] {column-span: attr(COLSPAN)}
</pre>
</div>

<p>This rule is in the recommended <a href="sample.html">default (UA)
style sheet</a> for HTML 4.0.</p>
</div>

<h4><a name="propdef-row-span">'row-span'</a></h4>

<!-- #include src=properties/row-span.srb -->

<h4><a name="propdef-direction">'direction'</a></h4>

<!-- #include src=properties/direction.srb -->

<p>Move to section "inline layout" ?]</p>

<h2>Computing widths and heights</h2>

<p>The prinicple for determining the width of each column is as
follows:</p> 

<ol>
<li><p>The width is determined by the <span class="propinst-width">'width'</span> property of the column
box.</p></li>
<li>However, if there
is no column box, the width is given by the first cell in the column.
<li>If the value of <span class="propinst-width">'width'</span> for
the first cell in the column
is 'auto', the UA finds the "optimal" width of the column,
based on some heuristics.</li></li></li>
</ol>
 
<p>More details are given below.</p>

<p>The width of the table is given by its <span class="propinst-width">'width'</span> property. If that is 'auto', the
width is the sum of the column widths. More precisely: the sum of the
columns and the borders between them. See <a href="#border-placement">"Placement of the borders"</a> below.</p>

<p>Finding the optimal width is complicated. In many cases, what is
optimal is a matter of taste. CSS therefore doesn't define what the
optimal width of each column is; a UA is free to use whatever
heuristics is has, and is also free to prefer speed over precision.
There are a few implementation hints in chapter [???].</p>

<p>The width computation is complicated by cells that span columns and
by widths that are specified as percentages. The problem of finding
the widths can  be regarded as a constraint resolution system, that
may be over- or under-constrained.</p>

<p>A percentage is relative to the table width. If the table's width
is <span class="value-inst-auto">'auto'</span>, a percentage
represents a constraint on the columnn's width, which a UA should try
to satisfy. (Obviously, this is not always possible: if the column's
width is '110%', the constraint cannot be satisfied inside a table
whose <span class="propinst-width">'width'</span> is <span
class="value-inst-auto">'auto'</span>.)</p>

<p>A cell that spans columns, provides a constraint on the sum of the
widths of the columns it spans.</p>

<p>If a cell's content doesn't "fit" the width of the column, the
<span class="propinst-overflow">'overflow'</span> property determines
what happens to it. Similarly, if the <span class="propinst-width">'width'</span> of the table is not
'auto', and the sum of the columns is not equal to the table's width,
the <span class="propinst-overflow">'overflow'</span> property of the table determines what happens.</p>

<h2><a name="border-placement">Placement of the borders</a></h2>

<p>For block-level and inline elements, the position of the border
relative to the content of the elemenbt is determined by the margin
and the padding. But in a table, the positions of the borders are
constrained by the fact that they have to line up from one row to the
next and from one column to the next.</p>

<p>The borders are centered on the grid lines between the cells. A
renderer has to find a consistent rule for rounding off in the case of
an odd number of discrete units (screen pixels, printer dots).</p>

<p>The diagram below shows how the width of the table, the widths of
the borders, the padding and the cell width interact. Their relation
is given by the following equation, which holds for every row of the
table:</p>

<blockquote>
<p><var>table-width</var> = <var>border-width</var><sub>0</sub> +
<var>padding-left</var><sub>1</sub> + <var>width</var><sub>1</sub> +
<var>padding-right</var><sub>1</sub> +
<var>border-width</var><sub>1</sub> +
<var>padding-left</var><sub>2</sub> +...+
<var>padding-right</var><sub><var>n</var></sub> +
<var>border-width</var><sub><var>n</var></sub></p>
</blockquote>

<p>Here <var>n</var> is the number of cells in the row, and
<var>border-width</var><sub><var>i</var></sub> refers to the border
between cells <var>i</var> and <var>i</var> + 1.</p>

<p><img src="images/tbl-width.gif" alt="Schema showing the widths of
cells and borders and the padding of cells"></p>

<p>Note that for a table element, the width includes the border, and
that a table doesn't have a padding. It does have a margin,
however.</p>

<h2>Conflict resolution for borders</h2>

<p>The style of the borders between the cells is found by comparing
the border properties of all the boxes (cells, columns, the table
itself, etc.) that meet at that border. Columns and rows can also have
borders, but they are only drawn when they coincide with a cell
border.</p>

<p>To find the border style at each side of a grid cell, the following
properties have to be compared:</p>

<ol>
<li>
<p>Those of the one or two cells that have an edge here. Less than two
can occur at the edge of the table, but also at the edges of "holes"
(onuccupied grid cells).</p>
</li>
<li>
<p>Those of the columnns that have an edge here.</p>
</li>
<li>
<p>Those of the column groups that have an edge here.</p>
</li>
<li>
<p>Those of the rows that have an edge here.</p>
</li>
<li>
<p>Those of the row groups that have an edge here.</p>
</li>
<li>
<p>Those of the table, if this is the edge of the table.</p>
</li>
</ol>

<p>This will give between 0 and 8 <span class="propinst-border">'border'</span> values. Each value is made
up of a <span class="propinst-border-width">'border-width'</span>,
<span class="propinst-border-color">'border-color'</span> and <span
class="propinst-border-style">'border-style'</span>. The border
with the largest width will be drawn. If there are two or more with
the same width, but different style, then the one with a style near
the start of the following list will be drawn:</p>

<blockquote>
<p>'blank', 'double', 'solid', 'dashed', 'dotted', 'ridge', 'groove',
'none'</p>
</blockquote>

<p>If the style is 'outset', it will be drawn as 'ridge' instead, and
'inset' will be drawn as 'groove'.</p>

<p>If the borders only differ in color, a color different from the
<span class="propinst-color">'color'</span> property of the two cells on either side will be preferred
over a color that only differs from one of the cells, which in turn
will be chosen over a border that doesn't differ in color from the
cells.</p>

<p>If none of these rules determine the color of the border, the UA is
free to choose one of the colors.</p>

<p>Here is an example:</p>

<div class="example">
<pre>
TD.blue {border: medium solid blue} TD.thick {border: thick solid red}
TD.double {border: thick double black} TR {border: medium dotted
green}
</pre>
</div>

<p>with this document:</p>

<div class="example">
<pre>
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;1&lt;td class="blue"&gt;2&lt;td&gt;2
&lt;tr&gt;&lt;td&gt;4&lt;td class="thick"&gt;5&lt;td&gt;6
&lt;tr&gt;&lt;td&gt;7&lt;td class="double"&gt;8&lt;td>9
&lt;/table>
</pre>
</div>

<p>This will be the result:</p>

<p><img src="images/tbl-border.gif" alt="Table with different border
styles"></p>

<h2>Properties for columns and rows</h2>

<p>Only four properties apply to a column box or column-group box:
<span class="propinst-border">'border'</span>, <span
class="propinst-background">'background'</span>, <span
class="propinst-width">'width'</span>, and <span
class="propinst-column-span">'column-span'</span>. The first two are
actually shorthand properties, so all the border properties and all
the background properties apply.</p>

<p>Only <span class="propinst-border">'border'</span> and <span
class="propinst-background">'background'</span> apply to a row or
row-group. But note that you can set inherited properties on rows and
row-groups, and they will be inherited by the cells.</p>

<h2>Vertical alignment of cells in a row</h2>

<p>The cells in a row are aligned somewhat like letters on a line.
Each cell, or rather each cell's content, has a baseline, a top, a
middle and a bottom, and so does the row itself. The value of the
<span class="propinst-vertical-align">'vertical-align'</span> property
of the cells determines on which of these lines they are aligned:</p>

<dl>
<dt>baseline</dt>
<dd>
<p>the baseline of the cell is put at the same height as the baseline
of the row (see below for the definition of baselines of cells and
rows)</p>
</dd>
<dt>top</dt>
<dd>
<p>the top of the cell is aligned with the top of the row</p>
</dd>
<dt>bottom</dt>
<dd>
<p>the bottom of the cell is aligned with the bottom of the row</p>
</dd>
<dt>middle</dt>
<dd>
<p>the center of the cell is aligned with the center of the row</p>
</dd>
<dt>sub, super, text-top, text-bottom</dt>
<dd>
<p>these values do not apply to cells; the cell is aligned at the
baseline instead</p>
</dd>
</dl>

<p>The baseline of a cell is the baseline of the first line of text in
the cell. If there is no text, the baseline is the baseline of
whatever object is displayed in the cell, or, if it has none, the
bottom of the cell. The maximum distance between the top of the cell
and the baseline over all cells that have 'vertical-align:baseline' is
used to set the baseline of the row. Here is an example:</p>

<p><img src="images/cell-align.gif" alt="Example of vertically
aligning the cells"></p>

<p>Cells 1 and 2 are aligned at their baselies. Cell 2 has the largest
height above the baseline, so that determines the baseline of the row.
Note that if there is no cell aligned at its baseline, the row will
not have (not need) a baseline.</p>

<p>To avoid ambiguous situations, the alignment of cells proceeds in a
certain order. First the cells that are aligned on their baseline are
positioned. This will establish the baseline of the row. Next the
cells with alignment 'top' are positioned.</p>

<p>The row now has a top, possibly a baseline, and a provisional
height, which is the distance from the top to the lowest bottom of the
cells positioned so far. (See conditions on the cell padding
below.)</p>

<p>If any of the remaining cells, those aligned at the bottom or the
middle, have a height that is larger than the current height of the
row, the height of the row will be increased to the maximum of those
cells, by lowering the bottom.</p>

<p>Finally the remaining cells are positioned.</p>

<p>The area between the cell content and the border is part of the
cell's padding. The padding at the top and bottom of each cell after
positioning must be at least as large as the <span
class="propinst-padding">'padding'</span> property
specifies. The height of the row must be as small as possible without
violating this rule.</p>

<h2>Horizontal alignment of cells in a column</h2>

<h2>Table captions</h2>

<h4><a name="propdef-caption-side">'caption-side'</a></h4>

<!-- #include src=properties/caption-side.srb -->

<h2>Floating elements inside cells</h2>

<p>... stay inside the cell? </p>

<h2>Generating speech</h2>

<h4><a name="propdef-speak-header-cell">'speak-header-cell'</a></h4>

<!-- #include src=properties/speak-header-cell.srb -->

<p>When a table is spoken by a speech generator, the relation between
the data cells and the header cells must be expressed in a different
way than by horizontal and vertical alignment. Some speech browsers
may allow a user to move around in the 2-dimensional space, thus
giving them the opportunity to map out the spatially represented
relations. When that is not possible, the style sheet must specify at
which points the headers are spoken.</p>

<p>CSS supports two possibilities: the headers are spoken before every
cell, or only before a cell when that cell is associated with a
different header than the previous cell.</p>

<p>It is assumed that a speech UA analyzes the table as specified in
the HTML 4.0 specification, to find for each data cell the header
cells with which it is associated. In summary, the algorithm is to go
up in the column and find all header cells, and to go towards the
start of the row to find all header cells there. If a data cell is
found above a header cell, then the search for header cells in the
column stops there. Similarly, if a data cell is found in front of a
header cell, the search  in that row stops.</p>

<p>Since sometimes header cells are not put in the column or row to
which they apply (see e.g., the cells "San Jose" and "Seattle" in the
example below), an explicit association using the AXIS and AXES
attributes must be made. The example below shows the required
mark-up</p>

<div class=example>

<p><img src="images/table1.gif" alt="image of a table created in Word"></p>

<p>This presents the money spent on meals, hotels and transport in two
locations (San Jose and Seattle) for successive days. Conceptually,
you can think of the table in terms of a n-dimensional space. The axes
of this space are: location, day, category and subtotal. Some cells
define marks along an axis while others give money spent at points
within this space. The HTML markup for this table is:</p>

<pre>
&lt;TABLE&gt;
&lt;CAPTION&gt;
  Travel Expense Report
&lt;/CAPTION&gt;
&lt;TR&gt;
  &lt;TH&gt;&lt;/TH&gt;
  &lt;TH&gt;Meals&lt;/TH&gt;
  &lt;TH&gt;Hotels&lt;/TH&gt;
  &lt;TH&gt;Transport&lt;/TH&gt;
  &lt;TH&gt;subtotal&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axis="san-jose"&gt;San Jose&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axes="san-jose"&gt;25-Aug-97&lt;/TH&gt;
  &lt;TD&gt;37.74&lt;/TD&gt;
  &lt;TD&gt;112.00&lt;/TD&gt;
  &lt;TD&gt;45.00&lt;/TD&gt;
  &lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axes="san-jose"&gt;26-Aug-97&lt;/TH&gt;
  &lt;TD&gt;27.28&lt;/TD&gt;
  &lt;TD&gt;112.00&lt;/TD&gt;
  &lt;TD&gt;45.00&lt;/TD&gt;
  &lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axes="san-jose"&gt;subtotal&lt;/TH&gt;
  &lt;TD&gt;65.02&lt;/TD&gt;
  &lt;TD&gt;224.00&lt;/TD&gt;
  &lt;TD&gt;90.00&lt;/TD&gt;
  &lt;TD&gt;379.02&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axis="seattle"&gt;Seattle&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axes="seattle"&gt;27-Aug-97&lt;/TH&gt;
  &lt;TD&gt;96.25&lt;/TD&gt;
  &lt;TD&gt;109.00&lt;/TD&gt;
  &lt;TD&gt;36.00&lt;/TD&gt;
  &lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axes="seattle"&gt;28-Aug-97&lt;/TH&gt;
  &lt;TD&gt;35.00&lt;/TD&gt;
  &lt;TD&gt;109.00&lt;/TD&gt;
  &lt;TD&gt;36.00&lt;/TD&gt;
  &lt;TD&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH axes="seattle"&gt;subtotal&lt;/TH&gt;
  &lt;TD&gt;131.25&lt;/TD&gt;
  &lt;TD&gt;218.00&lt;/TD&gt;
  &lt;TD&gt;72.00&lt;/TD&gt;
  &lt;TD&gt;421.25&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
  &lt;TH&gt;Totals&lt;/TH&gt;
  &lt;TD&gt;196.27&lt;/TD&gt;
  &lt;TD&gt;442.00&lt;/TD&gt;
  &lt;TD&gt;162.00&lt;/TD&gt;
  &lt;TD&gt;800.27&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
</pre>

<p>By providing the data model in this way, authors make it
possible for speech enabled-browsers to explore the table in
rich ways, e.g. each cell could be spoken as a list, repeating the
applicable headers before each data cell:</p>

<pre>
  San Jose, 25-Aug-97, Meals:  37.74
  San Jose, 25-Aug-97, Hotels:  112.00
  San Jose, 25-Aug-97, Transport:  45.00
 ...
</pre>

<p>The browser could also speak the headers only when they change:</p>

<pre>
San Jose, 25-Aug-97, Meals: 37.74
    Hotels: 112.00
    Transport: 45.00
  26-Aug-97, Meals: 27.28
    Hotels: 112.00
...
</pre>
</div>

<p>The 'speak-header-cell' property of a header cell determines when
it is spoken: before every data cell, or only when the previous cell
spoken wasn't associated with this header.</p>

<h2>Table implementation notes</h2>

<p><em>[Move to appendix]</em></p>

<p>[Minimum/maximum]</p>

</body>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/html.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
