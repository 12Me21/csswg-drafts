<!DOCTYPE HTML SYSTEM "http://www.w3.org/TR/WD-html40/sgml/HTML4.dtd">
<html version="-//W3C//DTD HTML 4.0//EN" lang="en">
<!-- $Id: tables.src,v 1.2 1997-09-22 15:22:16 bbos Exp $ -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Tables</title>
<link href="ui.html" rel="next">
<link href="lists.html" rel="previous">
<link href="style/default.css" rel="STYLESHEET" type="text/css">
</head>
<body>
<h1><a name="visual-tables">Tables</a></h1>

<p>Tables are used to show the relations between pieces of data, by
arranging them into labeled rows and columns. CSS2 assumes that the
data is already structured as a table, since its facilities for
rearranging elements are very limited.</p>

<p>Most of the CSS properties apply to table elements as they do to
block-level elements. Some properties have limitations, because there
are different constraints on the size and position of cells than on
normal block elements. A few properties apply <em>only</em> to
tables.</p>

<h2>Table layout</h2>

<p>A table is made up of one table element, several columns possibly
grouped into column groups, and several rowgroups, containing rows,
which in turn contain cells. (For speech style sheets, the cells are
further subdivided into header and data cells.) The spatial layout is
governed by a grid. All boxes that make up the table have to align
with the grid.</p>

<p>One can think of a table as built from six layers. Each layer hides
the lower layers from view, unless it is transparent (or has
transparent parts).</p>

<ol>
<li>
<p>The lowest layer is a single plane, representing (the background
of) the table box itself. (Note that like all boxes, it may be
transparent).</p>
</li>
<li>
<p>The next layer contains (the backgrounds of) the column groups. The
columns groups are as high as the table, but they need not cover the
whole table horizontally.</p>
</li>
<li>
<p>On top of the column groups are the areas representing the column
boxes. Like column groups, columns are as high as the table, but need
not cover the whole table horizontally.</p>
</li>
<li>
<p>Next is the layer containing the row groups. Each row group is as
wide as the table. Together, the row groups completely cover the table
from top to bottom.</p>
</li>
<li>
<p>The last but one layer contains the rows. The rows also cover the
whole table.</p>
</li>
<li>
<p>The topmost layer contains the cells themselves, and the borders in
between them.</p>
</li>
</ol>

<p>All boxes are rectangular and are aligned with the grid: they
occupy a whole number of grid cells. The following rules determine
which.</p>

<p>Columns are put next to each other in the order they occur. Each
occupies the number of grid columns given by its <span
class="propinst">'column-span'</span> property. A column group
occupies the same columns as the columns contained in it. [Is this
true? BB] The first column may be either on the left or on the right,
depending on the value of the <span
class="propinst">'direction'</span> property of the table.</p>

<p>Each row box occupies one row of grid cells. The rows fill the
table from top to bottom in the order they occur in the source
document. A row group occupies the same grid cells as the rows inside
the row group.</p>

<p>Each cell occupies a rectangle of <span
class="propinst">'column-span'</span> grid cells wide and <span
class="propinst">'row-span'</span> grid cells high. The top row of
this rectangle of grid cells must be in the row occupied by the cell's
parent. The rectangle must be as far to the left as possible, but may
not overlap with any other cell, and must be to the right of all cells
in the same row that are earlier in the source document. (If the <span
class="propinst">'direction'</span> of the table is 'right-to-left',
interchange "left" and "right" in the previous sentence.) [HTML allows
some parts of cells to overlap, but is hard to see a use for this.
Should we nevertheless allow this? BB]</p>

<p>Cells are 'row-span' high only if there are enough rows: a cell
cannot extend below the last row box, it is made shorter until it fits.</p>

<p>Note that there may be "holes" left between the cells. These holes
are transparent, and the lower layers of the table are visible through
them.</p>

<h2>Computing widths and heights</h2>

<p>The prinicple for determining the width of each column is as
follows: the width is determined by the <span
class="propinst">'width'</span> property of the column box; if there
is no column box, the width is given by the first cell in the column;
if that is 'auto', the UA finds the "optimal" width of the column,
based on some heuristics. More details are given below.</p>

<p>The width of the table is given by its <span
class="propinst">'width'</span> property. If that is 'auto', the width
is the sum of the column widths. More precisely: the sum of the
columns and the borders between them. See <a
href="#border-placement">"Placement of the borders"</a> below.</p>

<p>Finding the optimal width is complicated. In many cases, what is
optimal is a matter of taste. CSS therefore doesn't define what the
optimal width of each column is; a UA is free to use whatever
heuristics is has, and is also free to prefer speed over precision.
There are a few implementation hints in chapter [???].</p>

<p>The width computation is complicated by cells that span columns and
by widths that are specified as percentages. The problem of finding
the widths can  be regarded as a constraint resolution system, that
may be over- or under-constrained.</p>

<p>A percentage is relative to the table width. If the table's width
is 'auto', a percentage represents a constraint on the columnn's
width, which a UA should try to satisfy. (Obviously, this is not
always possible: if the column's width is '110%', the constraint
cannot be satisfied inside a table whose 'width' is 'auto'.)</p>

<p>A cell that spans columns, provides a constraint on the sum of the
widths of the columns it spans.</p>

<p>If a cell's content doesn't "fit" the width of the column, the
<span class="propinst">'overflow'</span> property determines what
happens to it. Similarly, if the 'width' of the table is not 'auto',
and the sum of the columns is not equal to the table's width, the
'overflow' property of the table determines what happens.</p>

<h2><a name="border-placement">Placement of the borders</a></h2>

<h2>Conflict resolution for borders</h2>

<h2>Properties for columns</h2>

<h2>Vertical alignment of cells in a row</h2>

<h2>Horizontal alignment of cells in a column</h2>

<h2>Table captions</h2>

<p>['caption-side']</p>

<h2>Floating elements inside cells</h2>

<p>... stay inside the cell? </p>

<h2>Generating speech</h2>

<p>[speak-header-cell]</p>

<h2>Table implementation notes</h2>

<p><em>[Move to appendix]</em></p>

<p>[Minimum/maximum]
</body>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/html.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->
