<!DOCTYPE HTML SYSTEM "http://www.w3.org/TR/WD-html40/sgml/HTML4.dtd">
<html lang="en">
<!-- $Id: visudet.src,v 1.2 1997-08-06 18:22:40 ijacobs Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual flow model details</TITLE>
<LINK rel="next" href="colors.html">
<LINK rel="previous" href="flowobj.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">Visual flow model details</H1>
The following sections provide more detail about specific
positioning-related calculations.

<H2><a name="box-width">Box width calculations</a></H2>
<P>The width of a box generated by an element does not depend on the
width of its children nor on its content -- it is given by the
<span class="propinst-width">'width'</span> property.

<H3>Width of replaced elements</H3>
<P>The one exception to this rule concerns <span class="index-def"
title="replaced elements"><em>replaced elements</em></span>, i.e.,
elements whose markup is replaced by other content (e.g., the IMG
element in HTML is replaced by an image). The width of a box generated
by a replaced element is given by the <span
class="propinst-width">'width'</span> property. If the value of the
<span class="propinst-width">'width'</span> property is 'auto', the
intrinsic width is used as the width of the element. If a value other
than 'auto' is specified in the style sheet, this value is used and
the replaced element is resized accordingly (the resize method will
depend on the media type). 

<P> Replaced elements can be either block-level or inline.

<!-- [Today, width calculation of absolute elements differs.] -->

<DIV class="propdef">
<H4 class=propname>
    <a name="propdef-width">
       <span class="index-def" title="'width', definition of">
       'width'</span></a></H4>
<TABLE class="propinfo"><TR><TH align="right">Property name:<TD>width</TR>
<TR><TH align="right">Value:<TD><span class="index-inst"
title="&lt;length&gt;"><span
class="value-inst-length">&lt;length&gt;</span></span> | <span
class="index-inst" title="&lt;percentage&gt;"><span
class="value-inst-percentage">&lt;percentage&gt;</span></span> | auto</TR>
<TR><TH align="right">Initial:<TD>auto</TR>
<TR><TH align="right">Applies to:<TD>block-level and replaced elements</TR>
<TR><TH align="right">Inherited:<TD>no</TR>
<TR><TH align="right">Percentage values:<TD>refer to parent element's
width</TR> 
</TABLE>
</DIV>

<P> This property can be applied to text elements, but it is most
useful with replaced elements such as images. The width is to be
enforced by scaling the image if necessary. When scaling, the aspect
ratio of the image is preserved if the <span
class="propinst-height">'height'</span> property is 'auto'.

<P> Negative values are not allowed.

<div class="example"><P>
For example:

<PRE>
  IMG.icon { width: 100px }
</PRE>

<P> If the <span class="propinst-width">'width'</span> and <span
class="propinst-height">'height'</span> of a replaced element are both
'auto', these properties will be set to the intrinsic dimensions of
the element.

<P>See the section on the <a href="flowobj.html#box-model>the box
model</a> for a description of the relationship between this property
and the margin and padding.

<H2><a name="box-height">Box height calculations</a></H2>
<H3>Box height</H3>
<!--
     The (vertical) height is the minimal height necessary to include
    the vertical content of the element and that of all its flowed
    children. This is the height necessary *before* any relative
    offset of children. One exception: the height of an element is set
    with the 'height' property. 
-->
<P> The width of the margin on non-floating block-level elements
specifies the minimum distance to the edges of surrounding boxes. Two
or more adjoining vertical margins (i.e., with no border, padding or
content between them) are collapsed to use the maximum of the margin
values. In most cases, after collapsing the vertical margins the
result is visually more pleasing and closer to what the designer
expects. In the example above, the margins between the two LI elements
are collapsed by using the maximum of the first LI element's <span
class="propinst-margin-bottom">'margin-bottom'</span> and the second LI element's
<span class="propinst-margin-top">'margin-top'</span>.  Similarly, if the padding
between the UL and the first LI element (the "E" constant) had
been zero, the margins of the UL and first LI elements would have been
collapsed.


<P> In the case of negative margins, the absolute maximum of the
negative adjoining margins is deducted from the maximum of the
positive adjoining margins. If there are no positive margins, the
absolute maximum of the negative adjoining margins is deducted from
zero.

  <H4>
    <A NAME="height">5.5.24 &nbsp;&nbsp; 'height'</A>
  </H4>
  <P>
  <EM>Value:</EM> &lt;length&gt; | auto <BR>
  <EM>Initial:</EM> auto<BR>
  <EM>Applies to:</EM> block-level and replaced elements<BR>
  <EM>Inherited:</EM> no<BR>
  <EM>Percentage values:</EM> N/A<BR>
  <P>
  This property can be applied to text, but it is most useful with replaced
  elements such as images. The height is to be enforced by scaling the image
  if necessary. When scaling, the aspect ratio of the image is preserved if
  the 'width' property is 'auto'.
  <P>
  Example:
  <PRE>
  IMG.icon { height: 100px }
</PRE>
  <P>
  If the 'width' and 'height' of a replaced element are both 'auto', these
  properties will be set to the intrinsic dimensions of the element.
  <P>
  If applied to a textual element, the height can be enforced with e.g. a
  scrollbar.
  <P>
  Negative values are not allowed.
  <P>
  <EM>CSS1 core:</EM> UAs may ignore the 'height' property (i.e., treat it
  as 'auto') if the element is not a replaced element.



<H2><a name="line-height">Line height calculations</a></H2>
<P> All elements have a <span class="propinst-line-height">'line-height'</span>
property that, in principle, gives the total height of a line of
text. Space is added above and below the text of the line to arrive at
that line height. For example, if the text is 12pt high and <span
class="propinst-line-height">'line-height'</span> is set to '14pt', an extra space
of 2pt is added, namely 1pt above and 1pt below the line. Empty
elements influence these calculations just like elements with content.

<P> The difference between the font size and the <span
class="propinst-line-height">'line-height'</span> is called the <span
class="index-def" title="leading"><EM>leading</EM></span>. Half the
leading is called the <span class="index-def"
title="half-leading"><EM>half-leading</EM></span>. After formatting,
each line will form a rectangular <span class="index-def"
title="line-box"><EM>line-box</EM></span>.

<P> If a line of text contains sections with different <span
class="propinst-line-height">'line-height'</span> values (because there are inline
elements on the line), then each of those sections has its own
half-leading above and below. The height of the line-box is from the
top of the highest section to the bottom of the lowest one. Note that
the top and bottom do not necessarily correspond to the tallest
element, since elements can be positioned vertically with the 
<span class="propinst-vertical-align">'vertical-align'</span> property. To form a
paragraph, each line-box is stacked immediately below the previous
line.

<P> Note that any padding, border or margin above and below
non-replaced inline elements does not influence the height of the
line. In other words: if the <span
class="propinst-line-height">'line-height'</span> is too small for the chosen
padding or border, it will overlap with text on other lines.

<P> Replaced elements (e.g., images) on the line can make the line-box
bigger, if the top of the replaced element (i.e., including all of its
padding, border and margin) is above the tallest text section, or if
the bottom is below the lowest.

<P> In the normal case, when there is only one value of <span
class="propinst-line-height">'line-height'</span> throughout a paragraph, and no
tall images, the definition above will ensure that baselines of
successive lines are exactly <span
class="propinst-line-height">'line-height'</span> apart. This is important when
columns of text in different fonts have to be aligned, for example in
a table.

<P> Note that this doesn't preclude the text on two adjacent lines
from overlapping each other. The <span
class="propinst-line-height">'line-height'</span> may be smaller than the height
of the text, in which case the leading will be negative. This is
useful if you know that the text will contain no descenders (e.g.,
because it only contains uppercase), so the lines can be put closer
together.

<H2><a name="element-width">Element width calculation</a></H2>
<P> The horizontal position and size of a non-floating, block-level
element is determined by seven properties: <span
class="propinst-margin-left">'margin-left'</span>, <span
class="propinst-border-left">'border-left'</span>, <span
class="propinst-padding-left">'padding-left'</span>, <span
class="propinst-width">'width'</span>, <span
class="propinst-padding-right">'padding-right'</span>, <span
class="propinst-border-right">'border-right'</span>, and <span
class="propinst-margin-right">'margin-right'</span>. The sum of these seven is always
equal to the 'width' of the parent element.

<P> By default, the <span class="propinst-width">'width'</span> of an
element is 'auto'. If the element is not a replaced element, this
means that the <span class="propinst-width">'width'</span> is calculated by
the UA so that the sum of the seven properties mentioned above is
equal to the parent width. If the element is a replaced element, a
value of 'auto' for <span class="propinst-width">'width'</span> is
automatically replaced by the element's intrinsic width.

<P> Three of the seven properties can be set to 'auto': <span
class="propinst-margin-left">'margin-left'</span>, <span
class="propinst-width">'width'</span>, and <span
class="propinst-margin-right">'margin-right'</span>. For replaced elements, a value
of 'auto' on <span class="propinst-width">'width'</span> is replaced by the
intrinsic width, so for them there can only be two 'auto' values.

<P> The <span class="propinst-width">'width'</span> has a non-negative
UA-defined minimum value (which may vary from element to element and
even depend on other properties). If <span
class="propinst-width">'width'</span> goes below this limit, either because
it was set explicitly, or because it was 'auto' and the rules below
would make it too small, the value will be replaced with the minimum
value instead.

<P> If <EM>exactly one</EM> of <span
class="propinst-margin-left">'margin-left'</span>, <span
class="propinst-width">'width'</span>, or <span
class="propinst-margin-right">'margin-right'</span> is 'auto', the UA will assign
that property a value that will make the sum of the seven equal to the
parent's width.

<P> If <EM>none</EM> of the properties are 'auto', the value of
<span class="propinst-margin-right">'margin-right'</span> will be assigned 'auto'.

<P> If <EM>more than one</EM> of the three is 'auto', and one of them
is <span class="propinst-width">'width'</span>, than the others
(<span class="propinst-margin-left">'margin-left'</span> and/or <span
class="propinst-margin-right">'margin-right'</span>) will be set to zero and <span
class="propinst-width">'width'</span> will get the value needed to make the
sum of the seven equal to the parent's width.

<P> Otherwise, if both <span class="propinst-margin-right">'margin-right'</span>
and <span class="propinst-margin-right">'margin-right'</span> are 'auto', they will
be set to equal values. This will center the element inside its
parent.

<P> If 'auto' is set as the value for one of the seven properties in
an element that is inline or floating, it will be treated as if it
were set to zero.

<P> Unlike vertical margins, horizontal margins are not collapsed.


<H2><a name="overflow">Overflow</a></H2>
<!--
   Overflow and clipping

       Overflow must be considered when an element's content or that
       of its children exceeds the element's specified dimensions.

       [Note, may apply to relatively or absolutely positioned elements]
-->

<P>Normally, child boxes are positioned within the box of their
parent. However, a child box may extend horizontally beyond the
bounding box of its parent in the following situations: 

<ul>
<li>It is <a href="#floats">floated</a> and is too large for its
parent.
<li>It is <a href="#absolute-positioning">positioned absolutely</a>.
<li>It has <a href="#margin-properties">negative margins</a>.
</ul>

<p>The <span class="propinst-overflow">'overflow'</span> property is
used to specify the User Agent's behavior when the contents of an
absolutely positioned element exceed its declared bounds.

<P>The examples
below utilize the following stylesheet, which describes a simple 100
pixel box with a thin solid red border:

<p><PRE>#overlay {position: absolute; top: 50px; left: 50px; height: 100px;
          width: 100px; border: thin solid red;}</PRE></P>

Applied to an empty &lt;DIV&gt;, this would look something like:

<p><pre>
<font color="#ff0000">     +------------+
     |            |
     |            |
     |            |
     |            |
     |            |
     +------------+</font></pre></p>


First, let's consider the default value of 'overflow', which is 'visible'. This 
value indicates that all contents of an element should be rendered, even if these
contents exceed the declared width or height of the element. Consider a block of
long, preformatted text:

<div class="example"><P>
<PRE>&lt;P ID=overlay&gt;&lt;PRE&gt;Here is some long preformatted text.&lt;/PRE&gt;&lt;P&gt;
</PRE></p>
</div>

<p>With overflow set to 'visible', all of the text will
be visible even though it exceeds the declared width of the element. The
element will be made wider than its declared width, and any padding or border will
be rendered outside of this new width. The example might be
rendered something like:</p>

<p><pre><font color="#ff0000">+--------------------------------------+
|</font> Here is some long preformatted text. <font color="#ff0000">|
|                                      |
|                                      |
|                                      |
|                                      |
+--------------------------------------+</font></pre></p>

<p>Similarly, the height of the element will be extended should the rendered contents exceed
the declared height. Consider the following:</P>

<div class="example"><P>
<tt>&lt;DIV ID=overlay&gt;Here is a block of text that will
cause this element to exceed its declared height of 100 pixels.&lt;/DIV&gt;</tt></p>
<p>This division should be rendered something like this:
<p><pre><font color="#ff0000">+------------+
|</font> Here is a  <font color="#ff0000">|
|</font> block of t <font color="#ff0000">|
|</font> ext that w <font color="#ff0000">|
|</font> ill cause  <font color="#ff0000">|
|</font> this eleme <font color="#ff0000">|
|</font> nt to exce <font color="#ff0000">|
|</font> ed its dec <font color="#ff0000">|
|</font> lared heig <font color="#ff0000">|
|</font> ht of 100  <font color="#ff0000">|
|</font> pixels.    <font color="#ff0000">|
+------------+</font></pre></p>
</div>

<p>The 'hidden' value of the 'overflow' property indicates that any content which exceed the 
declared bounds of the element should not be rendered at all. The user will have no way to
view these "overflowed" contents. With 'overflow' set to 'hidden', the two examples above should
be rendered something like this:</p>

<div class="example"><P>
<pre>
<font color="#ff0000">+------------+
|</font> Here is so <font color="#ff0000">|
|            |
|            |
|            |
|            |
+------------+</font></pre></p>
</div>

<div class="example"><P>
<pre><font color="#ff0000">+------------+
|</font> Here is a  <font color="#ff0000">|
|</font> block of t <font color="#ff0000">|
|</font> ext that w <font color="#ff0000">|
|</font> ill cause  <font color="#ff0000">|
|</font> this eleme <font color="#ff0000">|
+------------+</font></pre></p>
</div>

<p>Another value for 'overflow' is 'auto', which indicates that the user agent
should provide for a scrolling mechanism when the contents overflow the bounds
of the element. Finally, a value of 'scroll' indicates that a scrolling 
mechanism should always be present, whether or not the contents exceed the 
element's bounds. If the user agent utilizes scrollbars, the
examples might look something like:</p>

<div class="example"></P>
<pre>
<font color="#ff0000">+------------+
|</font> Here is som<font color="#ff0000">|
|            |
|            |
|</font>____________<font color="#ff0000">|
|</font>|&lt;|X|    |&gt;|<font color="#ff0000">|
+------------+</font></pre></p>
</div>


<div class="example"></P>
<pre><font color="#ff0000">+------------+
|</font>Here is a |^<font color="#ff0000">|
|</font>block of  |-<font color="#ff0000">|
|</font>text that | <font color="#ff0000">|
|</font>will      |-<font color="#ff0000">|
|</font>cause this|v<font color="#ff0000">|
+------------+</font></pre></p>
</div>


<p><em>Value:</em> visible | hidden | scroll | auto<br>
<em>Initial:</em> visible<br>
<em>Applies to:</em> elements with the 'position' property of
type 'absolute'.<br>
<em>Inherited:</em> no<br>
<em>Percentage values:</em> N/A</p>

<p>'Overflow' determines what happens when an element's rendered
contents exceed its height or width.</p>

<p>A value of 'visible' indicates that the element's bounding box
should be enlarged enough to contain all of its rendered contents. 
In other words, its height or width can be made bigger than the 
declared value. Any padding or border will remain outside the rendered 
content. Any additional width will be added in the direction of primary
text flow, e.g. to the right side in left-to-right languages, while 
additional height will be added to the bottom.</p>

<p>A value of 'hidden' indicates that the element's contents should
be clipped to its height and width, and that no scrolling
mechanism should be provided. Padding and border will be applied to the
regular height and width of the element, as if its contents did not
exceed its bounds. Any contents that exceed the element's bounds will be
unavailable to the user.</p> 

<p>The behavior of the 'auto' value is UA-dependent, but should cause a 
scrolling mechanism to be invoked when the element's rendered contents 
exceed its bounds.</p>

<p>Finally, the 'scroll' value indicates that if the UA supports a 
visible scrolling mechanism, that mechanism should be displayed 
whether or not the element's rendered contents exceed its bounds.
This avoids any problem with scrollbars appearing and disappearing
in a dynamic environment.</P>

<p>Note: Even if 'overflow' is set to 'visible', contents may be
clipped to a UA's document window by the native operating
environment. In addition, the 'clip' property can cause otherwise
visible &quot;overflowed&quot; contents to be clipped.</p>


<H3>Clipping</h3>

<p><em>Value:</em> &lt;shape&gt; | auto<br>
<em>&lt;shape&gt;:</em> rect (&lt;top&gt; &lt;right&gt;
&lt;bottom&gt; &lt;left&gt;)<br>
<em>&lt;top&gt; &lt;right&gt; &lt;bottom&gt; &lt;left&gt;:</em>
auto | &lt;length&gt;<br>
<em>Initial:</em> auto<br>
<em>Applies to:</em> elements with the 'position' property of
type 'absolute'.<br>
<em>Inherited:</em> no<br>
<em>Percentage values:</em> N/A</p>

<p>Clipping alters the display of HTML, though it does not affect
how it is laid out. The clipping region defines what portion of the
element's physical representation is visible. It is computed by the 
intersection of the parent's clipping region with the value of the 
element's 'clip' property.</p>

<div class="note"><P>
<em>[<strong>Note.</strong>
We may redefine the clipping rectangle
to better fit within the CSS box-oriented formatting model, where each
coordinate is relative to its respective edge, rather than basing the
rectangle on a fixed origin. Specifying a top-left origin only works 
correctly for left-to-right languages.</em>]
</div>


<p>Lengths are specified with respect to the element's top-left corner. 
Negative values are permitted. When converted to pixel coordinates, the
bottom-right corner is excluded from the clipping rectangle. This
rule is necessary to permit the definition of zero-width or
zero-height rectangles.</p>

<p>Any length can be replaced by the value 'auto', which causes
the respective extent of the clipping rectangle to match the
element's extent in the given direction, including padding,
borders and child elements. The default value for the 'clip'
property causes the clip rectangle to encompass the entire
element. In effect, 'auto' provides for an infinite clipping
region.</p>

<p>For now, all clipping regions are rectangular. We anticipate
future extensions to permit non-rectangular clipping. </p>

<div class="note"><P>
<em><strong>Note.</strong>
If the clipping region exceeds the bounds of the UA's
document window, contents may be clipped to that window by the
native operating environment.
</em>
</div>



<H2><a name="presentation-position">Presentation and positioning</a></H2>
<!--
    display:none - act as though element doesn't exist.
    
    visibility:hidden - take element into account for positioning,
    but don't render. Visibility property will be on a scale, but
    today, on 0% and 100% specified.
-->
<p>The 'visibility' property determines whether or not an element
is initially displayed. In scripting environments, this property
can be dynamically modified to hide or show an element. Unlike '<a
href="http://www.w3.org/pub/WWW/TR/REC-CSS1#display">display:
none</a>', elements that are not visible still take up
space--they are simply rendered transparently. Example:</p>

<h5>Example 7</h5>

<pre>&lt;P&gt;Choose a suspect:&lt;/P&gt;
&lt;DIV ID=&quot;container1&quot; STYLE=&quot;position:relative&quot;&gt;
   &lt;IMG WIDTH=100 HEIGHT=100 SRC=&quot;suspect1.jpg&quot;&gt;
   &lt;P&gt;Name: Al Capone&lt;/P&gt;
   &lt;P&gt;Residence: Chicago&lt;/P&gt;
&lt;/DIV&gt;

&lt;DIV ID=&quot;container2&quot; STYLE=&quot;position:relative&quot;&gt;
   &lt;IMG WIDTH=100 HEIGHT=100 SRC=&quot;suspect2.jpg&quot;&gt;
   &lt;P&gt;Name: Lucky Luciano&lt;/P&gt;
   &lt;P&gt;Residence: New York&lt;/P&gt;
&lt;/DIV&gt;

&lt;FORM NAME=&quot;myForm&quot;&gt;
   &lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Capone&quot; onClick='show(&quot;container1&quot;);hide(&quot;container2&quot;)'&gt;
   &lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Luciano&quot; onClick='show(&quot;container2&quot;);hide(&quot;container1&quot;)'&gt;
&lt;/FORM&gt;</pre>

<p>Pressing either form button invokes a user-defined script
function that causes the corresponding element to become visible
and the other element to be hidden. Because the elements'
positioning is 'relative', they have no effect on the document's
layout. The HTML contained in each element is laid out within the
flow of the enclosing block, just as it normally is. A more
visually appealing version of the above might be designed using
overlapping 'absolute' positioned elements:</p>

<h5>Example 8</h5>

<pre>&lt;HEAD&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
&lt;!--
   #container1 { position: absolute; top: 2in; left: 2in; width: 2in}
   #container2 { position: absolute; top: 2in; left: 2in; width: 2in;
                 visibility: hidden; }
--&gt;
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;Choose a suspect:&lt;/P&gt;
&lt;DIV ID=&quot;container1&quot;&gt;
   &lt;IMG WIDTH=100 HEIGHT=100 SRC=&quot;suspect1.jpg&quot;&gt;
   &lt;P&gt;Name: Al Capone&lt;/P&gt;
   &lt;P&gt;Residence: Chicago&lt;/P&gt;
&lt;/DIV&gt;

&lt;DIV ID=&quot;container2&quot;&gt;
   &lt;IMG WIDTH=100 HEIGHT=100 SRC=&quot;suspect2.jpg&quot;&gt;
   &lt;P&gt;Name: Lucky Luciano&lt;/P&gt;
   &lt;P&gt;Residence: New York&lt;/P&gt;
&lt;/DIV&gt;

&lt;FORM NAME=&quot;myform&quot;&gt;
   &lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Capone&quot; onClick='show(&quot;container1&quot;);hide(&quot;container2&quot;)'&gt;
   &lt;INPUT TYPE=&quot;button&quot; VALUE=&quot;Luciano&quot; onClick='show(&quot;container2&quot;);hide(&quot;container1&quot;)'&gt;
&lt;/FORM&gt;</pre>

<p>In this example, 'container2' has the same origin as
'container1', and it occupies the same area. Note also that the
visibility property has been used to specify that 'container2' is
initially invisible. The scripted event handler of the 'Capone'
button can hide 'container1' and show 'container2'. Since the
containers occupy the same position, and are the same size, the
effect is that of one replacing the other.</p>
<p><em>Value:</em> inherit | visible | hidden <br>
<em>Initial:</em> inherit<br>
<em>Applies to:</em> all elements<br>
<em>Inherited:</em> if value is 'inherit'</p>

<p>Visibility determines the initial display state of an element,
but does not affect its layout. Elements that are hidden still
take up the same physical space as they would were they visible,
they are just rendered transparently. This differs from the
behavior of '<a
href="http://www.w3.org/pub/WWW/TR/REC-CSS1#display">display:
none</a>', in which the element is ignored, as if it were not
present in the document at all. Visibility can be used in a
scripting environment to dynamically display only one of several
elements which overlap one another.</p>

<H2>Dynamic positioning</H2>
<div class="note"><P>
<em><strong>Note.</strong>
Certain dynamic aspects of managing positioned elements, such
as hiding, displaying and movement can only be performed using an
external scripting language.
</em>
</div>

</BODY>
</HTML>

