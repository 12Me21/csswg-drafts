<!DOCTYPE HTML SYSTEM "http://www.w3.org/TR/WD-html40/sgml/HTML4.dtd">
<html lang="en">
<!-- $Id: visudet.src,v 1.9 1997-09-08 23:55:58 ian Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>Visual flow model details</TITLE>
<LINK rel="next" href="colors.html">
<LINK rel="previous" href="flowobj.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">Visual flow model details</H1>
The following sections provide more detail about specific
positioning-related calculations.

<H2><a name="box-width">Box content calculations</a></H2>
<P>The width of a box generated by an element does not depend on the
width of its children nor on its content -- it is given by the
<span class="propinst-width">'width'</span> property.

<H4><a name="propdef-width">'width'</a></H4>
<!-- #include src=properties/width.srb -->

<P> This property can be applied to text elements, but it is most
useful with replaced elements such as images. The width is to be
enforced by scaling the image if necessary. When scaling, the aspect
ratio of the image is preserved if the <span
class="propinst-height">'height'</span> property is 'auto'.

<P> Negative values are not allowed.

<div class="example"><P>
For example:

<PRE>
  IMG.icon { width: 100px }
</PRE>
</div>

<P> If the <span class="propinst-width">'width'</span> and <span
class="propinst-height">'height'</span> of a replaced element are both
'auto', these properties will be set to the intrinsic dimensions of
the element.

<H3>Relationship of width dimensions</H3>
<P><em>See the section on the <a href="flowobj.html#box-model">the box
model</a> for an illustration of the box model.</em>

<P> The intrinsic size of a block level
element is determined by seven properties: <span
class="propinst-margin-left">'margin-left'</span>, <span
class="propinst-border-left">'border-left'</span>, <span
class="propinst-padding-left">'padding-left'</span>, <span
class="propinst-width">'width'</span>, <span
class="propinst-padding-right">'padding-right'</span>, <span
class="propinst-border-right">'border-right'</span>, and <span
class="propinst-margin-right">'margin-right'</span>. 

<P>For elements in the flow, the sum of these seven is equal to the
<span class="propinst-width">'width'</span> of the parent element. For
elements not in the flow and replaced elements, the calculations are
given below.

<P> Three of the seven properties can be set to 'auto': <span
class="propinst-margin-left">'margin-left'</span>, <span
class="propinst-width">'width'</span>, and <span
class="propinst-margin-right">'margin-right'</span>. For replaced elements, a value
of 'auto' on <span class="propinst-width">'width'</span> is replaced by the
intrinsic width, so for them there can only be two 'auto' values.

<P> The <span class="propinst-width">'width'</span> has a non-negative
UA-defined minimum value (which may vary from element to element and
even depend on other properties). If <span
class="propinst-width">'width'</span> goes below this limit, either because
it was set explicitly, or because it was 'auto' and the rules below
would make it too small, the value will be replaced with the minimum
value instead.

<P> If <EM>exactly one</EM> of <span
class="propinst-margin-left">'margin-left'</span>, <span
class="propinst-width">'width'</span>, or <span
class="propinst-margin-right">'margin-right'</span> is 'auto', the UA will assign
that property a value that will make the sum of the seven equal to the
parent's width.

<P> If <EM>none</EM> of the properties are 'auto', the value of
<span class="propinst-margin-right">'margin-right'</span> will be assigned 'auto'.

<P> If <EM>more than one</EM> of the three is 'auto', and one of them
is <span class="propinst-width">'width'</span>, then the others
(<span class="propinst-margin-left">'margin-left'</span> and/or <span
class="propinst-margin-right">'margin-right'</span>) will be set to zero and <span
class="propinst-width">'width'</span> will get the value needed to make the
sum of the seven equal to the parent's width.

<P> Otherwise, if both <span class="propinst-margin-right">'margin-right'</span>
and <span class="propinst-margin-right">'margin-right'</span> are 'auto', they will
be set to equal values. This will center the element inside its
parent.

<P> If 'auto' is set as the value for one of the seven properties in
an element that is inline or floating, it will be treated as if it
were set to zero.

<P>Horizontal margins are not collapsed.

<H3>Width of absolutely positioned elements</H3>
<p>The width of an absolutely positioned elements may be specified using
the <span class="propinst-width">'width'</span> property. If the width
is not specified, the element will extend to immediately inside the
right inner edge of its enclosing element. If this places the right edge
of the element to the left of its left edge, the width is set to
zero.

<P>A percentage value for the <span
class="propinst-width">'width'</span> property is computed with
respect to the width of the parent element.

<H3><a name="replaced-width">Width of replaced elements</a></H3> 

<P>The width of <span class="index-def" title="replaced
elements"><em>replaced elements</em></span>, i.e., elements whose
markup is replaced by other content (e.g., the IMG element in HTML is
replaced by an image), is calculated as follows. The width of a box
generated by a replaced element is given by the <span
class="propinst-width">'width'</span> property. If the value of the
<span class="propinst-width">'width'</span> property is 'auto', the
intrinsic width is used as the width of the element. If a value other
than 'auto' is specified in the style sheet, this value is used and
the replaced element is resized accordingly (the resize method will
depend on the media type).

<P> Replaced elements can be either block-level or inline.

<H2><a name="box-height">Box height calculations</a></H2> 
<P>The height of a box is the minimal height necessary to include the
vertical content of the element and that of all its flowed
children. This is the height necessary *before* any relative offset of
children. 

<P>However, the height of an element may be set explicitly with the
<span class="propinst-height">'height'</span> property.

<H4><a name="propdef-height">'height'</a></H4>
<!-- #include src=properties/height.srb -->

<P> This property can be applied to text, but it is most useful with
replaced elements such as images. The height is to be enforced by
scaling the image if necessary. When scaling, the aspect ratio of the
image is preserved if the <span class="propinst-width">'width'</span>
property is 'auto'.

<div class="example"><P>
<PRE>
  IMG.icon { height: 100px }
</PRE>
</div>

<P> If the <span class="propinst-width">'width'</span> and <span
class="propinst-height">'height'</span> of a replaced element are both
'auto', these properties will be set to the intrinsic dimensions of
the element.

<P> If applied to a textual element, the height can be enforced by the
user interface (e.g., a scrollbar).

<P> Negative values are not allowed.

<P>user agents may ignore the
<span class="propinst-height">'height'</span> property (i.e., treat it
as 'auto') if the element is not a replaced element.

<H3><a name="collapsing-margins">Collapsing margins</a></H3>

<P> Two or more adjoining vertical margins (i.e., with no border,
padding or content between them) are collapsed to use the maximum of
the margin values. In most cases, after collapsing the vertical
margins the result is visually more pleasing and closer to what the
designer expects. In the example above, the margins between the two LI
elements are collapsed by using the maximum of the first LI element's
<span class="propinst-margin-bottom">'margin-bottom'</span> and the
second LI element's <span
class="propinst-margin-top">'margin-top'</span>.  Similarly, if the
padding between the UL and the first LI element (the "E" constant) had
been zero, the margins of the UL and first LI elements would have been
collapsed.

<P> In the case of negative margins, the absolute maximum of the
negative adjoining margins is deducted from the maximum of the
positive adjoining margins. If there are no positive margins, the
absolute maximum of the negative adjoining margins is deducted from
zero.

<H3>Height of absolutely positioned elements</H3>

<p>The height of an absolutely positioned elements may be specified using
the <span class="propinst-height">'height'</span> property. If the height
is not specified, it will be just enough to hold its contents and the
contents of its children.

<P>A percentage value for the <span
class="propinst-height">'height'</span> property is computed with
respect to the height of the parent element. However, specifying a
percentage value for <span class="propinst-height">'height'</span> if
the parent element's height is set to 'auto' has undefined behavior.

<H3>Height of replaced elements</H3>
The height of a replaced element is calculated the same with the 
<a href="#replaced-width">width is calculated</a>.

<H2><a name="line-height">Line height calculations</a></H2>
<P> All elements have a <span class="propinst-line-height">'line-height'</span>
property that, in principle, gives the total height of a line of
text. Space is added above and below the text of the line to arrive at
that line height. For example, if the text is 12pt high and <span
class="propinst-line-height">'line-height'</span> is set to '14pt', an extra space
of 2pt is added, namely 1pt above and 1pt below the line. Empty
elements influence these calculations just like elements with content.

<P> The difference between the font size and the <span
class="propinst-line-height">'line-height'</span> is called the <span
class="index-def" title="leading"><EM>leading</EM></span>. Half the
leading is called the <span class="index-def"
title="half-leading"><EM>half-leading</EM></span>. After formatting,
each line will form a rectangular <span class="index-def"
title="line-box"><EM>line-box</EM></span>.

<P> If a line of text contains sections with different <span
class="propinst-line-height">'line-height'</span> values (because
there are inline elements on the line), then each of those sections
has its own half-leading above and below. The height of the line-box
is from the top of the highest section to the bottom of the lowest
one. Note that the top and bottom do not necessarily correspond to the
tallest element, since elements can be positioned vertically with the
<span class="propinst-vertical-align">'vertical-align'</span>
property. To form a paragraph, each line-box is stacked immediately
below the previous line.

<P> Note that any padding, border or margin above and below
non-replaced inline elements does not influence the height of the
line. In other words: if the <span
class="propinst-line-height">'line-height'</span> is too small for the chosen
padding or border, it will overlap with text on other lines.

<P> Replaced elements (e.g., images) on the line can make the line-box
bigger, if the top of the replaced element (i.e., including all of its
padding, border and margin) is above the tallest text section, or if
the bottom is below the lowest.

<P> In the normal case, when there is only one value of <span
class="propinst-line-height">'line-height'</span> throughout a paragraph, and no
tall images, the definition above will ensure that baselines of
successive lines are exactly <span
class="propinst-line-height">'line-height'</span> apart. This is important when
columns of text in different fonts have to be aligned, for example in
a table.

<P> Note that this doesn't preclude the text on two adjacent lines
from overlapping each other. The <span
class="propinst-line-height">'line-height'</span> may be smaller than the height
of the text, in which case the leading will be negative. This is
useful if you know that the text will contain no descenders (e.g.,
because it only contains uppercase), so the lines can be put closer
together.

<H4><a name="propdef-line-height">'line-height'</a></H4>
<!-- #include src=properties/line-height.srb -->

<P> The property sets the distance between two adjacent lines'
baselines.

<P> When a <span class="index-inst" title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span>, the line
height is given by the font size of the current element multiplied by
the <span class="index-inst" title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span>. This differs
from a <span class="index-inst" title="&lt;percentage&gt;"><span
class="value-inst-percentage">&lt;percentage&gt;</span></span> value
in the way it inherits: when a <span class="index-inst"
title="&lt;number&gt;"><span
class="value-inst-number">&lt;number&gt;</span></span> value is
specified, child elements will inherit the factor itself, not the
resultant value (as is the case with <span class="index-inst"
	      title="&lt;percentage&gt;"><span
		class="value-inst-percentage">&lt;percentage&gt;</span></span> and other units).

<P> Negative values are not allowed.

<div class="example"><P>
The three rules in the example below have the same resultant line height:

<PRE>
  DIV { line-height: 1.2; font-size: 10pt }     /* number */
  DIV { line-height: 1.2em; font-size: 10pt }   /* length */
  DIV { line-height: 120%; font-size: 10pt }    /* percentage */
</PRE>
</div>

<P> A value of 'normal' sets the <span
class="propinst-line-height">'line-height'</span> to a reasonable
value for the element's font. It is suggested that UAs set the
'normal' value to be a number in the range of 1.0 to 1.2.

<!-- <length> added from frosting -->

<H4><a name="propdef-vertical-align">'vertical-align'</a></H4>
<!-- #include src=properties/vertical-align.srb -->

<P>The property affects the vertical positioning of the element. Some
	    of the possible values refer to the parent element:

  <DL>
    <DT>
      'baseline'
    <DD>
      align the baseline of the element (or the bottom, if the element doesn't
      have a baseline) with the baseline of the parent
    <DT>
      'middle'
    <DD>
      align the vertical midpoint of the element (typically an image) with the
      baseline plus half the x-height of the parent
    <DT>
      'sub'
    <DD>
      subscript the element. This value has no effect on the font size
	      of the element's text.
    <DT>
      'super'
    <DD>
      superscript the element. This value has no effect on the font size
	      of the element's text.
    <DT>
      'text-top'
    <DD>
      align the top of the element with the top of the parent element's font
    <DT>
      'text-bottom'
    <DD>
      align the bottom of the element with the bottom of the parent element's font
  </DL>

<P> Other possible values refer to the formatted line that
the element is a part of:

  <DL>
    <DT>
      'top'
    <DD>
      align the top of the element with the tallest element on the line
    <DT>
      'bottom'
    <DD>
      align the bottom of the element with the lowest element on the line
  </DL>

<P> Using the 'top' and 'bottom' alignment, unsolvable situations can
occur where element dependencies form a loop.

<P> Percentage values refer to the value of the <span
class="propinst-line-height">'line-height'</span> property of the
element itself. They raise the baseline of the element (or the bottom,
if it has no baseline) the specified amount above the baseline of the
parent.  Negative values are possible, e.g., a value of '-100%' will
lower the element so that the baseline of the element ends up where
the baseline of the next line should have been. This allows precise
control over the vertical position of elements (such as images that
are used in place of letters) that don't have a baseline.

<div class="note"><P>
<em><strong>Note.</strong> It is expected that a future version of CSS
will allow a <span class="index-inst" title="&lt;length&gt;"><span
class="value-inst-length">&lt;length&gt;</span></span> value for this
property.</em>
</div>

<H2><a name="floating-constraints">Floating constraints</a></H2>

<P> A floating element is positioned subject to the following
constraints (see the section on <a
href="./flowobj.html#box-dimensions">box dimensions</a> for an
explanation of the terms):

<OL>
<LI> The left outer edge of a left-floating element may not be to the
left of the left inner edge of its parent element. The analogous rules
hold for right floating elements.

<LI> The left outer edge of a left floating element must be to the
right of the right outer edge of every earlier (in the HTML source)
left-floating element or the top of the former must be lower than the
bottom of the latter. The analogous rules hold for right floating
elements.

<LI> The right outer edge of a left-floating element may not be to the
right of the left outer edge of any right-floating element that is to
the right of it. The analogous rules
hold for right floating elements.

<LI> A floating element's top may not be higher than the inner top of
its parent.

<LI> A floating element's top may not be higher than the top of any
earlier floating or block-level element.

<LI> A floating element's top may not be higher than the top of any
<span class="index-inst" title="line-box">line-box</span> (see the
section on <a href="#line-height">line height calculations</a>) with
content that precedes the floating element in the HTML source.

<LI> A floating element must be placed as high as possible.

<LI> A left-floating element must be put as far to the left as
possible, a right-floating element as far to the right as possible. A
higher position is preferred over one that is further to the
left/right.
</OL>

<P>Elements that are after the floating element will overlap.

<h4>Float overlap</h4> 

<P> There are two situations when floating elements can overlap with
the margin, border and padding areas of ancestor elements or earlier
siblings:

<UL>
<LI> when the floating element has a negative margin: negative margins
on floating elements are honored as on other block-level elements.

<LI> when the floating element is wider or higher than the element it
is inside.
</UL>

<H2><a name="overflow">Overflow and clipping</a></H2>
<!--
   Overflow and clipping

       Overflow must be considered when an element's content or that
       of its children exceeds the element's specified dimensions.

       [Note, may apply to relatively or absolutely positioned elements]
-->

<H3><a name="overflow">Overflow</a></H3>

<P>Normally, child boxes are positioned within the box of their
parent. However, a child box may extend horizontally beyond the
bounding box of its parent in the following situations: 

<ul>
<li>It is <a href="#floats">floated</a> and is too large for its
parent.
<li>It is <a href="#absolute-positioning">positioned absolutely</a>.
<li>It has <a href="#margin-properties">negative margins</a>.
</ul>

<p>The <span class="propinst-overflow">'overflow'</span> property is
used to specify the user agent's behavior when the contents of an
absolutely positioned element exceed its declared bounds.

<H4><a name="propdef-overflow">'overflow'</a></H4>
<!-- #include src=properties/overflow.srb -->

<p>This property determines what happens when an element's rendered
contents exceed its height or width.</p>

<p>A value of 'visible' indicates that the element's bounding box
should be enlarged enough to contain all of its rendered contents. 
In other words, its height or width can be made bigger than the 
declared value. Any padding or border will remain outside the rendered 
content. Any additional width will be added in the direction of primary
text flow, e.g. to the right side in left-to-right languages, while 
additional height will be added to the bottom.</p>

<p>A value of 'hidden' indicates that the element's contents should
be clipped to its height and width, and that no scrolling
mechanism should be provided. Padding and border will be applied to the
regular height and width of the element, as if its contents did not
exceed its bounds. Any contents that exceed the element's bounds will be
unavailable to the user.</p> 

<p>The behavior of the 'auto' value is UA-dependent, but should cause a 
scrolling mechanism to be invoked when the element's rendered contents 
exceed its bounds.</p>

<p>Finally, the 'scroll' value indicates that if the UA supports a 
visible scrolling mechanism, that mechanism should be displayed 
whether or not the element's rendered contents exceed its bounds.
This avoids any problem with scrollbars appearing and disappearing
in a dynamic environment.</P>

<P>Even if <span
class="propinst-overflow">'overflow'</span> is set to 'visible',
contents may be clipped to a UA's document window by the native
operating environment. In addition, the <span
class="propinst-clip">'clip'</span> property can cause otherwise
visible &quot;overflowed&quot; contents to be clipped.

The examples below utilize the following stylesheet, which
describes a simple 100 pixel box with a thin solid red border:

<div class="example"><P>
<PRE>
#overlay {position: absolute; top: 50px; left: 50px; height: 100px;
          width: 100px; border: thin solid red;}
</PRE>
</div>

Applied to an empty &lt;DIV&gt;, this would look something like:

<div class="example"><P>
<pre>
<font color="#ff0000">     
     +------------+
     |            |
     |            |
     |            |
     |            |
     |            |
     +------------+
</font>
</pre>
</div>


First, let's consider the default value of <span
class="propinst-overflow">'overflow'</span>, which is 'visible'. This
value indicates that all contents of an element should be rendered,
even if these contents exceed the declared width or height of the
element. Consider a block of long, preformatted text:

<div class="example"><P>
<PRE>
&lt;P id=overlay&gt;
&lt;PRE&gt;Here is some long preformatted text.
&lt;/PRE&gt;
&lt;P&gt;
</PRE>
</div>

<p>With <span class="propinst-overflow">'overflow'</span> set to
'visible', all of the text will be visible even though it exceeds the
declared width of the element. The element will be made wider than its
declared width, and any padding or border will be rendered outside of
this new width. The example might be rendered something like:</p>

<div class="example"><P>
<pre><font color="#ff0000">
+--------------------------------------+
|</font> Here is some long preformatted text. <font color="#ff0000">|
|                                      |
|                                      |
|                                      |
|                                      |
+--------------------------------------+
</font>
</pre>
</div>

<p>Similarly, the height of the element will be extended should the
rendered contents exceed the declared height. Consider the
following:</P>

<div class="example"><P>
<PRE>
&lt;DIV id=overlay&gt;Here is a block of text that will
cause this element to exceed its declared height of 100 pixels.
&lt;/DIV&gt;
</PRE>
</div>

<p>This division should be rendered something like this:

<div class="example"><P>
<pre><font color="#ff0000">
+------------+
|</font> Here is a  <font color="#ff0000">|
|</font> block of t <font color="#ff0000">|
|</font> ext that w <font color="#ff0000">|
|</font> ill cause  <font color="#ff0000">|
|</font> this eleme <font color="#ff0000">|
|</font> nt to exce <font color="#ff0000">|
|</font> ed its dec <font color="#ff0000">|
|</font> lared heig <font color="#ff0000">|
|</font> ht of 100  <font color="#ff0000">|
|</font> pixels.    <font color="#ff0000">|
+------------+</font>
</pre>
</div>

<p>The 'hidden' value of the <span
class="propinst-overflow">'overflow'</span> property indicates that
any content which exceed the declared bounds of the element should not
be rendered at all. The user will have no way to view these
"overflowed" contents. With <span
class="propinst-overflow">'overflow'</span> set to 'hidden', the two
examples above should be rendered something like this:</p>

<div class="example"><P>
<pre>
<font color="#ff0000">
+------------+
|</font> Here is so <font color="#ff0000">|
|            |
|            |
|            |
|            |
+------------+</font>
</pre>

<pre>
<font color="#ff0000">
+------------+
|</font> Here is a  <font color="#ff0000">|
|</font> block of t <font color="#ff0000">|
|</font> ext that w <font color="#ff0000">|
|</font> ill cause  <font color="#ff0000">|
|</font> this eleme <font color="#ff0000">|
+------------+</font>
</pre>
</div>


<p>Another value for <span class="propinst-overflow">'overflow'</span>
is 'auto', which indicates that the user agent should provide for a
scrolling mechanism when the contents overflow the bounds of the
element. Finally, a value of 'scroll' indicates that a scrolling
mechanism should always be present, whether or not the contents exceed
the element's bounds. 

<!-- 
<P>
If the user agent utilizes scrollbars, the
examples might look something like:</p>

<div class="example"></P>
<pre>
<font color="#ff0000">+------------+
|</font> Here is som<font color="#ff0000">|
|            |
|            |
|</font>____________<font color="#ff0000">|
|</font>|&lt;|X|    |&gt;|<font color="#ff0000">|
+------------+</font></pre></p>


<pre><font color="#ff0000">+------------+
|</font>Here is a |^<font color="#ff0000">|
|</font>block of  |-<font color="#ff0000">|
|</font>text that | <font color="#ff0000">|
|</font>will      |-<font color="#ff0000">|
|</font>cause this|v<font color="#ff0000">|
+------------+</font></pre></p>
</div>
-->

<H3><a name="clipping">Clipping</a></h3>

<p>Clipping alters a document's display, though it does not affect how
it is laid out. The clipping region defines what portion of the
element's physical representation is visible. It is computed by the
intersection of the parent's clipping region with the value of the
element's <span class="propinst-clip">'clip'</span> property.</p>

<H4><a name="propdef-clip">'clip'</a></H4>
<!-- #include src=properties/clip.srb -->

The <span class="index-def" title="&lt;shape&gt;, definition of"><a
	      name="value-def-shape"
	      class="value-def">&lt;shape&gt;</a></span> value type may
have the following values:

<ul>
<li> rect (<span class="index-inst" title="&lt;top&gt;"><span
		  class="value-inst-top">&lt;top&gt;</span></span>
	      <span class="index-inst" title="&lt;right&gt;"><span
		  class="value-inst-right">&lt;right&gt;</span></span>
	      <span class="index-inst" title="&lt;bottom&gt;"><span
		  class="value-inst-bottom">&lt;bottom&gt;</span></span> <span class="index-inst" title="&lt;left&gt;"><span class="value-inst-left">&lt;left&gt;</span></span>)
</ul>

<P>The value types <span class="index-def" title="&lt;top&gt;,
	      definition of"><a name="value-def-top"
		class="value-def">&lt;top&gt;</a></span>, <span
	      class="index-def" title="&lt;right&gt;, definition
	      of"><a name="value-def-right"
		class="value-def">&lt;right&gt;</a></span>, <span
	      class="index-def" title="&lt;bottom&gt;, definition
	      of"><a name="value-def-bottom"
		class="value-def">&lt;bottom&gt;</a></span>, and <span
	      class="index-def" title="&lt;left&gt;, definition of"><a
		name="value-def-left"
		class="value-def">&lt;left&gt;</a></span> may either
	    have the values <span class="index-inst"
	      title="&lt;length&gt;"><span
		class="value-inst-length">&lt;length&gt;</span></span>
	    or 'auto'.

<P>The <span class="index-inst" title="&lt;top&gt;"><span
class="value-inst-top">&lt;top&gt;</span></span> value aligns the top
of the text (or object) with the tallest element on the line that has
baseline positioning.

<p>Lengths are specified with respect to the element's top-left corner. 
Negative values are permitted.

<P>The <span class="index-inst" title="&lt;bottom&gt;"><span
class="value-inst-bottom">&lt;bottom&gt;</span></span> value aligns
the bottom of the text (or object) with the lowest element on the line
that has baseline positioning.

<P> When converted to pixel coordinates, the bottom-right corner is
excluded from the clipping rectangle. This rule is necessary to permit
the definition of zero-width or zero-height rectangles.

<p>Any length can be replaced by the value 'auto', which causes
the respective extent of the clipping rectangle to match the
element's extent in the given direction, including padding,
borders and child elements. The default value for the 'clip'
property causes the clip rectangle to encompass the entire
element. In effect, 'auto' provides for an infinite clipping
region.</p>

<p>For now, all clipping regions are rectangular. We anticipate
future extensions to permit non-rectangular clipping. </p>

<P>If the clipping region exceeds the bounds of the UA's
document window, contents may be clipped to that window by the
native operating environment.

<div class="note"><P>
<em><strong>Note.</strong>
The authors of this specification may redefine the clipping rectangle
to better fit within the CSS box-oriented formatting model, where each
coordinate is relative to its respective edge, rather than basing the
rectangle on a fixed origin. Specifying a top-left origin only works 
correctly for left-to-right languages.</em>
</div>


<H2><a name="visibility">Visibility</a></H2>
<P>Some elements of the document tree cause boxes to be generated that
	    follow the normal positioning rules, but are not rendered;
	    their presence is "felt," but they are invisible.

<H4><a name="propdef-visibility">'visibility'</a></H4>
<!-- #include src=properties/visibility.srb -->

<p>The <span class="propinst-visibility">'visibility'</span> property
determines whether or not an element is initially displayed. The
visibility of an element does not affect its layout.  Elements that
are hidden still take up the same physical space as they would were
they visible, they are just rendered transparently. This differs from
the behavior of <span class="propinst-display">'display:none'</span>,
in which the element is ignored, as if it were not present in the
document at all. Visibility can be used in a scripting environment to
dynamically display only one of several elements which overlap one
another.</p>

<div class="example"><P>

In the following example, pressing either form button invokes a
user-defined script function that causes the corresponding element to
become visible and the other element to be hidden. Since the
containers occupy the same position, and are the same size, the
effect is that one replaces the other.

<pre>
&lt;HEAD&gt;
&lt;STYLE type=&quot;text/css&quot;&gt;
&lt;!--
   #container1 { position: absolute; top: 2in; left: 2in; width: 2in}
   #container2 { position: absolute; top: 2in; left: 2in; width: 2in;
                 visibility: hidden; }
--&gt;
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;Choose a suspect:&lt;/P&gt;
&lt;DIV id=&quot;container1&quot;&gt;
   &lt;IMG width=100 height=100 src=&quot;suspect1.jpg&quot;&gt;
   &lt;P&gt;Name: Al Capone&lt;/P&gt;
   &lt;P&gt;Residence: Chicago&lt;/P&gt;
&lt;/DIV&gt;

&lt;DIV id=&quot;container2&quot;&gt;
   &lt;IMG width=100 height=100 src=&quot;suspect2.jpg&quot;&gt;
   &lt;P&gt;Name: Lucky Luciano&lt;/P&gt;
   &lt;P&gt;Residence: New York&lt;/P&gt;
&lt;/DIV&gt;

&lt;FORM NAME=&quot;myform&quot;&gt;
   &lt;INPUT type=&quot;button&quot; value=&quot;Capone&quot; onclick='show(&quot;container1&quot;);hide(&quot;container2&quot;)'&gt;
   &lt;INPUT type=&quot;button&quot; value=&quot;Luciano&quot; onclick='show(&quot;container2&quot;);hide(&quot;container1&quot;)'&gt;
&lt;/FORM&gt;
</pre>

<P>Note that the <span class="propinst-position">'position'</span>
property of each DIV element has the value 'relative', so the elements
observe the standard <a href="./flowobj.html#flow-model">flow
model</a>. A more visually appealing version of the above might be
designed using overlapping 'absolute' positioned elements:</p>
</div>



<H2><a name="dynamic-positioning">Dynamic positioning</a></H2>
<P>Certain dynamic aspects of managing positioned elements, such
as hiding, displaying and movement can only be performed using an
external scripting language.

<P>This draft does not specify the behavior of dynamic elements in
scripting environments. For example, what happens when an element
having 'width: auto' is repositioned? Do the contents reflow, or do
they maintain their original formatting?  The answer is outside the
scope of this draft, and such behavior is likely to differ in initial
implementations of CSS2.

<H2><a name="filters">Filters</a></H2>
<em>This is a placeholder.</em>
</BODY>
</HTML>

