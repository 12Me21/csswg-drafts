<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en">
<!-- $Id: process.src,v 1.1 1997-10-29 04:28:19 ian Exp $ -->
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<TITLE>CSS2 processing model</TITLE>
<LINK rel="next" href="syndata.html">
<LINK rel="previous" href="convent.html">
<LINK rel="STYLESHEET" href="style/default.css" type="text/css">
</HEAD>
<BODY>
<H1 align="center">CSS2 processing model</H1>
<H2>Introduction to the CSS2 processing model</H2>
In this section we present a model that describes how
user agents may implement style sheets. The model consists
of the following steps:

<ol>
<li>Create a <a href="#doctree">document tree</a>.

<li>From the document tree, generate a tree of <a
href="#rendobj">rendering objects</a> based on the
destination medium, style rules, and formatting algorithms.

<li>Transfer the tree of <a href="#rendobj">rendering objects</a> to
the destination <a href="media.html">medium</a> (e.g., print the
results, display them on the screen, render text as speech, etc.).
</ol>

<P>Step one lies outside the scope of this specification (see, for
example, <a rel="biblioentry" href="./refs.src#ref-DOM">[DOM]</a>).

<P>Step two is addressed by the bulk of this specification:

<ul>
<li>For what <a href="media.html">media</a> can style sheets present
documents? 
<li>How do competing style rules interact?
<li>What formatting algorithms apply for a given medium?
</ul>

<P>Step three is addressed in part by this specification:

<ul>
<li>What can user agents do when certain system resources are
not available (e.g., fonts)?
<li>How do style sheets interact
with system resources (cursors, colors, fonts)?
<li>How do style sheet properties assist certain devices
(e.g., page orientation for a printer)?
</ul>

<P>Please note that most transfer issues lie outside the scope of this
specification.

<H2><a name="doctree">The document tree</a></H2>

<P>User agents transform a document written in the document language
into a <dfn>document tree</dfn> where every element except one has
exactly one <span class="index-def" title="parent">parent</span>
element. (See the SGML (<a href="refs.html#ref-ISO8879">[ISO8879]</a>)
and XML (<a href="refs.html#ref-XML">[XML]</a>) specifications for the
definition of parent.) The one exception is the <span
class="index-def" title="root">root</span> element, which has no
parent. An element A is called a <span class="index-def"
title="child">child</span> of an element B, if and only if B is the
parent of A.

<P>An element A is called a <span class="index-def"
title="ancestor">ancestor</span> of an element B, if either (1) A is
the parent B, or (2) A is the parent of some element C that is an
ancestor of B.

<P>An element A is called a <span class="index-def"
title="descendant">descendant</span> of an element B, if and only if B
is an ancestor of A.

<div class="example"><P>
For example, the following HTML document:
<PRE>
   &lt;HTML&gt;   
   &lt;TITLE&gt;My home page&lt;/TITLE&gt;
   &lt;BODY&gt;
   &lt;H1&gt;My home page&lt;/H1&gt;
   &lt;P&gt;Welcome to my home page! Let me tell you about my favorite
		composers:
   &lt;UL&gt;
   &lt;LI&gt; Elvis Costello
   &lt;LI&gt; Johannes Brahms
   &lt;LI&gt; Georges Brassens
   &lt;/UL&gt;
   &lt;/BODY&gt;
   &lt;/HTML&gt;
</PRE>

<P>results in the following tree:</P>

<IMG src="images/doctree.gif" alt="Sample document tree">

<P>Notice that although the source program does not explicitly refer
to the HEAD element, it is inferred during parsing and becomes part of
the document tree.
</div>

<H2><a name="renderobj">Rendering objects</a></H2>

<P>Once a user agent has a document tree, it generates a tree of
rendering objects. A <dfn>rendering object</dfn> is defined by a set
of CSS properties and a formatting algorithm. The properties and
algorithsm generally relate to the intended target medium.  Thus, a
rendering object destined to be printed requires certain CSS
properties (e.g., related to margins, widths, heights, colors,
positioning, etc.) while a rendering object destined for a speech
synthesizer requires others (e.g., volume, pitch, voice family, etc.).

<ul>
<li><em>The destination <a href="media.html">medium</a>.</em> For instance,
if the document is to be read aloud, the rendering tree will be much
different than if the document is to be laid out on paper.
<li><em>Style rules</em>. CSS2 style rules 
</ul>

<!--
<ol>
<li>Style sheets are <a href="cascade.html">cascaded</a> and <a
href="#inheritance">inheritance</a> rules applied so that for each node in
the document tree, each property has a single value.
property.

<li>The user agent generates zero or more <dfn>rendering objects</dfn>
for each node in the document tree and creates a tree of these
rendering objects.  The type of the rendering object depends on the
destination <a href="media.html">media type</a>.  For screens, for
example, a rendering object would be a box placed according to the
<a href="flowobj.html">visual rendering model</a>. For paper output, a
rendering object would be a box placed according to the <a
href="page.html">page model</a>.  For speech synthesizers, a
rendering object would be speakable data with associated aural
properties (see the section on <a href="aural.html">aural style
sheets</a>).

<li>These rendering objects are transferred to the destination medium.
For example, abstract pages are printed to sheets of paper,
audio rendering objects are transferred to a speech synthesizer, etc.
The details of any transfer lie outside the scope of this
specification.
</ol>
-->

</BODY>
</html>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-declaration:"~/SGML/HTML4.decl"
sgml-default-doctype-name:"html"
sgml-minimize-attributes:t
sgml-nofill-elements:("pre" "style" "br")
sgml-live-element-indicator:t
End:
-->

