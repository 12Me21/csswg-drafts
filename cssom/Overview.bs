<pre class='metadata'>
Title: CSS Object Model (CSSOM)
ED: http://dev.w3.org/csswg/cssom/
TR: http://www.w3.org/TR/cssom/
Previous Version: http://www.w3.org/TR/2011/WD-cssom-20110712/
Previous Version: http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/
Group: CSSWG
Status: WD
Shortname: cssom
Level: 1
Editor: Simon Pieters, Opera Software ASA http://www.opera.com, simonp@opera.com
Editor: Glenn Adams, Cox Communications&#44; Inc. http://www.cox.com, glenn.adams@cos.com, http://www.w3.org/wiki/User:Gadams
Former Editor: Anne van Kesteren, Opera Software ASA http://www.opera.com, annevk@annevk.nl, https://annevankesteren.nl/
Abstract: CSSOM defines APIs (including generic parsing and serialization rules) for Media Queries, Selectors, and of course CSS itself.
Ignored Terms: EmptyString, mediaText, cssText
</pre>

<pre class='anchors'>
urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: infrastructure.html
        type: dfn; text: html elements
    urlPrefix: browsers.html
        type: interface; text: WindowProxy
        type: dfn
            text: browsing context
            text: auxiliary browsing context
            text: familiar with
            text: same origin
    urlPrefix: webappapis.html
        type: dfn
            text: responsible browsing context
            text: incumbent settings object
            text: event handler
            text: event handler event type
            text: event handler IDL attributes
    urlPrefix: infrastructure.html
        type: dfn
            text: split a string on commas
            text: skip whitespace
            text: collect a sequence of characters
            text: space character
            text: converted to ascii lowercase
            text: rules for parsing integers
urlPrefix: https://dom.spec.whatwg.org/#concept-
    type: dfn
        text: context object
        text: dispatch; url: event-dispatch
        text: event
        text: event listener
        text: quirks mode; url: document-quirks
        text: fire an event; url: event-fire
        text: node document
urlPrefix: https://dom.spec.whatwg.org/
    type: attribute; for: Event; urlPrefix: #dom-Event-
        text: type
        text: isTrusted
    type: dfn; text: dispatch flag
    type: dfn; text: case-sensitive
urlPrefix: http://www.w3.org/TR/CSS21/visuren.html
    type: dfn; text: anonymous block box; url: #anonymous-block-level
urlPrefix: http://heycam.github.io/webidl/#
    type: interface; urlPrefix: idl-
        text: double
        text: long
    type: dfn; urlPrefix: dfn-
        text: converted to an IDL value
        text: throw
</pre>

<pre class='link-defaults'>
spec: dom-core-ls; type: interface; text: Document
spec:css-display-3; type:value; for:display; text:table
spec:css-color-4; type:property; text:color
spec:css-position-3; type:property; text:left
</pre>

Introduction {#introduction}
============================

This document formally specifies the core features of the CSS Object Model (CSSOM). Other documents in the CSSOM family of specifications
as well as other CSS related specifications define extensions to these core features.

The core features of the CSSOM are oriented towards providing basic capabilities to author-defined scripts to permit access to
and manipulation of style related state information and processes.

The features defined below are fundamentally based on prior specifications of the W3C DOM Working Group, primarily
[[DOM-LEVEL-2-STYLE]]. The purposes of the present document are (1) to improve on that prior work by providing
more technical specificity (so as to improve testability and interoperability), (2) to deprecate or remove certain less-widely implemented
features no longer considered to be essential in this context, and (3) to newly specify certain extensions that have been
or expected to be widely implemented.

<!--A full list of the changes to API signatures can be found in <a href="#changes-from-dom-2-style"><cite>Changes from DOM-2 Style</cite></a>.-->


Terminology {#terminology}
==========================

This specification employs certain terminology from the following documents:
<cite>DOM</cite>,
<cite>HTML</cite>,
<cite>CSS Syntax</cite>,
<cite>Encoding</cite>,
<cite>URL</cite>,
<cite>Fetch</cite>,
<cite>Associating Style Sheets with XML documents</cite>
and
<cite>XML</cite>.
[[!DOM]]
[[!HTML]]
[[!CSS3SYN]]
[[!ENCODING]]
[[!URL]]
[[!FETCH]]
[[!XML-STYLESHEET]]
[[!XML]]

When this specification talks about object
<code lt><var>A</var></code> where <code lt><var>A</var></code> is actually an interface, it generally means an object implementing interface
<code lt><var>A</var></code>.

The terms <dfn>whitespace</dfn> and <dfn>ignored</dfn> are defined in CSS. [[!CSS21]]

The terms <dfn>cascaded value</dfn>, <dfn>computed value</dfn> and <dfn>used value</dfn> are defined in CSS Cascade and Inheritance.
[[!CSS3CASCADE]]

The terms <dfn>simple selector</dfn>, <dfn>sequence of simple selectors</dfn>, <dfn>universal selector</dfn> and <dfn>group of selectors</dfn> are defined in
Selectors. [[!SELECTORS4]]

The terms <dfn>namespace prefix</dfn> and <dfn>default namespace</dfn> are defined in CSS Namespaces Module. [[!CSS3NAMESPACE]]

The term <dfn>list of CSS page selectors</dfn> refers to the comma-separated list of page selectors, as defined in CSS Paged Media Module.
[[!CSS3PAGE]]

The terms <dfn>set</dfn> and <dfn>unset</dfn> to refer to the true and
false values of binary flags or variables, respectively. These terms are also used as verbs in which case they refer to
mutating some value to make it true or false, respectively.

The term <dfn>supported styling language</dfn> refers to CSS.

Note: If another styling language becomes supported in user agents, this specification is expected to be updated as necessary.

The term <dfn>supported CSS property</dfn> refers to a CSS property that the user agent implements, and that is defined to be a case-insensitive property in
the CSS specification. A <a>supported CSS property</a> must be in its lowercase form for the purpose of comparisons this specification.

The term <dfn>author-defined CSS property</dfn> refers to <code lt>var-*</code> properties as defined in CSS Custom Properties for Cascading Variables,
and are case-sensitive. [[!CSS-VARIABLES]]

The terms <dfn>before pseudo-element</dfn> and <dfn>after pseudo-element</dfn> refer to the :before and :after pseudo-elements in CSS, except in this
specification the pseudo-elements are assumed to exist for all elements even if no box is generated for them. [[!CSS21]]

The term <dfn>environment encoding</dfn> is defined in CSS Syntax Module. [[!CSS3SYN]]

The algorithm <dfn>get an encoding</dfn> is defined in the Encoding standard. [[!ENCODING]]

The term <dfn>document's character encoding</dfn> is defined in DOM. [[!DOM]]

When a method or an attribute is said to call another method or attribute, the user agent must invoke its internal API for that attribute or method so that
e.g. the author can't change the behavior by overriding attributes or methods with custom properties or functions in ECMAScript.

Unless otherwise stated, string comparisons are done in a <a>case-sensitive</a> manner.


Common Serializing Idioms {#common-serializing-idioms}
------------------------------------------------------

To <dfn>escape a character</dfn> means to create a string of
"<code lt>\</code>" (U+005C), followed by the character.

To <dfn>escape a character as code point</dfn> means to create a
string of "<code lt>\</code>" (U+005C), followed by the Unicode code point as
the smallest possible number of hexadecimal digits in the range 0-9 a-f
(U+0030 to U+0039 and U+0061 to U+0066) to represent the code point in
base 16, followed by a single SPACE (U+0020).

To <dfn>serialize an identifier</dfn> means to create a string represented
by the concatenation of, for each character of the identifier:

<ul>
 <li>If the character is NULL (U+0000), then <a>throw</a> an
 <code data-anolis-spec=webidl>InvalidCharacterError</code> exception and terminate these steps.
 <li>If the character is in the range [\1-\1f] (U+0001 to U+001F) or is U+007F, then the character
 <span lt="escape a character as code point">escaped as code point</span>.
 <li>If the character is the first character and is in the range \[0-9]
 (U+0030 to U+0039), then the character
 <span lt="escape a character as code point">escaped as code point</span>.
 <li>If the character is the second character and is in the range \[0-9]
 (U+0030 to U+0039) and the first character is a "<code lt>-</code>"
 (U+002D), then the character
 <span lt="escape a character as code point">escaped as code point</span>.
 <li>If the character is not handled by one of the above rules and is
 greater than or equal to U+0080, is "<code lt>-</code>" (U+002D) or
 "<code lt>_</code>" (U+005F), or is in one of the ranges \[0-9] (U+0030 to
 U+0039), \[A-Z] (U+0041 to U+005A), or \[a-z] (U+0061 to U+007A), then the character
 itself.
 <li>Otherwise, the <span lt="escape a character">escaped</span>
 character.
</ul>

To <dfn>serialize a string</dfn> means to create a string represented
by '"' (U+0022), followed by the result of applying the rules
below to each character of the given string, followed by
'"' (U+0022):

<ul>
 <li>If the character is NULL (U+0000), then <a>throw</a> an
 <code data-anolis-spec=webidl>InvalidCharacterError</code> exception and terminate these steps.
 <li>If the character is in the range [\1-\1f] (U+0001 to U+001F) or is U+007F, the character
 <span lt="escape a character as code point">escaped as code point</span>.
 <li>If the character is '"' (U+0022) or "<code lt>\</code>"
 (U+005C), the <span lt="escape a character">escaped</span> character.
 <li>Otherwise, the character itself.
</ul>

Note: "<code lt>'</code>" (U+0027) is not escaped because strings
are always serialized with '"' (U+0022).

To <dfn>serialize a URL</dfn> means to create a string represented by
"<code lt>url(</code>", followed by the
<span lt="serialize a string">string escaped</span> value of the given
string, followed by "<code lt>)</code>".

To <dfn>serialize a comma-separated list</dfn> concatenate all items of
the list in list order while separating them by "<code lt>, </code>", i.e.,
COMMA (U+002C) followed by a single SPACE (U+0020).

To <dfn>serialize a whitespace-separated list</dfn> concatenate all
items of the list in list order while separating them by "<code lt> </code>", i.e.,
a single SPACE (U+0020).

Note: When serializing a list according to the above rules,
extraneous whitespace is not inserted prior to the first item or subsequent to
the last item. Unless otherwise specified, an empty list is serialized as the
empty string.


Media Queries {#media-queries}
==============================

Media queries are defined by the Media Queries specification. This
section defines various concepts around media queries, including their API
and serialization form.

<!-- XXX ref -->


Parsing Media Queries {#parsing-media-queries}
----------------------------------------------

To
<dfn>parse a media query list</dfn> for a
given string <var>s</var> into a media query list is defined in
the Media Queries specification. Return the list of one or more media
queries that the algorithm defined there gives. <!-- XXX ref -->

Note: A media query that ends up being "ignored" will turn
into "<code lt>not all</code>".

To
<dfn>parse a media query</dfn> for a given string
<var>s</var> means to follow the
<a>parse a media query list</a> steps and return null if more
than one media query is returned or a media query if a
single media query is returned.

Note: Again, a media query that ends up being "ignored" will
turn into "<code lt>not all</code>".


Serializing Media Queries {#serializing-media-queries}
------------------------------------------------------

To
<dfn>serialize a media query list</dfn>
run these steps:

<ol>
 <li>If the media query list is empty return the empty string and
 terminate these steps.

 <li><span lt="serialize a media query">Serialize</span> each media query in the list of media queries, in the same order as they appear in the list of
 media queries, and then <span lt="serialize a comma-separated list">serialize</span> the list.
</ol>

To
<dfn>serialize a media query</dfn> let
<var>s</var> be the empty string, run the steps below, and
finally return <var>s</var>:

<ol>
 <li>If the media query is negated append "<code lt>not</code>", followed
 by a single SPACE (U+0020), to <var>s</var>.

 <li>Let <var>type</var> be the media type of the media query,
 <span lt="serialize an identifier">escaped</span> and
 <span data-anolis-spec=dom>converted to ASCII lowercase</span>.

 <li>If the media query does not contain media features append
 <var>type</var>, to <var>s</var>,
 then return <var>s</var> and terminate this algorithm.

 <li>If <var>type</var> is not "<code lt>all</code>" or if the
 media query is negated append <var>type</var>, followed by a
 single SPACE (U+0020), followed by "<code lt>and</code>", followed by a single SPACE
 (U+0020), to <var>s</var>.

 <li>Sort the media features in lexicographical order.

 <li>
  Then, for each media feature:

  <ol>
   <li>Append a "<code lt>(</code>" (U+0028), followed by the media feature
   name, <span data-anolis-spec=dom>converted to ASCII lowercase</span>,
   to <var>s</var>.

   <li>If a value is given append a "<code lt>:</code>" (U+003A), followed
   by a single SPACE (U+0020), followed by the
   <span lt="serialize a media feature value">serialized media feature value</span>,
   to <var>s</var>.

   <li>Append a "<code lt>)</code>" (U+0029) to
   <var>s</var>.

   <li>If this is not the last media feature append a single SPACE (U+0020),
   followed by "<code lt>and</code>", followed by a single SPACE (U+0020), to
   <var>s</var>.
  </ol>

</ol>

<div class="example">
 Here are some examples of input (first column) and output (second
 column):

 <table class="complex data">
  <thead>
   <tr><th>Input<th>Output
  <tbody>
   <tr>
    <td><pre>not screen and (min-WIDTH:5px) AND (max-width:40px)</pre>
    <td><pre>not screen and (max-width: 40px) and (min-width: 5px)</pre>
   <tr>
    <td><pre>all and (color) and (color)</pre>
    <td><pre>(color)</pre>
 </table>
</div>



### Serializing Media Feature Values ### {#serializing-media-feature-values}

Issue: This should probably be done in terms of mapping it to
serializing CSS values as media features are defined in terms of CSS
values after all.

To <dfn>serialize a media feature value</dfn>
named <var>v</var> locate <var>v</var> in the first
column of the table below and use the serialization format described in
the second column:

<table class="complex data" spec=mediaqueries-4>
 <thead>
  <tr>
   <th>Media Feature
   <th>Serialization
 <tbody>
  <tr>
   <td>'width'
   <td>...
  <tr>
   <td>'height'
   <td>...
  <tr>
   <td>'device-width'
   <td>...
  <tr>
   <td>'device-height'
   <td>...
  <tr>
   <td>'orientation'
   <td>
    If the value is ''portrait'': "<code lt>portrait</code>".
    If the value is ''landscape'': "<code lt>landscape</code>".
  <tr>
   <td>'aspect-ratio'
   <td>...
  <tr>
   <td>'device-aspect-ratio'
   <td>...
  <tr>
   <td>'color'
   <td>...
  <tr>
   <td>'color-index'
   <td>...
  <tr>
   <td>'monochrome'
   <td>...
  <tr>
   <td>'resolution'
   <td>...
  <tr>
   <td>'scan'
   <td>
    If the value is ''progressive'': "<code lt>progressive</code>".
    If the value is ''interlace'': "<code lt>interlace</code>".
  <tr>
   <td>'grid'
   <td>...
</table>

Other specifications can extend this table and vendor-prefixed media
features can have custom serialization formats as well.


Comparing Media Queries {#comparing-media-queries}
--------------------------------------------------

To
<dfn>compare media queries</dfn>
<var>m1</var> and <var>m2</var> means to
<span lt="serialize a media query">serialize</span> them both and
return true if they are a
<span data-anolis-spec=dom>case-sensitive</span> match and false if they
are not.


The {{MediaList}} Interface {#the-medialist-interface}
------------------------------------------------------

<!--
//
// All members defined since DOM-2 Style. The only differences are:
//
//   1. addition of stringifier qualifier on mediaText
//   2. addition of getter qualifier on item
//   3. removal of raises(DOMException) from {append,delete}Medium
//
-->

An object that implements the <code>MediaList</code> interface has an associated <dfn>collection of media queries</dfn>.

<pre class=idl>[ArrayClass]
interface MediaList {
  [TreatNullAs=EmptyString] stringifier attribute DOMString mediaText;
  readonly attribute unsigned long length;
  getter DOMString? item(unsigned long index);
  void appendMedium(DOMString medium);
  void deleteMedium(DOMString medium);
};</pre>

The object's <span data-anolis-spec=webidl>supported property indices</span> are the numbers in the range zero to one less than the number of media queries
in the <a>collection of media queries</a> represented by the collection. If there are no such media queries, then there are no
<span data-anolis-spec=webidl>supported property indices</span>.

To <dfn>create a <code>MediaList</code> object</dfn> with a string <var>text</var>, run the following steps:
<ol>
 <li>Create a new <code>MediaList</code> object.
 <li>Set its <code attribute for=MediaList>mediaText</code> attribute to <var>text</var>.
 <li>Return the newly created <code>MediaList</code> object.
</ol>

The <dfn attribute for=MediaList>mediaText</dfn> attribute, on getting, must return a
<span lt="serialize a media query list">serialization</span> of the <a>collection of media queries</a>.
Setting the <code attribute for=MediaList>mediaText</code> attribute must run these steps:
<ol>
 <li>Empty the <a>collection of media queries</a>.
 <li>If the given value is the empty string terminate these steps.
 <li>Append all the media queries as a result of <span lt="parse a media query list">parsing</span> the given
 value to the <a>collection of media queries</a>.
</ol>

The <dfn method for=MediaList>item(<var>index</var>)</dfn> method must return the media query in the <a>collection of media
queries</a> given by <var>index</var>, or null, if <var>index</var> is greater than or equal to the number of media queries in the
<a>collection of media queries</a>.

The <dfn attribute for=MediaList>length</dfn> attribute must return the number of media queries in the <a>collection of media
queries</a>.

The <dfn method for=MediaList>appendMedium(<var>medium</var>)</dfn> method must run these steps:
<ol>
 <li>Let <var>m</var> be the result of <span lt="parse a media query">parsing</span> the given value.
 <li>If <var>m</var> is null terminate these steps.
 <li>If <span lt="compare media queries">comparing</span> <var>m</var> with any of the media queries in the
 <a>collection of media queries</a> returns true terminate these steps.
 <li>Append <var>m</var> to the <a>collection of media queries</a>.
</ol>

The <dfn method for=MediaList>deleteMedium(<var>medium</var>)</dfn> method must run these steps:
<ol>
 <li>Let <var>m</var> be the result of <span lt="parse a media query">parsing</span> the given value.
 <li>If <var>m</var> is null terminate these steps.
 <li>Remove any media query from the <a>collection of media queries</a> for which
 <span lt="compare media queries">comparing</span> the media query with <var>m</var> returns true.
</ol>

Selectors {#selectors}
======================

Selectors are defined in the Selectors specification. This section
mainly defines how to serialize them. <!-- XXX ref -->

<!-- XXX ref universal selector etc? some are in <span> some not -->


Parsing Selectors {#parsing-selectors}
--------------------------------------

To
<dfn>parse a group of selectors</dfn>
means to parse the value using the <code lt>selectors_group</code>
production defined in the Selectors specification and return either a
group of selectors if parsing did not fail or null if parsing did
fail. <!-- XXX ref -->


Serializing Selectors {#serializing-selectors}
----------------------------------------------

<!-- http://dump.testsuite.org/2009/cssom/serializing-selectors.htm -->

To
<dfn>serialize a group of selectors</dfn>
<span lt="serialize a selector">serialize</span> each selector in the
group of selectors and then
<span lt="serialize a comma-separated list">serialize</span> the
group.

To <dfn>serialize a selector</dfn> let
<var>s</var> be the empty string, run the steps below for each
part of the chain of the selector, and finally return
<var>s</var>:

<ol>
 <li>If there is only one <a>simple selector</a> in the
 <a>sequence of simple selectors</a> which is a
 <a>universal selector</a>, append the result of
 <span lt="serialize a simple selector">serializing</span> the
 <a>universal selector</a> to <var>s</var>.

 <li>Otherwise, for each <a>simple selector</a> in the
 <a>sequence of simple selectors</a> that is not a
 universal selector of which the
 <a>namespace prefix</a> maps to a namespace that is not the
 <a>default namespace</a>
 <span lt="serialize a simple selector">serialize</span> the
 <a>simple selector</a> and append the result to
 <var>s</var>.

 <li>If this is not the last part of the chain of the selector append a
 single SPACE (U+0020), followed by the combinator
 "<code lt>></code>",
 "<code lt>+</code>",
 "<code lt>~</code>",
 "<code lt>||</code>",
 as appropriate, followed by another single SPACE (U+0020) if the combinator was
 not a <a>descendant combinator</a> (whitespace or "<code lt>>></code>"), to <var>s</var>.

 <li>If this is the last part of the chain of the selector and there is
 a pseudo-element, append "<code lt>::</code>" followed by the name of the
 pseudo-element, to <var>s</var>.
</ol>


To
<dfn>serialize a simple selector</dfn>
let <var>s</var> be the empty string, run the steps below, and
finally return <var>s</var>:

<dl class="switch">
 <dt>type selector
 <dt>universal selector
 <dd>
  <ol>
   <li>If the <a>namespace prefix</a> maps to a namespace that is
   not the <a>default namespace</a> and is not the
   null namespace (not in a namespace) append the
   <span lt="serialize an identifier">escaped</span>
   <a>namespace prefix</a>, followed by a "<code lt>|</code>" (U+007C)
   to <var>s</var>.

   <li>If the <a>namespace prefix</a> maps to a namespace that is
   the null namespace (not in a namespace) append
   "<code lt>|</code>" (U+007C) to <var>s</var>.
   <!-- This includes |* -->

   <li>If this is a type selector append the
   <span lt="serialize an identifier">escaped</span> element name to
   <var>s</var>.

   <li>If this is a universal selector append "<code lt>*</code>" (U+002A)
   to <var>s</var>.
  </ol>


 <dt>attribute selector
 <dd>
  <ol>
   <li>Append "<code lt>[</code>" (U+005B) to
   <var>s</var>.

   <li>If the <a>namespace prefix</a> maps to a namespace that is
   not the null namespace (not in a namespace) append the
   <span lt="serialize an identifier">escaped</span>
   <a>namespace prefix</a>, followed by a "<code lt>|</code>" (U+007C)
   to <var>s</var>.

   <li>Append the <span lt="serialize an identifier">escaped</span>
   attribute name to <var>s</var>.

   <li>If there is an attribute value specified, append
   "<code lt>=</code>",
   "<code lt>~=</code>",
   "<code lt>|=</code>",
   "<code lt>^=</code>",
   "<code lt>$=</code>", or
   "<code lt>*=</code>"
   as appropriate (depending on the type of attribute selector), followed
   by the <span lt="serialize a string">string escaped</span>
   attribute value, to <var>s</var>.

   <li>If the attribute selector has the case-sensitivity flag present,
   append "<code lt> i</code>" (U+0020 U+0069) to <var>s</var>.

   <li>Append "<code lt>]</code>" (U+005D) to
   <var>s</var>.
  </ol>


 <dt>class selector
 <dd>Append a "<code lt>.</code>" (U+002E), followed by the
 <span lt="serialize an identifier">escaped</span> class name to
 <var>s</var>.

 <dt>ID selector
 <dd>Append a "<code lt>#</code>" (U+0023), followed by the
 <span lt="serialize an identifier">escaped</span> ID to
 <var>s</var>.

 <dt>pseudo-class
 <dd>
  If the pseudo-class does not accept arguments append
  "<code lt>:</code>" (U+003A), followed by the name of the pseudo-class, to
  <var>s</var>.

  Otherwise, append "<code lt>:</code>" (U+003A), followed by the name of
  the pseudo-class, followed by "<code lt>(</code>" (U+0028), followed by the
  value of the pseudo-class argument determined as per below, followed by
  "<code lt>)</code>" (U+0029), to <var>s</var>.

  <dl class="switch">
   <dt><code lt>:lang()</code>
   <dd>The <span lt="serialize an identifier">escaped</span>
   value.

   <dt><code lt>:nth-child()</code>
   <dt><code lt>:nth-last-child()</code>
   <dt><code lt>:nth-of-type()</code>
   <dt><code lt>:nth-last-of-type()</code>
   <dd>The result of serializing the value using the rules for <span data-anolis-spec=csssyntax>serializing &lt;an+b></span>.

   <dt><code lt>:not()</code>
   <dd>The result of serializing the value using the rules for
   <span lt="serialize a group of selectors">serializing a group of selectors</span>.
  </dl>

</dl>


CSS {#css}
==========


CSS Style Sheets {#css-style-sheets}
------------------------------------

A <dfn>CSS style sheet</dfn> is an abstract concept that
represents a style sheet as defined by the CSS specification. In the CSSOM a
<a>CSS style sheet</a> is represented as a <code>CSSStyleSheet</code> object. A
<a>CSS style sheet</a> has a number of associated state items:

<dl>
 <dt><dfn lt=concept-css-style-sheet-type>type</dfn>
 <dd>The literal string "<code lt>text/css</code>".

 <dt><dfn lt=concept-css-style-sheet-location>location</dfn>
 <dd>Specified when created. The <span data-anolis-spec=url lt=concept-absolute-url>absolute URL</span> of the first request of the
 <a>CSS style sheet</a> or null if the <a>CSS style sheet</a> was
 embedded. Does not change during the lifetime of the <a>CSS style sheet</a>.

 <dt><dfn lt=concept-css-style-sheet-parent-css-style-sheet>parent CSS style sheet</dfn>
 <dd>Specified when created. The <a>CSS style sheet</a> that is the parent of the
 <a>CSS style sheet</a> or null if there is no associated parent.

 <dt><dfn lt=concept-css-style-sheet-owner-node>owner node</dfn>
 <dd>Specified when created. The DOM node associated with the <a>CSS style sheet</a> or
 null if there is no associated DOM node.

 <dt><dfn lt=concept-css-style-sheet-owner-css-rule>owner CSS rule</dfn>
 <dd>Specified when created. The <a>CSS rule</a> in the <span lt=concept-css-style-sheet-parent-css-style-sheet>parent CSS style sheet</span>
 that caused the inclusion of the <a>CSS style sheet</a> or null if
 there is no associated rule.

 <dt><dfn lt=concept-css-style-sheet-media>media</dfn>
 <dd>
  Specified when created. The <code>MediaList</code> object associated with the
  <a>CSS style sheet</a>.

  If this property is specified to a string, the <span lt=concept-css-style-sheet-media>media</span> must be set to the return value of invoking
  <span>create a <code>MediaList</code> object</span> steps for that string.

  If this property is specified to an attribute of the <span lt=concept-css-style-sheet-owner-node>owner node</span>, the
  <span lt=concept-css-style-sheet-media>media</span> must be set to the return value of invoking <span>create a <code>MediaList</code> object</span> steps
  for the value of that attribute. Whenever the attribute is set, changed or removed, the <span lt=concept-css-style-sheet-media>media</span>'s
  <code attribute for=MediaList>mediaText</code> attribute must be set to the new value of the attribute, or to null if the attribute is absent.

  Note: Changing the <span lt=concept-css-style-sheet-media>media</span>'s <code attribute for=MediaList>mediaText</code> attribute does not
  change the corresponding attribute on the <span lt=concept-css-style-sheet-owner-node>owner node</span>.


 <dt><dfn lt=concept-css-style-sheet-title>title</dfn>
 <dd>
  Specified when created. The title of the <a>CSS style sheet</a>, which can be the empty string.

  <div class="example">
   In the following, the <span lt=concept-css-style-sheet-title>title</span> is non-empty
   for the first style sheet, but is empty for the second and third style sheets.
   <pre>&lt;style lt="papaya whip">
  body { background: #ffefd5; }
&lt;/style></pre>
     <pre>&lt;style lt="">
  body { background: orange; }
&lt;/style></pre>
     <pre>&lt;style>
  body { background: brown; }
&lt;/style></pre>
  </div>

  If this property is specified to an attribute of the <span lt=concept-css-style-sheet-owner-node>owner node</span>, the
  <span lt=concept-css-style-sheet-title>title</span> must be set to the value of that attribute. Whenever the attribute is set, changed or removed, the
  <span lt=concept-css-style-sheet-title>title</span> must be set to the new value of the attribute, or to the empty string if the attribute is absent.



 <dt><dfn lt=concept-css-style-sheet-alternate-flag>alternate flag</dfn>
 <dd>
  Specified when created. Either set or unset. Unset by default.

  <div class="example">
   The following <span lt="CSS style sheet">CSS style sheets</span> have
   their <span lt=concept-css-style-sheet-alternate-flag>alternate flag</span> set:

   <pre>&lt;?xml-stylesheet alternate="yes" lt="x" href="data:text/css,&hellip;"?></pre>

   <pre>&lt;link rel="alternate stylesheet" lt="x" href="data:text/css,&hellip;"></pre>
  </div>


 <dt><dfn lt=concept-css-style-sheet-disabled-flag>disabled flag</dfn>
 <dd>
  Either set or unset. Unset by default.

  Note: Even when unset it does not necessarily mean that the
  <a>CSS style sheet</a> is actually used for rendering.



 <dt><dfn lt=concept-css-style-sheet-css-rules>CSS rules</dfn>
 <dd>The <span lt="CSS rule">CSS rules</span> associated with the
 <a>CSS style sheet</a>.

 <dt><dfn lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</dfn>
 <dd>Specified when created. Either set or unset. If it is set, the API allows reading and modifying of the <span lt=concept-css-style-sheet-css-rules>CSS
 rules</span>.
</dl>


### The {{StyleSheet}} Interface ### {#the-stylesheet-interface}

<!--
//
// All members defined since DOM-2 Style. Only difference
// is addition of [PutForwards=mediaText], which is presently
// not defined in CSSOM draft.
//
-->

The <code>StyleSheet</code> interface represents an abstract, base style sheet.

<pre class=idl>interface StyleSheet {
  readonly attribute DOMString type;
  readonly attribute DOMString? href;
  readonly attribute (Element or ProcessingInstruction)? ownerNode;
  readonly attribute StyleSheet? parentStyleSheet;
  readonly attribute DOMString? title;
  [SameObject, PutForwards=mediaText] readonly attribute MediaList media;
  attribute boolean disabled;
};</pre>

The <dfn attribute for=StyleSheet>type</dfn> attribute must return the <span lt=concept-css-style-sheet-type>type</span>.

The <dfn attribute for=StyleSheet>href</dfn> attribute must return the <span lt=concept-css-style-sheet-location>location</span>.

The <dfn attribute for=StyleSheet>ownerNode</dfn> attribute must return the <span lt=concept-css-style-sheet-owner-node>owner
node</span>.

The <dfn attribute for=StyleSheet>parentStyleSheet</dfn> attribute must return the
<span lt=concept-css-style-sheet-parent-css-style-sheet>parent CSS style sheet</span>.

The <dfn attribute for=StyleSheet>title</dfn> attribute must return the <span lt=concept-css-style-sheet-title>title</span> or null if
<span lt=concept-css-style-sheet-title>title</span> is the empty string.

The <dfn attribute for=StyleSheet>media</dfn> attribute must return the <span lt=concept-css-style-sheet-media>media</span>.

The <dfn attribute for=StyleSheet>disabled</dfn> attribute, on getting, must return true if the
<span lt=concept-css-style-sheet-disabled-flag>disabled flag</span>
is set, or false otherwise. On setting, the <code attribute for=StyleSheet>disabled</code> attribute must set the
<span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> if the new value is true, or unset the
<span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> otherwise.


### The {{CSSStyleSheet}} Interface ### {#the-cssstylesheet-interface}

<!--
//
// All members defined since DOM-2 Style. The only differences are:
//
//   1. removal of raises(DOMException) on {insert,delete}Rule operations.
//
-->

The <code>CSSStyleSheet</code> interface represents a <a>CSS style sheet</a>.

<pre class=idl>interface CSSStyleSheet : StyleSheet {
  readonly attribute CSSRule? ownerRule;
  [SameObject] readonly attribute CSSRuleList cssRules;
  unsigned long insertRule(DOMString rule, unsigned long index);
  void deleteRule(unsigned long index);
};</pre>

The <dfn attribute for=CSSStyleSheet>ownerRule</dfn> attribute must return the <span lt=concept-css-style-sheet-owner-css-rule>owner
CSS rule</span>. If a value other than null is ever returned, then that same value must always be returned on each get access.

The <dfn attribute for=CSSStyleSheet>cssRules</dfn> attribute must follow these steps:

<ol>
 <li>If the <span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span> is unset,
 <a>throw</a> a <code data-anolis-spec=webidl>SecurityError</code> exception.
 <li>Return a read-only, live <code>CSSRuleList</code> object representing
 the <span lt=concept-css-style-sheet-css-rules>CSS rules</span>.
 Note: Even though the returned <code>CSSRuleList</code> object is read-only (from the perspective of
 client-authored script), it can nevertheless change over time due to its liveness status. For example, invoking
 the <code method for=CSSStyleSheet>insertRule()</code> or <code method for=CSSStyleSheet>deleteRule()</code> methods can result in
 mutations reflected in the returned object.
</ol>

The <dfn method for=CSSStyleSheet>insertRule(<var>rule</var>, <var>index</var>)</dfn> method must run the following steps:

<ol>
 <li>If the <span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span> is unset,
 <a>throw</a> a <code data-anolis-spec=webidl>SecurityError</code> exception.
 <li>Return the result of invoking <a>insert a CSS rule</a> <var>rule</var> in the <span lt=concept-css-style-sheet-css-rules>CSS rules</span>
 at <var>index</var>.
</ol>

The <dfn method for=CSSStyleSheet>deleteRule(<var>index</var>)</dfn> method must run the following steps:

<ol>
 <li>If the <span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span> is unset,
 <a>throw</a> a <code data-anolis-spec=webidl>SecurityError</code> exception.
 <li><a>Remove a CSS rule</a> in the <span lt=concept-css-style-sheet-css-rules>CSS rules</span> at <var>index</var>.
</ol>

CSS Style Sheet Collections {#css-style-sheet-collections}
----------------------------------------------------------

Below various new concepts are defined that are associated with each
<code data-anolis-spec=dom>Document</code> object.

Each <code data-anolis-spec=dom>Document</code> has an associated list of zero or more
<span lt="CSS style sheet">CSS style sheets</span>, named the
<dfn>document CSS style sheets</dfn>. This is
an ordered list that contains all
<span lt="CSS style sheet">CSS style sheets</span> associated with the
<code data-anolis-spec=dom>Document</code>, in
<span data-anolis-spec=dom lt=concept-tree-order>tree order</span>, with
<span lt="CSS style sheet">CSS style sheets</span> created from HTTP
<code lt>Link</code> headers first, if any, in header
order.

To <dfn>create a CSS style sheet</dfn>, run these
steps:

<ol>
 <li>Create a new <a>CSS style sheet</a> object and set its
 properties as specified.

 <li>
  Then run the <a>add a CSS style sheet</a> steps for the newly created <a>CSS style sheet</a>.

  <p class=warning>If the <span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span> is unset, this can expose information from the user's
  intranet.
</ol>

To <dfn>add a CSS style sheet</dfn>, run these
steps:

<ol>
 <li>Add the <a>CSS style sheet</a> to the list of
 <a>document CSS style sheets</a> at the appropriate location. The
 remainder of these steps deal with the
 <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span>.

 <li>If the <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> is set, terminate
 these steps.

 <li>If the <span lt=concept-css-style-sheet-title>title</span> is not the empty string, the
 <span lt=concept-css-style-sheet-alternate-flag>alternate flag</span> is unset, and
 <a>preferred CSS style sheet set name</a> is the empty string
 <a>change the preferred CSS style sheet set name</a> to the
 <span lt=concept-css-style-sheet-title>title</span>.

 <li>
  If any of the following is true unset the
  <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> and terminate these steps:

  <ul>
   <li>The <span lt=concept-css-style-sheet-title>title</span> is the empty string.
   <li>The <a>last CSS style sheet set name</a> is null and the
   <span lt=concept-css-style-sheet-title>title</span> is a
   <span data-anolis-spec=dom>case-sensitive</span> match
   for the <a>preferred CSS style sheet set name</a>.
   <li>The <span lt=concept-css-style-sheet-title>title</span> is a
   <span data-anolis-spec=dom>case-sensitive</span> match for the
   <a>last CSS style sheet set name</a>.
  </ul>


 <li>Set the <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span>.
</ol>

To <dfn>remove a CSS style sheet</dfn>, run these steps:

<ol>
 <li>Remove the <a>CSS style sheet</a> from the list of <a>document CSS style sheets</a>.

 <li>Set the <a>CSS style sheet</a>'s <span lt=concept-css-style-sheet-parent-css-style-sheet>parent CSS style sheet</span>,
 <span lt=concept-css-style-sheet-owner-node>owner node</span> and <span lt=concept-css-style-sheet-owner-css-rule>owner CSS rule</span> to null.

 <!-- "associated CSS style sheet" is defined in terms of owner node, so we don't need to set it to null explicitly -->

 <!-- XXX does anything need to happen wrt alternate style sheets? what if the last style sheet with the preferred style sheet set name is removed? -->
</ol>

A <dfn>persistent CSS style sheet</dfn> is a
<a>CSS style sheet</a> from the <a>document CSS style sheets</a>
whose <span lt=concept-css-style-sheet-title>title</span> is the empty string and whose
<span lt=concept-css-style-sheet-alternate-flag>alternate flag</span> is unset.

A <dfn>CSS style sheet set</dfn> is an ordered
collection of one or more <span lt="CSS style sheet">CSS style sheets</span>
from the <a>document CSS style sheets</a> which have an identical
<span lt=concept-css-style-sheet-title>title</span> that is not the empty string.

A <dfn>CSS style sheet set name</dfn> is the
<span lt=concept-css-style-sheet-title>title</span> the <a>CSS style sheet set</a> has in
common.

An <dfn>enabled CSS style sheet set</dfn> is a
<a>CSS style sheet set</a> of which each <a>CSS style sheet</a> has
its <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> unset.

To <dfn>enable a CSS style sheet set</dfn>
with name <var>name</var>, run these steps:

<ol>
 <li>If <var>name</var> is the empty string, set the
 <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> for each <a>CSS style sheet</a>
 that is in a <a>CSS style sheet set</a> and terminate these steps.

 <li>Unset the <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> for each
 <a>CSS style sheet</a> in a <a>CSS style sheet set</a> whose
 <a>CSS style sheet set name</a> is a
 <span data-anolis-spec=dom>case-sensitive</span> match for
 <var>name</var> and set it for all other
 <span lt="CSS style sheet">CSS style sheets</span> in a
 <a>CSS style sheet set</a>.
</ol>

To <dfn>select a CSS style sheet set</dfn>
with name <var>name</var>, run these steps:

<ol>
 <li><a>enable a CSS style sheet set</a> with name
 <var>name</var>.

 <li>Set <a>last CSS style sheet set name</a> to
 <var>name</var>.
</ol>

A <dfn>last CSS style sheet set name</dfn>
is a concept to determine what <a>CSS style sheet set</a> was last
<span lt="select a CSS style sheet set">selected</span>. Initially its
value is null.

A
<dfn>preferred CSS style sheet set name</dfn>
is a concept to determine which
<span lt="CSS style sheet">CSS style sheets</span> need to have their
<span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> unset. Initially its value
is the empty string.

To
<dfn>change the preferred CSS style sheet set name</dfn>
with name <var>name</var>, run these steps:

<ol>
 <li>Let <var>current</var> be the <a>preferred CSS style sheet set name</a>.

 <li>Set <a>preferred CSS style sheet set name</a> to
 <var>name</var>.

 <li>If <var>name</var> is not a
 <span data-anolis-spec=dom>case-sensitive</span> match for
 <var>current</var> and
 <a>last CSS style sheet set name</a> is null
 <a>enable a CSS style sheet set</a> with name
 <var>name</var>.
</ol>

<!-- XXX ought to define "applied"

thoughts:
  depends on disabled flag, alternate flag, media queries, sheesh
 -->


### The HTTP Default-Style Header ### {#the-http-default-style-header}

The HTTP <code lt="http-default-style">Default-Style</code> header
can be used to set the <a>preferred CSS style sheet set name</a>
influencing which <a>CSS style sheet set</a> is (initially) the
<a>enabled CSS style sheet set</a>.

For each HTTP <code lt="http-default-style">Default-Style</code>
header, in header order, the user agent must
<a>change the preferred CSS style sheet set name</a> with name being the
value of the header.


### The {{StyleSheetList}} Interface ### {#the-stylesheetlist-interface}

The <code>StyleSheetList</code> interface represents an ordered collection of <span lt="CSS style sheet">CSS style sheets</span>.

<pre class=idl>[ArrayClass]
interface StyleSheetList {
  getter StyleSheet? item(unsigned long index);
  readonly attribute unsigned long length;
};</pre>

The object's <span data-anolis-spec=webidl>supported property indices</span> are the numbers in the range zero to one less than the number of
<span lt="CSS style sheet">CSS style sheets</span> represented by the collection. If there are no such <span lt="CSS style sheet">CSS style sheets</span>,
then there are no <span data-anolis-spec=webidl>supported property indices</span>.

The <dfn method for=StyleSheetList>item(<var>index</var>)</dfn> method must return the <var>index</var>th <a>CSS style
sheet</a> in the collection. If there is no <var>index</var>th object in the collection, then the method must return null.

The <dfn attribute for=StyleSheetList>length</dfn> attribute must return the number of <span lt="CSS style sheet">CSS style sheets</span>
represented by the collection.

### Extensions to the {{Document}} Interface ### {#extensions-to-the-document-interface}

<!--
//
// Significant changes since DOM-2 Style:
//
//   1. move styleSheets from separate interface (DocumentStyle) to Document
//   2. addition of selectedStyleSheetSet, lastStyleSheetSet, preferredStyleSheetSet, styleSheetSets, and enableStyleSheetsForSet members
//
// N.B. HTML4 Section 14.3 "External Style Sheets" introduces the concept of a "group [of] alternate style sheets ... under a single style [sheet set] name",
// but does not actually use the term "style sheet set". See http://www.w3.org/TR/html401/present/styles.html#h-14.3 for details.
//
// N.B. According to HTML4 Section 14.3, a "persistent style sheet ... must apply in addition to any alternate style sheet".
//
// N.B. HTML4 Section 14.3 distinguishes the three categories of style sheets as follows:
//
//   * persistent - @rel='stylesheet', @title is missing (or empty string?)
//   * preferred  - @rel='stylesheet', @title is present (and non-empty?)
//   * alternate  - @rel='alternate stylesheet', @title is present (and non-empty?)
//
// Also, HTML5 effectively defines:
//
//   * ignored    - @rel='alternate stylesheet', @title is missing (or is empty string?) - in this case, LinkStyle.style must evaluate to null
//
// N.B. HTML4 Section 4.3 allows author to specify the default preferred style sheet [set]... [presumably in the case that there are multiple preferred style
// sheet sets]:
//
//   * in content - <META http-equiv="Default-Style" content="compact">
//   * in http - e.g., using response header - "Default-Style: compact"
//   * if multiple of the above forms are present, then the LAST one [seen or parsed] takes precedence; HOWEVER, if two or more LINK elements specify preferred
//     style [sheet sets], the FIRST one present in the document takes precedence;
//   * preferred style sheets specified using the above (META or HTTP header equivalent) take precedence over those specified with LINK
//
// N.B. CSSOM Draft presently employs the term "Style Sheet Collection"
//
// Spec Issues:
//
//   1. need to specify which style sheets are included in styleSheets, and in which order:
//
//      * from Link HTTP header reference
//      * from <?xml-stylesheet ...?>
//      * from LINK element, @rel='stylesheet'|'alternate stylesheet'
//      * from STYLE element
//
//   2. for purpose of comparing two titled (named) style sheets, is title (name) compared on case-sensitive or case-insensitive basis
//
//   3. CSSOM 6.2 appears to imply that one can create a CSSStyleSheet (or StyleSheet) object and add it to a Document. However, that is not the case; rather
//      it is necessary to create an HTMLLinkElement or HTMLStyleElement element to indirectly create an empty StyleSheet, then this element can be added to the
//      Document.
//
-->

<pre class=idl>partial interface Document {
  [SameObject] readonly attribute StyleSheetList styleSheets;
  attribute DOMString? selectedStyleSheetSet;
  readonly attribute DOMString? lastStyleSheetSet;
  readonly attribute DOMString? preferredStyleSheetSet;
  readonly attribute DOMString[] styleSheetSets;
  void enableStyleSheetsForSet(DOMString? name);
};</pre>

The <dfn attribute for=Document>styleSheets</dfn> attribute must return a <code>StyleSheetList</code> collection representing
the <a>document CSS style sheets</a>.
Note: Because of historical IDL limitations the <code attribute for=Document>styleSheets</code> attribute
used to be on a separate interface, <code lt>DocumentStyle</code>.

The <dfn attribute for=Document>selectedStyleSheetSet</dfn> attribute, on getting, must run these steps:
<ol>
 <li>If there is a single <a>enabled CSS style sheet set</a> and no
 other <a>document CSS style sheets</a> with a
 <span lt=concept-css-style-sheet-title>title</span> that is not the empty string have the
 <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> unset, return the
 <a>CSS style sheet set name</a> of the
 <a>enabled CSS style sheet set</a> and terminate these steps.

 <li>Otherwise, if <span lt="CSS style sheet">CSS style sheets</span> from
 different <span lt="CSS style sheet set">CSS style sheet sets</span> have
 their <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> unset, return
 null and terminate these steps.

 <li>
  Otherwise, return the empty string.

  Note: At this point either all
  <span lt="CSS style sheet">CSS style sheets</span> with a
  <span lt=concept-css-style-sheet-title>title</span> that is not the empty string have the
  <span lt=concept-css-style-sheet-disabled-flag>disabled flag</span> set, or there are no such
  <span lt="CSS style sheet">CSS style sheets</span>.

</ol>

On setting the
<code attribute for=Document>selectedStyleSheetSet</code>
attribute these steps must be run:

<ol>
 <li>If the value is null terminate this set of steps.
 <li>Otherwise, <a>select a CSS style sheet set</a> with the name being the
 value passed.
</ol>

From the DOM's perspective, all views have the same
<code attribute for=Document>selectedStyleSheetSet</code>.
If a user agent supports multiple views with different selected
alternative style sheets, then this attribute (and the
<code>StyleSheet</code> interface's
<code attribute for=StyleSheet>disabled</code> attribute)
must return and set the value for the default
view.

The <dfn attribute for=Document>lastStyleSheetSet</dfn> attribute must return the <a>last CSS style sheet set name</a>.
Note: This attribute is initially null.

The <dfn attribute for=Document>preferredStyleSheetSet</dfn> attribute must return the <a>preferred CSS style sheet set
name</a>.
Note: Unlike <code attribute for=Document>lastStyleSheetSet</code>,
this attribute is initially the empty string.

The <dfn attribute for=Document>styleSheetSets</dfn> attribute must return a read only array of the
<span lt="CSS style sheet set name">CSS style sheet set names</span> of the <span lt="CSS style sheet set">CSS style sheet sets</span>, in order of the
<a>document CSS style sheets</a>. The array is live; if the <a>document CSS style sheets</a> change, the array must be updated as appropriate.

The <dfn method for=Document>enableStyleSheetsForSet(<var>name</var>)</dfn> method must, when invoked, run these
steps:
<ol>
 <li>If <var>name</var> is null terminate these steps.
 <li><a>enable a CSS style sheet set</a> with name <var>name</var>.
</ol>
Note: <span lt="CSS style sheet">CSS style sheets</span> with a
<span lt=concept-css-style-sheet-title>title</span> that is the empty string are never affected by this method.
This method does not change the values of the
<code attribute for=Document>lastStyleSheetSet</code> or
<code attribute for=Document>preferredStyleSheetSet</code> attributes.


### Interaction with the User Interface ### {#interaction-with-the-user-interface}

The user interface of Web browsers that support style sheets
should list the style sheet titles given in the
<code lt="dom-Document-styleSheetSets">styleSheetSets</code> list,
showing the
<code lt="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
as the selected style sheet set, leaving none selected if it is
null or the empty string, and selecting an extra option
"Basic Page Style" (or similar) if it is the empty string and the
<code lt="dom-Document-preferredStyleSheetSet">preferredStyleSheetSet</code>
is the empty string as well.

Selecting a style sheet from this list should
use the <a>select a CSS style sheet set</a> set of steps. This
(by definition) affects the
<code lt="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code>
attribute.

#### Persisting the selected CSS style sheet set #### {#persisting-the-selected-css-style-sheet-set}

If a user agent persist the <span lt="select a CSS style sheet set">selected</span> <a>CSS style sheet set</a>, it should use
the value of the
<code lt="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
attribute, or if that is null, the
<code lt="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code>
attribute, when leaving the page (or at some other time) to determine the
set name to store. If that is null then the <a>CSS style sheet set</a> should not be
persisted.

When re-setting the <a>CSS style sheet set</a> to the persisted value (which can
happen at any time, typically at the first time the <span lt="CSS style sheet">CSS style sheets</span> are
needed for styling the document, after the <code lt>&lt;head&gt;</code> of
the document has been parsed, after any scripts that are not dependent on
computed style have executed), the <a>CSS style sheet set</a>
should be set by using the
<a>select a CSS style sheet set</a> set of steps as if the user had
selected the <a>CSS style sheet set</a> manually.

Note: This specification does not give any suggestions on
how user agents are to decide to persist the <a>CSS style sheet set</a> or whether or
how to persist the <span lt="select a CSS style sheet set">selected</span> <a>CSS style sheet set</a> across pages.

<!-- XXX this UI section suggests we may want to introduce a few more
     idioms -->


### Examples ### {#css-style-sheet-collections-examples}

<div class="example">
 Thus, in the following HTML snippet:

 <pre>&lt;link rel="alternate stylesheet" lt="foo" href="a"&gt;
&lt;link rel="alternate stylesheet" lt="bar" href="b"&gt;
&lt;script&gt;
  document.selectedStyleSheetSet = 'foo';
  document.styleSheets[1].disabled = false;
&lt;/script&gt;
&lt;link rel="alternate stylesheet" lt="foo" href="c"&gt;
&lt;link rel="alternate stylesheet" lt="bar" href="d"&gt;</pre>

 ...the style sheets that end up enabled are style sheets "a", "b",
 and "c", the
 <code lt="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
 attribute would return null,
 <code lt="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code>
 would return "foo", and
 <code lt="dom-Document-preferredStyleSheetSet">preferredStyleSheetSet</code>
 would return the empty string.

 Similarly, in the following HTML snippet:

 <pre>&lt;link rel="alternate stylesheet" lt="foo" href="a"&gt;
&lt;link rel="alternate stylesheet" lt="bar" href="b"&gt;
&lt;script&gt;
  var before = document.preferredStyleSheetSet;
  document.styleSheets[1].disabled = false;
&lt;/script&gt;
&lt;link rel="stylesheet" lt="foo" href="c"&gt;
&lt;link rel="alternate stylesheet" lt="bar" href="d"&gt;
&lt;script&gt;
  var after = document.preferredStyleSheetSet;
&lt;/script&gt;</pre>

 ...the "before" variable will be equal to the empty string, the
 "after" variable will be equal to "foo", and style sheets "a" and "c"
 will be enabled. This is the case even though the first script block
 sets style sheet "b" to be enabled, because upon parsing the
 following <code lt>&lt;link&gt;</code> element, the
 <code lt="dom-Document-preferredStyleSheetSet">preferredStyleSheetSet</code>
 is set and the
 <code lt="dom-Document-enableStyleSheetsForSet()">enableStyleSheetsForSet()</code>
 method is called (since
 <code lt="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
 was never set
 explicitly, leaving
 <code lt="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code> at
 null throughout), which changes which style sheets are enabled and which
 are not.
</div>


Style Sheet Association {#style-sheet-association}
--------------------------------------------------

This section defines the interface an
<span lt=concept-css-style-sheet-owner-node>owner node</span> of a <a>CSS style sheet</a> has to
implement and defines the requirements for
<span data-anolis-spec=xmlss lt="xml-stylesheet processing instruction">xml-stylesheet processing instructions</span>
and HTTP <code lt>Link</code> headers when the link
relation type is an
<span data-anolis-spec=dom>ASCII case-insensitive</span> match for
"<code lt>stylesheet</code>" since nobody else was interested in
defining this.

Note: The editor is in good hope that HTML and SVG will define the
appropriate processing in their respective specifications, in terms of
this specification, in due course.


### Fetching CSS style sheets ### {#fetching-css-style-sheets}

To <dfn>fetch a CSS style sheet</dfn> with parsed URL <var>parsed URL</var>, referrer <var>referrer</var>, document
<var>document</var>, optionally a set of parameters <var>parameters</var> (used as input to creating a
<span data-anolis-spec=fetch lt=concept-request>request</span>), follow these steps:

<ol>
 <li>Let <var>origin</var> be <var>document</var>'s <span data-anolis-spec=html>origin</span>.

 <li>Let <var>request</var> be a new <span data-anolis-spec=fetch lt=concept-request>request</span>, with the
 <span data-anolis-spec=fetch lt=concept-request-url>url</span> <var>parsed URL</var>,
 <span data-anolis-spec=fetch lt=concept-request-origin>origin</span> <var>origin</var>,
 <span data-anolis-spec=fetch lt=concept-request-referrer>referrer</span> <var>referrer</var>, and if specified the set of parameters <var>parameters</var>.

 <li>Let <var>response</var> be the result of <span data-anolis-spec=fetch lt=concept-fetch>fetching</span> <var>request</var>.

 <li>Wait until <var>response</var> is available.

 <li>If <var>response</var> is a <span data-anolis-spec=fetch lt=concept-network-error>network error</span>, return an error.

 <li>If <var>document</var> is in <span data-anolis-spec=dom lt=concept-document-quirks>quirks mode</span>, <var>response</var> is
 <span lt>CORS-same-origin</span><!--XXX xref--> and the <span data-anolis-spec=html>Content-Type metadata</span> of <var>response</var> is not a
 <a>supported styling language</a> change the <span data-anolis-spec=html>Content-Type metadata</span> of <var>response</var> to
 <code lt>text/css</code>.

 <li>If <var>response</var> is not in a <a>supported styling language</a> return an error.

 <li>Return <var>response</var>.
</ol>

### The {{LinkStyle}} Interface ### {#the-linkstyle-interface}

The <dfn>associated CSS style sheet</dfn> of a node is the <a>CSS style sheet</a> in the list of
<a>document CSS style sheets</a> of which the <span lt=concept-css-style-sheet-owner-node>owner node</span> implements the <code>LinkStyle</code>
interface.

<pre class=idl>[NoInterfaceObject]
interface <dfn>LinkStyle</dfn> {
  readonly attribute <a>StyleSheet</a>? <span lt=dom-LinkStyle-sheet>sheet</span>;
};</pre>

The <dfn attribute for=LinkStyle>sheet</dfn> attribute must return the <a>associated CSS style sheet</a> for the node or null
if there is no <a>associated CSS style sheet</a>.

<div class="example">
 In the following fragment, the first <code lt>style</code>
 element has a <code attribute for=LinkStyle>sheet</code> attribute that returns a
 <code>StyleSheet</code> object representing the style sheet, but for
 the second <code lt>style</code> element, the <code attribute for=LinkStyle>sheet</code> attribute returns null,
 assuming the user agent supports CSS (<code lt>text/css</code>), but does
 not support the (hypothetical) ExampleSheets (<code lt>text/example-sheets</code>).

 <pre>&lt;style type="text/css"&gt;
  body { background:lime }
&lt;/style&gt;</pre>
   <pre>&lt;style type="text/example-sheets"&gt;
  $(body).background := lime
&lt;/style&gt;</pre>
</div>

Note: Whether or not the node refers to a style sheet is defined
by the specification that defines the semantics of said node.


### Requirements on specifications ### {#requirements-on-specifications}

Specifications introducing new ways of associating style sheets through
the DOM should define which nodes implement the
<code>LinkStyle</code> interface. When doing so, they
must also define when a <a>CSS style sheet</a> is
<span lt="create a CSS style sheet">created</span>.


### Requirements on User Agents Implementing the xml-stylesheet processing instruction ### {#requirements-on-user-agents-implementing-the-xml-stylesheet-processing-instruction}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!-- XXX load/error events -->

<pre class="idl"><span data-anolis-spec=dom>ProcessingInstruction</span> implements <a>LinkStyle</a>;</pre>

The <dfn>prolog</dfn> refers to <span data-anolis-spec=dom lt=concept-node>nodes</span> that are children of the
<span data-anolis-spec=dom lt=concept-document>document</span> and are not <span data-anolis-spec=dom lt=concept-tree-following>following</span> the
<code data-anolis-spec=dom>Element</code> child of the <span data-anolis-spec=dom lt=concept-document>document</span>, if any.

When a <code data-anolis-spec=dom>ProcessingInstruction</code> <span data-anolis-spec=dom lt=concept-node>node</span> <var>node</var> becomes part of the
<a>prolog</a>, is no longer part of the <a>prolog</a>, or has its <span data-anolis-spec=dom lt=concept-cd-data>data</span> changed, these steps
must be run:

<ol>
 <li>If an instance of this algorithm is currently running for <var>node</var>, abort that instance, and stop the associated
 <span data-anolis-spec=fetch lt=concept-fetch>fetching</span> if applicable.

 <li>If <var>node</var> has an <a>associated CSS style sheet</a>, <span lt="remove a CSS style sheet">remove</span> it.

 <li>If <var>node</var> is not an <span data-anolis-spec=xmlss>xml-stylesheet processing instruction</span>, terminate these steps.

 <li>If <var>node</var> does not have an <code lt>href</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>, terminate these steps.

 <li>Let <var>title</var> be the value of the
 <code lt>title</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> or the empty string if the
 <code lt>title</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> is not specified.

 <li>If there is an <code lt>alternate</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>
 whose value is a <span data-anolis-spec=dom>case-sensitive</span> match
 for "<code lt>yes</code>" and <var>title</var> is the
 empty string terminate these steps.

 <li>If there is a <code lt>type</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> whose
 value is not a <a>supported styling language</a> the user agent
 may terminate these steps.

 <li>Let <var>input URL</var> be the value specified by the
 <code lt>href</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>.

 <li>Let <var>document</var> be <var>node</var>'s <span data-anolis-spec=dom lt=concept-node-document>node document</span>

 <li>Let <var>base URL</var> be <var>document</var>'s <span data-anolis-spec=html>document base URL</span>.

 <li>Let <var>referrer</var> be <var>document</var>'s <span data-anolis-spec=html lt="the document's address">address</span>.

 <li>Let <var>parsed URL</var> be the return value of invoking the <span data-anolis-spec=url lt=concept-url-parser>URL parser</span> with the
 string <var>input URL</var> and the base URL <var>base URL</var>.

 <li>If <var>parsed URL</var> is failure, terminate these steps.

 <li>Let <var>response</var> be the result of <span lt="fetch a CSS style sheet">fetching a CSS style sheet</span> with parsed URL <var>parsed URL</var>,
 referrer <var>referrer</var> and document <var>document</var>.

 <li>If <var>response</var> is an error, terminate these steps.

 <li>
  <a>Create a CSS style sheet</a> with the following properties:

  <dl>
   <dt><span lt=concept-css-style-sheet-location>location</span>
   <dd>The result of invoking the <span data-anolis-spec=url lt=concept-url-serializer>URL serializer</span> with <var>parsed URL</var>.

   <dt><span lt=concept-css-style-sheet-parent-css-style-sheet>parent CSS style sheet</span>
   <dd>null.

   <dt><span lt=concept-css-style-sheet-owner-node>owner node</span>
   <dd><var>node</var>.

   <dt><span lt=concept-css-style-sheet-owner-css-rule>owner CSS rule</span>
   <dd>null.

   <dt><span lt=concept-css-style-sheet-media>media</span>
   <dd>The value of the <code lt>media</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>
   if any, or the empty string otherwise.

   <dt><span lt=concept-css-style-sheet-title>title</span>
   <dd><var>title</var>.

   <dt><span lt=concept-css-style-sheet-alternate-flag>alternate flag</span>
   <dd>Set if the <code lt>alternate</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>
   value is a <span data-anolis-spec=dom>case-sensitive</span> match for
   "<code lt>yes</code>", or unset otherwise.

   <dt><span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span>
   <dd>Set if <var>response</var> is <span lt>CORS-same-origin</span><!--XXX xref-->, or unset otherwise.
  </dl>

  The CSS <a>environment encoding</a> is the result of running the following steps:

  <ol>
   <li>If the element has a <code lt>charset</code>
   <span data-anolis-spec=xmlss>pseudo-attribute</span>,
   <a>get an encoding</a> from that pseudo-attribute's value.
   If that succeeds, return the resulting encoding and abort these steps.

   <li>Otherwise, return the <a>document's character encoding</a>.
   [[!DOM]]
  </ol>

</ol>

A style sheet referenced by an <span data-anolis-spec=xmlss>xml-stylesheet processing instruction</span> using the rules in this section, in the context of
the <code data-anolis-spec=dom>Document</code> of an <span data-anolis-spec=html>XML parser</span> is said to be
<span data-anolis-spec=html>a style sheet that is blocking scripts</span> if the <code data-anolis-spec=dom>ProcessingInstruction</code>
<span data-anolis-spec=dom lt=concept-node>node</span> was created by that <code data-anolis-spec=dom>Document</code>'s parser, and the style sheet was
enabled when the node was created by the parser, and the <span data-anolis-spec=html>style sheet ready</span> flag is not yet set, and, the last time the
<span data-anolis-spec=html>event loop</span> reached step 1, the node was in that Document, and the user agent hasn't given up on that particular style sheet
yet. A user agent may give up on such a style sheet at any time.

### Requirements on User Agents Implementing the HTTP Link Header ### {#requirements-on-user-agents-implementing-the-http-link-header}

<!-- XXX ref, one day -->

<!-- XXX deal with media param -->

<p class=atrisk>For each HTTP <code lt>Link</code> header of which one
of the link relation types is an
<span data-anolis-spec=dom>ASCII case-insensitive</span> match
for "<code lt>stylesheet</code>" these steps
must be run:

<ol>
 <li>Let <var>title</var> be the value of the first of all the
 <code lt>title</code> parameters.
 If there are no such parameters it is the empty string.

 <li>If one of the (other) link relation types is an
 <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
 "<code lt>alternate</code>" and <var>title</var> is the
 empty string terminate these steps.

 <li>Let <var>input URL</var> be the value specified. <span class=issue>Be more specific</span>

 <li>Let <var>base URL</var> be the document's <span data-anolis-spec=html>document base URL</span>. <span class=issue>Is there a document at this
 point?</span>

 <li>Let <var>referrer</var> be the document's <span data-anolis-spec=html lt="the document's address">address</span>.

 <li>Let <var>origin</var> be the document's <span data-anolis-spec=html>origin</span>.

 <li>Let <var>parsed URL</var> be the return value of invoking the <span data-anolis-spec=url lt=concept-url-parser>URL parser</span> with the
 string <var>input URL</var> and the base URL <var>base URL</var>.

 <li>If <var>parsed URL</var> is failure, terminate these steps.

 <li>Let <var>response</var> be the result of <span lt="fetch a CSS style sheet">fetching a CSS style sheet</span> with parsed URL <var>parsed URL</var>,
 referrer <var>referrer</var> and document being the document. <span class=issue>What if the HTML parser hasn't decided on quirks/non-quirks yet?</span>

 <li>
  <a>Create a CSS style sheet</a> with the following properties:

  <dl>
   <dt><span lt=concept-css-style-sheet-location>location</span>
   <dd>The result of invoking the <span data-anolis-spec=url lt=concept-url-serializer>URL serializer</span> with <var>parsed URL</var>.

   <dt><span lt=concept-css-style-sheet-owner-node>owner node</span>
   <dd>null.

   <dt><span lt=concept-css-style-sheet-parent-css-style-sheet>parent CSS style sheet</span>
   <dd>null.

   <dt><span lt=concept-css-style-sheet-owner-css-rule>owner CSS rule</span>
   <dd>null.

   <dt><span lt=concept-css-style-sheet-media>media</span>
   <dd>The value of the first <code lt>media</code> parameter.
   <!-- XXX register media parameter? bah -->

   <dt><span lt=concept-css-style-sheet-title>title</span>
   <dd><var>title</var>.

   <dt><span lt=concept-css-style-sheet-alternate-flag>alternate flag</span>
   <dd>Set if one of the specified link relation type for this HTTP
   <code lt>Link</code> header is an
   <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
   "<code lt>alternate</code>", or false otherwise.

   <dt><span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span>
   <dd>Set if <var>response</var> is <span lt>CORS-same-origin</span><!--XXX xref-->, or unset otherwise.
  </dl>

</ol>

A style sheet referenced by a HTTP <code lt>Link</code> header using the rules in this section is said to be <span data-anolis-spec=html>a style sheet
that is blocking scripts</span> if the style sheet was enabled when created, and the <span data-anolis-spec=html>style sheet ready</span> flag is not yet set,
and the user agent hasn't given up on that particular style sheet yet. A user agent may give up on such a style sheet at any time.

CSS Rules {#css-rules}
----------------------

A <dfn>CSS rule</dfn> is an abstract concept that
denotes a rule as defined by the CSS specification. A
<a>CSS rule</a> is represented as an object that implements a subclass of
the <code>CSSRule</code> interface, and which has the following
associated state items:

<dl>
<dt><dfn lt=concept-css-rule-type>type</dfn>
<dd>A non-negative integer associated with a particular type of rule.
This item is initialized when a rule is created and cannot change.

<dt><dfn lt=concept-css-rule-text>text</dfn>
<dd>A text representation of the rule suitable for direct use in a style sheet.
This item is initialized when a rule is created and can be changed.

<dt><dfn lt=concept-css-rule-parent-css-rule>parent CSS rule</dfn>
<dd>A reference to an enclosing <a>CSS rule</a> or null.
If the rule has an enclosing rule when it is created, then this item is initialized to the enclosing rule; otherwise it is null. It can be changed to
null.

<dt><dfn lt=concept-css-rule-parent-css-style-sheet>parent CSS style sheet</dfn>
<dd>A reference to a parent <a>CSS style sheet</a> or null.
This item is initialized to reference an associated style sheet when the rule is created. It can be changed to null.

<dt><dfn lt=concept-css-rule-child-css-rules>child CSS rules</dfn>
<dd>A list of child <span lt="CSS rule">CSS rules</span>. The list can be mutated.
</dl>

In addition to the above state, each <a>CSS rule</a> may be associated
with other state in accordance with its <span lt=concept-css-rule-type>type</span>.

To <dfn>parse a CSS rule</dfn> from a string <var>string</var>, run the following steps:

<ol>
 <li>Let <var>rule</var> be the return value of invoking <span data-anolis-spec=csssyntax>parse a rule</span> with <var>string</var>.
 <li>If <var>rule</var> is a syntax error, return <var>rule</var>.
 <li>Let <var>parsed rule</var> be the result of parsing <var>rule</var> according to the appropriate CSS specifications, dropping parts that are said to be
 ignored. If the whole style rule is dropped, return a syntax error.
 <li>Return <var>parsed rule</var>.
</ol>

To <dfn>serialize a CSS rule</dfn>, perform one of the following in accordance with the <a>CSS rule</a>'s
<span lt="concept-css-rule-type">type</span>:

<dl class="switch">
 <dt><code>CSSStyleRule</code>
 <dd>
  The result of concatenating the following:
  <ol>
   <li>The result of performing <a>serialize a group of selectors</a> on the rule's associated selectors.
   <li>The string "<code lt> { </code>", i.e., a single SPACE (U+0020), followed by LEFT CURLY BRACKET (U+007B),
   followed by a single SPACE (U+0020).
   <li>The result of performing <a>serialize a CSS declaration block</a> on the rule's associated declarations.
   <li>If the rule is associated with one or more declarations, the string "<code lt> </code>", i.e., a single SPACE (U+0020).
   <li>The string "<code lt>}</code>", RIGHT CURLY BRACKET (U+007D).
  </ol>


 <dt><code>CSSCharsetRule</code>
 <dd>
  The result of concatenating the following:
  <ol>
   <li>The string "<code lt>@charset</code>" followed by a single SPACE (U+0020).
   <li>The result of performing <a>serialize a string</a> on the rule's character encoding.
   <li>The string "<code lt>;</code>", i.e., SEMICOLON (U+003B).
  </ol>
  <div class="example">
  <pre>@charset "UTF-8";</pre>
  </div>


 <dt><code>CSSImportRule</code>
 <dd>
  The result of concatenating the following:
  <ol>
   <li>The string "<code lt>@import</code>" followed by a single SPACE (U+0020).
   <li>The result of performing <a>serialize a URL</a> on the rule's location.
   <li>If the rule's associated media list is not empty, a single SPACE (U+0020) followed by the
   result of performing <a>serialize a media query list</a> on the media list.
   <li>The string "<code lt>;</code>", i.e., SEMICOLON (U+003B).
  </ol>
  <div class="example">
  <pre>@import url("import.css");</pre>
  <pre>@import url("print.css") print;</pre>
  </div>


 <dt><code>CSSMediaRule</code>
 <dd>Issue: ...

 <dt><code lt>CSSFontFaceRule</code>
 <dd>Issue: ...

 <dt><code>CSSPageRule</code>
 <dd>Issue: ...

 <dt><code>CSSNamespaceRule</code>
 <dd>The literal string "<code lt>@namespace</code>", followed by a single SPACE
 (U+0020), followed by the
 <span lt="serialize an identifier">identifier escaped</span> value of the
 <code lt="dom-CSSNamespaceRule-prefix">prefix</code> attribute (if
 any), followed by a single SPACE (U+0020) if there is a prefix, followed by the
 <span lt="serialize a URL">URL escaped</span> value of the
 <code lt="dom-CSSNamespaceRule-namespaceURI">namespaceURI</code>
 attribute, followed the character "<code lt>;</code>" (U+003B).
</dl>

To <dfn>insert a CSS rule</dfn> <var>rule</var> in a CSS rule list <var>list</var> at index <var>index</var>, follow these steps:
<ol>
 <li>Set <var>new rule</var> to the results of performing <a>parse a CSS rule</a>
 on argument <var>rule</var>.
 <li>If <var>new rule</var> is a syntax error, <a>throw</a>
 a <code data-anolis-spec=webidl>SyntaxError</code> exception.
 <li>If <var>new rule</var> is an <code lt>@charset</code> at-rule, <a>throw</a> a
 <code data-anolis-spec=webidl>SyntaxError</code> exception.
 <li>Set <var>length</var> to the number of items in <var>list</var>.
 <li>If <var>index</var> is greater than <var>length</var>, then <a>throw</a>
 an <code data-anolis-spec=webidl>IndexSizeError</code> exception.
 <li>If <var>new rule</var> cannot be inserted into <var>list</var> at the zero-index position <var>index</var> due to constraints
 specified by CSS, then <a>throw</a>
 a <code data-anolis-spec=webidl>HierarchyRequestError</code> exception. [[!CSS21]]
 Note: For example, a CSS style sheet cannot contain an <code lt>@import</code> at-rule after a style rule.
 <li>If <var>new rule</var> is an <code lt>@namespace</code> at-rule, and <var>list</var> contains anything other than
 <code lt>@charset</code> at-rules, <code lt>@import</code> at-rules, and <code lt>@namespace</code> at-rules,
 <a>throw</a> an <code data-anolis-spec=webidl>InvalidStateError</code> exception.
 <li>Insert <var>new rule</var> into <var>list</var> at the zero-indexed position <var>index</var>.
 <li>Return <var>index</var>.
</ol>

To <dfn>remove a CSS rule</dfn> from a CSS rule list <var>list</var> at index <var>index</var>, follow these steps:
<ol>
 <li>Set <var>length</var> to the number of items in <var>list</var>.
 <li>If <var>index</var> is greater than or equal to <var>length</var>, then <a>throw</a>
 an <code data-anolis-spec=webidl>IndexSizeError</code> exception.
 <li>Set <var>old rule</var> to the <var>index</var>th item in <var>list</var>.
 <li>If <var>old rule</var> is an <code lt>@namespace</code> at-rule, and <var>list</var> contains anything other than
 <code lt>@charset</code> at-rules, <code lt>@import</code> at-rules, and <code lt>@namespace</code> at-rules,
 <a>throw</a> an <code data-anolis-spec=webidl>InvalidStateError</code> exception.
 <li>Remove rule <var>old rule</var> from <var>list</var> at the zero-indexed position <var>index</var>.
 <li>Set <var>old rule</var>'s <span lt=concept-css-rule-parent-css-rule>parent CSS rule</span> and
 <span lt=concept-css-rule-parent-css-style-sheet>parent CSS style sheet</span> to null.
</ol>


### The {{CSSRuleList}} Interface ### {#the-cssrulelist-interface}

The <code>CSSRuleList</code> interface represents an ordered collection of CSS style rules.

<pre class=idl>[ArrayClass]
interface CSSRuleList {
  getter CSSRule? item(unsigned long index);
  readonly attribute unsigned long length;
};</pre>

The object's <span data-anolis-spec=webidl>supported property indices</span> are the numbers in the range zero to one less than the number of
<code>CSSRule</code> objects represented by the collection. If there are no such <code>CSSRule</code> objects, then there are no
<span data-anolis-spec=webidl>supported property indices</span>.

The <dfn method for=CSSRuleList>item(<var>index</var>)</dfn> method must return the <var>index</var>th <code>CSSRule</code>
object in the collection. If there is no <var>index</var>th object in the collection, then the method must return null.

The <dfn attribute for=CSSRuleList>length</dfn> attribute must return the number of <code>CSSRule</code> objects represented by the
collection.

### The {{CSSRule}} Interface ### {#the-cssrule-interface}

<!--
//
// All members defined since DOM-2 Style. The only differences are:
//
//   1. removal of UNKNOWN_RULE = 0 constant
//   2. addition of NAMESPACE_RULE = 10 constant
//   3. removal of commented raises(DOMException) on setting cssText
//
-->

The <code>CSSRule</code> interface represents an abstract, base CSS style rule. Each
distinct CSS style rule type is represented by a distinct interface that
inherits from this interface.

<pre class=idl>interface CSSRule {
  const unsigned short STYLE_RULE = 1;
  const unsigned short CHARSET_RULE = 2;
  const unsigned short IMPORT_RULE = 3;
  const unsigned short MEDIA_RULE = 4;
  const unsigned short FONT_FACE_RULE = 5;
  const unsigned short PAGE_RULE = 6;
  const unsigned short MARGIN_RULE = 9;
  const unsigned short NAMESPACE_RULE = 10;
  readonly attribute unsigned short type;
  attribute DOMString cssText;
  readonly attribute CSSRule? parentRule;
  readonly attribute CSSStyleSheet? parentStyleSheet;
};</pre>

The <dfn attribute for=CSSRule>type</dfn> attribute must return the CSS rule type, as follows:

<dl class=switch>
 <dt>If the object is a <code>CSSStyleRule</code>
 <dd>Return <dfn const for=CSSRule>STYLE_RULE</dfn> (numeric value 1).
 <dt>If the object is a <code>CSSCharsetRule</code>
 <dd>Return <dfn const for=CSSRule>CHARSET_RULE</dfn> (numberic value 2).
 <dt>If the object is a <code>CSSImportRule</code>
 <dd>Return <dfn const for=CSSRule>IMPORT_RULE</dfn> (numberic value 3).
 <dt>If the object is a <code>CSSMediaRule</code>
 <dd>Return <dfn const for=CSSRule>MEDIA_RULE</dfn> (numeric value 4).
 <dt>If the object is a <code lt>CSSFontFaceRule</code>
 <dd>Return <dfn const for=CSSRule>FONT_FACE_RULE</dfn> (numeric value 5).
 <dt>If the object is a <code>CSSPageRule</code>
 <dd>Return <dfn const for=CSSRule>PAGE_RULE</dfn> (numeric value 6).
 <dt>If the object is a <code>CSSNamespaceRule</code>
 <dd>Return <dfn const for=CSSRule>MARGIN_RULE</dfn> (numeric value 9).
 <dt>If the object is a <code>CSSMarginRule</code>
 <dd>Return <dfn const for=CSSRule>NAMESPACE_RULE</dfn> (numeric value 10).
 <dt>Otherwise
 <dd>Return a value defined on the <a href="http://wiki.csswg.org/spec/cssom-constants">CSSOM Constants</a> wiki page.
</dl>

Note: The value 0, formerly known as <code lt>UNKNOWN_RULE</code>, is made
obsolete by this specification. This value will not be re-allocated in the future and will remain reserved.

The <dfn attribute for=CSSRule>cssText</dfn> attribute must return a <span lt="serialize a CSS rule">serialization</span> of the
<a>CSS rule</a>.
On setting the <code attribute for=CSSRule>cssText</code> attribute these steps must be run:
<ol>
 <li>Let <var>new rule</var> be the returned value of <span lt="parse a CSS rule">parsing</span> the value.
 <li>If <var>new rule</var> is a syntax error, terminate this algorithm.
 <li>If the <span lt=concept-css-rule-type>type</span> of <var>new rule</var> does not match the <span lt=concept-css-rule-type>type</span> of
 the current object
 <a>throw</a> an
 <code data-anolis-spec=webidl>InvalidModificationError</code> exception.
 <li>Replace the current object with <var>new rule</var>.
</ol>

The <dfn attribute for=CSSRule>parentRule</dfn> attribute must return the <span lt=concept-css-rule-parent-css-rule>parent CSS
rule</span>.
Note: For example, <code lt>@media</code> can enclose a rule, in which case <code attribute for=CSSRule>parentRule</code> would
be non-null; in cases where there is no enclosing rule, <code attribute for=CSSRule>parentRule</code> will be null.

The <dfn attribute for=CSSRule>parentStyleSheet</dfn> attribute must return the
<span lt=concept-css-rule-parent-css-style-sheet>parent CSS style sheet</span>.
Note: The only circumstance where null is returned when a rule has been <span lt="remove a CSS rule">removed</span>.
Note: Removing a <code data-anolis-spec=dom>Node</code> that implements the <code>LinkStyle</code> interface from a
<code data-anolis-spec=dom>Document</code> instance does not (by itself) cause the <code>CSSStyleSheet</code> referenced by a <code>CSSRule</code> to be
unreachable.


### The {{CSSStyleRule}} Interface ### {#the-cssstylerule-interface}

<!--
//
// All members defined since DOM-2 Style. The only differences are:
//
//   1. removal of commented raises(DOMException) on setting selectorText
//
-->

The <code>CSSStyleRule</code> interface represents a style rule.

Note: CSS 2.1 calls style rule <a href="http://www.w3.org/TR/CSS21/syndata.html#rule-sets">rule sets</a>.

<pre class=idl>interface CSSStyleRule : CSSRule {
  attribute DOMString selectorText;
  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;
};</pre>

The <dfn attribute for=CSSStyleRule>selectorText</dfn> attribute, on getting, must return the result of
<span lt="serialize a group of selectors">serializing</span> the associated <a>group of selectors</a>.
On setting the <code attribute for=CSSStyleRule>selectorText</code> attribute these steps must be run:
<ol>
 <li>Run the <a>parse a group of selectors</a> algorithm on the given value.
 <li>If the algorithm returns a non-null value replace the associated <a>group of selectors</a> with the returned value.
 <li>Otherwise, if the algorithm returns a null value, do nothing.
</ol>

The <dfn attribute for=CSSStyleRule>style</dfn> attribute must return a <code>CSSStyleDeclaration</code> object for the style rule, with the
following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Unset.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>The declared declarations in the rule, in <span lt=concept-declarations-specified-order>specified order</span>.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>Null.
</dl>

The <dfn lt=concept-declarations-specified-order>specified order</dfn> for declarations is the same as specified, but with shorthand properties
expanded into their longhand properties, in canonical order. If a property is specified more than once (after shorthand expansion), only the
one with greatest cascading order must be represented, at the same relative position as it was specified. [[!CSS3CASCADE]]

### The {{CSSCharsetRule}} Interface ### {#the-csscharsetrule-interface}

Issue: The <code>CSSCharsetRule</code> is being considered for removal. See <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=27422">bug 27422</a>.

The <code>CSSCharsetRule</code> interface represents an <code lt>@charset</code> at-rule.

<pre class=idl>interface CSSCharsetRule : CSSRule {
  attribute DOMString encoding;
};</pre>

The <dfn attribute for=CSSCharsetRule>encoding</dfn> attribute must return the encoding information specified by the
<code lt>@charset</code> at-rule.


### The {{CSSImportRule}} Interface ### {#the-cssimportrule-interface}

The <code>CSSImportRule</code> interface represents an <code lt>@import</code> at-rule.

<pre class=idl>interface CSSImportRule : CSSRule {
  readonly attribute DOMString href;
  [SameObject, PutForwards=mediaText] readonly attribute MediaList media;
  [SameObject] readonly attribute CSSStyleSheet styleSheet;
};</pre>

The <dfn attribute for=CSSImportRule>href</dfn> attribute must return the <span data-anolis-spec=url lt=concept-url>URL</span> specified by
the <code lt>@import</code> at-rule.
Note: To get the resolved <span data-anolis-spec=url lt=concept-url>URL</span> use the <code attribute for=StyleSheet>href</code>
attribute of the associated <a>CSS style sheet</a>.

The <dfn attribute for=CSSImportRule>media</dfn> attribute must return the value of the <code attribute for=StyleSheet>media</code>
attribute of the associated <a>CSS style sheet</a>.

The <dfn attribute for=CSSImportRule>styleSheet</dfn> attribute must return the associated <a>CSS style sheet</a>.
Note: If loading of the style sheet fails its <span lt=concept-css-style-sheet-css-rules>CSS rules</span>
list is simply empty, i.e., an <code lt>@import</code> at-rule always has an associated <a>CSS style sheet</a>.


### The {{CSSGroupingRule}} Interface ### {#the-cssgroupingrule-interface}

The <code>CSSGroupingRule</code> interface represents an at-rule that contains other rules nested inside itself.

<pre class=idl>interface CSSGroupingRule : CSSRule {
  [SameObject] readonly attribute CSSRuleList cssRules;
  unsigned long insertRule(DOMString rule, unsigned long index);
  void deleteRule(unsigned long index);
};</pre>

The <dfn attribute for=CSSGroupingRule>cssRules</dfn> attribute must return a <code>CSSRuleList</code> object for the
<span lt=concept-css-rule-child-css-rules>child CSS rules</span>.

The <dfn method for=CSSGroupingRule>insertRule(<var>rule</var>, <var>index</var>)</dfn> method must return the result of
invoking <a>insert a CSS rule</a> <var>rule</var> into the <span lt=concept-css-rule-child-css-rules>child CSS rules</span> at
<var>index</var>.

The <dfn method for=CSSGroupingRule>deleteRule(<var>index</var>)</dfn> method must <a>remove a CSS rule</a> from the
<span lt=concept-css-rule-child-css-rules>child CSS rules</span> at <var>index</var>.


### The {{CSSMediaRule}} Interface ### {#the-cssmediarule-interface}

The <code>CSSMediaRule</code> interface represents an <code lt>@media</code> at-rule.

<pre class=idl>interface CSSMediaRule : CSSGroupingRule {
  [SameObject, PutForwards=mediaText] readonly attribute MediaList media;
};</pre>

The <dfn attribute for=CSSGroupingRule>media</dfn> attribute must return a <code>MediaList</code> object for the list of media queries specified
with the <code lt>@media</code> at-rule.


### The {{CSSPageRule}} Interface ### {#the-csspagerule-interface}

The <code>CSSPageRule</code> interface represents an <code lt>@page</code> at-rule.
Issue: Need to define the rules for
<dfn>parse a list of CSS page selectors</dfn> and
<dfn>serialize a list of CSS page selectors</dfn>.

<pre class=idl>interface CSSPageRule : CSSGroupingRule {
           attribute DOMString selectorText;
  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;
};</pre>

The <dfn attribute for=CSSGroupingRule>selectorText</dfn> attribute, on getting, must return the result of
<span lt="serialize a list of CSS page selectors">serializing</span> the associated <a>list of CSS page selectors</a>.
On setting the <code attribute for=CSSPageRule>selectorText</code> attribute  these steps must be run:
<ol>
 <li>Run the <a>parse a list of CSS page selectors</a> algorithm on the given value.
 <li>If the algorithm returns a non-null value replace the associated <a>list of CSS page selectors</a> with the returned value.
 <li>Otherwise, if the algorithm returns a null value, do nothing.
</ol>

The <dfn attribute for=CSSGroupingRule>style</dfn> attribute must return a <code>CSSStyleDeclaration</code> object for the
<code lt>@page</code> at-rule, with the following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Unset.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>The declared declarations in the rule, in <span lt=concept-declarations-specified-order>specified order</span>.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>Null.
</dl>


### The {{CSSMarginRule}} Interface ### {#the-cssmarginrule-interface}

The <code lt>CSSMarginRule</code> interface represents a margin at-rule (e.g. <code lt>@top-left</code>) in an <code lt>@page</code> at-rule.
[[!CSS3PAGE]]

<pre class=idl>interface CSSMarginRule : CSSRule {
  readonly attribute DOMString name;
  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;
};</pre>

The <dfn attribute for=CSSMarginRule>name</dfn> attribute must return the name of the margin at-rule. The <code lt>@</code> character is not
included in the name. [[!CSS3SYN]]

The <dfn attribute for=CSSMarginRule>style</dfn> attribute must return a <code>CSSStyleDeclaration</code> object for the
margin at-rule, with the following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Unset.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>The declared declarations in the rule, in <span lt=concept-declarations-specified-order>specified order</span>.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>Null.
</dl>


### The {{CSSNamespaceRule}} Interface ### {#the-cssnamespacerule-interface}

The <code>CSSNamespaceRule</code> interface represents an <code lt>@namespace</code> at-rule.

<pre class=idl>interface CSSNamespaceRule : CSSRule {
  [TreatNullAs=EmptyString] attribute DOMString namespaceURI;
  [TreatNullAs=EmptyString] attribute DOMString prefix;
};</pre>

The <dfn attribute for=CSSNamespaceRule>namespaceURI</dfn> attribute, on getting, must return the namespace of the
<code lt>@namespace</code> at-rule.

On setting, the <code attribute for=CSSNamespaceRule>namespaceURI</code> attribute must run the following steps:

<ol>
 <li>Let <var>parent</var> be the <span lt=concept-css-rule-parent-css-style-sheet>parent CSS style sheet</span>.
 <li>Let <var>list</var> be the <span lt=concept-css-style-sheet-css-rules>CSS rules</span> of <var>parent</var>, or
 null if <var>parent</var> is null.
 <li>If <var>list</var> is not null and contains anything other than
 <code lt>@charset</code> at-rules, <code lt>@import</code> at-rules, and <code lt>@namespace</code> at-rules,
 <a>throw</a> an <code data-anolis-spec=webidl>InvalidStateError</code> exception.
 <li>Set the namespace of the <code lt>@namespace</code> at-rule to the given value.
</ol>

The <dfn attribute for=CSSNamespaceRule>prefix</dfn> attribute must return the prefix of the <code lt>@namespace</code> at-rule or the
empty string if there is no prefix.

On setting, the <code attribute for=CSSNamespaceRule>prefix</code> attribute must run the following steps:

<ol>
 <li>Let <var>parent</var> be the <span lt=concept-css-rule-parent-css-style-sheet>parent CSS style sheet</span>.
 <li>Let <var>list</var> be the <span lt=concept-css-style-sheet-css-rules>CSS rules</span> of <var>parent</var>, or
 null if <var>parent</var> is null.
 <li>If <var>list</var> is not null and contains anything other than
 <code lt>@charset</code> at-rules, <code lt>@import</code> at-rules, and <code lt>@namespace</code> at-rules,
 <a>throw</a> an <code data-anolis-spec=webidl>InvalidStateError</code> exception.
 <li>Set the prefix of the <code lt>@namespace</code> at-rule to the given value.
</ol>


CSS Declarations {#css-declarations}
------------------------------------

A <dfn>CSS declaration</dfn> is an abstract concept that is not exposed as an object in the DOM. A <a>CSS declaration</a> has the following associated
properties:

<dl>
 <dt><dfn lt=concept-css-declaration-property-name>property name</dfn>
 <dd>The property name of the declaration.
 <dt><dfn lt=concept-css-declaration-value>value</dfn>
 <dd>The value of the declaration represented as a list of component values.
 <dt><dfn lt=concept-css-declaration-important-flag>important flag</dfn>
 <dd>Either set or unset. Can be changed.
 <dt><dfn lt=concept-css-declaration-case-sensitive-flag>case-sensitive flag</dfn>
 <dd>Set if the <span lt=concept-css-declaration-property-name>property name</span> is defined to be case-sensitive according to its specification,
 otherwise unset.
</dl>

CSS Declaration Blocks {#css-declaration-blocks}
------------------------------------------------

A <dfn>CSS declaration block</dfn> is an ordered collection of CSS
properties with their associated values, also named <span lt="CSS declaration">CSS declarations</span>. In
the DOM a <a>CSS declaration block</a> is a
<code>CSSStyleDeclaration</code> object. A
<a>CSS declaration block</a> has the following associated properties:

<dl>
 <dt><dfn lt=concept-css-declaration-block-readonly-flag>readonly flag</dfn>
 <dd>Unset if the object can be manipulated. Set if it can not be
 manipulated. Unless otherwise stated it is unset.

 <dt><dfn lt=concept-css-declaration-block-declarations>declarations</dfn>
 <dd>The <span lt="CSS declaration">CSS declarations</span> associated with the object.

 <dt><dfn lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</dfn>
 <dd>The <a>CSS rule</a> that the <a>CSS declaration block</a> is associated with, if any, or null otherwise.

 <dt><dfn lt=concept-css-declaration-block-owner-node>owner node</dfn>
 <dd>The <span data-anolis-spec=dom>Element</span> or <code>PseudoElement</code> that the <a>CSS declaration block</a> is associated with, if any, or
 null otherwise.
</dl>

To <dfn>parse a CSS declaration block</dfn> from a string <var>string</var>, follow these steps:

<ol>
 <li>Let <var>declarations</var> be the return value of invoking <span data-anolis-spec=csssyntax>parse a list of declarations</span> with <var>string</var>.
 <li>Let <var>parsed declarations</var> be a new empty list.
 <li>For each item <var>declaration</var> in <var>declarations</var>, follow these substeps:
  <ol>
   <li>Let <var>parsed declaration</var> be the result of parsing <var>declaration</var> according to the appropriate CSS specifications, dropping parts that
   are said to be ignored. If the whole declaration is dropped, let <var>parsed declaration</var> be null.
   <li>If <var>parsed declaration</var> is not null, append it to <var>parsed declarations</var>.
  </ol>
 <li>Return <var>parsed declarations</var>.
</ol>

To <dfn>serialize a CSS declaration</dfn> with property name <var>property</var>, value <var>value</var> and optionally an <i>important</i> flag set, follow
these steps:

<ol>
 <li>Let <var>s</var> be the empty string.
 <li>Append <var>property</var> to <var>s</var>.
 <li>Append "<code lt>: </code>" (U+003A U+0020) to <var>s</var>.
 <li>Append <var>value</var> to <var>s</var>.
 <li>If the <i>important</i> flag is set, append "<code lt> !important</code>" (U+0020 U+0021 U+0069 U+006D U+0070 U+006F U+0072 U+0074 U+0061 U+006E
 U+0074) to <var>s</var>.
 <li>Append "<code lt>;</code>" (U+003B) to <var>s</var>.
 <li>Return <var>s</var>.
</ol>

To <dfn>serialize a CSS declaration block</dfn> <var>declaration block</var> means to run the steps below:

<ol>
 <li>Let <var>list</var> be an empty array.
 <li>Let <var>already serialized</var> be an empty array.
 <li><i>Declaration loop</i>: For each <a>CSS declaration</a> <var>declaration</var> in <var>declaration block</var>'s
 <span lt=concept-css-declaration-block-declarations>declarations</span>, follow these substeps:
  <ol>
   <li>Let <var>property</var> be <var>declaration</var>'s <span lt=concept-css-declaration-property-name>property name</span>.
   <li>If <var>property</var> is in <var>already serialized</var>, continue with the steps labeled <i>declaration loop</i>.
   <li>If <var>property</var> maps to one or more shorthand properties, let <var>shorthands</var> be an array of those shorthand properties, in
   <span lt=concept-shorthands-preferred-order>preferred order</span>, and follow these substeps:
    <ol>
     <li>Let <var>longhands</var> be an array consisting of all <span lt="CSS declaration">CSS declarations</span> in <var>declaration block</var>'s
     <span lt=concept-css-declaration-block-declarations>declarations</span> that that are not in <var>already serialized</var> and have a
     <span lt=concept-css-declaration-property-name>property name</span> that
     maps to one of the shorthand properties in <var>shorthands</var>.
     <li><i>Shorthand loop</i>: For each <var>shorthand</var> in <var>shorthands</var>, follow these substeps:
      <ol>
       <li>If all properties that map to <var>shorthand</var> are not present in <var>longhands</var>, continue with the steps labeled <i>shorthand loop</i>.
       <li>Let <var>current longhands</var> be an empty array.
       <li>Append all <span lt="CSS declaration">CSS declarations</span> in <var>longhands</var> have a
       <span lt=concept-css-declaration-property-name>property name</span> that maps to <var>shorthand</var> to <var>current longhands</var>.
       <li>If there is one or more <span lt="CSS declaration">CSS declarations</span> in <var>current longhands</var> have their
       <span lt=concept-css-declaration-important-flag>important flag</span> set and one or more with it unset, continue with
       the steps labeled <i>shorthand loop</i>.
       <li>Let <var>value</var> be the result of invoking <a>serialize a CSS value</a> of <var>current longhands</var>.
       <li>If <var>value</var> is the empty string, continue with the steps labeled <i>shorthand loop</i>.
       <li>Let <var>serialized declaration</var> be the result of invoking <a>serialize a CSS declaration</a> with property name
       <var>shorthand</var>, value <var>value</var>, and the <i>important</i> flag set if the <span lt="CSS declaration">CSS declarations</span> in
       <var>current longhands</var> have their <span lt=concept-css-declaration-important-flag>important flag</span> set.
       <li>Append <var>serialized declaration</var> to <var>list</var>.
       <li>Append the property names of all items of <var>current longhands</var> to <var>already serialized</var>.
       <li>Remove the items present in <var>current longhands</var> from <var>longhands</var>.
      </ol>
    </ol>
   <li>If <var>property</var> is in <var>already serialized</var>, continue with the steps labeled <i>declaration loop</i>.
   <li>Let <var>value</var> be the result of invoking <a>serialize a CSS value</a> of <var>declaration</var>.
   <li>Let <var>serialized declaration</var> be the result of invoking <a>serialize a CSS declaration</a> with property name <var>property</var>, value
   <var>value</var>, and the <i>important</i> flag set if <var>declaration</var> has its <span lt=concept-css-declaration-important-flag>important
   flag</span> set.
   <li>Append <var>serialized declaration</var> to <var>list</var>.
   <li>Append <var>property</var> to <var>already serialized</var>.
  </ol>
 <li>Return <var>list</var> joined with "<code lt> </code>" (U+0020).
</ol>

Note: The serialization of an empty CSS declaration block is the empty string.

Note: The serialization of a non-empty CSS declaration block does not include any surrounding whitespace, i.e., no whitepsace appears
before the first property name and no whitespace appears after the final semicolon delimiter that follows the last property value.

The <dfn lt=concept-shorthands-preferred-order>preferred order</dfn> of a list of shorthand properties <var>shorthands</var> is as follows:

<ol>
 <li>Order <var>shorthands</var> lexicographically.
 <li>Move all items in <var>shorthands</var> that begin with "<code lt>-</code>" (U+002D) last in the list, retaining their relative order.
 <li>Move all items in <var>shorthands</var> that begin with "<code lt>-</code>" (U+002D) but do not begin with "<code lt>-webkit-</code>" last in the
 list, retaining their relative order.
 <li>Order <var>shorthands</var> by the number of longhand properties that map to it, with the greatest number first.
</ol>

### The {{CSSStyleDeclaration}} Interface ### {#the-cssstyledeclaration-interface}

The <code>CSSStyleDeclaration</code> interface represents a <a>CSS declaration block</a>, including its underlying state, where this
underlying state depends upon the source of the <code>CSSStyleDeclaration</Code> instance.

<!--
//
// All members defined since DOM-2 Style. The only differences are:
//
//   1. removal of commented raises(DOMException) on setting cssText
//   2. removal of raises(DOMException) on {set,remove}Property
//   3. removal of getPropertyCSSValue() method
//
-->

<pre class=idl>interface CSSStyleDeclaration {
  attribute DOMString cssText;
  readonly attribute unsigned long length;
  getter DOMString item(unsigned long index);
  DOMString getPropertyValue(DOMString property);
  DOMString getPropertyPriority(DOMString property);
  void setProperty(DOMString property, [TreatNullAs=EmptyString] DOMString value, [TreatNullAs=EmptyString] optional DOMString priority = "");
  void setPropertyValue(DOMString property, [TreatNullAs=EmptyString] DOMString value);
  void setPropertyPriority(DOMString property, [TreatNullAs=EmptyString] DOMString priority);
  DOMString removeProperty(DOMString property);
  readonly attribute CSSRule? parentRule;
  [TreatNullAs=EmptyString] attribute DOMString cssFloat;
};</pre>

The object's <span data-anolis-spec=webidl>supported property indices</span> are the numbers in the range zero to one less than the number of
<span lt="CSS declaration">CSS declarations</span> in the <span lt=concept-css-declaration-block-declarations>declarations</span>. If there are no such
<span lt="CSS declaration">CSS declarations</span>, then there are no <span data-anolis-spec=webidl>supported property indices</span>.

The <dfn attribute for=CSSStyleDeclaration>cssText</dfn> attribute must return the result of
<span lt="serialize a CSS declaration block">serializing</span> the <span lt=concept-css-declaration-block-declarations>declarations</span>.
Setting the <code attribute for=CSSStyleDeclaration>cssText</code> attribute must run these steps:
<ol>
 <li>If the <span lt=concept-css-declaration-block-readonly-flag>readonly flag</span> is set, <a>throw</a>
 a <code data-anolis-spec=webidl>NoModificationAllowedError</code> exception and terminate these steps.
 <li>Empty the <span lt=concept-css-declaration-block-declarations>declarations</span>.
 <li><span lt="Parse a CSS declaration block">Parse</span> the given value and, if the return value is not the empty list, insert the items in the list
 into the <span lt=concept-css-declaration-block-declarations>declarations</span>, in <span lt=concept-declarations-specified-order>specified
 order</span>.
</ol>

The <dfn attribute for=CSSStyleDeclaration>length</dfn> attribute must return the number of <span lt="CSS declaration">CSS
declarations</span> in the <span lt=concept-css-declaration-block-declarations>declarations</span>.

The <dfn method for=CSSStyleDeclaration>item(<var>index</var>)</dfn> method must return the
<span lt=concept-css-declaration-property-name>property name</span> of the <a>CSS declaration</a> at position <var>index</var>.

The <dfn method for=CSSStyleDeclaration>getPropertyValue(<var>property</var>)</dfn> method must run these steps:
<ol>
 <li>Let <var>property</var> be <var>property</var> <span data-anolis-spec=dom>converted to ASCII lowercase</span>.
 <li>If <var>property</var> is a shorthand property, then follow these substeps:
  <ol>
   <li>Let <var>list</var> be a new empty array.
   <li>For each longhand property <var>longhand</var> that <var>property</var> maps to, in canonical order, follow these substeps:
    <ol>
     <li>If <var>longhand</var> is a <span data-anolis-spec=dom>case-sensitive</span> match for a <span lt=concept-css-declaration-property-name>property
     name</span> of a <a>CSS declaration</a> in the <span lt=concept-css-declaration-block-declarations>declarations</span>, let <var>declaration</var>
     be that <a>CSS declaration</a>, or null otherwise.
     <li>If <var>declaration</var> is null, return the empty string and terminate these steps.
     <li>Append the <var>declaration</var> to <var>list</var>.
    </ol>
   <li>Return the <span lt="serialize a CSS value">serialization</span> of <var>list</var> and terminate these steps.
  </ol>
 <li>If <var>property</var> is a <span data-anolis-spec=dom>case-sensitive</span>
 match for a <span lt=concept-css-declaration-property-name>property name</span> of a <a>CSS declaration</a> in the
 <span lt=concept-css-declaration-block-declarations>declarations</span>, return the result of invoking
 <a>serialize a CSS value</a> of that declaration and terminate these steps.
 <li>Return the empty string.
</ol>

The <dfn method for=CSSStyleDeclaration>getPropertyPriority(<var>property</var>)</dfn> method must run these steps:
<ol>
 <li>Let <var>property</var> be <var>property</var> <span data-anolis-spec=dom>converted to ASCII lowercase</span>.
 <li>If <var>property</var> is a shorthand property, follow these substeps:
  <ol>
   <li>Let <var>list</var> be a new array.
   <li>For each longhand property <var>longhand</var> that <var>property</var> maps to, append the result of invoking
   <code method for=CSSStyleDeclaration>getPropertyPriority()</code> with <var>longhand</var> as argument to <var>list</var>.
   <li>If all items in <var>list</var> are the string "<code lt>important</code>", return the string "<code lt>important</code>" and terminate these
   steps.
  </ol>
 <li>Otherwise, follow these substeps:
  <ol>
   <li>If <var>property</var> is a
   <span data-anolis-spec=dom>case-sensitive</span> match for a <span lt=concept-css-declaration-property-name>property name</span> of a <a>CSS
   declaration</a> in the <span lt=concept-css-declaration-block-declarations>declarations</span> that has the
   <span lt=concept-css-declaration-important-flag>important flag</span> set, return the string "<code lt>important</code>".
  </ol>
 <li>Return the empty string.
</ol>
<div class=example>E.g. for <code lt>background-color:lime !IMPORTANT</code> the return
value would be "<code lt>important</code>".</div>

The <dfn method for=CSSStyleDeclaration>setProperty(<var>property</var>, <var>value</var>, <var>priority</var>)</dfn> method must run these steps:
<ol>
 <li>If the <span lt=concept-css-declaration-block-readonly-flag>readonly flag</span> is set, <a>throw</a>
 a <code data-anolis-spec=webidl>NoModificationAllowedError</code> exception and terminate these steps.
 <li>Let <var>property</var> be <var>property</var> <span data-anolis-spec=dom>converted to ASCII lowercase</span>.
 <li>If <var>property</var> is not a <span data-anolis-spec=dom>case-sensitive</span> match for a <a>supported CSS property</a>, terminate this
 algorithm.
 <li>If <var>value</var> is the empty string, invoke <code method for=CSSStyleDeclaration>removeProperty()</code>
 with <var>property</var> as argument and terminate this algorithm.
 <li>If <var>priority</var> is not the empty string and is not an <span data-anolis-spec=dom>ASCII case-insensitive</span> match for the string
 "<code lt>important</code>", terminate this algorithm.
 <li>
  Let <var>component value list</var> be the result of <span lt="parse a CSS value">parsing</span> <var>value</var> for property <var>property</var>.
  Note: <var>value</var> can not include "<code lt>!important</code>".

 <li>If <var>component value list</var> is null terminate these steps.
 <li>If <var>property</var> is a shorthand property, then for each longhand property <var>longhand</var> that <var>property</var> maps to, in canonical
 order, <span lt="set a CSS declaration">set the CSS declaration</span> <var>longhand</var> with the appropriate value(s) from <var>component value
 list</var>, with the <i>important</i> flag set if <var>priority</var> is not the empty string, and unset otherwise, and with the list of declarations being the
 <span lt=concept-css-declaration-block-declarations>declarations</span>.
 <li>Otherwise, <span lt="set a CSS declaration">set the CSS declaration</span> <var>property</var> with value <var>component value list</var>, with
 the <i>important</i> flag set if <var>priority</var> is not the empty string, and unset otherwise, and with the list of declarations being the
 <span lt=concept-css-declaration-block-declarations>declarations</span>.
</ol>

To <dfn>set a CSS declaration</dfn> <var>property</var> with a value <var>component value list</var> and optionally with an <i>important</i> flag set, in
a list of declarations <var>declarations</var>, follow these steps:

<ol>
 <li>If <var>property</var> is a <span data-anolis-spec=dom>case-sensitive</span> match for a <span lt=concept-css-declaration-property-name>property
 name</span> of a <a>CSS declaration</a> in <var>declarations</var>, let <var>declaration</var> be that <a>CSS declaration</a>.
 <li>Otherwise, append a new <a>CSS declaration</a> with the <span lt=concept-css-declaration-property-name>property name</span> <var>property</var>
 to <var>declarations</var> and let <var>declaration</var> be that <a>CSS declaration</a>.
 <li>Set <var>declaration</var>'s <span lt=concept-css-declaration-value>value</span> to <var>component value list</var>.
 <li>If the <i>important</i> flag is set, set <var>declaration</var>'s <span lt=concept-css-declaration-important-flag>important flag</span>.
 Otherwise, unset <var>declaration</var>'s <span lt=concept-css-declaration-important-flag>important flag</span>.
</ol>

The <dfn method for=CSSStyleDeclaration>setPropertyValue(<var>property</var>, <var>value</var>)</dfn> method must run these
steps:
<ol>
 <li>If the <span lt=concept-css-declaration-block-readonly-flag>readonly flag</span> is set, <a>throw</a>
 a <code data-anolis-spec=webidl>NoModificationAllowedError</code> exception and terminate these steps.
 <li>Let <var>property</var> be <var>property</var> <span data-anolis-spec=dom>converted to ASCII lowercase</span>.
 <li>If <var>property</var> is not a <span data-anolis-spec=dom>case-sensitive</span> match for a <a>supported CSS property</a>, terminate this
 algorithm.
 <li>If <var>value</var> is the empty string, invoke <code method for=CSSStyleDeclaration>removeProperty()</code>
 with <var>property</var> as argument and terminate this algorithm.
 <li>
  Let <var>component value list</var> be the result of <span lt="parse a CSS value">parsing</span> <var>value</var> for property <var>property</var>.
  Note: <var>value</var> can not include "<code lt>!important</code>".

 <li>If <var>component value list</var> is null terminate these steps.
 <li>If <var>property</var> is a shorthand property, then for each longhand property <var>longhand</var> that <var>property</var> maps to, in canonical
 order, <span lt="set a CSS declaration value">set the CSS declaration value</span> <var>longhand</var> to the appropriate value(s) from <var>component
 value list</var>, and with the list of declarations being the <span lt=concept-css-declaration-block-declarations>declarations</span>.
 <li>Otherwise, <span lt="set a CSS declaration value">set the CSS declaration value</span> <var>property</var> to the value <var>component value
 list</var>, and with the list of declarations being the <span lt=concept-css-declaration-block-declarations>declarations</span>.
</ol>

To <dfn>set a CSS declaration value</dfn> to a value <var>component value list</var> in a list of declarations <var>declarations</var>, follow these steps:

<ol>
 <li>If <var>property</var> is a <span data-anolis-spec=dom>case-sensitive</span> match for a <span lt=concept-css-declaration-property-name>property
 name</span> of a <a>CSS declaration</a> in <var>declarations</var>, let <var>declaration</var> be that <a>CSS declaration</a>.
 <li>Otherwise, append a new <a>CSS declaration</a> with the <span lt=concept-css-declaration-property-name>property name</span> <var>property</var>
 to <var>declarations</var> and let <var>declaration</var> be that <a>CSS declaration</a>.
 <li>Set <var>declaration</var>'s <span lt=concept-css-declaration-value>value</span> to <var>component value list</var>.
</ol>

The <dfn method for=CSSStyleDeclaration>setPropertyPriority(<var>property</var>, <var>priority</var>)</dfn> method must run
these steps:

<ol>
 <li>If the <span lt=concept-css-declaration-block-readonly-flag>readonly flag</span> is set, <a>throw</a>
 a <code data-anolis-spec=webidl>NoModificationAllowedError</code> exception and terminate these steps.
 <li>Let <var>property</var> be <var>property</var> <span data-anolis-spec=dom>converted to ASCII lowercase</span>.
 <li>If <var>property</var> is not a <span data-anolis-spec=dom>case-sensitive</span> match for a <a>supported CSS property</a>, terminate this
 algorithm.
 <li>If <var>priority</var> is not the empty string and is not an <span data-anolis-spec=dom>ASCII case-insensitive</span> match for the string
 "<code lt>important</code>", terminate this algorithm.
 <li>If <var>property</var> is a shorthand property, then for each longhand property <var>longhand</var> that <var>property</var> maps to, in canonical
 order, <span lt="set a CSS declaration priority">set the CSS declaration priority</span> <var>longhand</var> with the <i>important</i> flag set if
 <var>priority</var> is not the empty string, and unset otherwise, and with the list of declarations being the
 <span lt=concept-css-declaration-block-declarations>declarations</span>.
 <li>Otherwise, <span lt="set a CSS declaration priority">set the CSS declaration priority</span> <var>property</var> with the <i>important</i> flag set
 if <var>priority</var> is not the empty string, and unset otherwise, and with the list of declarations being the
 <span lt=concept-css-declaration-block-declarations>declarations</span>.
</ol>

To <dfn>set a CSS declaration priority</dfn> <var>property</var> optionally with an <i>important</i> flag set, in a list of declarations
<var>declarations</var>, follow these steps:

<ol>
 <li>If <var>property</var> is a <span data-anolis-spec=dom>case-sensitive</span> match for a <span lt=concept-css-declaration-property-name>property
 name</span> of a <a>CSS declaration</a> in <var>declarations</var>, let <var>declaration</var> be that <a>CSS declaration</a>.
 <li>Otherwise, terminate these steps.
 <li>If the <i>important</i> flag is set, set <var>declaration</var>'s <span lt=concept-css-declaration-important-flag>important flag</span>. Otherwise,
 unset <var>declaration</var>'s <span lt=concept-css-declaration-important-flag>important flag</span>.
</ol>

The <dfn method for=CSSStyleDeclaration>removeProperty(<var>property</var>)</dfn> method must run these steps:
<ol>
 <li>If the <span lt=concept-css-declaration-block-readonly-flag>readonly flag</span> is set, <a>throw</a>
 a <code data-anolis-spec=webidl>NoModificationAllowedError</code> exception and terminate these steps.
 <li>Let <var>property</var> be <var>property</var> <span data-anolis-spec=dom>converted to ASCII lowercase</span>.
 <li>Let <var>value</var> be the return value of invoking <code method for=CSSStyleDeclaration>getPropertyValue()</code>
 with <var>property</var> as argument.
 <li>If <var>property</var> is a shorthand property, for each longhand property <var>longhand</var> that <var>property</var> maps to, invoke
 <code method for=CSSStyleDeclaration>removeProperty()</code> with <var>longhand</var> as argument.
 <li>Otherwise, if <var>property</var> is a <span data-anolis-spec=dom>case-sensitive</span> match for a
 <span lt=concept-css-declaration-property-name>property name</span> of a <a>CSS declaration</a> in the
 <span lt=concept-css-declaration-block-declarations>declarations</span>, remove that <a>CSS declaration</a>.
 <li>Return <var>value</var>.
</ol>

The <dfn attribute for=CSSStyleDeclaration>parentRule</dfn> attribute must return the
<span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>.

The <dfn attribute for=CSSStyleDeclaration>cssFloat</dfn>
attribute, on getting, must return the result of invoking
<code method for=CSSStyleDeclaration>getPropertyValue()</code> with
<code lt>float</code> as argument. On setting, the attribute must invoke
<code method for=CSSStyleDeclaration>setProperty()</code> with
<code lt>float</code> as first argument, as second argument the given value, and no third argument.
Any exceptions thrown must be re-thrown.

For each CSS property <var>property</var> that is a <a>supported CSS property</a>,
the following partial interface applies where <var>camel-cased attribute</var>
is obtained by running the <a>CSS property to IDL attribute</a> algorithm for
<var>property</var>.

<pre class="idl extract">partial interface CSSStyleDeclaration {
  [TreatNullAs=EmptyString] attribute DOMString _<var>camel_cased_attribute</var>;
};</pre>

The <dfn attribute for=CSSStyleDeclaration><var>camel-cased attribute</var></dfn> attribute, on getting, must return the
result of invoking <code method for=CSSStyleDeclaration>getPropertyValue()</code> with the
argument being the result of running the <a>IDL attribute to CSS property</a>
algorithm for <var>camel-cased attribute</var>.

Setting the <code attribute for=CSSStyleDeclaration><var>camel-cased attribute</var></code> attribute must invoke
<code method for=CSSStyleDeclaration>setProperty()</code> with the
first argument being the result of running the <a>IDL attribute to CSS property</a>
algorithm for <var>camel-cased attribute</var>, as second argument the given value, and no third argument. Any
exceptions thrown must be re-thrown.

<div class=example>For example, for the 'font-size' property there would be a <code lt>fontSize</code> IDL attribute.</div>

For each CSS property <var>property</var> that is a <a>supported CSS property</a>,
except for properties that have no "<code lt>-</code>" (U+002D) in the property name,
the following partial interface applies where <var>dashed attribute</var> is <var>property</var>.

<pre class="idl">partial interface CSSStyleDeclaration {
  [TreatNullAs=EmptyString] attribute DOMString _<var>dashed_attribute</var>;
};</pre>

The <dfn attribute for=CSSStyleDeclaration><var>dashed attribute</var></dfn> attribute, on getting, must return the
result of invoking <code method for=CSSStyleDeclaration>getPropertyValue()</code> with the
argument being <var>dashed attribute</var>.

Setting the <code attribute for=CSSStyleDeclaration><var>dashed attribute</var></code> attribute must invoke
<code method for=CSSStyleDeclaration>setProperty()</code> with the
first argument being <var>dashed attribute</var>, as second argument the given value, and no third argument. Any
exceptions thrown must be re-thrown.

<div class=example>
 For example, for the 'font-size' property there would be a <code lt>font-size</code> IDL attribute. In JavaScript, the property can be accessed as
 follows, assuming <var>element</var> is an <span data-anolis-spec=html lt="HTML elements">HTML element</span>:
 <pre><var>element</var>.style['font-size'];</pre>
</div>

The <dfn>CSS property to IDL attribute</dfn> algorithm for <var>property</var> is as
follows:

<ol>
 <li>Let <var>output</var> be the empty string.

 <li>Let <var>uppercase next</var> be unset.

 <li>For each character <var>c</var> in <var>property</var>:

  <ol>
   <li>If <var>c</var> is "<code lt>-</code>" (U+002D), let <var>uppercase next</var> be set.

   <li>Otherwise, if <var>uppercase next</var> is set, let <var>uppercase next</var> be unset and append <var>c</var>
   <span data-anolis-spec=dom>converted to ASCII uppercase</span> to <var>output</var>.

   <li>Otherwise, append <var>c</var> to <var>output</var>.
  </ol>

 <li>Return <var>output</var>.
</ol>

The <dfn>IDL attribute to CSS property</dfn> algorithm for <var>attribute</var> is as
follows:

<ol>
 <li>Let <var>output</var> be the empty string.

 <li>For each character <var>c</var> in <var>attribute</var>:

  <ol>
   <li>If <var>c</var> is in the range U+0041 to U+005A (ASCII uppercase), append "<code lt>-</code>" (U+002D) followed by <var>c</var>
   <span data-anolis-spec=dom>converted to ASCII lowercase</span> to <var>output</var>.

   <li>Otherwise, append <var>c</var> to <var>output</var>.
  </ol>

 <li>Return <var>output</var>.
</ol>


CSS Values {#css-values}
------------------------


### Parsing CSS Values ### {#parsing-css-values}

To <dfn>parse a CSS value</dfn> <var>value</var> for a given
<var>property</var> means to follow these steps:

<ol>
 <li>Let <var>list</var> be the value returned by invoking <span data-anolis-spec=csssyntax>parse a list of component values</span> from <var>value</var>.
 <li>Match <var>list</var> against the grammar for the property <var>property</var> in the CSS specification.
 <li>If the above step failed, return null.
 <li>Return <var>list</var>.
</ol>

Note: "<code lt>!important</code>" declarations are not
part of the property value space and will therefore cause
<a>parse a CSS value</a> to return null.



### Serializing CSS Values ### {#serializing-css-values}

<!-- based on http://damowmow.com/playground/canon.txt -->

To <dfn>serialize a CSS value</dfn> of a <a>CSS declaration</a> <var>declaration</var> or a list of longhand <span lt="CSS declaration">CSS
declarations</span> <var>list</var>, follow these rules:

<ol>
 <li>If this algorithm is invoked with a list <var>list</var>, follow these substeps:
  <ol>
   <li>Let <var>shorthand</var> be the shorthand property that exactly maps to all the longhand properties in <var>list</var>. If there are multiple such
   shorthand properties, use the first in <span lt=concept-shorthands-preferred-order>preferred order</span>.
   <li>If <var>shorthand</var> cannot represent the values of <var>list</var> in its grammar, return the empty string and terminate these steps.
   <li>Let <var>trimmed list</var> be a new empty array.
   <li>For each <a>CSS declaration</a> <var>declaration</var> in <var>list</var>, if <var>declaration</var>'s
   <span lt=concept-css-declaration-value>value</span> is not the initial value, or if
   <var>declaration</var> is a required component of the <var>shorthand</var> property, append <var>declaration</var> to <var>trimmed list</var>.
   <li>If <var>trimmed list</var> is empty, append the value of the first item in <var>list</var> to <var>trimmed list</var>.
   <li>Let <var>values</var> be a new empty array.
   <li>For each <a>CSS declaration</a> <var>declaration</var> in <var>trimmed list</var>, invoke <a>serialize a CSS value</a> of
   <var>declaration</var>, and append the result to <var>values</var>.
   <li>Return the result of joining <var>values</var> as appropriate according to the grammar of <var>shorthand</var> and terminate these steps.
  </ol>
 <li>Let <var>values</var> be a new empty array.
 <li>Append the result of invoking <a>serialize a CSS component value</a> of <var>declaration</var>'s
 <span lt=concept-css-declaration-value>value</span> to <var>values</var>.
 <li>If the grammar of the <span lt=concept-css-declaration-property-name>property name</span> of <var>declaration</var> is defined to be
 whitespace-separated, return the result of invoking <a>serialize a whitespace-separated list</a> of <var>values</var> and terminate these steps.
 <li>If the grammar of the <span lt=concept-css-declaration-property-name>property name</span> of <var>declaration</var> is defined to be comma-separated,
 return the result of invoking <a>serialize a comma-separated list</a> of <var>values</var>.
</ol>

To
<dfn>serialize a CSS component value</dfn>
depends on the component, as follows:

<dl class="switch">
 <dt>keyword
 <dd>The keyword
 <span data-anolis-spec=dom>converted to ASCII lowercase</span>.

 <dt>&lt;angle>
 <dd>The &lt;number> component serialized as per &lt;number> followed by the unit in canonical form as defined in its respective specification.

 <dt>&lt;color>
 <dd>
 If &lt;color&gt; is a component of a resolved or computed value, then
 return the color using the <code lt>rgb()</code> or <code lt>rgba()</code> functional
 notation as follows:
 <ol>
 <li>If the alpha component of the color is equal to one, then return the serialization of the
 <code lt>rgb()</code> functional equivalent of the opaque color.
 <li>If the alpha component of the color is not equal to one, then return the serialization of the
 <code lt>rgba()</code> functional equivalent of the non-opaque color.
 </ol>
 The serialization of the <code lt>rgb()</code> functional equivalent is the concatenation of the following:
 <ol>
 <li>The string "<code lt>rgb(</code>".
 <li>The shortest base-ten integer serialization of the color's red component.
 <li>The string "<code lt>, </code>".
 <li>The shortest base-ten serialization of the color's green component.
 <li>The string "<code lt>, </code>".
 <li>The shortest base-ten serialization of the color's blue component.
 <li>The string "<code lt>)</code>".
 </ol>
 The serialization of the <code lt>rgba()</code> functional equivalent is the concatenation of the following:
 <ol>
 <li>The string "<code lt>rgba(</code>".
 <li>The shortest base-ten serialization of the color's red component.
 <li>The string "<code lt>, </code>".
 <li>The shortest base-ten serialization of the color's green component.
 <li>The string "<code lt>, </code>".
 <li>The shortest base-ten serialization of the color's blue component.
 <li>The string "<code lt>, </code>".
 <li>The serialization of the color's alpha component as an &lt;alphavalue>.
 <li>The string "<code lt>)</code>".
 </ol>

 In the above rules, the string "<code lt>, </code>" denotes a COMMA (U+002C) followed by a single SPACE (U+0020).

 If &lt;color&gt; is a component of a specified value, then
 return the color as follows:
 <ol>
 <li>If the color was explicitly specified by the author, then return the original, author specified color value.
 <li>Otherwise, return the value that would be returned if the color were a component of a computed value.
 </ol>
 Issue: Should author specified values be normalized for case? Or should original case be preserved?

 <!--
   <dt>It is a system color

   <dd>See below (you use the representation given in the specification that
   defines the keyword).

   <dt>Alpha component is equal to 1.0

   <dd>The color is an uppercase six-digit hexadecimal value, prefixed with a
   <code lt>#</code> character (U+0023 NUMBER SIGN), with the first two digits
   representing the red component, the next two digits representing the green
   component, and the last two digits representing the blue component, the
   digits being in the range 0-9 A-F (U+0030 to U+0039 and U+0041 to
   U+0046).

   <dt>Alpha component is less than 1.0

   <dd>The color is in the CSS <code lt>rgba()</code> functional-notation format:
   the literal string <code lt>rgba</code> (U+0072 U+0067 U+0062 U+0061) followed
   by a U+0028 LEFT PARENTHESIS, a <a>color component integer</a>
   representing the red component, a <a>color component separator</a>, a
   <a>color component integer</a> for the green component, a <a>color
   component separator</a>, a <a>color component integer</a> for the
   blue component, another <a>color component separator</a> a U+0030
   DIGIT ZERO, a U+002E FULL STOP (representing the decimal point), one or
   more digits in the range 0-9 (U+0030 to U+0039) representing the fractional
   part of the alpha value, and finally a U+0029 RIGHT PARENTHESIS.

   <dt>The keyword <code lt>transparent</code> is used

   <dd>The color is <code lt>rgba(0, 0, 0, 0)</code>.
 -->

 <dt>&lt;alphavalue>
 <dd>
  If the value is internally represented as an integer between 0 and 255 inclusive (i.e. 8-bit unsigned integer),
  follow these steps:

  <ol>
   <li>Let <var>alpha</var> be the given integer.
   <li>If there exists an integer between 0 and 100 inclusive that,
   when multiplied with 2.55 and rounded to the closest integer (rounding up if two values are equally close), equals <var>alpha</var>,
   let <var>rounded</var> be that integer divided by 100.
   <li>Otherwise, let <var>rounded</var> be <var>alpha</var> divided by 0.255 and rounded to the closest integer (rounding up if two values are equally close),
   divided by 1000.
   <li>Return the result of serializing <var>rounded</var> as a &lt;number>.
  </ol>

  Otherwise, return the result of serializing the given value as a &lt;number>.

 <dt>&lt;counter>
 <dd>
  The return value of the following algorithm:
  <ol>
   <li>Let <var>s</var> be the empty string.
   <li>If &lt;counter> has three CSS component values append the string
   "<code lt>counters(</code>" to <var>s</var>.
   <li>If &lt;counter> has two CSS component values append the string
   "<code lt>counter(</code>" to <var>s</var>.
   <li>Let <var>list</var> be a list of CSS component values belonging to &lt;counter>, omitting the last CSS component value if it is "decimal".
   <li>Let each item in <var>list</var> be the result of invoking <a>serialize a CSS component value</a> on that item.
   <li>Append the result of invoking <a>serialize a comma-separated list</a> on <var>list</var> to <var>s</var>.
   <li>Append "<code lt>)</code>" (U+0029) to <var>s</var>.
   <li>Return <var>s</var>.
  </ol>


 <dt>&lt;frequency>
 <dd>The frequency in hertz serialized as per &lt;number> followed by
 the literal string "<code lt>hz</code>".

 <dt>&lt;identifier>
 <dd>The identifier
 <span lt="serialize an identifier">escaped</span>.

 <dt>&lt;integer>
 <dd>A base-ten integer using digits 0-9 (U+0030 to U+0039) in the
 shortest form possible, preceded by "<code lt>-</code>" (U+002D) if it is
 negative.

 <dt>&lt;length>
 <dd>
  A length of zero is represented by the literal string
  "<code lt>0px</code>".

  Absolute lengths: the number of millimeters serialized as per
  &lt;number> followed by the literal string "<code lt>mm</code>".
  Issue: Rumor has it absolute lengths will become relative
  lengths. Centimeters would be compatible with &lt;resolution>...

  Relative lengths: the &lt;number> component serialized as per
  &lt;number> followed by the unit in its canonical form as defined in its
  respective specification.


 <dt>&lt;number>
 <dd>
  A base-ten number using digits 0-9 (U+0030 to U+0039) in the shortest form possible,
  using "<code lt>.</code>" to separate decimals (if any),
  rounding the value if necessary to not produce more than 6 decimals,
  preceded by "<code lt>-</code>" (U+002D) if it is negative.

  Note: scientific notation is not used.

 <dt>&lt;percentage>
 <dd>The &lt;number> component serialized as per &lt;number> followed
 by the literal string "<code lt>%</code>" (U+0025).

 <dt>&lt;resolution>
 <dd>The resolution in dots per centimeter serialized as per
 &lt;number> followed by the literal string "<code lt>dpcm</code>".

 <dt>&lt;shape>
 <dd>
  The return value of the following algorithm:
  <ol>
   <li>Let <var>s</var> be the string "<code lt>rect(</code>".
   <li>Let <var>list</var> be a list of the CSS component values belonging to &lt;shape>.
   <li>Let each item in <var>list</var> be the result of invoking <a>serialize a CSS component value</a> of that item.
   <li>Append the result of invoking <a>serialize a comma-separated list</a> on <var>list</var> to <var>s</var>.
   <li>Append "<code lt>)</code>" (U+0029) to <var>s</var>.
   <li>Return <var>s</var>.
  </ol>


 <dt>&lt;string>
 <dt>&lt;family-name>
 <dt>&lt;specific-voice>
 <dd>The string
 <span lt="serialize a string">string escaped</span>.

 <dt>&lt;time>
 <dd>The time in seconds serialized as per &lt;number> followed by
 the literal string "<code lt>s</code>".

 <dt>&lt;uri>
 <dd>The <span data-anolis-spec=url lt=concept-absolute-url>absolute URL</span>
 <span lt="serialize a URL">URL escaped</span>.
</dl>


 &lt;absolute-size>,
 &lt;border-width>,
 &lt;border-style>,
 &lt;bottom>,
 &lt;generic-family>,
 &lt;generic-voice>,
 &lt;left>,
 &lt;margin-width>,
 &lt;padding-width>,
 &lt;relative-size>,
 &lt;right>, and
 &lt;top>,
 are considered macros by this specification. They all represent instances
 of components outlined above.

Issue: One idea is that we can remove this section somewhere in
the CSS3/CSS4 timeline by moving the above definitions to the drafts that
define the CSS components.


#### Examples #### {#serializing-css-values-examples}

Here are some examples of before and after results on specified values.
The before column could be what the author wrote in a style sheet, while
the after column shows what querying the DOM would return.

<div class="example">
 <table class="complex data">
  <thead>
   <tr><th>Before<th>After
  <tbody>
   <tr><td><code lt>background: none</code><td><code lt>background: rgba(0, 0, 0, 0)</code>
   <tr><td><code lt>outline: none</code><td><code lt>outline: invert</code>
   <tr><td><code lt>border: none</code><td><code lt>border: medium</code>
   <tr><td><code lt>list-style: none</code><td><code lt>list-style: disc</code>
   <tr><td><code lt>margin: 0 1px 1px 1px</code><td><code lt>margin: 0px 1px 1px</code>
   <tr><td><code lt>azimuth: behind left</code><td><code lt>azimuth: 220deg</code>
   <tr><td><code lt>font-family: a, 'b"', serif</code><td><code lt>font-family: "a", "b\"", serif</code>
   <tr><td><code lt>content: url('h)i') '\[\]'</code><td><code lt>content: url("h)i") "[]"</code>
   <tr><td><code lt>azimuth: leftwards</code><td><code lt>azimuth: leftwards</code>
   <tr><td><code lt>color: rgb(18, 52, 86)</code><td><code lt>color: #123456</code>
   <tr><td><code lt>color: rgba(000001, 0, 0, 1)</code><td><code lt>color: #000000</code>
 </table>

 Issue: Some of these need to be updated per the new rules.
</div>


DOM Access to CSS Declaration Blocks {#dom-access-to-css-declaration-blocks}
============================================================================


The {{ElementCSSInlineStyle}} Interface {#the-elementcssinlinestyle-interface}
------------------------------------------------------------------------------

The <code>ElementCSSInlineStyle</code> interface provides access to inline style properties of an element.

<pre class=idl>[NoInterfaceObject]
interface ElementCSSInlineStyle {
  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;
};</pre>

The <dfn attribute for=ElementCSSInlineStyle>style</dfn> attribute must return a live <a>CSS declaration block</a> with the following
properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Unset.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>The result of <span lt="Parse a CSS declaration block">parsing</span> the <code lt>style</code> content attribute, in
 <span lt=concept-declarations-specified-order>specified order</span>. If the <code lt>style</code> content attribute is absent, the object represents an
 empty list of <span lt="CSS declaration">CSS declarations</span>. Mutating the <span lt=concept-css-declaration-block-declarations>declarations</span>
 must set the <code lt>style</code> content attribute on the <span data-anolis-spec=dom>context object</span> to the
 <span lt="serialize a CSS declaration block">serialization</span> of the <span lt=concept-css-declaration-block-declarations>declarations</span>. If the
 <code lt>style</code> content attribute is set, changed or removed, the <span lt=concept-css-declaration-block-declarations>declarations</span> must be
 updated as appropriate.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>Null.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
</dl>

If the user agent supports HTML, the following IDL applies: [[HTML]]

<pre class=idl><span data-anolis-spec=html>HTMLElement</span> implements <a>ElementCSSInlineStyle</a>;</pre>

If the user agent supports SVG, the following IDL applies: [[SVG]]

<pre class=idl>SVGElement implements <a>ElementCSSInlineStyle</a>;</pre>


Extensions to the {{Window}} Interface {#extensions-to-the-window-interface}
----------------------------------------------------------------------------

<pre class=idl>partial interface Window {
  [NewObject] CSSStyleDeclaration getComputedStyle(Element elt, optional DOMString? pseudoElt);
};</pre>

The <dfn method for=Window>getComputedStyle(<var>elt</var>, <var>pseudoElt</var>)</dfn> method must run these
steps:
<ol>
 <li>Let <var>doc</var> be the
 <code data-anolis-spec=dom>Document</code>
 associated with the <code data-anolis-spec=html>Window</code> object on
 which the method was invoked.
 <li>Let <var>obj</var> be <var>elt</var>.
 <li>If <var>pseudoElt</var> is as an
 <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
 either ':before' or '::before' let
 <var>obj</var> be the <a>before pseudo-element</a> of
 <var>elt</var>.
 <li>If <var>pseudoElt</var> is as an
 <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
 either ':after' or '::after' let
 <var>obj</var> be the <a>after pseudo-element</a> of
 <var>elt</var>.
 <li>
  Return a live <a>CSS declaration block</a> with the following properties:
  <dl>
   <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
   <dd>Set.
   <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
   <dd>All longhand properties that are <span lt="supported CSS property">supported CSS properties</span>, in lexicographical order, with the value being
   the <a>resolved value</a> computed for <var>obj</var> using the style rules associated with <var>doc</var>.
   Note: This means that even if <var>obj</var> is in a different document (e.g. one fetched via <code lt>XMLHttpRequest</code>) it will still use
   the style rules associated with the document that is associated with the global object on which
   <code method for=Window>getComputedStyle()</code> was invoked to compute the <a>CSS declaration block</a>.
   <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
   <dd>Null.
   <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
   <dd><var>obj</var>.
  </dl>

</ol>
Note: Because of historical IDL limitations the <code method for=Window>getComputedStyle()</code> method used to be on
a separate interface, <code lt>ViewCSS</code>.

<p class=warning>The <code method for=Window>getComputedStyle()</code> method exposes information from <span lt="CSS style sheet">CSS style
sheets</span> with the <span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span> unset.

The {{GetStyleUtils}} Interface {#the-getstyleutils-interface}
--------------------------------------------------------------

The <dfn>associated document</dfn> of an object <var>obj</var> is <var>obj</var>'s <span data-anolis-spec=dom lt=concept-node-document>node
document</span> if <var>obj</var> is an <code data-anolis-spec=dom>Element</code> object, or <var>obj</var>'s associated
<code data-anolis-spec=dom>Element</code> object's <span data-anolis-spec=dom lt=concept-node-document>node document</span> if <var>obj</var> is a
<code>PseudoElement</code> object.

<pre class=idl>[NoInterfaceObject]
interface GetStyleUtils {
  [SameObject] readonly attribute CSSStyleDeclaration cascadedStyle;
  [SameObject] readonly attribute CSSStyleDeclaration defaultStyle;
  [SameObject] readonly attribute CSSStyleDeclaration rawComputedStyle;
  [SameObject] readonly attribute CSSStyleDeclaration usedStyle;
};</pre>

<p class=atrisk>The <dfn attribute for=GetStyleUtils>cascadedStyle</dfn> attribute must return a live <a>CSS declaration block</a>
with the following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Set.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>All longhand properties that are <span lt="supported CSS property">supported CSS properties</span>, in lexicographical order, that have a
 <a>cascaded value</a> for the <span data-anolis-spec=dom>context object</span>, with the value being the <a>cascaded value</a> computed for the
 <span data-anolis-spec=dom>context object</span> using the style rules associated with the <span data-anolis-spec=dom>context object</span>'s <a>associated
 document</a>.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>Null.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
</dl>

<p class=atrisk>The <dfn attribute for=GetStyleUtils>defaultStyle</dfn> attribute must return a live <a>CSS declaration block</a>
with the following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Set.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>All longhand properties that are <span lt="supported CSS property">supported CSS properties</span>, in lexicographical order, with the value being
 the <a>computed value</a> computed for the <span data-anolis-spec=dom>context object</span> using the user-agent-level style rules and user-level style
 rules associated with the <span data-anolis-spec=dom>context object</span>'s <a>associated document</a>, ignoring transitions, animations, author-level
 style rules, author-level presentational hints and override-level style rules.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>Null.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
</dl>

<p class=atrisk>The <dfn attribute for=GetStyleUtils>rawComputedStyle</dfn> attribute must return a live <a>CSS declaration
block</a> with the following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Set.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>All longhand properties that are <span lt="supported CSS property">supported CSS properties</span>, in lexicographical order, with the value being
 the <a>computed value</a> computed for the <span data-anolis-spec=dom>context object</span> using the style rules associated with the
 <span data-anolis-spec=dom>context object</span>'s <a>associated document</a>.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>Null.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
</dl>

<p class=atrisk>The <dfn attribute for=GetStyleUtils>usedStyle</dfn> attribute must return a live <a>CSS declaration block</a> with the
following properties:
<dl>
 <dt><span lt=concept-css-declaration-block-readonly-flag>readonly flag</span>
 <dd>Set.
 <dt><span lt=concept-css-declaration-block-declarations>declarations</span>
 <dd>All longhand properties that are <span lt="supported CSS property">supported CSS properties</span>, in lexicographical order, with the value being
 the <a>used value</a> computed for the <span data-anolis-spec=dom>context object</span> using the style rules associated with the
 <span data-anolis-spec=dom>context object</span>'s <a>associated document</a>.
 <dt><span lt=contept-css-declaration-block-parent-css-rule>parent CSS rule</span>
 <dd>Null.
 <dt><span lt=concept-css-declaration-block-owner-node>owner node</span>
 <dd>The <span data-anolis-spec=dom>context object</span>.
</dl>

<p class=warning>The <code attribute for=GetStyleUtils>cascadedStyle</code>, <code attribute for=GetStyleUtils>rawComputedStyle</code>
and <code attribute for=GetStyleUtils>usedStyle</code> methods expose information from <span lt="CSS style sheet">CSS style sheets</span> with the
<span lt=concept-css-style-sheet-origin-clean-flag>origin-clean flag</span> unset.


Extensions to the {{Element}} Interface {#extensions-to-the-element-interface}
------------------------------------------------------------------------------

<pre class=idl>partial interface Element {
  PseudoElement? pseudo(DOMString pseudoElt);
};

Element implements GetStyleUtils;</pre>

<p class=atrisk>The <dfn method for=Element>pseudo(<var>pseudoElt</var>)</dfn> method, when invoked, must run the following steps:
<ol>
 <li>If <var>pseudoElt</var> is as an <span data-anolis-spec=dom>ASCII case-insensitive</span> match for either ':before' or
 '::before' return the <code>PseudoElement</code> representing the <a>before pseudo-element</a> of the
 <span data-anolis-spec=dom>context object</span>.
 <li>If <var>pseudoElt</var> is as an <span data-anolis-spec=dom>ASCII case-insensitive</span> match for either ':after' or
 '::after' return the <code>PseudoElement</code> representing the <a>after pseudo-element</a> of the
 <span data-anolis-spec=dom>context object</span>.
 <li>Return null.
</ol>
When invoked with an argument that returns a <code>PseudoElement</code> object representing a particular pseudo-element, the same object must be
returned as returned by an earlier call that represent the same pseudo-element.



The {{PseudoElement}} Interface {#the-pseudoelement-interface}
--------------------------------------------------------------

<p class=atrisk>The <code>PseudoElement</code> interface is used for representing CSS pseudo-elements. A <code>PseudoElement</code> object is associated with an
<code data-anolis-spec=dom>Element</code> object.

<pre class=idl>interface PseudoElement {
<!-- XXX
  // type
  // style
  // ownerElement
  // querySelector should return PseudoElements
  // Extend Event to expose PseudoElement?
-->
};

PseudoElement implements GetStyleUtils;</pre>


Utility APIs {#utility-apis}
============================

The <code>CSS.escape()</code> Method {#the-css.escape()-method}
------------------------------------------------------

The <code lt>CSS</code> interface is defined in CSS Conditional Rules Module. [[!CSS3-CONDITIONAL]]

<pre class=idl>partial interface CSS {
  static DOMString escape(DOMString ident);
};</pre>

The <dfn method for=CSS>escape(<var>ident</var>)</dfn> method must return the result of invoking <a>serialize an identifier</a> of
<var>ident</var>. Any exceptions thrown must be re-thrown.

<div class=example>
 For example, to escape a string for use as part of a selector, the <code method for=CSS>escape()</code> method can be used:
 <pre>var element = document.querySelector('#' + CSS.escape(id) + ' > img');</pre>
</div>

<div class=example>
 The <code method for=CSS>escape()</code> method can also be used for escaping strings, although it escapes characters that don't strictly need to be
 escaped:
 <pre>var element = document.querySelector('a[href="#' + CSS.escape(fragment) + '"]');</pre>
</div>


Resolved Values {#resolved-values}
==================================

<code lt="dom-Window-getComputedStyle()">getComputedStyle()</code> was
historically defined to return the "computed value" of an element or
pseudo-element. However, the concept of "computed value" changed between
revisions of CSS while the implementation of
<code lt="dom-Window-getComputedStyle()">getComputedStyle()</code> had to
remain the same for compatibility with deployed scripts. To address this
issue this specification introduces the concept of a
<dfn>resolved value</dfn>.

The <a>resolved value</a> for a given property can be determined
as follows:

<dl class="switch">
 <!--
 We want to treat shorthand properties like any other value basically.

 <dt>'background'
 <dt>'border'
 <dt>'border-collapse'
 <dt>'border-color'
 <dt>'border-spacing'
 <dt>'border-style'
 <dt>'border-top'
 <dt>'border-right'
 <dt>'border-bottom'
 <dt>'border-left'
 <dt>'border-width'
 <dt>'font'
 <dt>'list-style'
 <dt>'margin'
 <dt>'outline'
 <!- - overflow is not - ->
 <dt>'padding'
 <dt>'pause'
 <dd>
  There is no <a>resolved value</a>.

 -->

 <dt>'line-height'
 <dd>The <a>resolved value</a> is the <a>used value</a>.

 <dt>'height'
 <dt>'margin'
 <dt>'margin-bottom'
 <dt>'margin-left'
 <dt>'margin-right'
 <dt>'margin-top'
 <dt>'padding'
 <dt>'padding-bottom'
 <dt>'padding-left'
 <dt>'padding-right'
 <dt>'padding-top'
 <dt>'width'
 <dd>If the property applies to the element or pseudo-element and the
 <a>resolved value</a> of the 'display' property is not
 ''display/none'', the <a>resolved value</a> is the
 <a>used value</a>. Otherwise the <a>resolved value</a> is the
 <a>computed value</a>.

 <dt>'bottom'
 <dt>'left'
 <dt>'right'
 <dt>'top'
 <dd>If the property applies to a positioned element and the
 <a>resolved value</a> of the 'display' property is not
 ''display/none'', the <a>resolved value</a> is the
 <a>used value</a>. Otherwise the <a>resolved value</a> is the
 computed value.

 <dt>Any other property
 <dd>The <a>resolved value</a> is the <a>computed value</a>.
</dl>


IANA Considerations {#iana-considerations}
==========================================


Default-Style {#default-style}
------------------------------------------------------------------------------------

This section describes a header field for registration in the Permanent
Message Header Field Registry.
<!--<a href="issue">\[RFC3864]</a>-->

<dl>
 <dt>Header field name
 <dd><dfn lt="http-default-style">Default-Style</dfn>
 <dt>Applicable protocol
 <dd>http
 <dt>Status
 <dd>standard
 <dt>Author/Change controller
 <dd>W3C
 <dt>Specification document(s)
 <dd>This document is the relevant specification.
 <dt>Related information
 <dd>None.
</dl>



Change History {#change-history}
================================

This section documents some of the changes between publications of this specification. This section is not exhaustive. Bug fixes and editorial changes are
generally not listed.

Changes From 12 July 2011 To 5 December 2013 {#changes-from-12-july-2011-to-5-december-2013}
--------------------------------------------------------------------------------------------

<ul>
 <li>Cross-origin stylesheets are not allowed to be read or changed.

 <li><code>CSSCharsetRule</code> is re-introduced.

 <li><code>CSSGroupingRule</code> and <code>CSSMarginRule</code> are introduced.

 <li><code>CSSNamespaceRule</code> is now mutable.

 <li><span lt="parse a CSS declaration block">Parse</span> and <span lt="serialize a CSS declaration block">serialize</span> a CSS declaration block is
 now defined.

 <li>Shorthands are now supported in <code attribute for=CSSStyleDeclaration>setProperty</code>,
 <code attribute for=CSSStyleDeclaration>getPropertyValue</code>, et al.

 <li><code method for=CSSStyleDeclaration>setPropertyValue()</code> and
 <code method for=CSSStyleDeclaration>setPropertyPriority()</code> are introduced.

 <li>The <code lt>style</code> and <code lt>media</code> attributes of various interfaces are annotated with the <code lt>[PutForwards]</code> WebIDL
 extended attribute.

 <li>The <code method for=Element>pseudo()</code> method on <code data-anolis-spec=dom>Element</code> is introduced.

 <li>The <code>PseudoElement</code> interface is introduced.

 <li>The <code attribute for=GetStyleUtils>cascadedStyle</code>, .<code attribute for=GetStyleUtils>rawComputedStyle</code> and
 <code attribute for=GetStyleUtils>usedStyle</code> attributes on <code data-anolis-spec=dom>Element</code> and <code>PseudoElement</code> are introduced.

 <li>The <code method for=CSS>CSS.escape()</code> static method is introduced.
</ul>

<!--
This section documents the primary technical changes of CSSOM related functionality, with a focus on changes to API signatures.

<h3 class="no-num">Changes From DOM-2 Style</h3>

<ul>
<li>Remove definition of <code lt>CSSRule.UNKNOWN_RULE</code>, reserving its value (0) to prevent future reuse.
<li>Remove definition of <code lt>DOMImplementationCSS</code> interface.
</ul>
-->

Acknowledgments {#acknowledgments}
==================================

The editors would like to thank
Alexey Feldgendler,
Bj&ouml;rn H&ouml;hrmann,
Boris Zbasky,
Brian Kardell,
Christian Krebs,
Daniel Glazman,
David Baron,
<i>fantasai</i>,
Hallvord R. M. Steen,
Ian Hickson,
John Daggett,
Lachlan Hunt,
Mike Sherov,
Morten Stenshorne,
Ms2ger,
Øyvind Stenhaug,
Peter Sloetjes,
Philip Taylor,
Robert O'Callahan,
Simon Sapin,
Sjoerd Visscher,
Sylvain Galineau,
Tarquin Wilton-Jones, and
Zack Weinberg
for contributing to this specification.

Additional thanks to Ian Hickson for writing the
initial version of the alternative style sheets API and canonicalization
(now serialization) rules for CSS values.

<!-- XXX NOTES

<style type=text/css;charset=utf-8> does create a StyleSheet in Firefox
and Opera, but does not create a StyleSheet in IE. I prefer IE.

<style type=TEXT/CSS> sets the style sheet type to text/css in Firefox and
TEXT/CSS in Opera and IE. I prefer Firefox.

<style> sets the style sheet location to the document location Firefox,
the empty string in IE, and null in Opera. I prefer Opera

<style media="x"> invokes .sheet.media.mediaText = "x"

<style> does not "have" a title

.cascadedStyle that returns less keywords than currentStyle, no inherit,
etc.

Markup style: http://krijnhoetmer.nl/irc-logs/whatwg/20100204#l-529
-->
 </body>
</html>

