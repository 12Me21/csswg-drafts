
partial interface Window {

  [Documentation=
   "<p>The {@name} {@type} must run these steps:</p>\
    <ol>\
      <li><p>Let <var>doc</var> be the\
      <code data-anolis-spec=dom>Document</code>\
      associated with the <code data-anolis-spec=html>Window</code> object on\
      which the method was invoked.</p></li>\
      <li><p>Let <var>obj</var> be <var>elt</var>.</p></li>\
      <li><p>If <var>pseudoElt</var> is as an\
      <span data-anolis-spec=dom>ASCII case-insensitive</span> match for\
      either '<code>:before</code>' or '<code>::before</code>' let\
      <var>obj</var> be the '::before' pseudo-element of\
      <var>elt</var>.</p></li>\
      <li><p>If <var>pseudoElt</var> is as an\
      <span data-anolis-spec=dom>ASCII case-insensitive</span> match for\
      either '<code>:after</code>' or '<code>::after</code>' let\
      <var>obj</var> be the '::after' pseudo-element of\
      <var>elt</var>.</p></li>\
      <li>\
       <p>Return a <span>CSS declaration block</span> with the\
       <span>CSS declaration block readonly flag</span> set and the\
       <span>CSS declaration block declarations</span> set to all properties\
       the user agent supports with as value the <span>resolved value</span>\
       computed for <var>obj</var> using the style rules associated\
       with <var>doc</var>.</p>\
       <p class='note'>This means that even if <var>obj</var> is in a\
       different document (e.g. one fetched via <code>XMLHttpRequest</code>) it\
       will still use the style rules associated with the document that is\
       associated with the global object on which\
       <code title='dom-Window-getComputedStyle'>getComputedStyle()</code> was\
       invoked to compute the <span>CSS declaration block</span>.</p>\
      </li>\
    </ol>\
    <p class='note'>Because of historical IDL limitations the {@name} {@type} used to be on\
    a separate interface, <code>ViewCSS</code>.</p>"
  ]
  CSSStyleDeclaration getComputedStyle(Element elt, optional DOMString pseudoElt);

  [Documentation=
   "<p>The {@name} {@type} must run these steps:</p>\
    <ol>\
      <li><p>Let <var>doc</var> be the\
      <code data-anolis-spec=dom>Document</code>\
      associated with the <code data-anolis-spec=html>Window</code> object on\
      which the method was invoked.</p></li>\
      <li><p>Let <var>obj</var> be <var>elt</var>.</p></li>\
      <li><p>If <var>pseudoElt</var> is as an\
      <span data-anolis-spec=dom>ASCII case-insensitive</span> match for\
      either '<code>:before</code>' or '<code>::before</code>' let\
      <var>obj</var> be the '::before' pseudo-element of\
      <var>elt</var>.</p></li>\
      <li><p>If <var>pseudoElt</var> is as an\
      <span data-anolis-spec=dom>ASCII case-insensitive</span> match for\
      either '<code>:after</code>' or '<code>::after</code>' let\
      <var>obj</var> be the '::after' pseudo-element of\
      <var>elt</var>.</p></li>\
      <li>\
       <p>Return a <span>CSS declaration block</span> with the\
       <span>CSS declaration block readonly flag</span> set and the\
       <span>CSS declaration block declarations</span> set to all properties\
       the user agent supports with as value the computed value\
       for <var>obj</var> using the user agent-level style rules and user-level style\
       rules associated with <var>doc</var>, ignoring author-level style rules,\
       transitions, animations, override style sheets and presentational hints.</p>\
      </li>\
    </ol>"
  ]
  CSSStyleDeclaration getDefaultComputedStyle(Element elt, optional DOMString pseudoElt);
};
