//
// All members defined since DOM-2 Style. The only differences are:
//
//   1. removal of raises(DOMException) on {insert,delete}Rule operations.
//

[Documentation=
 "<p>The {@name} {@type} represents a CSS <span>style sheet</span> rule.</p>"
]
interface CSSStyleSheet : StyleSheet {

  [Documentation=
   "<p>The {@name} {@type} must return the <span>style sheet owner CSS rule</span> or <code>null</code> if none.\
    If a value other than <code>null</code> is ever returned, than that same value must always be returned on each get access.</p>"
  ]
  readonly attribute CSSRule? ownerRule;

  [Documentation=
   "<p>The {@name} {@type} must return a read-only, live <code>CSSRuleList</code> object representing the <span>style\
    sheet CSS rules</span>. The same object must be returned on each get access.</p>\
    <p class='note'>Even though the returned <code>CSSRuleList</code> object is read-only (from the perspective of\
    client-authored script), it may nevertheless change over time due to its liveness status. For example, invoking\
    the <code>insertRule</code> or <code>deleteRule</code> operation may result in mutations reflected in the returned object.</p>"
  ]
  readonly attribute CSSRuleList cssRules;

  [Documentation=
   "<p>The {@name} {@type} performs <dfn>insert a CSS rule</dfn> <var>rule</var> as follows:</p>\
    <ol>\
    <li><p>Set <var>newRule</var> to the results of performing <span>parse a CSS rule</span>\
    on argument <var>rule</var>, <span data-anolis-spec='dom' title='concept-throw'>throwing</span>\
    a &quot;<code data-anolis-spec='dom'>SyntaxError</code>&quot; exception if a parse error occurs.</p></li>\
    <li><p>Set <var>N</var> to <code>cssLength.length</code>.</p></li>\
    <li><p>If argument <var>index</var> is greater than <var>N</var>, then <span data-anolis-spec='dom' title='concept-throw'>throw</span>\
    an &quot;<code data-anolis-spec='dom'>IndexSizeError</code>&quot; exception.</p></li>\
    <li><p>If the rule <var>newRule</var> cannot be inserted into the specified <var>index</var> due to constraints specified\
    by <span data-anolis-ref>CSS</span>, then <span data-anolis-spec='dom' title='concept-throw'>throw</span>\
    a &quot;<code data-anolis-spec='dom'>HierarchyRequestError</code>&quot; exception.</p>\
    <p class='note'>For example, a CSS style sheet cannot contain more than one <code>@charset</code> rule, which,\
    if present, must be the first rule.</p></li>\
    <li><p>Set <var>newRule</var><code>.parentStyleSheet</code> to <code>this</code> (i.e., this <code>CSSStyleSheet</code> instance object).</p></li>\
    <li><p>Insert rule <var>newRule</var> into <code>cssRules</code> at the zero-indexed position <var>index</var>.<p></li>\
    <li><p>Return <var>index</var>.</p></li>\
    </ol>\
    <p class='note'>If a new rule is inserted, then any rule previously located at position <var>index</var> through\
    <var>N</var> minus 1 is shifted to position <var>index</var> plus 1 through <var>N</var>,\
    In addition, <code>cssRules.length</code> is (internally) incremented.</p>\
    <p class='issue'>DOM-2 CSS specifies that a <code>NO_MODIFICATION_ALLOWED_ERR</code> exception is thrown\
    if the style sheet is read-only. Are there any read-only style sheets?</p>"
  ]
  unsigned long insertRule(DOMString rule, unsigned long index);

  [Documentation=
   "<p>The {@name} {@type} performs <dfn>remove a CSS rule</dfn> as follows:</p>\
    <ol>\
    <li><p>Set <var>N</var> to <code>cssLength.length</code>.</p></li>\
    <li><p>If argument <var>index</var> is greater than or equal to <var>N</var>, then <span data-anolis-spec='dom' title='concept-throw'>throw</span>\
    an &quot;<code data-anolis-spec='dom'>IndexSizeError</code>&quot; exception.</p></li>\
    <li><p>Set <var>oldRule</var> to <code>cssRules.prototype.item(<var>index</var>)</code>.</p></li>\
    <li><p>Set <var>oldRule</var><code>.parentStyleSheet</code> to <code>null</code>.</p></li>\
    <li><p>Remove rule <var>oldRule</var> from <code>cssRules</code> at the zero-indexed position <var>index</var>.<p></li>\
    </ol>\
    <p class='note'>If an existing rule is deleted, then any rule previously located at position <var>index</var> plus 1 through\
    <var>N</var> minus 1 is shifted to position <var>index</var> through <var>N</var> minus 2,\
    In addition, <code>cssRules.length</code> is (internally) decremented.</p>"
  ]
  void deleteRule(unsigned long index);

};
