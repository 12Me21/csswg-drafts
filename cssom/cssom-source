<!doctype html>
<html lang="en-US">
 <head>
  <meta charset=utf-8>
  <title>CSS Object Model (CSSOM)</title>
  <link rel="stylesheet" href="cssom.css">
  <link rel="stylesheet" href="http://www.w3.org/StyleSheets/TR/W3C-[STATUS]">
 </head>
 <body class="draft">
  <div class="head">
   <!--logo-->

   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

   <h1 id="cssom">CSS Object Model (CSSOM)</h1>

   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

   <h2 class="no-num no-toc" id="w3c-doctype">[LONGSTATUS] [DATE: 3 August 2002]</h2>

   <dl>

    <dt>This Version:</dt>
    <dd class=dontpublish><a href="http://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html">http://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html</a></dd>
    <dd class=publish><a href="[VERSION]">[VERSION]</a></dd>

    <dt class=dontpublish>Participate:</dt>
    <dd class=dontpublish><a href="mailto:www-style@w3.org?subject==%5Bcssom%5D%20">www-style@w3.org</a> (<a href="http://lists.w3.org/Archives/Public/www-style/">archives</a>)</dd>
    <dd class=dontpublish><a href="https://www.w3.org/Bugs/Public/enter_bug.cgi?product=CSS&amp;component=CSSOM">File a bug</a></dd>
    <dd class=dontpublish><a href="irc://irc.w3.org/css">IRC: #css on W3C</a></dd>

    <dt class=publish>Latest Version:</dt>
    <dd class=publish><a href="[LATEST]">[LATEST]</a></dd>

    <dt class=publish>Latest Editor's draft:</dt>
    <dd class=publish><a href="http://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html">http://dvcs.w3.org/hg/csswg/raw-file/tip/cssom/Overview.html</a></dd>

    <dt class=dontpublish>Previous Version:</dt>
    <dd class=dontpublish><a href="http://www.w3.org/TR/2011/WD-cssom-20110712/">http://www.w3.org/TR/2011/WD-cssom-20110712/</a></dd>
    <dd class=dontpublish><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/">http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/</a></dd>

    <dt>Editors:</dt>
    <dd><a href="http://www.w3.org/wiki/User:Gadams">Glenn Adams</a>
    (<a href="http://www.cox.com/">Cox Communications, Inc.</a>)
    &lt;<a href="mailto:glenn.adams@cox.com">glenn.adams@cox.com</a>&gt;</dd>
    <dd><a>Shane Stephens</a>
    (<a href="http://www.google.com/">Google, Inc.</a>)
    &lt;<a href="mailto:shans@google.com">shans@google.com</a>&gt;</dd>

    <dt>Previous Editor:</dt>
    <dd><a href="http://annevankesteren.nl/">Anne van Kesteren</a>
    (<a href="http://www.opera.com/">Opera Software ASA</a>)
    &lt;<a href="mailto:annevk@opera.com">annevk@opera.com</a>&gt;</dd>
   </dl>

   <!--copyright-->

  </div>

  <hr class="top">

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 class="no-num no-toc" id="abstract">Abstract</h2>

  <p>CSSOM defines APIs (including generic parsing and serialization rules)
  for Media Queries, Selectors, and of course CSS itself.</p>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 class="no-num no-toc" id="sotd">Status of this Document</h2>

  <p>This is a public copy of the editors' draft. It is provided for discussion only and may change at any moment.
  Its publication here does not imply endorsement of its contents by W3C or by the CSS Working Group. Don't cite
  this document other than as work in progress.</p>

  <p class="note">Implementers should note well that this specification is an ongoing effort to sort out
  what has been widely implemented and deployed from <span data-anolis-ref>DOM2STYLE</span> as well as common extensions thereto, some details
  of which are currently interoperable and others which are not currently interoperable. As this specification moves
  forward, it is hoped that these differences will be resolved and an unambiguous and adequate consensus-based
  specification will emerge.</p>

  <p><em>This section describes the status of this document at the time of
  its publication. Other documents may supersede this document. A list of
  current W3C publications and the latest revision of this technical report
  can be found in the
  <a href="http://www.w3.org/TR/">W3C technical reports index at http://www.w3.org/TR/.</a></em>

  <p class="dontpublish">This is the [DATE: 3 August 2002] [LONGSTATUS] of CSSOM. Please send comments to
  <a href="mailto:www-style@w3.org?subject=%5Bcssom%5D%20">www-style@w3.org</a>
  (<a href="http://lists.w3.org/Archives/Public/www-style/">archived</a>)
  with <samp>[cssom]</samp> at the start of the subject line.

  <p class="publish">This is the [DATE] First Public Working Draft of CSSOM, produced by the
  <a href="http://www.w3.org/Style/CSS/members">CSS Working Group</a> (part
  of the <a href="http://www.w3.org/Style/">Style Activity</a>).
  <!--XXX remove "First Public" after initial publication -->

  <p>This document was produced by a group operating under the
  <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>.
  W3C maintains a
  <a href="http://www.w3.org/2004/01/pp-impl/32061/status" rel=disclosure>public list of any patent disclosures</a>
  made in connection with the deliverables of the group; that page also
  includes instructions for disclosing a patent. An individual who has
  actual knowledge of a patent which the individual believes contains
  <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a>
  must disclose the information in accordance with
  <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>.</p>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 class="no-num no-toc" id="toc">Table of Contents</h2>

  <!--toc-->

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 id="introduction">Introduction</h2>

  <p>This document formally specifies the core features of the CSS Object Model (CSSOM). Other documents in the CSSOM family of specifications
  as well as other CSS related specifications define extensions to these core features.</p>

  <p>The core features of the CSSOM are oriented towards providing basic capabilities to author-defined scripts to permit access to
  and manipulation of style related state information and processes.</p>

  <p>The features defined below are fundamentally based on prior specifications of the W3C DOM Working Group, primarily
  <span data-anolis-ref>DOM2STYLE</span>. The purposes of the present document are (1) to improve on that prior work by providing
  more technical specificity (so as to improve testability and interoperability), (2) to deprecate or remove certain less-widely implemented
  features no longer considered to be essential in this context, and (3) to newly specify certain extensions that have been
  or expected to be widely implemented.</p>

  <p>A full list of the changes to API signatures can be found in <a href="#changes-from-dom2"><cite>Changes from DOM-2 Style</cite></a>.</p>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2>Conformance</h2>

  <p>All diagrams, examples, and notes in this specification are
  non-normative, as are all sections explicitly marked non-normative.
  Everything else in this specification is normative.

  <p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
  NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
  "OPTIONAL" in the normative parts of this document are to be
  interpreted as described in RFC2119. For readability, these words do
  not appear in all uppercase letters in this specification.
  <span data-anolis-ref>RFC2119</span>

  <p>Requirements phrased in the imperative as part of algorithms
  (such as "strip any leading space characters" or "return false and
  terminate these steps") are to be interpreted with the meaning of the
  key word ("must", "should", "may", etc) used in introducing the
  algorithm.

  <p>Conformance requirements phrased as algorithms or specific steps
  may be implemented in any manner, so long as the end result is
  equivalent. (In particular, the algorithms defined in this
  specification are intended to be easy to follow, and not intended to
  be performant.)

  <p id="hardwareLimitations">User agents may impose
  implementation-specific limits on otherwise unconstrained inputs,
  e.g. to prevent denial of service attacks, to guard against running
  out of memory, or to work around platform-specific limitations.

  <p>When a method or an attribute is said to call another method or attribute, the user agent must invoke its internal API for that attribute or method so that e.g. the author can't change the behavior by overriding attributes or methods with custom properties or functions in ECMAScript.

  <p>Unless otherwise stated, string comparisons are done in a
  <span data-anolis-spec=dom>case-sensitive</span> manner.

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 id="terminology">Terminology</h2>

  <p>This specification employs certain terminology from the following documents:
  <cite>DOM4</cite>,
  <cite>HTML</cite>,
  <cite>Associating Style Sheets with XML documents</cite>
  and
  <cite>XML</cite>
  <span data-anolis-ref>DOM</span>
  <span data-anolis-ref>HTML</span>
  <span data-anolis-ref>XMLSS</span>
  <span data-anolis-ref>XML</span>.

  <p>When this specification talks about object
  <code><var>A</var></code> where <code><var>A</var></code> is actually an interface, it generally means an object implementing interface
  <code><var>A</var></code>.</p>

  <p>The term <dfn id="whitespace">whitespace</dfn> is used as defined in <span data-anolis-ref>CSS</span>.

  <p>The terms <dfn id="set">set</dfn> and <dfn id="clear">clear</dfn> to refer to the <code>true</code> and
  <code>false</code> values of binary flags or variables, respectively. These terms are also used as verbs in which case they refer to
  mutating some value to make it <code>true</code> or <code>false</code>, respectively.</p>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Common Serializing Idioms</h3>

  <p>To <dfn>escape a character</dfn> means to create a string of
  "<code>\</code>" (U+005C), followed by the character.</p>

  <p>To <dfn>escape a character as code point</dfn> means to create a
  string of "<code>\</code>" (U+005C), followed by the Unicode code point as
  the smallest possible number of hexadecimal digits in the range 0-9 a-f
  (U+0030 to U+0039 and U+0061 to U+0066) to represent the code point in
  base 16, followed by a single SPACE (U+0020).</p>

  <p>To <dfn>serialize an identifier</dfn> means to create a string represented
  by the concatenation of, for each character of the identifier:</p>

  <ul>
   <li>If the character is NULL (U+0000), then <span data-anolis-spec=dom title=concept-throw>throw</span> an
   <code data-anolis-spec=dom>InvalidCharacterError</code> exception and terminate these steps.</li>
   <li>If the character is in the range [\1-\1f] (U+0001 to U+001F) or
   [\7f-\9f] (U+007F to U+009F), then the character
   <span title="escape a character as code point">escaped as code point</span>.</li>
   <li>If the character is the first character and is in the range [0-9]
   (U+0030 to U+0039), then the character
   <span title="escape a character as code point">escaped as code point</span>.</li>
   <li>If the character is the second character and is in the range [0-9]
   (U+0030 to U+0039) and the first character is a "<code>-</code>"
   (U+002D), then the character
   <span title="escape a character as code point">escaped as code point</span>.</li>
   <li>If the character is the second character and is "<code>-</code>"
   (U+002D) and the first character is "<code>-</code>" as well, then the
   <span title="escape a character">escaped</span> character.</li>
   <li>If the character is not handled by one of the above rules and is
   greater than or equal to U+0080, is "<code>-</code>" (U+002D) or
   "<code>_</code>" (U+005F), or is in one of the ranges [0-9] (U+0030 to
   U+0039), [A-Z] (U+0041 to U+005A), or [a-z] (U+0061 to U+007A), then the character
   itself.</li>
   <li>Otherwise, the <span title="escape a character">escaped</span>
   character.</li>
  </ul>

  <p>To <dfn>serialize a string</dfn> means to create a string represented
  by '<code>"</code>' (U+0022), followed by the result of applying the rules
  below to each character of the given string, followed by
  '<code>"</code>' (U+0022):</p>

  <ul>
   <li>If the character is NULL (U+0000), then <span data-anolis-spec=dom title=concept-throw>throw</span> an
   <code data-anolis-spec=dom>InvalidCharacterError</code> exception and terminate these steps.</li>
   <li>If the character is in the range [\1-\1f] (U+0001 to U+001F) or [\7f-\9f] (U+007F to
   U+009F), the character <span title="escape a character as code point">escaped as code point</span>.</li>
   <li>If the character is '<code>"</code>' (U+0022) or '<code>\</code>'
   (U+005C), the <span title="escape a character">escaped</span> character.</li>
   <li>Otherwise, the character itself.</li>
  </ul>

  <p class="note">"<code>'</code>" (U+0027) is not escaped because strings
  are always serialized with '<code>"</code>' (U+0022).</p>

  <p>To <dfn>serialize a URL</dfn> means to create a string represented by
  "<code>url(</code>", followed by the
  <span title="serialize a string">string escaped</span> value of the given
  string, followed by "<code>)</code>".</p>

  <p>To <dfn>serialize a comma-separated list</dfn> concatenate all items of
  the list in list order while separating them by "<code>, </code>", i.e.,
  COMMA (U+002C) followed by a single SPACE (U+0020).</p>

  <p>To <dfn>serialize a whitespace-separated list</dfn> concatenate all
  items of the list in list order while separating them by "<code> </code>", i.e.,
  a single SPACE (U+0020).</p>

  <p class="note">When serializing a list according to the above rules,
  extraneous whitespace is not inserted prior to the first item or subsequent to
  the last item. Unless otherwise specified, an empty list is serialized as the
  empty string.</p>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2>Media Queries</h2>

  <p>Media queries are defined by the Media Queries specification. This
  section defines various concepts around media queries, including their API
  and serialization form.</p>

  <!-- XXX ref -->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Parsing Media Queries</h3>

  <p>To
  <dfn id="parse-a-media-query-list">parse a media query list</dfn> for a
  given string <var>s</var> into a media query list is defined in
  the Media Queries specification. Return the list of one or more media
  queries that the algorithm defined there gives.</p> <!-- XXX ref -->

  <p class="note">A media query that ends up being "ignored" will turn
  into "<code>not all</code>".</p>

  <p>To
  <dfn id="parse-a-media-query">parse a media query</dfn> for a given string
  <var>s</var> means to follow the
  <span>parse a media query list</span> steps and return <code>null</code> if more
  than one media query is returned or a media query if a
  single media query is returned.</p>

  <p class="note">Again, a media query that ends up being "ignored" will
  turn into "<code>not all</code>".</p>

  <!-- ........................................................................................................................ -->

  <h3>Serializing Media Queries</h3>

  <p>To
  <dfn id="serialize-a-media-query-list">serialize a media query list</dfn>
  run these steps:</p>

  <ol>
   <li><p>If the media query list is empty return the empty string and
   terminate these steps.</p></li>

   <li><p><span title="serialize a media query">Serialize</span> each
   media query in the list of media queries, sort them in lexicographical
   order, and then
   <span title="serialize a comma-separated list">serialize</span> the
   list.</p></li>
  </ol>

  <p>To
  <dfn id="serialize-a-media-query">serialize a media query</dfn> let
  <var>s</var> be the empty string, run the steps below, and
  finally return <var>s</var>:</p>

  <ol>
   <li><p>If the media query is negated append "<code>not</code>", followed
   by a single SPACE (U+0020), to <var>s</var>.</p></li>

   <li><p>Let <var>type</var> be the media type of the media query,
   <span title="serialize an identifier">escaped</span> and
   <span data-anolis-spec=dom>converted to ASCII lowercase</span>.</p></li>

   <li><p>If the media query does not contain media features append
   <var>type</var>, to <var>s</var>,
   then return <var>s</var> and terminate this algorithm.</p></li>

   <li><p>If <var>type</var> is not "<code>all</code>" or if the
   media query is negated append <var>type</var>, followed by a
   single SPACE (U+0020), followed by "<code>and</code>", followed by a single SPACE
   (U+0020), to <var>s</var>.</p></li>

   <li><p>Sort the media features in lexicographical order.</p></li>

   <li>
    <p>Then, for each media feature:</p>

    <ol>
     <li>Append a "<code>(</code>" (U+0028), followed by the media feature
     name, <span data-anolis-spec=dom>converted to ASCII lowercase</span>,
     to <var>s</var>.</p></li>

     <li><p>If a value is given append a "<code>:</code>" (U+003A), followed
     by a single SPACE (U+0020), followed by the
     <span title="serialize a media feature value">serialized media feature value</span>,
     to <var>s</var>.</p></li>

     <li><p>Append a "<code>)</code>" (U+0029) to
     <var>s</var>.</p></li>

     <li><p>If this is not the last media feature append a single SPACE (U+0020),
     followed by "<code>and</code>", followed by a single SPACE (U+0020), to
     <var>s</var>.</p></li>
    </ol>
   </li>
  </ol>

  <div class="example">
   <p>Here are some examples of input (first column) and output (second
   column):</p>

   <table>
    <thead>
     <tr><th>Input<th>Output
    <tbody>
     <tr>
      <td><pre>not screen and (min-WIDTH:5px) AND (max-width:40px)</pre>
      <td><pre>not screen and (max-width: 40px) and (min-width: 5px)</pre>
     <tr>
      <td><pre>all and (color) and (color)</pre>
      <td><pre>(color)</pre>
   </table>
  </div>


  <!-- ........................................................................................................................ -->

  <h4>Serializing Media Feature Values</h4>

  <p class="issue">This should probably be done in terms of mapping it to
  serializing CSS values as media features are defined in terms of CSS
  values after all.</p>

  <p>To <dfn id="serialize-a-media-feature-value">serialize a media feature value</dfn>
  named <var>v</var> locate <var>v</var> in the first
  column of the table below and use the serialization format described in
  the second column:</p>

  <table>
   <tr>
    <th>Media Feature
    <th>Serialization
   <tr>
    <td><code>width</code>
    <td>...
   <tr>
    <td><code>height</code>
    <td>...
   <tr>
    <td><code>device-width</code>
    <td>...
   <tr>
    <td><code>device-height</code>
    <td>...
   <tr>
    <td><code>orientation</code>
    <td>
     <p>If the value is `<code>portrait</code>`: "<code>portrait</code>".</p>
     <p>If the value is `<code>landscape</code>`: "<code>landscape</code>".</p>
   <tr>
    <td><code>aspect-ratio</code>
    <td>...
   <tr>
    <td><code>device-aspect-ratio</code>
    <td>...
   <tr>
    <td><code>color</code>
    <td>...
   <tr>
    <td><code>color-index</code>
    <td>...
   <tr>
    <td><code>monochrome</code>
    <td>...
   <tr>
    <td><code>resolution</code>
    <td>...
   <tr>
    <td><code>scan</code>
    <td>
     <p>If the value is `<code>progressive</code>`: "<code>progressive</code>".</p>
     <p>If the value is `<code>interlace</code>`: "<code>interlace</code>".</p>
   <tr>
    <td><code>grid</code>
    <td>...
  </table>

  <p>Other specifications can extend this table and vendor-prefixed media
  features can have custom serialization formats as well.</p>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Comparing Media Queries</h3>

  <p>To
  <dfn id="compare-media-queries">compare media queries</dfn>
  <var>m1</var> and <var>m2</var> means to
  <span title="serialize a media query">serialize</span> them both and
  return true if they are a
  <span data-anolis-spec=dom>case-sensitive</span> match and false if they
  are not.</p>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>The <code>MediaList</code> Interface</h3>

  <!--{@idl(MediaList)}-->

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2>Selectors</h2>

  <p>Selectors are defined in the Selectors specification. This section
  mainly defines how to serialize them.</p> <!-- XXX ref -->

  <!-- XXX ref universal selector etc? some are in <span> some not -->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Parsing Selectors</h3>

  <p>To
  <dfn id="parse-a-group-of-selectors">parse a group of selectors</dfn>
  means to parse the value using the <code>selectors_group</code>
  production defined in the Selectors specification and return either a
  group of selectors if parsing did not fail or <code>null</code> if parsing did
  fail.</p> <!-- XXX ref -->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Serializing Selectors</h3>
  <!-- http://dump.testsuite.org/2009/cssom/serializing-selectors.htm -->

  <p>To
  <dfn id="serialize-a-group-of-selectors">serialize a group of selectors</dfn>
  <span title="serialize a selector">serialize</span> each selector in the
  group of selectors and then
  <span title="serialize a comma-separated list">serialize</span> the
  group.</p>

  <p>To <dfn id="serialize-a-selector">serialize a selector</dfn> let
  <var>s</var> be the empty string, run the steps below for each
  part of the chain of the selector, and finally return
  <var>s</var>:</p>

  <ol>
   <li><p>If there is only one <span>simple selector</span> in the
   <span>sequence of simple selectors</span> which is a
   <span>universal selector</span>, append the result of
   <span title="serialize a simple selector">serializing</span> the
   <span>universal selector</span> to <var>s</var>.</p></li>

   <li><p>Otherwise, for each <span>simple selector</span> in the
   <span>sequence of simple selectors</span> that is not a
   universal selector of which the <span>namespace prefix</span> maps to
   the null namespace (not in a namespace) or of which the
   <span>namespace prefix</span> maps to a namespace that is not the
   <span>default namespace</span>
   <span title="serialize a simple selector">serialize</span> the
   <span>simple selector</span> and append the result to
   <var>s</var>.</p></li>

   <li><p>If this is not the last part of the chain of the selector append a
   single SPACE (U+0020), followed by the combinator
   "<code>></code>",
   "<code>+</code>", or
   "<code>~</code>"
   as appropriate, followed by another single SPACE (U+0020) if the combinator was
   not whitespace, to <var>s</var>.</p></li>

   <li><p>If this is the last part of the chain of the selector and there is
   a pseudo-element, append "<code>::</code>" followed by the name of the
   pseudo-class, to <var>s</var>.</p></li>
  </ol>


  <p>To
  <dfn id="serialize-a-simple-selector">serialize a simple selector</dfn>
  let <var>s</var> be the empty string, run the steps below, and
  finally return <var>s</var>:</p>

  <dl class="switch">
   <dt>type selector</dt>
   <dt>universal selector</dt>
   <dd>
    <ol>
     <li><p>If the <span>namespace prefix</span> maps to a namespace that is
     not the <span>default namespace</span> and is not the
     null namespace (not in a namespace) append the
     <span title="serialize an identifier">escaped</span>
     <span>namespace prefix</span>, followed by a "<code>|</code>" (U+007C)
     to <var>s</var>.</p></li>

     <li><p>If the <span>namespace prefix</span> maps to a namespace that is
     the null namespace (not in a namespace) append
     "<code>|</code>" (U+007C) to <var>s</var>.</p></li>
     <!-- This includes |* -->

     <li><p>If this is a type selector append the
     <span title="serialize an identifier">escaped</span> element name to
     <var>s</var>.</p></li>

     <li><p>If this is a universal selector append "<code>*</code>" (U+002A)
     to <var>s</var>.</p></li>
    </ol>
   </dd>

   <dt>attribute selector</dt>
   <dd>
    <ol>
     <li><p>Append "<code>[</code>" (U+005B) to
     <var>s</var>.</p></li>

     <li><p>If the <span>namespace prefix</span> maps to a namespace that is
     not the null namespace (not in a namespace) append the
     <span title="serialize an identifier">escaped</span>
     <span>namespace prefix</span>, followed by a "<code>|</code>" (U+007C)
     to <var>s</var>.</p></li>

     <li><p>If the <span>namespace prefix</span> maps to a namespace that is
     the null namespace (not in a namespace) append
     "<code>|</code>" (U+007C) to <var>s</var>.</p></li>
     <!-- This includes |* -->

     <li><p>Append the <span title="serialize an identifier">escaped</span>
     attribute name to <var>s</var>.</p></li>

     <li><p>If there is an attribute value specified, append
     "<code>=</code>",
     "<code>~=</code>",
     "<code>|=</code>",
     "<code>^=</code>",
     "<code>$=</code>", or
     "<code>*=</code>"
     as appropriate (depending on the type of attribute selector), followed
     by the <span title="serialize a string">string escaped</span>
     attribute value, to <var>s</var>.</p></li>

     <li><p>Append "<code>]</code>" (U+005D) to
     <var>s</vaR>.</p></li>
    </ol>
   </dd>

   <dt>class selector</dt>
   <dd><p>Append a "<code>.</code>" (U+002E), followed by the
   <span title="serialize an identifier">escaped</span> class name to
   <var>s</var>.</p></dd>

   <dt>ID selector</dt>
   <dd><p>Append a "<code>#</code>" (U+0023), followed by the
   <span title="serialize an identifier">escaped</span> ID to
   <var>s</var>.</p></dd>

   <dt>pseudo-class</dt>
   <dd>
    <p>If the pseudo-class does not accept arguments append
    "<code>:</code>" (U+003A), followed by the name of the pseudo-class, to
    <var>s</var>.</p>

    <p>Otherwise, append "<code>:</code>" (U+003A), followed by the name of
    the pseudo-class, followed by "<code>(</code>" (U+0028), followed by the
    value of the pseudo-class argument determined as per below, followed by
    "<code>)</code>" (U+0029), to <var>s</var>.</p>

    <dl class="switch">
     <dt><code>:lang()</code></dt>
     <dd><p>The <span title="serialize an identifier">escaped</span>
     value.</p></dd>

     <dt><code>:nth-child()</code></dt>
     <dt><code>:nth-last-child()</code></dt>
     <dt><code>:nth-of-type()</code></dt>
     <dt><code>:nth-last-of-type()</code></dt>
     <dd>
      <ol>
       <li><p>If the value is odd let the value be
       "<code>2n+1</code>".</p></li>

       <li><p>If the value is even let the value be
       "<code>2n</code>".</p></li>

       <li><p>If <var>a</var> is zero let the value be
       <var>b</var>
       <span title="serialize a CSS component value">serialized</span> as &lt;integer>.</p></li>

       <li><p>If <var>a</var> is one or minus one and
       <var>b</var> is zero let the value be
       "<code>n</code>" (U+006E).</p></li>

       <li><p>If <var>a</var> is one or minus one let the value be
       "<code>n</code>" (U+006E), followed by
       "<code>+</code>" (U+002B) if <var>b</var> is positive,
       followed by <var>b</var>
       <span title="serialize a CSS component value">serialized</span> as &lt;integer>.</p></li>

       <li><p>If <var>b</var> is zero let the value be
       <var>a</var>
       <span title="serialize a CSS component value">serialized</span> as &lt;integer>,
       followed by "<code>n</code>" (U+006E).</p></li>

       <li><p>Otherwise let the value be
       <var>a</var>
       <span title="serialize a CSS component value">serialized</span> as &lt;integer>,
       followed by "<code>n</code>" (U+006E), followed by
       "<code>+</code>" (U+002B) if <var>b</var> is positive,
       followed by <var>b</var>
       <span title="serialize a CSS component value">serialized</span> as &lt;integer>.</p></li>
      </ol>
     </dd>

     <dt><code>:not()</code></dt>
     <dd><p>The result of serializing the value using the rules for
     <span title="serialize a group of selectors">serializing a group of selectors</span>.</p></dd>
    </dl>
   </dd>
  </dl>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2>CSS</h2>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>CSS Style Sheets</h3>

  <!-- XXX
   element inserted into the DOM, style sheet created, element removed from
   the DOM, what happens to StyleSheet?
  -->

  <p>A <dfn id="css-style-sheet">CSS style sheet</dfn> is an abstract concept that
  represents a style sheet as defined by the CSS specification. In the CSSOM a
  <span>CSS style sheet</span> is represented as a <code>CSSStyleSheet</code> object. A
  <span>CSS style sheet</span> has a number of associated state items:</p>

  <dl>
   <dt><dfn id="style-sheet-type">style sheet type</dfn></dt>
   <dd><p>The literal string "<code>text/css</code>".</p></dd>

   <dt><dfn id="style-sheet-location">style sheet location</dfn></dt>
   <dd><p>The <span data-anolis-spec=html>URL</span> of the
   <span>style sheet</span> or <code>null</code> if the <span>style sheet</span> was
   embedded.</p></dd>

   <dt><dfn id="style-sheet-parent">style sheet parent</dfn></dt>
   <dd><p>The <span>style sheet</span> that is the parent of the
   <span>style sheet</span> or <code>null</code> if there is no associated parent.</p></dd>

   <dt><dfn id="style-sheet-owner-node">style sheet owner node</dfn></dt>
   <dd><p>The DOM node associated with the <span>style sheet</span> or
   <code>null</code> if there is no associated DOM node.</p></dd>

   <dt><dfn id="style-sheet-owner-css-rule">style sheet owner CSS rule</dfn></dt>
   <dd><p>The <span>CSS rule</span> in the <span>style sheet parent</span>
   that caused the inclusion of the <span>style sheet</span> or <code>null</code> if
   there is no associated rule.</p></dd>

   <dt><dfn id="style-sheet-media">style sheet media</dfn></dt>
   <dd>
    <p>The <code>MediaList</code> object associated with the
    <span>style sheet</span>.</p>

    <p>If this property is set to a string run the
    <span>create a <code>MediaList</code> object</span> steps for that
    string and associate the returned object with the
    <span>style sheet</span>.</p>
   </dd>

   <dt><dfn id="style-sheet-title">style sheet title</dfn></dt>
   <dd>
    <p>The title of the <span>style sheet</span> or <code>null</code> if no title
    is specified or is the empty string, in which case the title is referred to
    as an empty title.</p>

    <div class="example">
     <p>In the following, the <span>style sheet title</span> is non-empty
     for the first style sheet, but is empty for the second and third style sheets.</p>
     <pre>&lt;style title="papaya whip">
  body { background: #ffefd5; }
&lt;/style></pre>
     <pre>&lt;style title="">
  body { background: orange; }
&lt;/style></pre>
     <pre>&lt;style>
  body { background: brown; }
&lt;/style></pre>
    </div>
   </dd>

   <dt><dfn id="style-sheet-alternate-flag">style sheet alternate flag</dfn></dt>
   <dd>
    <p>Either set or clear. Clear by default.</p>

    <div class="example">
     <p>The following <span title="style sheet">style sheets</span> have
     their <span>style sheet alternate flag</span> set:</p>

     <pre>&lt;?xml-stylesheet alternate="yes" title="x" href="data:text/css,&hellip;"?></pre>

     <pre>&lt;link rel="alternate stylesheet" title="x" href="data:text/css,&hellip;"></pre>
    </div>
   </dd>

   <dt><dfn id="style-sheet-disabled-flag">style sheet disabled flag</dfn></dt>
   <dd>
    <p>Either set or clear. Clear by default.</p>

    <p class="note">Even when clear it does not necessarily mean that the
    <span>style sheet</span> is actually used for rendering.</p>
   </dd>


   <dt><dfn id="style-sheet-css-rules">style sheet CSS rules</dfn></dt>
   <dd><p>The <span title="CSS rule">CSS rules</span> associated with the
   <span>style sheet</span>.</p></dd>
  </dl>

  <p>When you are to <span>create a style sheet</span> the above properties,
  with the exception of <span>style sheet type</span> and
  <span>style sheet CSS rules</span>, are to be set to
  their proper values.</p>

  <!-- same-origin restrictions -->

  <!-- ........................................................................................................................ -->

  <h4>The <code>StyleSheet</code> Interface</h4>

  <!--{@idl(StyleSheet)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSStyleSheet</code> Interface</h4>

  <!--{@idl(CSSStyleSheet)}-->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Style Sheet Collections</h3>

  <p>Below various new concepts are defined that are associated with each
  <code data-anolis-spec=dom>Document</code> object.</p>

  <p>Each <code data-anolis-spec=dom>Document</code> has an associated list of zero or more
  <span title="style sheet">style sheets</span>, named the
  <dfn id="document-style-sheets">document style sheets</dfn>. This is
  an ordered list that contains all
  <span title="style sheet">style sheets</span> associated with the
  <code data-anolis-spec=dom>Document</code>, in
  <span data-anolis-spec=dom title=concept-tree-order>tree order</span>, with
  <span title="style sheet">style sheets</span> created from HTTP
  <code title="http-link">Link</code> headers first, if any, in header
  order.</p>

  <p>To <dfn id="create-a-style-sheet">create a style sheet</dfn>, run these
  steps:</p>

  <ol>
   <li><p>Create a new <span>style sheet</span> object and set its
   properties as specified.</p></li>

   <li><p>Then run the <span>add a style sheet</span> steps for the newly
   created <span>style sheet</span>.</p></li>
  </ol>

  <p>To <dfn id="add-a-style-sheet">add a style sheet</dfn>, run these
  steps:</p>

  <ol>
   <li><p>Add the <span>style sheet</span> to the list of
   <span>document style sheets</span> at the appropriate location. The
   remainder of these steps deal with the
   <span>style sheet disabled flag</span>.</p></li>

   <li><p>If the <span>style sheet disabled flag</span> is set, terminate
   these steps.</p></li>

   <li><p>If the <span>style sheet title</span> is non-empty, the
   <span>style sheet alternate flag</span> is clear, and
   <span>preferred style sheet set name</span> is the empty string
   <span>change the preferred style sheet set name</span> to the
   <span>style sheet title</span>.</p></li>

   <li>
    <p>If any of the following is true clear the
    <span>style sheet disabled flag</span> and terminate these steps:

    <ul>
     <li><p>The <span>style sheet title</span> is empty.</p></li>
     <li><p>The <span>last style sheet set name</span> is <code>null</code> and the
     <span>style sheet title</span> is a
     <span data-anolis-spec=dom>case-sensitive</span> match
     for the <span>preferred style sheet set name</span>.</p></li>
     <li><p>The <span>style sheet title</span> is a
     <span data-anolis-spec=dom>case-sensitive</span> match for the
     <span>last style sheet set name</span>.</p></li>
    </ul>
   </li>

   <li><p>Set the <span>style sheet disabled flag</span>.</li>
  </ol>

  <p>A <dfn id="persistent-style-sheet">persistent style sheet</dfn> is a
  <span>style sheet</span> from the <span>document style sheets</span>
  whose <span>style sheet title</span> is the empty string and whose
  <span>style sheet alternate flag</span> is clear.</p>

  <p>A <dfn id="style-sheet-set">style sheet set</dfn> is an ordered
  collection of one or more <span title="style sheet">style sheets</span>
  from the <span>document style sheets</span> which have an identical
  <span>style sheet title</span> that is not the empty string.</p>

  <p>A <dfn id="style-sheet-set-name">style sheet set name</dfn> is the
  <span>style sheet title</span> the <span>style sheet set</span> has in
  common.</p>

  <p>An <dfn id="enabled-style-sheet-set">enabled style sheet set</dfn> is a
  <span>style sheet set</span> of which each <span>style sheet</span> has
  its <span>style sheet disabled flag</span> clear.</p>

  <p>To <dfn id="enable-a-style-sheet-set">enable a style sheet set</dfn>
  with name <var>name</var>, run these steps:</p>

  <ol>
   <li><p>If <var>name</var> is the empty string, set the
   <span>style sheet disabled flag</span> for each <span>style sheet</span>
   that is in a <span>style sheet set</span> and terminate these steps.</li>

   <li><p>Clear the <span>style sheet disabled flag</span> for each
   <span>style sheet</span> in a <span>style sheet set</span> whose
   <span>style sheet set name</span> is a
   <span data-anolis-spec=dom>case-sensitive</span> match for
   <var>name</var> and set it for all other
   <span title="style sheet">style sheets</span> in a
   <span>style sheet set</span>.</p></li>
  </ol>

  <p>To <dfn id="select-a-style-sheet-set">select a style sheet set</dfn>
  with name <var>name</var>, run these steps:</p>

  <ol>
   <li><p><span>Enable a style sheet set</span> with name
   <var>name</var>.</p></li>

   <li><p>Set <span>last style sheet set name</span> to
   <var>name</var>.</p></li>
  </ol>

  <p>A <dfn id="last-style-sheet-set-name">last style sheet set name</dfn>
  is a concept to determine what <span>style sheet set</span> was last
  <span title="select a style sheet set">selected</span>. Initially its
  value is <code>null</code>.</p>

  <p>A
  <dfn id="preferred-style-sheet-set-name">preferred style sheet set name</dfn>
  is a concept to determine which
  <span title="style sheet">style sheets</span> need to have their
  <span>style sheet disabled flag</span> clear. Initially its value
  is the empty string.

  <p>To
  <dfn id="change-the-preferred-style-sheet-set-name">change the preferred style sheet set name</dfn>
  with name <var>name</var>, run these steps:</p>

  <ol>
   <li><p>Let <var>current</var> be the <span>preferred style sheet set name</span>.</p></li>

   <li><p>Set <span>preferred style sheet set name</span> to
   <var>name</var>.</p></li>

   <li><p>If <var>name</var> is not a
   <span data-anolis-spec=dom>case-sensitive</span> match for
   <var>current</var> and
   <span>last style sheet set name</span> is <code>null</code>
   <span>enable a style sheet set</span> with name
   <var>name</var>.</p></li>
  </ol>

  <!-- XXX ought to define "applied"

  thoughts:
    depends on disabled flag, alternate flag, media queries, sheesh
   -->

  <!-- ........................................................................................................................ -->

  <h4>The HTTP <code>Default-Style</code> Header</h4>

  <p>The HTTP <code title="http-default-style">Default-Style</code> header
  can be used to set the <span>preferred style sheet set name</span>
  influencing which <span>style sheet set</span> is (initially) the
  <span>enabled style sheet set</span>.</p>

  <p>For each HTTP <code title="http-default-style">Default-Style</code>
  header, in header order, the user agent must
  <span>change the preferred style sheet set name</span> with name being the
  value of the header.</p>

  <!-- ........................................................................................................................ -->

  <h4>The <code>StyleSheetList</code> Sequence</h4>

  <!--{@idl(StyleSheetList)}-->

  <!-- ........................................................................................................................ -->

  <h4>Extensions to the <code>Document</code> Interface</h4>

  <!--{@idl(Document)}-->

  <!-- ........................................................................................................................ -->

  <h4>Interaction with the User Interface</h4>

  <p>The user interface of Web browsers that support style sheets
  should list the style sheet titles given in the
  <code title="dom-Document-styleSheetSets">styleSheetSets</code> list,
  showing the
  <code title="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
  as the selected style sheet set, leaving none selected if it is
  <code>null</code> or the empty string, and selecting an extra option
  "Basic Page Style" (or similar) if it is the empty string and the
  <code title="dom-Document-preferredStyleSheetSet">preferredStyleSheetSet</code>
  is the empty string as well.</p>

  <p>Selecting a style sheet from this list should
  use the <span>select a style sheet set</span> set of steps. This
  (by definition) affects the
  <code title="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code>
  attribute.</p>

  <h5>Persisting the selected style sheet set</h5>

  <p>If a user agent persist the selected style sheet set, they should use
  the value of the
  <code title="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
  attribute, or if that is <code>null</code>, the
  <code title="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code>
  attribute, when leaving the page (or at some other time) to determine the
  set name to store. If that is <code>null</code> then the style sheet set should not be
  persisted.</p>

  <p>When re-setting the style sheet set to the persisted value (which can
  happen at any time, typically at the first time the style sheets are
  needed for styling the document, after the <code>&lt;head&gt;</code> of
  the document has been parsed, after any scripts that are not dependent on
  computed style have executed), the style sheet set
  should be set by using the
  <span>select a style sheet set</span> set of steps as if the user had
  selected the set manually.</p>

  <p class="note">This specification does not give any suggestions on
  how user agents should decide to persist the style sheet set or whether or
  how to persist the selected set across pages.</p>

  <!-- XXX this UI section suggests we may want to introduce a few more
       idioms -->

  <!-- ........................................................................................................................ -->

  <h4>Examples</h4>

  <div class="example">
   <p>Thus, in the following HTML snippet:</p>

   <pre>&lt;link rel="alternate stylesheet" title="foo" href="a"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="b"&gt;
&lt;script&gt;
  document.selectedStyleSheetSet = 'foo';
  document.styleSheets[1].disabled = false;
&lt;/script&gt;
&lt;link rel="alternate stylesheet" title="foo" href="c"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="d"&gt;</pre>

   <p>...the style sheets that end up enabled are style sheets "a", "b",
   and "c", the
   <code title="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
   attribute would return <code>null</code>,
   <code title="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code>
   would return "foo", and
   <code title="dom-Document-preferredStyleSheetSet">preferredStyleSheetSet</code>
   would return the empty string.</p>

   <p>Similarly, in the following HTML snippet:</p>

   <pre>&lt;link rel="alternate stylesheet" title="foo" href="a"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="b"&gt;
&lt;script&gt;
  var before = document.preferredStyleSheetSet;
  document.styleSheets[1].disabled = false;
&lt;/script&gt;
&lt;link rel="stylesheet" title="foo" href="c"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="d"&gt;
&lt;script&gt;
  var after = document.preferredStyleSheetSet;
&lt;/script&gt;</pre>

   <p>...the "before" variable will be equal to the empty string, the
   "after" variable will be equal to "foo", and style sheets "a" and "c"
   will be enabled. This is the case even though the first script block
   sets style sheet "b" to be enabled, because upon parsing the
   following <code>&lt;link&gt;</code> element, the
   <code title="dom-Document-preferredStyleSheetSet">preferredStyleSheetSet</code>
   is set and the
   <code title="dom-Document-enableStyleSheetsForSet">enableStyleSheetsForSet()</code>
   method is called (since
   <code title="dom-Document-selectedStyleSheetSet">selectedStyleSheetSet</code>
   was never set
   explicitly, leaving
   <code title="dom-Document-lastStyleSheetSet">lastStyleSheetSet</code> at
   <code>null</code> throughout), which changes which style sheets are enabled and which
   are not.</p>
  </div>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Style Sheet Association</h3>

  <p>This section defines the interface a
  <span>style sheet owner node</span> of a <span>style sheet</span> has to
  implement and defines the requirements for
  <span data-anolis-spec=xmlss title="xml-stylesheet processing instruction">xml-stylesheet processing instructions</span>
  and HTTP <code title="http-link">Link</code> headers when the link
  relation type is an
  <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
  "<code>stylesheet</code>" since nobody else was interested in
  defining this.</p>

  <p class=note>The editor is in good hope that HTML and SVG will define the
  appropriate processing in their respective specifications, in terms of
  this specification, in due course.</p>


  <!-- ........................................................................................................................ -->

  <h4>The <code>LinkStyle</code> Interface</h4>

  <!--{@idl(LinkStyle)}-->

  <div class="example">
   <p>In the following HTML snippet the first HTML <code>style</code>
   element has a <code>sheet</code> attribute that returns a
   <code>StyleSheet</code> object representing the style sheet, but for
   the second <code>style</code> attribute it returns <code>null</code>.
   (Assuming the user agent supports CSS (<code>text/css</code>) and does
   not support ExampleSheets (<code>text/example-sheets</code>).</p>

   <pre>&lt;style type=text/css> body { background:lime } &lt;/style>
&lt;style type=text/example-sheets> $(body).background := lime &lt;/style></pre>
  </div>

  <p class="note">Whether or not the node refers to a style sheet is defined
  by the specification that defines the semantics of said node.</p>

  <!-- ........................................................................................................................ -->

  <h4>Requirements on specifications</h4>

  <p>Specifications introducing new ways of associating style sheets through
  the DOM should define which nodes implement the
  <code>LinkStyle</code> interface. When doing so, they
  must also define when a <span>style sheet</span> is
  <span title="create a style sheet">created</span>.</p>




  <!-- ........................................................................................................................ -->

  <h4>Requirements on User Agents Implementing the
  <span><code>xml-stylesheet</code> processing instruction</span></h4>

  <!-- XXX load/error events, reparse -->

  <!--{@idl(ProcessingInstruction)}-->

  <!--
  <pre class="idl"><span data-anolis-spec=dom>ProcessingInstruction</span> implements <span>LinkStyle</span>;</pre>
  -->

  <p>For each
  <span data-anolis-spec=xmlss><code>xml-stylesheet</code> processing instruction</span>
  that is not part of the
  <span data-anolis-spec=xml>document type declaration</span> and has an
  <code>href</code>
  <span data-anolis-spec=xmlss>pseudo-attribute</span> these steps must
  (unless otherwise stated) be run:</p>

  <ol>
   <li><p>Let <var>title</var> be the value of the
   <code>title</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> or the empty string if the
   <code>title</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> is not specified.</p></li>

   <li><p>If there is an <code>alternate</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>
   whose value is a <span data-anolis-spec=dom>case-sensitive</span> match
   for "<code>yes</code>" and <var>title</var> is the
   empty string terminate these steps.</p></li>

   <li><p>If there is a <code>type</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> whose
   value is not a <span>supported styling language</span> the user agent
   may terminate these steps.</p></li>

   <li><p><span data-anolis-spec=html title="Resolve a URL">Resolve</span>
   the <span data-anolis-spec=html>URL</span> specified by the
   <code>href</code> <span data-anolis-spec=xmlss>pseudo-attribute</span> and then
   <span data-anolis-spec=html>fetch</span> it.</p></li>

   <li>
    <p>When the resource is available, the document is in
    <span data-anolis-spec=html>quirks mode</span>
    and the
    <span data-anolis-spec=html title="content-type">Content-Type metadata</span> of
    the resource is not a <span>supported styling language</span> change the
    <span data-anolis-spec=html title="content-type">Content-Type metadata</span> of the resource
    to <code>text/css</code>.</p>

    <p class="note">This step might never actually happen, but is included
    here in case other specifications change, to keep things consistent.</p>
   </li>

   <li><p>If the resource is not in a
   <span>supported styling language</span> terminate these steps.</p></li>

   <li>
    <p><span>Create a style sheet</span> with the following properties:</p>

    <dl>
     <dt><span>style sheet location</span></dt>
     <dd><p>The <span data-anolis-spec=html>absolute URL</span> of the
     resource.</p></dd>

     <dt><span>style sheet parent</span></dt>
     <dd><p><code>null</code></p></dd>

     <dt><span>style sheet owner node</span></dt>
     <dd><p>The node.</p></dd>

     <dt><span>style sheet owner CSS rule</span></dt>
     <dd><p><code>null</code></p></dd>

     <dt><span>style sheet media</span></dt>
     <dd><p>The value of the <code>media</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>
     if any, or the empty string otherwise.</p></dd>

     <dt><span>style sheet title</span></dt>
     <dd><p><var>title</var></p></dd>

     <dt><span>style sheet alternate flag</span></dt>
     <dd><p>Set if the <code>alternate</code> <span data-anolis-spec=xmlss>pseudo-attribute</span>
     value is a <span data-anolis-spec=dom>case-sensitive</span> match for
     "<code>yes</code>", or clear otherwise.
    </dl>
   </li>
  </ol>



  <!-- ........................................................................................................................ -->

  <h4>Requirements on User Agents Implementing the HTTP
  <code>Link</code> Header</h4>

  <!-- XXX ref, one day -->

  <!-- XXX deal with media param -->

  <p>For each HTTP <code title="http-link">Link</code> header of which one
  of the link relation types is an
  <span data-anolis-spec=dom>ASCII case-insensitive</span> match
  for "<code>stylesheet</code>" these steps
  must be run:</p>

  <ol>
   <li><p>Let <var>title</var> be the value of the first of all the
   <code>title</code> and <code>title*</code> parameters.
   If there are no such parameters it is the empty string.</p></li>

   <li><p>If one of the (other) link relation types is an
   <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
   "<code>alternate</code>" and <var>title</var> is the
   empty string terminate these steps.</p></li>

   <li><p><span data-anolis-spec=html title="Resolve a URL">Resolve</span>
   the specified <span data-anolis-spec=html>URL</span> and
   <span data-anolis-spec=html>fetch</span> it.</p></li>

   <li><p>When the resource is available, the document is in
   <span data-anolis-spec=html>quirks mode</span>
   and the <span data-anolis-spec=html title="content-type">Content-Type metadata</span> of
   the resource is not a <span>supported styling language</span> change the
   <span data-anolis-spec=html title="content-type">Content-Type metadata</span> of the resource
   to <code>text/css</code>.</p></li>

   <li><p>If the resource is not in a
   <span>supported styling language</span> terminate these steps.</p></li>

   <li>
    <p><span>Create a style sheet</span> with the following properties:</p>

    <dl>
     <dt><span>style sheet location</span></dt>
     <dd><p>The <span data-anolis-spec=html>absolute URL</span> of the
     resource.</p></dd>

     <dt><span>style sheet owner node</span></dt>
     <dd><p><code>null</code></p></dd>

     <dt><span>style sheet parent</span></dt>
     <dd><p><code>null</code></p></dd>

     <dt><span>style sheet owner CSS rule</span></dt>
     <dd><p><code>null</code></p></dd>

     <dt><span>style sheet media</span></dt>
     <dd><p>The value of the first <code>media</code> parameter.</p></dd>
     <!-- XXX register media parameter? bah -->

     <dt><span>style sheet title</span></dt>
     <dd><p><var>title</var></p></dd>

     <dt><span>style sheet alternate flag</span></dt>
     <dd><p>Set if one of the specified link relation type for this HTTP
     <code title="http-link">Link</code> header is an
     <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
     "<code>alternate</code>", or false otherwise.
    </dl>
   </li>
  </ol>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>CSS Rules</h3>

  <p>A <dfn id="rule">CSS rule</dfn> is an abstract concept that
  denotes a rule as defined by the CSS specification. A
  <span>CSS rule</span> is represented as an object that implements a subclass of
  the <code>CSSRule</code> interface, and which has the following
  associated state items:</p>

  <dl>
  <dt><dfn id="rule-type">rule type</dfn></dt>
  <dd><p>A non-negative integer associated with a particular type of rule.
  This item is initialized when a rule is created and must never change.</p></dd>

  <dt><dfn id="rule-text">rule text</dfn></dt>
  <dd><p>A text representation of the rule suitable for direct use in a style sheet.
  This item is initialized when a rule is created, and may change over the lifetime of the rule.</p></dd>

  <dt><dfn id="rule-parent">rule parent</dfn></dt>
  <dd><p>An optional reference to another, enclosing <span>CSS rule</span>.
  If the rule has an enclosing rule when it is created, then this item is initialized to the enclosing rule; otherwise it is <code>null</code>.
  Subsequent to initialization, this item is reset to <code>null</code> if the rule becomes non-enclosed. Once reset to <code>null</code>, it must never change.</p></dd>

  <dt><dfn id="rule-style-sheet">rule parent style sheet</dfn></dt>
  <dd><p>An optional reference to an associated <span>CSS style sheet</span>.
  This item is initialized to reference an associated style sheet when the rule is created. Subsequent to initialization, this item
  is reset to <code>null</code> if the rule becomes disassociated from its initial style sheet. Once reset to <code>null</code>, it must never change.</p></dd>
  </dl>

  <p>In addition to the above state, each <span>CSS rule</span> may be associated
  with other state in accordance with its <span>rule type</span>.</p>

  <p>To <dfn>parse a CSS rule</dfn> ...</p>

  <p class="issue">Should a rule be instantiated in OM if there is a parse error? To
  what extent should original (but non-valid) CSS text be captured in cssText?</p>

  <p>To <dfn>serialize a CSS rule</dfn>, perform one of the following in accordance with the <span title="rule type">rule's type</span>:</p>

  <dl class="switch">
   <dt><code>CSSStyleRule</code></dt>
   <dd>
    <p>The result of concatenating the following:</p>
    <ol>
     <li>The result of performing <span>serialize a group of selectors</span> on the rule's associated selectors.</li>
     <li>The string "<code> { </code>", i.e., a single SPACE (U+0020), followed by LEFT CURLY BRACKET (U+007B),
     followed by a single SPACE (U+0020).</li>
     <li>The result of performing <span>serialize a CSS declaration block</span> on the rule's associated declarations.</li>
     <li>If the rule is associated with one or more declarations, the string "<code> </code>", i.e., a single SPACE (U+0020).</li>
     <li>The string "<code>}</code>", RIGHT CURLY BRACKET (U+007D).
    </ol>
   </dd>

   <dt><code>CSSCharsetRule</code></dt>
   <dd>
    <p>The result of concatenating the following:</p>
    <ol>
     <li>The string "<code>@charset</code>" followed by a single SPACE (U+0020).</li>
     <li>The result of performing <span>serialize a string</span> on the <span data-anolis-spec=html>preferred MIME name</span> of the rule's encoding.</li>
     <li>The string "<code>;</code>", i.e., SEMICOLON (U+003B).
    </ol>
    <div class="example">
    <pre>@charset "UTF-8";</pre>
    </div>
   </dd>

   <dt><code>CSSImportRule</code></dt>
   <dd>
    <p>The result of concatenating the following:</p>
    <ol>
     <li>The string "<code>@import</code>" followed by a single SPACE (U+0020).</li>
     <li>The result of performing <span>serialize a URL</span> on the rule's location.</li>
     <li>If the rule's associated media list is not empty, a single SPACE (U+0020) followed by the
     result of performing <span>serialize a media query list</span> on the media list.
     <li>The string "<code>;</code>", i.e., SEMICOLON (U+003B).
    </ol>
    <div class="example">
    <pre>@import url("import.css");</pre>
    <pre>@import url("print.css") print;</pre>
    </div>
   </dd>

   <dt><code>CSSMediaRule</code></dt>
   <dd><p class="issue">...</p></dd>

   <dt><code>CSSFontFaceRule</code></dt>
   <dd><p class="issue">...</p></dd>

   <dt><code>CSSPageRule</code></dt>
   <dd><p class="issue">...</p></dd>

   <dt><code>CSSNamespaceRule</code></dt>
   <dd><p>The literal string "<code>@namespace</code>", followed by a single SPACE
   (U+0020), followed by the
   <span title="serialize an identifier">identifier escaped</span> value of the
   <code title="dom-CSSNamespaceRule-prefix">prefix</code> attribute (if
   any), followed by a single SPACE (U+0020) if there is a prefix, followed by the
   <span title="serialize a URL">URL escaped</span> value of the
   <code title="dom-CSSNamespaceRule-namespaceURI">namespaceURI</code>
   attribute, followed the character "<code>;</code>" (U+003B).</p></dd>
  </dl>

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSRuleList</code> Sequence</h4>

  <!--{@idl(CSSRuleList)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSRule</code> Interface</h4>

  <!--{@idl(CSSRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSStyleRule</code> Interface</h4>

  <!--{@idl(CSSStyleRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSCharsetRule</code> Interface</h4>

  <!--{@idl(CSSCharsetRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSImportRule</code> Interface</h4>

  <!--{@idl(CSSImportRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSMediaRule</code> Interface</h4>

  <!--{@idl(CSSMediaRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSFontFaceRule</code> Interface</h4>

  <!--{@idl(CSSFontFaceRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSPageRule</code> Interface</h4>
 
  <!--{@idl(CSSPageRule)}-->

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSNamespaceRule</code> Interface</h4>

  <!--{@idl(CSSNamespaceRule)}-->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>CSS Declaration Blocks</h3>

  <p>A <dfn>CSS declaration block</dfn> is an ordered collection of CSS
  properties with their associated values, also named CSS declarations. In
  the DOM a <span>CSS declaration block</span> is a
  <code>CSSStyleDeclaration</code> object. A
  <span>CSS declaration block</span> has two associated properties:</p>

  <dl>
   <dt><dfn>CSS declaration block readonly flag</dfn></dt>
   <dd><p>Clear if the object can be manipulated. Set if it can not be
   manipulated. Unless otherwise stated it is clear.</p></dd>

   <dt><dfn>CSS declaration block declarations</dfn></dt>
   <dd><p>The CSS declarations associated with the object.</p></dd>
  </dl>

  <p class="note">The <span>CSS declaration block declarations</span> are
  ordered. This matters for the
  <code title="dom-CSSStyleDeclaration-item">item()</code> method.</p>

  <p>To <dfn id="parse-a-css-declaration-block">parse a CSS declaration block</dfn> ...</p>

  <p class="issue">What should be captured in the cssText of a declaration block which fails
  to parse?</p>

  <p>To <dfn id="serialize-a-css-declaration-block">serialize a CSS declaration block</dfn>
  represented by a <code>CSSStyleDeclarations</code> instance named <var>d</var>,
  let <var>s</var> be the empty string, then run the steps below:</p>

  <ol>
    <li><p>If <code><var>d</var>.length</code> is zero (0), then return <var>s</var>.</p></li>
    <li><p>For each <var>i</var> from zero (0) through <code><var>d</var>.length</code> - 1 (inclusive), perform the following sub-steps:</p>
    <ol>
      <li><p>Let <var>n</var> be the value returned by <code><var>d</var>.item(<var>i</var>)</code>.</p></li>
      <li><p>Let <var>v</var> be the value returned by <code><var>d</var>.getPropertyValue(<var>n</var>)</code>.</p></li>
      <li><p>If <var>v</var> is the empty string, then continue.</p></li>
      <li><p>Otherwise (<var>v</var> is non-empty), perform the following sub-steps:</p>
          <ol>
            <li><p>If <var>s</var> is not empty, then append a single SPACE (U+0020) to <var>s</var>.</p></li>
            <li><p>Append <var>n</var> to <var>s</var>.</p></li>
            <li><p>Append COLON (U+003A) followed by a single SPACE (U+0020), i.e., "<code>: </code>", to <var>s</var>.</p></li>
            <li><p>Append <var>v</var> to <var>s</var>.</p></li>
          </ol>
      </li>
      <li><p>Let <var>p</var> be the value returned by <code><var>d</var>.getPropertyPriority(<var>n</var>)</code>.</p></li>
      <li><p>If <var>p</var> is not the empty string, then perform the following sub-steps:</p>
          <ol>
            <li><p>Append a single SPACE (U+0020) followed by EXCLAMATION MARK (U+0021), i.e., "<code> !</code>", to <var>s</var>.</p></li>
            <li><p>Append <var>p</var> to <var>s</var>.</p></li>
          </ol>
      </li>
      <li><p>Append SEMICOLON (U+003B), i.e., "<code>;</code>", to <var>s</var>.</p></li>
    </ol>
    </li>
    <li><p>Return <var>s</var>.</p></li>
  </ol>

  <p class="note">The serialization of an empty CSS declaration block is the empty string.</p>

  <p class="note">The serialization of a non-empty CSS declaration block does not include any surrounding whitespace, i.e., no whitepsace appears
  before the first property name and no whitespace appears after the final semicolon delimiter that follows the last property value.</p>

  <!-- ........................................................................................................................ -->

  <h4>The <code>CSSStyleDeclaration</code> Interface</h4>

  <!--{@idl(CSSStyleDeclaration)}-->

  <hr>

  <p>For the table below, the IDL attribute in the first column
  must return the result of invoking
  <code title="dom-CSSStyleDeclaration-getPropertyValue">getPropertyValue()</code>
  with as argument the CSS property given in the second column on the same
  row.</p>

  <p>Similarly for the table below, setting the IDL attribute in the
  first column must invoke
  <code title="dom-CSSStyleDeclaration-setProperty">setProperty()</code>
  with as first argument the CSS property given in the second column on the
  same row, as second argument the given value, and no third argument. Any
  exceptions thrown must be re-thrown.</p>

  <p class="issue">Restore the entries for the following table or resurrect
  CSS2Properties (or similar) or define in general terms using prose or ...</p>

  <table>
   <thead>
    <tr>
     <th>IDL attribute
     <th>CSS property
   <tbody>
<!--CSSOM-DECLARATIONTABLE-->
  </table>

<!--
  <h4>CSS Properties</h4>

  <p>The DOM attribute name of a CSS property can be found by using the
  following algorithm:</p>

  <ol>
   <li>Let <var>r</var> be the CSS property to be
   converted.</li>

   <li>Uppercase the first character after every U+002D (<code>-</code>) in
   <var>r</var>.</li>

   <li>Remove every U+002D (<code>-</code>) in <var>r</var>.</li>

   <li>Return <var>r</var>.</li>
  </ol>

  <p class="note">This means that
  <code>-<var>vendor</var>-<var>property</var></code>
  becomes
  <code><var><strong>V</strong>endor</var><var><strong>P</strong>roperty</var></code>
  for instance.</p>
-->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>CSS Values</h3>

  <!-- ........................................................................................................................ -->

  <h4>Parsing CSS Values</h4>

  <p>To <dfn id="parse-a-css-value">parse a CSS value</dfn> for a given
  <var>property</var> means to a parse the given value according to
  the definition of the property that is an
  <span data-anolis-spec=dom>ASCII case-insensitive</span> match for
  <var>property</var> in the CSS specification. If the given value
  is <span>ignored</span> return <code>null</code>. Otherwise return the CSS value for
  the given <var>property</var>.</p>

  <p class="note">"<code>!important</code>" declarations are not
  part of the property value space and will therefore cause
  <span>parse a CSS value</span> to return <code>null</code>.</p>


  <!-- ........................................................................................................................ -->

  <h4>Serializing CSS Values</h4>

  <!-- based on http://damowmow.com/playground/canon.txt -->

  <p>To <dfn id="serialize-a-css-value">serialize a CSS value</dfn> follow
  these rules:</p>

  <ul>
   <li><p><span title="Serialize a CSS component value">Serialize</span> any
   CSS component values in the value.</p></li>

   <li><p>Where multiple CSS component values can appear in any order
   without changing the meaning of the value (typically represented by a
   double bar <code>||</code> in the value syntax), use the order as given
   in the syntax.</p></li>
   <!-- <code>&lt;border-width> &lt;border-style> &lt;color></code>
   for <code>border</code> -->

   <li>
    <p>Where CSS component values of the value can be omitted without
    changing the meaning of the value (e.g. initial values in shorthand
    properties), omit them. If this would remove all the values, then
    include the first allowed value.</p>

    <p class="example">E.g. <code>margin: 20px 20px</code> becomes
    <code>margin: 20px</code>.</p>

    <p class="example">E.g. the value <code>0</code> for the
    '<code>border</code>' property.</p>
   </li>

   <li><p>If the value of a shorthand property is requested and it cannot be
   computed because the properties associated with the shorthand have values
   that cannot be represented by the shorthand the serialization is the
   empty string.</p></li>

   <li><p>If a value has a <span>whitespace</span>-separated list of
   CSS component values,
   <span title="serialize a whitespace-separated list">serialize</span> the
   value as a whitespace-separated list.</p></li>

   <li><p>If a value has a comma-separated list of
   CSS component values,
   <span title="serialize a comma-separated list">serialize</span> the
   value as a comma-separated list.</p></li>
  </ul>


  <p>To
  <dfn id="serialize-a-css-value-component">serialize a CSS component value</dfn>
  depends on the component, as follows:</p>

  <dl class="switch">
   <dt>keyword</dt>
   <dd><p>The keyword
   <span data-anolis-spec=dom>converted to ASCII lowercase</span>.</p></dd>

   <dt>&lt;angle></dt>
   <dd><p>The number of degrees serialized as per &lt;number> followed by
   the literal string "<code>deg</code>".</p></dd>

   <dt>&lt;color></dt>
   <dd>
   <p>If &lt;color&gt; is a component of a resolved or computed value, then
   return the color using the <code>rgb()</code> or <code>rgba()</code> functional
   notation as follows:</p>
   <ol>
   <li>If the alpha component of the color is equal to one, then return the serialization of the
   <code>rgb()</code> functional equivalent of the opaque color.</li>
   <li>If the alpha component of the color is not equal to one, then return the serialization of the
   <code>rgba()</code> functional equivalent of the non-opaque color.</li>
   </ol>
   <p>The serialization of the <code>rgb()</code> functional equivalent is the concatenation of the following:</p>
   <ol>
   <li>The string "<code>rgb(</code>".</li>
   <li>The shortest base-ten integer serialization of the color's red component.</li>
   <li>The string "<code>, </code>".</li>
   <li>The shortest base-ten serialization of the color's green component.</li>
   <li>The string "<code>, </code>".</li>
   <li>The shortest base-ten serialization of the color's blue component.</li>
   <li>The string "<code>)</code>".</li>
   </ol>
   <p>The serialization of the <code>rgba()</code> functional equivalent is the concatenation of the following:</p>
   <ol>
   <li>The string "<code>rgba(</code>".</li>
   <li>The shortest base-ten serialization of the color's red component.</li>
   <li>The string "<code>, </code>".</li>
   <li>The shortest base-ten serialization of the color's green component.</li>
   <li>The string "<code>, </code>".</li>
   <li>The shortest base-ten serialization of the color's blue component.</li>
   <li>The string "<code>, </code>".</li>
   <li>The shortest serialization of the &lt;number&gt; that denotes the color's alpha component.</li>
   <li>The string "<code>)</code>".</li>
   </ol>

   <p>In the above rules, the string "<code>, </code>" denotes a COMMA (U+002C) followed by a single SPACE (U+0020).</p>

   <p>If &lt;color&gt; is a component of a specified value, then
   return the color as follows:</p>
   <ol>
   <li>If the color was explicitly specified by the author, then return the original, author specified color value.</li>
   <li>Otherwise, return the value that would be returned if the color were a component of a computed value.</li>
   </ol>
   <p class="issue">Should author specified values be normalized for case? Or should original case be preserved?</p>
   </dd>
   <!--
     <dt>It is a system color</dt>

     <dd>See below (you use the representation given in the specification that
     defines the keyword).</dd>

     <dt>Alpha component is equal to 1.0</dt>

     <dd>The color is an uppercase six-digit hexadecimal value, prefixed with a
     <code>#</code> character (U+0023 NUMBER SIGN), with the first two digits
     representing the red component, the next two digits representing the green
     component, and the last two digits representing the blue component, the
     digits being in the range 0-9 A-F (U+0030 to U+0039 and U+0041 to
     U+0046).</dd>

     <dt>Alpha component is less than 1.0</dt>

     <dd>The color is in the CSS <code>rgba()</code> functional-notation format:
     the literal string <code>rgba</code> (U+0072 U+0067 U+0062 U+0061) followed
     by a U+0028 LEFT PARENTHESIS, a <span>color component integer</span>
     representing the red component, a <span>color component separator</span>, a
     <span>color component integer</span> for the green component, a <span>color
     component separator</span>, a <span>color component integer</span> for the
     blue component, another <span>color component separator</span> a U+0030
     DIGIT ZERO, a U+002E FULL STOP (representing the decimal point), one or
     more digits in the range 0-9 (U+0030 to U+0039) representing the fractional
     part of the alpha value, and finally a U+0029 RIGHT PARENTHESIS.</dd>

     <dt>The keyword <code>transparent</code> is used</dt>

     <dd>The color is <code>rgba(0, 0, 0, 0)</code>.</dd>
   -->

   <dt>&lt;counter></dt>
   <dd>
    <p>The concatenation of:</p>
    <ol>
     <li><p>If &lt;counter> has three CSS component values the string
     "<code>counters(</code>".</p></li>
     <li><p>If &lt;counter> has two CSS component values the string
     "<code>counter(</code>".</p></li>
     <li><p>The result of
     <span title="serialize a comma-separated list">serializing</span> the
     <span title="serialize a CSS component value">serialized</span>
     CSS component values belonging to &lt;counter> as list while omitting
     the last CSS component value if it is 'decimal'.</p></li>
     <li><p>"<code>)</code>" (U+0029).</p></li>
    </ol>
   </dd>

   <dt>&lt;frequency></dt>
   <dd><p>The frequency in hertz serialized as per &lt;number> followed by
   the literal string "<code>hz</code>".</dd>

   <dt>&lt;identifier></dt>
   <dd><p>The identifier
   <span title="serialize an identifier">escaped</span>.</p></dd>

   <dt>&lt;integer></dt>
   <dd><p>A base-ten integer using digits 0-9 (U+0030 to U+0039) in the
   shortest form possible, preceded by "<code>-</code>" (U+002D) if it is
   negative.</p></dd>

   <dt>&lt;length></dt>
   <dd>
    <p>A length of zero is represented by the literal string
    "<code>0px</code>".</p>

    <p>Absolute lengths: the number of millimeters serialized as per
    &lt;number> followed by the literal string "<code>mm</code>".</p>
    <p class="issue">Rumor has it absolute lengths will become relative
    lengths. Centimeters would be compatible with &lt;resolution>...</p>

    <p>Relative lengths: the &lt;number> component serialized as per
    &lt;number> followed by the unit in its canonical form as defined in its
    respective specification.</p>
   </dd>

   <dt>&lt;number></dt>
   <dd><p class="issue">Browsers seem to use ToString(), but that might give a
   significand which according to some is teh evil (and also currently does
   not parse correctly).</p></dd>

   <dt>&lt;percentage></dt>
   <dd><p>The &lt;number> component serialized as per &lt;number> followed
   by the literal string "<code>%</code>" (U+0025).</p></dd>

   <dt>&lt;resolution></dt>
   <dd><p>The resolution in dots per centimeter serialized as per
   &lt;number> followed by the literal string "<code>dpcm</code>".</dd>

   <dt>&lt;shape></dt>
   <dd><p>The string "<code>rect(</code>", followed by the result
   of <span title="serialize a comma-separated list">serializing</span> the
   <span title="serialize a CSS component value">serialized</span>
   CSS component values belonging to &lt;shape> as list, followed by
   "<code>)</code>" (U+0029).</p></dd>

   <dt>&lt;string></dt>
   <dt>&lt;family-name></dt>
   <dt>&lt;specific-voice></dt>
   <dd><p>The string
   <span title="serialize a string">string escaped</span>.</p></dd>

   <dt>&lt;time></dt>
   <dd><p>The time in seconds serialized as per &lt;number> followed by
   the literal string "<code>s</code>".</dd>

   <dt>&lt;uri></dt>
   <dd><p>The <span data-anolis-spec=html>absolute URL</span>
   <span title="serialize a URL">URL escaped</span>.</p></dd>
  </dl>

  <p>
   &lt;absolute-size>,
   &lt;border-width>,
   &lt;border-style>,
   &lt;bottom>,
   &lt;generic-family>,
   &lt;generic-voice>,
   &lt;left>,
   &lt;margin-width>,
   &lt;padding-width>,
   &lt;relative-size>,
   &lt;right>, and
   &lt;top>,
   are considered macros by this specification. They all represent instances
   of components outlined above.</p>

  <p class="issue">One idea is that we can remove this section somewhere in
  the CSS3/CSS4 timeline by moving the above definitions to the drafts that
  define the CSS components.</p>


  <h5>Examples</h5>

  <p>Here are some examples of before and after results on specified values.
  The before column could be what the author wrote in a style sheet, while
  the after column shows what querying the DOM would return.</p>

  <div class="example">
   <table>
    <thead>
     <tr><th>Before<th>After
    <tbody>
     <tr><td><code>background: none</code><td><code>background: rgba(0, 0, 0, 0)</code>
     <tr><td><code>outline: none</code><td><code>outline: invert</code>
     <tr><td><code>border: none</code><td><code>border: medium</code>
     <tr><td><code>list-style: none</code><td><code>list-style: disc</code>
     <tr><td><code>margin: 0 1px 1px 1px</code><td><code>margin: 0px 1px 1px</code>
     <tr><td><code>azimuth: behind left</code><td><code>azimuth: 220deg</code>
     <tr><td><code>font-family: a, 'b"', serif</code><td><code>font-family: "a", "b\"", serif</code>
     <tr><td><code>content: url('h)i') '\[\]'</code><td><code>content: url("h)i") "[]"</code>
     <tr><td><code>azimuth: leftwards</code><td><code>azimuth: leftwards</code>
     <tr><td><code>color: rgb(18, 52, 86)</code><td><code>color: #123456</code>
     <tr><td><code>color: rgba(000001, 0, 0, 1)</code><td><code>color: #000000</code>
   </table>

   <p class="issue">Some of these need to be updated per the new rules.</p>
  </div>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2>DOM Access to CSS Declaration Blocks</h2>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>The <code>ElementCSSInlineStyle</code> Interface</h3>

  <!--{@idl(ElementCSSInlineStyle)}-->

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3>Extensions to the <code>Window</code> Interface</h3>

  <!--{@idl(Window)}-->

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2>Resolved Values</h2>

  <p><code title="dom-Window-getComputedStyle">getComputedStyle()</code> was
  historically defined to return the "computed value" of an element or
  pseudo-element. However, the concept of "computed value" changed between
  revisions of CSS while the implementation of
  <code title="dom-Window-getComputedStyle">getComputedStyle()</code> had to
  remain the same for compatibility with deployed scripts. To address this
  issue this specification introduces the concept of a
  <dfn>resolved value</dfn>.</p>

  <p>The <span>resolved value</span> for a given property can be determined
  as follows:</p>

  <dl class="switch">
   <!--
   We want to treat shorthand properties like any other value basically.

   <dt>'<code>background</code>'
   <dt>'<code>border</code>'
   <dt>'<code>border-collapse</code>'
   <dt>'<code>border-color</code>'
   <dt>'<code>border-spacing</code>'
   <dt>'<code>border-style</code>'
   <dt>'<code>border-top</code>'
   <dt>'<code>border-right</code>'
   <dt>'<code>border-bottom</code>'
   <dt>'<code>border-left</code>'
   <dt>'<code>border-width</code>'
   <dt>'<code>font</code>'
   <dt>'<code>list-style</code>'
   <dt>'<code>margin</code>'
   <dt>'<code>outline</code>'
   <!- - overflow is not - ->
   <dt>'<code>padding</code>'
   <dt>'<code>pause</code>'
   <dd>
    <p>There is no <span>resolved value</span>.</p>
   </dd>
   -->

   <dt>'<code>line-height</code>'</dt>
   <dd><p>The <span>resolved value</span> is the used value.</p></dd>

   <dt>'<code>height</code>'</dt>
   <dt>'<code>margin</code>'</dt>
   <dt>'<code>margin-bottom</code>'</dt>
   <dt>'<code>margin-left</code>'</dt>
   <dt>'<code>margin-right</code>'</dt>
   <dt>'<code>margin-top</code>'</dt>
   <dt>'<code>padding</code>'</dt>
   <dt>'<code>padding-bottom</code>'</dt>
   <dt>'<code>padding-left</code>'</dt>
   <dt>'<code>padding-right</code>'</dt>
   <dt>'<code>padding-top</code>'</dt>
   <dt>'<code>width</code>'</dt>
   <dd><p>If the property applies to the element or pseudo-element and the
   <span>resolved value</span> of the '<code>display</code>' property is not
   <code>none</code>, the <span>resolved value</span> is the
   <span>used value</span>. Otherwise the <span>resolved value</span> is the
   computed value.</p></dd>

   <dt>'<code>bottom</code>'</dt>
   <dt>'<code>left</code>'</dt>
   <dt>'<code>right</code>'</dt>
   <dt>'<code>top</code>'</dt>
   <dd><p>If the property applies to a positioned element and the
   <span>resolved value</span> of the '<code>display</code>' property is not
   <code>none</code>, the <span>resolved value</span> is the
   <span>used value</span>. Otherwise the <span>resolved value</span> is the
   computed value.</p></dd>

   <dt>Any other property</dt>
   <dd><p>The <span>resolved value</span> is the computed value.</p></dd>
  </dl>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 id="iana-considerations">IANA Considerations</h2>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3><dfn title="http-default-style"><code>Default-Style</code></dfn></h3>

  <p>This section describes a header field for registration in the Permanent
  Message Header Field Registry.
  <!--<a href="XXX">[RFC3864]</a>--></p>

  <dl>
   <dt>Header field name</dt>
   <dd>Default-Style</dd>
   <dt>Applicable protocol</dt>
   <dd>http</dd>
   <dt>Status</dt>
   <dd>standard</dd>
   <dt>Author/Change controller</dt>
   <dd>W3C</dd>
   <dt>Specification document(s)</dt>
   <dd>This document is the relevant specification.</dd>
   <dt>Related information</dt>
   <dd>None.</dd>
  </dl>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 class=no-num>References</h2>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3 class=no-num>Normative references</h3>
  <div id=anolis-references-normative></div>

  <!-- ........................................................................................................................ -->
  <!-- ........................................................................................................................ -->

  <h3 class=no-num>Informative references</h3>
  <div id=anolis-references-informative></div>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 class="no-num" id="changes">Change History</h2>

  <p>This section documents the primary technical changes of CSSOM related functionality, with a focus on changes to API signatures.</p>

  <h3 class="no-num" id="changes-from-dom2">Changes From DOM-2 Style</h3>

  <ul>
  <li><p>Remove definition of <code>CSSRule.UNKNOWN_RULE</code>, reserving its value (0) to prevent future reuse.</p></li>
  <li><p>Remove definition of <code>DOMImplementationCSS</code> interface.</p></li>
  </ul>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <h2 class="no-num" id="acknowledgments">Acknowledgments</h2>

  <p>The editors would like to thank

  Alexey Feldgendler,
  Bj&ouml;rn H&ouml;hrmann,
  Boris Zbasky,
  Brian Kardell,
  Christian Krebs,
  Daniel Glazman,
  David Baron,
  <i>fantasai</i>,
  Hallvord R. M. Steen,
  Ian Hickson,
  John Daggett,
  Lachlan Hunt,
  Morten Stenshorne,
  Philip Taylor,
  Robert O'Callahan,
  Sjoerd Visscher,
  Simon Pieters,
  Sylvain Galineau,
  Tarquin Wilton-Jones, and
  Zack Weinberg

  for contributing to this specification.</p>

  <p>Additional thanks to Ian Hickson for writing the
  initial version of the alternative style sheets API and canonicalization
  (now serialization) rules for CSS values.</p>

  <!-- XXX NOTES

  <style type=text/css;charset=utf-8> does create a StyleSheet in Firefox
  and Opera, but does not create a StyleSheet in IE. I prefer IE.

  <style type=TEXT/CSS> sets the style sheet type to text/css in Firefox and
  TEXT/CSS in Opera and IE. I prefer Firefox.

  <style> sets the style sheet location to the document location Firefox,
  the empty string in IE, and null in Opera. I prefer Opera

  <style media="x"> invokes .sheet.media.mediaText = "x"

  <style> does not "have" a title

  .cascadedStyle that returns less keywords than currentStyle, no inherit,
  etc.

  Markup style: http://krijnhoetmer.nl/irc-logs/whatwg/20100204#l-529
  -->
 </body>
</html>

