<style>
.example .figure img {
  background-color: white;
  padding: 20px;
  margin: 20px;
}
</style>
<pre class=metadata>
Title: CSS Snap Size
Shortname: css-snap-size
Level: 1
Group: CSSWG
Status: ED
Work Status: exploring
Editor: Koji Ishii, Google, kojiishi@gmail.com
Editor: Elika Etemad, Invited Expert, http://fantasai.inkedblade.net/contact
ED: https://drafts.csswg.org/css-snap-size/
Abstract: This module contains CSS features for aligning content size to a multiple of unit size.
</pre>

Introduction {#intro}
=====================

<div class="issue">TBD</div>

Snapping Heights: the 'snap-height' property {#snap-height}
===========================================================

<pre class='propdef'>
  Name: snap-height
  Value: none | <<length>> <<integer>>?
  Initial: none
  Applies to: block, flex and grid containers
  Inherited: yes
  Animatable: no
  Percentages: N/A
  Media: visual
  Computed Value: length becomes the absolute length, others as specified
</pre>

Values have the following meanings:

<dl dfn-for="snap-height">
  <dt><dfn>none</dfn>
  <dd>
    This value indicates that there is no snapping behavior.
  <dt><<length>>
  <dd>
    This value defines the <dfn>grid unit</dfn>.
    Positive values are valid.
  <dt><<integer>>
  <dd>
    This value defines the <dfn>grid baseline position</dfn>
    within the <a>grid unit</a>.
    Values between 1 and 100 (inclusive) are valid.
</dl>

When the <a>grid unit</a> is set,
the line box heights are rounded <i>up</i> to
the closest multiple of the unit.

[[!CSS21]] 10.8 Line height calculations
defines how to compute the line box height
after the line box was constructed from inline-level boxes.
The rounding is applied to the computed line box height.
The additional spaces created by the rounding
are added <a>over</a> and <a>under</a> the line box.

The <a>grid baseline position</a> then determines
how the additional spaces are distributed to <a>over</a> and <a>under</a>.
When it is not set,
the space is distributed to <a>over</a> and <a>under</a> equally,
so that the line box appears at the center of the
multiple of <a>grid units</a>.
When the <a>grid baseline position</a> is set,
refer to the <a href="#snap-baseline">snapping baselines</a> section below.

For block-level replaced elements,
the rounding is applied to their logical heights of the margin boxes
by increasing the used value of 'margin-block-start' and 'margin-block-end' equally.

<div class="issue">
  Investigate complexities around margin collapsing.
  Use padding instead?
</div>

<div class="example">
  <div class="figure" style="float:right">
    <img src="images/line-grid-center.svg"
      style="height: 300px"
      >
  </div>

  In the following example,
  the height of line box in each paragraph is rounded up to the <a>grid unit</a>.

  <pre class="lang-css">
  :root {
    --my-body-font-size: 12pt;
    --my-grid: 18pt;
    font-size: var(--my-body-font-size);
    snap-height: var(--my-grid);
  }
  h1 {
    font-size: calc(1.618 * var(--my-body-font-size));
    margin-top: calc(2 * var(--my-grid));
  }
  p {
    margin: 0;
  }
  </pre>

  The line box in &lt;h1&gt; does not fit into one <a>grid unit</a>
  and thus occupies two,
  but it is still centered within the two <a>grid unit</a>.
</div>

Snapping Baselines {#snap-baseline}
-----------------------------------

<div class="figure" style="float:right">
  <img src="images/line-grid-baseline.svg"
    >
</div>

When the <a>grid baseline position</a> is a positive number equals to or less than 1,
the additional spaces are distributed using the following formula:

* space-over = (BP - T &amp; GU + GU) &amp; GU
* space-under = GU - (space-over + T + B) &amp; GU
* GU: the <a>grid unit</a>.
* BP: the <a>grid baseline position</a> &times; GU / 100.
* T: the distance between the top of the line box and the baseline.
* B: the distance between the bottom of the line box and the baseline.

<div class="issue">
  The formula needs verifications.
</div>

This formula pushes the baseline of the line box
down to the closest <a>grid baseline position</a>
as a consequence.

<div class="example">
  <div class="figure" style="float:right">
    <img src="images/line-grid-baseline-multicol.svg"
      >
  </div>

  The following CSS sets the <a>grid baseline position</a>
  to 16pt (20pt &times; 0.70) from the top.

  <pre class="lang-css">
  :root {
    --my-grid: 20pt;
    snap-height: var(--my-grid) 70;
  }
  </pre>

  The baseline of the line box is pushed down
  to the closest <a>grid baseline position</a>
  by adding the space-over.

  &lt;h1&gt; is as tall as
  its baseline is lower than the second <a>grid baseline position</a>
  that it is pushed down to the third <a>grid baseline position</a>.
</div>

Snapping Block Boxes {#snap-block-height}
-----------------------------------------

<div class="issue">TBD, including priority and complexity, feedback appreciated.</div>

Snapping Widths: the 'snap-width' property {#snap-width}
========================================================

<pre class='propdef'>
  Name: snap-width
  Value: none | <<length>>
  Initial: none
  Applies to: block, flex and grid containers
  Inherited: yes
  Animatable: no
  Percentages: N/A
  Media: visual
  Computed Value: length becomes the absolute length, others as specified
</pre>
Values have the following meanings:

<dl dfn-for="snap-width">
  <dt><dfn>none</dfn>
  <dd>
    This value indicates that there is no snapping behavior.
  <dt><<length>>
  <dd>
    When this property is set to a positive <<length>>,
    the logical width of the content-box is rounded <i>down</i>
    to the closest multiple of the <<length>>
    by increasing the used value of 'margin-inline-end'.

    Setting this property improves the justification
    for Han ideograph-based scripts
    such as Chinese or Japanese.
</dl>

<div class="issue">
  It was pointed out that changing the width of content-box
  could be more complex to implement than changing the width of the line box.
  Needs further investigations.
</div>

<div class="example">
  <pre class="lang-css">
  :root {
    --my-body-font-size: 12pt;
    snap-width: var(--my-body-font-size);
  }
  </pre>
</div>

Privacy and Security Considerations {#priv-sec}
===============================================

This specification introduces no new privacy leaks,
or security considerations beyond "implement it correctly".
