<style>
.example .figure img {
  background-color: white;
  padding: 20px;
  margin: 20px;
}
</style>
<pre class=metadata>
Title: CSS Snap Size
Shortname: css-snap-size
Level: 1
Group: CSSWG
Status: ED
Work Status: exploring
Editor: Koji Ishii, Google, kojiishi@gmail.com
Editor: Elika Etemad, Invited Expert, http://fantasai.inkedblade.net/contact
ED: https://drafts.csswg.org/css-snap-size/
Abstract: This module contains CSS features for aligning content size to a multiple of unit size.
</pre>

Introduction {#intro}
=====================

<div class="issue">TBD</div>

Snapping Heights: the 'snap-height' property {#snap-height}
===========================================================

<pre class='propdef'>
  Name: snap-height
  Value: <<length>> <<integer>>?
  Initial: 0px
  Applies to: block containers
  Inherited: yes
  Animatable: no
  Percentages: N/A
  Media: visual
  Computed Value: the absolute length for length, others as specified
</pre>

Values have the following meanings:

<dl dfn-for="snap-height">
  <dt><<length>>
  <dd>
    This value defines the <dfn>snap unit</dfn>.
    Non-negative <<length>>s are valid.
  <dt><<integer>>
  <dd>
    This value defines the <dfn>snap baseline position</dfn>
    within the <a>snap unit</a>.
    Values between 1 and 100 (inclusive) are valid.
</dl>

Snapping Line Box Heights {#snap-line-height}
---------------------------------------------

When the <a>snap unit</a> is set to a positive <<length>>,
the line box heights are rounded <i>up</i> to
the closest multiple of the unit.

[[!CSS21]] <a href="https://drafts.csswg.org/css2/visudet.html#line-height">&#xA7;10.8 Line height calculations</a>
defines how to compute the line box height
after the line box was constructed from inline-level boxes.
The rounding is applied to the computed line box height
by assuming that there is an inline-level box that has adjusted A' and D'
in the line box.

The <a>snap baseline position</a> determines
how the additional spaces are distributed.

* When it is not set,
    the space is distributed to <a>over</a>- and <a>under</a>-side equally,
    so that the original line box appears at the center of the
    multiple of <a>snap units</a>.
* When it is set,
    refer to the <a href="#snap-baseline">snapping baselines</a> section below.

<div class="example">
  <div class="figure" style="float:right">
    <img src="images/line-grid-center.svg"
      style="height: 300px"
      >
  </div>

  In the following example,
  the height of line box in each paragraph is rounded up to the <a>snap unit</a>.

  <pre class="lang-css">
  :root {
    --my-body-font-size: 12pt;
    --my-grid: 18pt;
    font-size: var(--my-body-font-size);
    snap-height: var(--my-grid);
  }
  h1 {
    font-size: calc(1.618 * var(--my-body-font-size));
    margin-top: calc(2 * var(--my-grid));
  }
  p {
    margin: 0;
  }
  </pre>

  The line box in <code>&lt;h1&gt;</code> does not fit into one <a>snap unit</a>
  and thus occupies two,
  but it is still centered within the two <a>snap unit</a>.
</div>

Snapping Baselines {#snap-baseline}
-----------------------------------

<div class="figure" style="float:right">
  <img src="images/line-grid-baseline.svg"
    >
</div>

When the <a>snap baseline position</a> is set,
the additional spaces are distributed using the following formula:

* space-over = P - T % U, add U if the result is negative
* space-under = U - (space-over + T + B) % U
* U: the <a>snap unit</a>.
* P: the <a>snap baseline position</a> &times; U / 100.
* T: the distance between the top of the line box and the baseline.
* B: the distance between the bottom of the line box and the baseline.

This formula pushes the baseline of the line box
down to the closest <a>snap baseline position</a>,
and the bottom to the next <a>snap unit</a>.

<div class="example">
  <div class="figure" style="float:right">
    <img src="images/line-grid-baseline-multicol.svg"
      >
  </div>

  The following CSS sets the <a>snap baseline position</a>
  to 14pt (20pt &times; 0.70) within each <a>snap unit</a>.

  <pre class="lang-css">
  :root {
    snap-height: 20pt 70;
  }
  </pre>

  The baseline of the line box is pushed down
  to the closest <a>snap baseline position</a>
  by adding the space-over.

  <code>&lt;h1&gt;</code> is as tall as
  its baseline being lower than the second <a>snap baseline position</a>
  that it is pushed down to the third <a>snap baseline position</a>.
</div>

<div class="note">
  Since the bottom of the line box is rounded to the closest <a>snap unit</a>
  next to the descenders of the line box,
  large descenders may result in unintended spaces under the line box.
  Oftentimes changing <a>snap baseline position</a> can control such situations.
</div>

Snapping Block Boxes {#snap-block-height}
-----------------------------------------

<i>This section is not normative.</i>

This level of the specification does not provide a way to snap heights
of block-level boxes.

<div class="example">
  The following CSS turns <code>&lt;h2&gt;</code> to inline-blocks.

  <pre class="lang-css">
  :root {
    snap-height: 18pt;
  }
  h2 {
    display: inline-block;
    width: 100%;
    snap-height: 0;
    line-height: 1.2;
  }
  </pre>

  When an <code>&lt;h2&gt;</code> is long enough to wrap,
  text inside the <code>&lt;h2&gt;</code> uses ''line-height: 1.2'', while
  the height of the <code>&lt;h2&gt;</code> block is snapped
  to the multiple of ''18pt''.
  See <a href="examples/snap-height.html">a sample in action</a>.
</div>

Snapping Widths: the 'snap-width' property {#snap-width}
========================================================

<pre class='propdef'>
  Name: snap-width
  Value: <<length>>
  Initial: 0px
  Applies to: block containers
  Inherited: no
  Animatable: no
  Percentages: N/A
  Media: visual
  Computed Value: the absolute length
</pre>

Non-negative <<length>>s are valid.

[[!CSS21]] <a href="https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins">&#xA7;10.3 Calculating widths and margins</a>
defines how to calculate widths.

When this property is set to a positive <<length>>,
the width is calculated as if the element has the 'max-width' property
set to the otherwise used value of the width of the content-box
rounded <i>down</i> to the closest multiple of the specified <<length>>.

The rounding is applied
after applying the 'min-width' and the 'max-width' properties
if they were specified.
If the element is in vertical flow, the height is rounded instead.

<div class="example">
  This property improves the justification
  for Han ideograph-based scripts such as Chinese or Japanese.

  With the following CSS,
  the <code>&lt;article&gt;</code> elements
  and blocks with <code>bodytext</code> class
  are justified,
  but the expansion occurs
  only when there are non-CJK characters in the line
  because their logical widths are
  snapped to the multiple of 1em.
  <pre class="lang-css">
  article, .bodytext {
    font-size: 12pt;
    text-align: justify;
    snap-width: 1em;
  }
  </pre>
</div>

Privacy and Security Considerations {#priv-sec}
===============================================

This specification introduces no new privacy leaks,
or security considerations beyond "implement it correctly".
