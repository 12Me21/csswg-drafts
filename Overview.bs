<link href='web-animations.css' rel='stylesheet' type='text/css'>
<pre class='metadata'>
Title: Scroll-linked Animations
Group: CSSWG
Status: UD
Work Status: exploring
ED: https://birtles.github.io/scroll-animations/
Shortname: scroll-animations
Abstract: Defines an API and markup for creating animations that are either
          triggered by or tied to the scroll offset of a scroll container.
Editor: Dean Jackson <dino@apple.com>
Editor: Brian Birtles <bbirtles@mozilla.com>
Editor: Botond Ballo <botond@mozilla.com>
Editor: Mantaroh Yoshinaga <mantaroh@mozilla-japan.org>
</pre>
<pre class=anchors>
urlPrefix: https://w3c.github.io/web-animations/; type: dfn; spec: web-animations
    text: animation; url: concept-animation
    text: current time
    text: duration
    text: inactive timeline
    text: start delay
    text: target effect end
    text: timeline
</pre>

# Introduction # {#intro}

This specification defines mechanisms for
[[#triggering-animations|triggering the start and end]] of an [=animation=]
based on the scroll progress of a [=scroll container=], as well as 
[[#controlling-animation-playback|driving the progress of an animation]] based
on the scroll progress of a scroll container.

## Relationship to other specifications ## {#other-specs}

Web Animations [[WEB-ANIMATIONS-1]] defines an abstract conceptual model for
animations on the Web platform, with elements of the model including
[=animations=] and their [=timelines=],
and associated programming interfaces.

This specification extends this model in two ways: by defining a new concept,
that of an [=animation timeline trigger=], which can optionally be associated with
an animation [=timeline=]; and by defining a new type of animation [=timeline=]:
a [=scroll timeline=].

This specification defines both programming interfaces for interacting with these
concepts, as well as CSS markup which applies these concepts to CSS Animations
[[CSS3-ANIMATIONS]].

The behavior of the CSS markup is described in terms of the programming interfaces.
User-agents that do not support script may still implement the CSS markup
provided it behaves as if the underlying programming interfaces were in place.

# Use cases # {#use-cases}

ScrollTimeline {#scroll-timeline-use-case}
-----------------------------------
Here’s an example of scrollable page contents including the animated element.
This animated element is indicated the navigation of content.
For example, If we scrolled to the half of page, then animation of navigation will advance to 50%.

Usually we should detect the scroll event from DOM, and then manipulate the animation via Web Animations API or CSS.

<img src="img/Usecase1.png" width="600"
alt="Usecase 1: ScrollTimeline">

If we use this API in this case, the example code is as follow.
<pre class='lang-javascript'>
var animation = div.getAnimations()[0];
animation.timeline = new ScrollTimeline(
  { trigger: new ScrollTrigger({ scrollSource: scrollableElement,
                                 scrollOffset: 'auto',
                                 endScrollOffset: 'auto' })});
</pre>

DocumentTimeline with ScrollTringger {#document-timeline-with-scrolltrigger-use-case}
-----------------------------------
The animations will use the document timeline, but some people will want to trigger these animation when reaching certain position in the content.

This use case is as follow:

Here’s an sample content including the animation.
This animation will start when reaching the 300px, this value is that user can view this animation’s element.

<img src="img/Usecase2.png" width="300"
alt="Usecase 2: DocumentTimeline with ScrollTrigger">

If we use this API for this case, the example code will be as follow:
<pre class='lang-javascript'>
var animation = div.getAnimations()[0];
animation.timeline = new DocumentTimeline(
  { trigger: new ScrollTrigger({ scrollSource: scrollableElement,
                                 scrollOffset: '300px' }) });
</pre>

ScrollTimeline with scroll range {#scroll-timeline-with-scroll-range-use-case}
-----------------------------------
This use case is similar to ScrollTimeline.
The difference is that there are scroll range in order to enable the animation.
Once scroll position will be out of range, the animation will cancel.

This use case is as follow:

Here’s an example content like picture-story show with animated element.
The developer want to show the animated element when scroll position reach the certain position,
and she want to cancel the animation when scroll position is out of range.(perhaps when we can’t see these element.)

<img src="img/usecase3.png" width="600"
alt="Usecase 3: ScrollTimeline with scroll range">

If we use this API for this case, the example code will be as follow:
<pre class='lang-javascript'>
// We enable the animation within the range[300px-800px].
var animation = div.getAnimations()[0];
animation.timeline = new ScrollTimeline(
  { trigger: new ScrollTrigger({ scrollSource: scrollableElement,
                                 scrollOffset: '300px',
                                 endScrollOffset: '800px'}) });
</pre>

ScrollTimeline with scroll range and interval {#scroll-timeline-with-scroll-range-and-interval-use-case}
-----------------------------------
This use case is similar to ScrollTimeline with scroll range.
The difference is behavior of out of range.
Once scroll position is out of range, the animation will continue until animation is finish.
But some animation have infinity duration, so we use the interval property of ScrollTrigger in such case.

This use case is as follow:

Basically, this use case is same to the ScrollTimeline with scroll range.
However developer will want to continue some animation’s effect.

<img src="img/Usecase4.png" width="600"
alt="Usecase4 : ScrollTimeline with scroll range and interval">

If we use this API for this case, the example code will be as follow:
<pre class='lang-javascript'>
var animation = div.getAnimations()[0];

// We will animate this animation 1000ms after exceed range.
animation.timeline = new DocumentTimeline(
  { trigger: new ScrollTrigger({ scrollSource: scrollableElement,
                                 scrollOffset: '300px',
                                 endScrollOffset: '800px',
                                 interval: '1000ms'}) });
</pre>

# Triggering animations # {#triggering-animations}

## The {{AnimationTimelineTrigger}} interface ## {#animationtimelinetrigger-interface}

<pre class="idl">
interface AnimationTimelineTrigger {
};
</pre>

An <dfn>animation timeline trigger</dfn> is an object that can be in one of
two states: <dfn>active</dfn> and <dfn>inactive</dfn>. A trigger starts off
as inactive, and can subsequently be activated or deactivated by the user-agent
depending on the specific type of trigger.

A trigger cannot be explicitly activated or deactivated from script, only by
the user-agent.

## Extensions to the {{AnimationTimeline}} interface ## {#extensions-to-animationtimeline}

<pre class="idl">
partial interface AnimationTimeline {
  readonly attribute AnimationTimelineTrigger? trigger;
};
</pre>

If a <a>timeline</a> has a specified trigger, the timeline is only <a
lt='inactive timeline'>active</a> when its trigger is <a>active</a>.

That is, a timeline with a trigger only becomes <a
lt="inactive timeline">active</a> when its trigger becomes
<a>active</a> <strong>and</strong> all the other criteria for the timeline
becoming <a lt="inactive timeline">active</a> are met. When the trigger becomes
<a>inactive</a>, the timeline becomes <a lt="inactive timeline">inactive</a> as
well.

## Extensions to the {{DocumentTimeline}} interface ## {#document-timeline-interface}

<pre class="idl">
partial dictionary DocumentTimelineOptions {
  AnimationTimelineTrigger trigger;
};
[Constructor(optional DocumentTimelineOptions options)]
partial interface DocumentTimeline {
  // trigger attribute inherited from AnimationTimeline
};
</pre>

## Scroll Triggers ## {#scroll-triggers}

### The {{ScrollDirection}} enumeration ### {#scrolldirection-enumeration}

<pre class="idl">
enum ScrollDirection {
  "horizontal",
  "vertical"
};
</pre>

The {{ScrollDirection}} enumeration specifies a direction of scroll of a
scrollable element.

:   <code>horizontal</code>
::  Selects the horizontal direction

:   <code>vertical</code>
::  Selects the vertical direction

<div class="issue">

This should use logical directions such as "block" and "inline", but
should it support physical directions as well?

We should add an "auto" value here that means, "If only one direction is
scrollable use that direction, otherwise use the block direction".

What about a value that means, "the longest scroll direction." That would be
more reliable than "auto" for the case where layout differences could mean that,
although normally you only expect the inline direction to be scrollable, on
some devices you end up with a small scrollable range in the block direction
too.

</div>

### The {{ScrollTriggerKind}} enumeration ### {#scrolltriggerkind-enumeration}

<pre class="idl">
enum ScrollTriggerKind {
  "offset",
  "range"
};
</pre>

The {{ScrollTriggerKind}} enumeration specifies the kind of a {{ScrollTrigger}}.

:   <code>offset</code>
::  The scroll trigger is activated when a scroll offset is reached,
    and never subsequently deactivated.

    Issue: Do we actually have use cases for this? I think in most cases we
    cancel the animation if we go back past the {{ScrollTrigger/scrollOffset}}?
    I'd be glad to be proven wrong, however.

:   <code>range</code>
::  The scroll trigger is active whenever the scroll offset is inside
    a particular range.

### The {{ScrollTrigger}} interface ### {#scrolltriggger-interface}

<pre class="idl">
dictionary ScrollTriggerOptions {
  Element scrollSource;
  ScrollTriggerKind kind = "offset";
  ScrollDirection orientation;
  DOMString scrollOffset = "auto";
  DOMString endScrollOffset = "auto";
};

[Constructor(optional ScrollTriggerOptions options)]
interface ScrollTrigger : AnimationTimelineTrigger {
  readonly attribute Element scrollSource;
  readonly attribute ScrollTriggerKind kind;
  readonly attribute ScrollDirection orientation;
  readonly attribute DOMString scrollOffset;
  readonly attribute DOMString endScrollOffset;
};
</pre>

<div link-for-hint="ScrollTrigger">
A {{ScrollTrigger}} is an {{AnimationTimelineTrigger}} associated with a scrollable
element. 

</p>

<div class="attributes">

:   <dfn attribute for=ScrollTrigger>scrollSource</dfn>
::  The scrollable element whose scrolling activates and deactivates the trigger.

    Issue: Is this required? If so, we should mark it as <code>required</code>
    in the IDL (and remove <code>optional</code> from the
    <code>options</code> parameter to the {{ScrollTrigger()}}
    constructor). If not, we should define the behavior when {{scrollSource}} is
    not specified (e.g. using the document element).

:   <dfn attribute for=ScrollTrigger>kind</dfn>
::  Determines the way in which scrolling {{scrollSource}} activates and deactivates
    the trigger.

    The values have the following behavior:

    :   offset
    ::  The trigger is activated when {{scrollSource}}'s scroll offset in {{orientation}} 
        reaches {{scrollOffset}}, and never subsequently deactivated. {{endScrollOffset}} 
        is ignored.

    :   range
    ::  The trigger is activated when {{scrollSource}}'s scroll offset in {{orientation}} 
        enters the interval [{{scrollOffset}}, {{endScrollOffset}}], and deactivated when 
        the scroll offset exits that interval.

:   <dfn attribute for=ScrollTrigger>orientation</dfn>
::  Determines the direction of scrolling which drives the activation and deactivation
    of the trigger.

    If a value for {{orientation}} is not specified, and {{scrollSource}} is only scrollable
    in one direction, that direction is used; if {{scrollSource}} is scrollable
    in both directions, an unspecified direction is used.

    Issue: I think we should simply define a suitable "auto" value and make that
    the default value in the {{ScrollTriggerOptions}} dictionary.
    Also, we shouldn't have unspecified behavior (since, in practice, the
    most popular rendering engine at the time ends up becoming the spec for any
    undefined behavior, so we may as well spec it).

:   <dfn attribute for=ScrollTrigger>scrollOffset</dfn>
::  The scroll offset, in the direction specified by {{orientation}}, that triggers 
    activation of the trigger.

    Recognized values are defined by the following grammar:

    <blockquote>
      <pre class="prod">auto | <<length>> | <<percentage>></pre>
    </blockquote>

    The meaning of each value is as follows:

    :   auto
    ::  The beginning of {{scrollSource}}'s scroll range in {{orientation}}.
    :   <<length>>
    ::  An absolute distance along {{scrollSource}}'s scroll range in {{orientation}}.
    :   <<percentage>>
    ::  A percentage distance along {{scrollSource}}'s scroll range in {{orientation}}.

    The way in which the trigger's activation depends on this offset is determined by the
    trigger's {{kind}}.

:   <dfn attribute for=ScrollTrigger>endScrollOffset</dfn>
::  A scroll offset that constitutes the end of a range in which the trigger is activated.

    Recognized values are defined by the following grammar:

    <blockquote>
      <pre class="prod">auto | <<length>> | <<percentage>></pre>
    </blockquote>

    The meaning of each value is as follows:

    :   auto
    ::  The end of {{scrollSource}}'s scroll range in {{orientation}}.
    :   <<length>>
    ::  An absolute distance along {{scrollSource}}'s scroll range in {{orientation}}.
    :   <<percentage>>
    ::  A percentage distance along {{scrollSource}}'s scroll range in {{orientation}}.

    This is ignored if the trigger's {{kind}} is {{offset}}.

</div>
</div>

## The 'animation-trigger' property ## {#animation-trigger}

<a>Animation timeline triggers</a> can be applied to animations defined using
CSS Animations [[CSS3-ANIMATIONS]] with the 'animation-trigger' property.

<pre class='propdef'>
Name: animation-trigger
Value: <<single-animation-trigger>>#
Initial: auto
Applies to: all elements, ::before and ::after pseudo-elements
Inherited: none
Animatable: no
Percentages: N/A
Media: interactive
Computed value: As specified
Canonical order: per grammar
</pre>

<dfn>&lt;single-animation-trigger></dfn> = auto | <<scroll-trigger>>

<dfn>&lt;scroll-trigger></dfn> = scroll(element(<<id-selector>>), <<scroll-direction>> [, <<scroll-offset>> [, <<scroll-offset>>]])

<dfn>&lt;scroll-direction></dfn> = auto | horizontal | vertical

<dfn>&lt;scroll-offset></dfn> = <<length>> | <<percentage>> | auto

The 'animation-trigger' property is similar to properties like 'animation-duration' and 
'animation-timing-function' in that it can have one or more values, each one imparting 
additional behavior to a corresponding [=animation=] on the 
element, with the triggers matched up with animations as described 
[[css-animations-1#animation-name|here]].

Each value has type <<single-animation-trigger>>, whose possible values have the
following effects:

:   auto
::  The animation's [=timeline=] has no {{AnimationTimeline/trigger|trigger}}.

    Issue: Is &lsquo;none&rsquo; better here? I'm not sure what is more
    idiomatic CSS.

:   <<scroll-trigger>>
::  The animation's [=timeline=] has a {{ScrollTrigger}}.

    The trigger's {{ScrollTrigger/scrollSource}} is the [=scroll container=] identified
    by the <<id-selector>>.

    Issue: Should it be possible to omit the scroll container and use the
    initial container block? I think Apple's proposal did this? Also, in
    the example below we have to assume the HTML element has an ID attached
    to handle this case which seems unfortunate.

    The trigger's {{ScrollTrigger/orientation}} is determined by the provided
    <<scroll-direction>>.

    Issue: Should it be possible to omit the scroll-direction and have it
    default to &lsquo;auto&rsquo;?

    The first <<scroll-offset>>, if provided, determines the trigger's {{ScrollTrigger/scrollOffset}}.

    The second <<scroll-offset>>, if provided, determines the trigger's {{ScrollTrigger/endScrollOffset}}.

Issue: It's not possible to specify the {{ScrollTrigger/kind}}. Is that ok?
In any case, we need to define what value to use for {{ScrollTrigger/kind}}.

## ''@trigger'' rules ## {#trigger-rules}

The <dfn>@trigger</dfn> at-rule allows conditioning the application of CSS rules
on the scroll progress of a [=scroll container=]. It is defined as follows:

<pre>
  @trigger = @trigger <<scroll-trigger>> { <<rule-list>> }
</pre>

The <<scroll-trigger>> defines a {{ScrollTrigger}}, in a similar fashion to when it appears
as a value for 'animation-trigger'.

The <<rule-list>> inside of ''@trigger'' can contain any rules. The rules in the <<rule-list>> 
only apply when the {{ScrollTrigger}} is active.

As a special case, if one of the rules in the <<rule-list>> defines an 
[=animation=] using the 'animation-name' property, the 
[=timeline=] of that animation is associated with the {{ScrollTrigger}},
as if using the 'animation-trigger' property.

The syntax is designed to be extensible to other types of triggers in the future.

Issue: Do we need 'animation-trigger' at all, or is ''@trigger'' sufficient?

Issue: Should this be called &lsquo;@scroll&rsquo; perhaps? Or integrated with
media queries somehow?

## Examples ## {#trigger-examples}

<div class="example">
  Spin an element while the page's vertical scroll offset is within a range
  <pre class="lang-javascript">
    let spinner = document.getElementById("spinner");
    let effect = new KeyframeEffect(
      spinner,
      [
        { transform: 'rotate(0)' },
        { transform: 'rotate(1turn)' }
      ],
      { 
        duration: 300,
        fill: 'both',
        easing: 'linear',
        iterations: Infinity
      });
    let timeline = new DocumentTimeline({
      trigger: new ScrollTrigger({
        scrollSource: document.documentElement,
        orientation: "vertical",
        kind: "range",
        scrollOffset: "500px",
        endScrollOffset: "1000px"
      });
    });
    let animation = new Animation(effect, timeline);
    animation.play();
  </pre>
</div>

<div class="example">
  The same thing with CSS, using 'animation-trigger'
  <pre class="lang-css">
    @keyframes spin {
      from {
        transform: rotate(0);
      }
      to {
        transform: rotate(1turn);
      }
    }
    #spinner {
      animation-name: spin;
      animation-duration: 300ms;
      animation-fill-mode: both;
      animation-iteration-count: infinite;
      animation-timing-function: linear;
      /* Assume the HTML element has id 'root' */
      animation-trigger: scroll(element(#root), vertical, 500px, 1000px);
    }
  </pre>
</div>

<div class="example">
  The same thing with CSS, using ''@trigger''
  <pre class="lang-css">
    @keyframes spin {
      from {
        transform: rotate(0);
      }
      to {
        transform: rotate(1turn);
      }
    }
    /* Assume the HTML element has id 'root' */
    @trigger scroll(element(#root), vertical, 500px, 1000px) {
      #spinner {
        animation-name: spin;
        animation-duration: 300ms;
        animation-fill-mode: both;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
      }
    }
  </pre>
</div>

Issue: We should add an example of something that toggles 'visibility' or
even 'display' to demonstrates how ''@trigger'' can be used more widely than
just animations. (Particularly since 'display' can't be animated normally.)


# Controlling animation playback # {#controlling-animation-playback}

## The {{ScrollTimeline}} interface ## {#scrolltimeline-interface}

<pre class="idl">
enum ScrollTimelineAutoKeyword { "auto" };

dictionary ScrollTimelineOptions {
  required ScrollTrigger trigger;
  (double or ScrollTimelineAutoKeyword) timeRange = "auto";
  FillMode fill = "none";
};

[Constructor(ScrollTimelineOptions options)]
interface ScrollTimeline : AnimationTimeline {
  attribute (double or ScrollTimelineAutoKeyword) timeRange;
  attribute FillMode fill;
};
</pre>

<div link-for-hint="ScrollTrigger">

A <dfn>scroll timeline</dfn> is an {{AnimationTimeline}} whose time values are determined
not by wall-clock time, but by the progress of scrolling in a [=scroll container=].

A {{ScrollTimeline}} must have a {{AnimationTimeline/trigger}}, it must be of type
{{ScrollTrigger}}, and the trigger's {{kind}} must be {{range}}.

Issue: What happens if it doesn't? Throw a <strong>TypeError</strong> from the
constructor?

The scroll container whose scrolling drives the timeline is the trigger's 
{{scrollSource}}. The direction of scrolling that drives the timeline is the 
trigger's {{orientation}}.

<div class="attributes">

:   <dfn attribute for=ScrollTimeline>timeRange</dfn>
::  A time duration that allows mapping between a distance scrolled, and
    quantities specified in time units, such as an animation's [=duration=] and
    [=start delay=].

    Conceptually, {{ScrollTimeline/timeRange}} represents the number of
    milliseconds to map to the scroll range defined by
    {{AnimationTimeline/trigger}}. As a result, this value does have
    a correspondence to wall-clock time.

    This value is used to compute the timeline's [=effective time range=], and
    the mapping is then defined by mapping the scroll distance from 
    {{AnimationTimeline/trigger}}.{{scrollOffset}} to 
    {{AnimationTimeline/trigger}}.{{endScrollOffset}},
    to the [=effective time range=].

:   <dfn attribute for=ScrollTimeline>fill</dfn>
::  Determines whether the timeline is active even when the scroll offset is outside
    the range defined by [{{scrollOffset}}, {{endScrollOffset}}].

    Possible values are:

    :   none
    ::  The timeline is inactive when the scroll offset is less than {{scrollOffset}} 
        or greater than {{endScrollOffset}}.

    :   forwards
    ::  When the scroll offset is less than {{scrollOffset}}, the
        timeline's [=current time=] is 0.
        When the scroll offset is greater than {{endScrollOffset}}, the
        timeline is inactive.

    :   backwards
    ::  When the scroll offset is less than {{scrollOffset}}, the
        timeline is inactive.
        When the scroll offset is greater than {{endScrollOffset}}, the
        timeline's [=current time=] is its 
        [=effective time range=].

    :   both
    ::  When the scroll offset is less than {{scrollOffset}}, the
        timeline's [=current time=] is 0.
        When the scroll offset is greater than {{endScrollOffset}}, the
        timeline's [=current time=] is its 
        [=effective time range=].

    :   auto
    ::  Behaves the same as <code>none</code>.
        
    ISSUE: A {{ScrollTrigger}} is only active when the scroll offset is within the range,
           and a timeline is inactive when its trigger is inactive. How can we reconcile
           this will fill modes, which require an active timeline outside the range in
           some situations?

</div>

### The effective time range of a {{ScrollTimeline}} ### {#efffective-time-range-algorithm}

The <dfn>effective time range</dfn> of a {{ScrollTimeline}} is calculated as follows:

<div class="switch">

:   If the {{ScrollTimeline/timeRange}} has the value <code>"auto"</code>,
::  The [=effective time range=] is the maximum value of the 
    [=target effect end=] of all animations
    directly associated with this timeline.

    If any animation directly associated with the timeline has a 
    [=target effect end=] of infinity, the
    behavior is unspecified.

:   Otherwise,
::  The [=effective time range=] is the {{ScrollTimeline}}'s 
    {{ScrollTimeline/timeRange}}.

</div>

### The current time of a {{ScrollTimeline}} ### {#current-time-algorithm}

The [=current time=] of a {{ScrollTimeline}} is calculated
as follows:

1.  Let <var>current scroll offset</var> be the current scroll offset of {{scrollSource}}
    in the direction specified by {{orientation}}.

2.  If <var>current scroll offset</var> is less than {{scrollOffset}}, return an unresolved
    time value if {{ScrollTimeline/fill}} is <code>none</code> or <code>backwards</code>, 
    or 0 otherwise.

3.  If <var>current scroll offset</var> is greater than or equal to {{endScrollOffset}}, 
    return an unresolved time value if {{ScrollTimeline/fill}} is <code>none</code> or
    <code>forwards</code>, or the [=effective time range=] otherwise.

4.  Return the result of evaluating the following expression:

    <blockquote>
      <code>(<var>current scroll offset</var> - {{scrollOffset}}) / ({{endScrollOffset}} - {{scrollOffset}}) &times; [=effective time range=]</code>
    </blockquote>


</div>  <!-- link-for-hint="ScrollTrigger" -->

## The 'animation-timeline' property ## {#animation-timeline}

<pre class='propdef'>
Name: animation-timeline
Value: <<single-animation-timeline>>#
Initial: auto
Applies to: all elements, ::before and ::after pseudo-elements
Inherited: none
Animatable: no
Percentages: N/A
Media: interactive
Computed value: As specified
Canonical order: per grammar
</pre>

<dfn>&lt;single-animation-timeline></dfn> = auto | scroll([<<time>> [, <<single-animation-fill-mode>>]])

The 'animation-timeline' property is similar to properties like 'animation-duration' and 
'animation-timing-function' in that it can have one or more values, each one imparting 
additional behavior to a corresponding [=animation=] on the 
element, with the timelines matched up with animations as described 
[[css-animations-1#animation-name|here]].

Each value has type <<single-animation-timeline>>, whose possible values have the
following effects:

:   auto
::  The animation's [=timeline=] is a {{DocumentTimeline}} 
    (possibly with a {{AnimationTimeline/trigger}}) specified using 'animation-trigger'.

:   scroll([<<time>> [, <<single-animation-fill-mode>>]])
::  The animation's [=timeline=] is a {{ScrollTimeline}}.

    The <<time>> value, if specified, determines the timeline's {{ScrollTimeline/timeRange}}.

    The <<single-animation-fill-mode>> value, if specified, determines the timeline's
    {{ScrollTimeline/fill}}.

    The animation's timeline must also have a {{ScrollTrigger}}, defined using the JS API
    or using the 'animation-trigger' property.

## Examples ## {#timeline-examples}

<div class="example">
  Draw a reading progress bar along the top of the page as the user scrolls
  <pre class="lang-css">
    #progress {
      position: fixed;
      top: 0;
      width: 0;
      height: 2px;
      background-color: red;
    }
  </pre>
  <pre class="lang-javascript">
    let progress = document.getElementById("progress");
    let effect = new KeyframeEffect(
      progress,
      [
        { width: "0vw" },
        { width: "100vw" }
      ],
      {
        duration: 1000,
        easing: "linear"
      });
    let timeline = new ScrollTimeline({
      trigger: new ScrollTrigger({
        scrollSource: document.documentElement,
        orientation: "vertical",
        kind: "range"
      })      
    });
    let animation = new Animation(effect, timeline);
    animation.play();
  </pre>
</div>

<div class="example">
  The same thing with CSS, using 'animation-trigger'
  <pre class="lang-css">
    @keyframes progress {
      from {
        width: 0vw;
      }
      to {
        width: 100vw;
      }
    }
    #progress {
      position: fixed;
      top: 0;
      width: 0;
      height: 2px;
      background-color: red;
      animation-name: progress;
      animation-duration: 1s;
      animation-timing-function: linear;
      /* Assume the HTML element has id 'root' */
      animation-trigger: scroll(element(#root), vertical);
      animation-timeline: scroll();
    }
  </pre>
</div>

<div class="example">
  The same thing with CSS, using ''@trigger''
  <pre class="lang-css">
    @keyframes progress {
      from {
        width: 0vw;
      }
      to {
        width: 100vw;
      }
    }
    #progress {
      position: fixed;
      top: 0;
      width: 0;
      height: 2px;
      background-color: red;
    }
    /* Assume the HTML element has id 'root' */
    @trigger scroll(element(#root), vertical) {
      #progress {
        animation-name: progress;
        animation-duration: 1s;
        animation-timing-function: linear;
        animation-timeline: scroll();
      }
    }
  </pre>
</div>

# Avoiding cycles with layout # {#avoiding-cycles}

The ability for scrolling to drive the progress of an animation, gives rise to 
the possibility of <dfn>layout cycles</dfn>, where a change to a scroll offset
causes an animation's effect to update, which in turn causes a new change to the
scroll offset.

To avoid such cycles, animations with a {{ScrollTimeline}} are sampled once
per frame, after scrolling in response to input events has taken place, but
before {{requestAnimationFrame()}} callbacks are run. If the sampling of such an
animation causes a change to a scroll offset, the animation will not be
re-sampled to reflect the new offset until the next frame.

The implication of this is that in some situations, in a given frame, the 
rendered scroll offset of a scroll container may not be consistent with the state 
of an animation driven by scrolling that scroll container. However, this will
only occur in situations where the animation's effect changes the scroll offset
of that same scroll container (in other words, in situations where the animation's
author is asking for trobule). In normal situations, including - importantly - 
when scrolling happens in response to input events, the rendered scroll offset
and the state of scroll-driven animations will be consistent in each frame.
