<h1>CSS Image Values and Replaced Content Module Level 4</h1>

<pre class='metadata'>
Status: ED
Shortname: css-images
Level: 4
Group: csswg
ED: http://dev.w3.org/csswg/css-images-4/
TR: http://www.w3.org/TR/css4-images/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Editor: fantasai, Mozilla, http://fantasai.inkedblade.net/contact
Abstract: This module contains the features of CSS level 4 relating to the <<image>> type and replaced elements. It includes and extends the functionality of CSS Image Values and Replaced Content Module Level 3. The main extensions compared to level&nbsp;3 are several additions to the <<image>> type, additions to the <<gradient>> type, extentions to the ''image()'' function, definitions for interpolating several <<image>> types, and several properties controlling the interaction of replaced elements and CSS's layout models.
!Issue Tracking: <a href="http://www.w3.org/Style/CSS/Tracker/products/27">http://www.w3.org/Style/CSS/Tracker/products/27</a>
Previous Version: http://www.w3.org/TR/2012/WD-css4-images-20120911/
Ignored Terms: <offset>, background positioning area, border image area, <meetorslice>, <ending-shape>, Map
Link Defaults: css21 (property) display
</pre>

<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	In CSS Levels 1 and 2,
	image values, such as those used in the 'background-image' property,
	could only be given by a single URL value.
	This module introduces additional ways of representing 2D images,
	for example as <a href="#image-notation">a list of URIs denoting fallbacks</a>,
	as <a href="#element-image-type">a reference to an element</a>,
	or as <a href="#gradients">a gradient</a>.

	This module also defines several properties for <a href="#image-processing">manipulating raster images</a>
	and for <a href="#object-fit">sizing</a>
	or <a href="#object-position">positioning</a>
	replaced elements such as images within the box determined by the CSS layout algorithms.
	It also defines in a generic way CSS's <a href="#sizing">sizing algorithm</a> for images and other replaced elements.

<h3 id="placement">
Module Interactions</h3>

	This module defines and extends the <<image>> value type defined in [[!CSS3VAL]].
	Furthermore it replaces the <<url>> type
	in the 'background-image' and 'list-style-image' definitions in CSS1 and CSS2
	and adds <<image>> as an alternative to <<url>> in the 'content' property's value.
	It is presumed that CSS specifications beyond CSS2.1 will use the <<image>> notation
	in place of <<url>> where 2D images are expected. (See e.g. [[CSS3BG]].)

	Of the properties defined in this module,
	only 'image-resolution'
	applies to <code>::first-line</code> and <code>::first-letter</code>.

<h3 id="values">
Values</h3>

	This specification follows the <a href="http://www.w3.org/TR/CSS21/about.html#property-defs">CSS property definition conventions</a> from [[!CSS21]].
	Value types not defined in this specification
	are defined in CSS Level 2 Revision 1 [[!CSS21]].
	Other CSS modules may expand the definitions of these value types:
	for example [[CSS3COLOR]],
	when combined with this module,
	expands the definition of the <<color>> value type as used in this specification.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification also accept the <a href="http://www.w3.org/TR/css3-values/">global keywords</a> as their property value.
	For readability they has not been repeated explicitly.


<h2 id='planned-features'>
Planned Features</h2>

<ol>
	<li>Resolution tagging in image()

	<li>Logical keywords for specifying linear gradient direction.

	<li>More interpolation modes for gradients: <a href="http://lists.w3.org/Archives/Public/www-style/2012Jan/0635.html">http://lists.w3.org/Archives/Public/www-style/2012Jan/0635.html</a>

	<li>Ability to reference an SVG paint server via url (maybe as element(<<string>>)?)
</ol>

<!-- ====================================================================== -->

<h2 id="image-values">
Image Values: the <<image>> type</h2>

	The <<image>> value type denotes a 2D image. It can be a
	<a href="#url-notation">url reference</a>,
	<a href="#image-notation">image notation</a>,
	<!-- <a href="#element-image">element reference</a>, -->
	or <a href="#gradients">gradient notation</a>.
	Its syntax is:

	<pre class="prod"><dfn>&lt;image></dfn> = <<url>> | <<image()>> | <<image-set()>> | <<element()>> | <<cross-fade()>> | <<gradient>></pre>

	An <<image>> can be used in many CSS properties,
	including the 'background-image', 'list-style-image', 'cursor' properties [[!CSS21]]
	(where it replaces the <<url>> component in the property's value).

	In some cases, an image is invalid,
	such as a <<url>> pointing to a resource that is not a valid image format.
	An <dfn export>invalid image</dfn> is rendered as a solid-color ''transparent'' image with no intrinsic dimensions.
	However, <a>invalid images</a> have special behavior in some contexts,
	such as the ''image()'' notation.


<!--
UUUUUUUU     UUUUUUUURRRRRRRRRRRRRRRRR   LLLLLLLLLLL
U::::::U     U::::::UR::::::::::::::::R  L:::::::::L
U::::::U     U::::::UR::::::RRRRRR:::::R L:::::::::L
UU:::::U     U:::::UURR:::::R     R:::::RLL:::::::LL
 U:::::U     U:::::U   R::::R     R:::::R  L:::::L
 U:::::D     D:::::U   R::::R     R:::::R  L:::::L
 U:::::D     D:::::U   R::::RRRRRR:::::R   L:::::L
 U:::::D     D:::::U   R:::::::::::::RR    L:::::L
 U:::::D     D:::::U   R::::RRRRRR:::::R   L:::::L
 U:::::D     D:::::U   R::::R     R:::::R  L:::::L
 U:::::D     D:::::U   R::::R     R:::::R  L:::::L
 U::::::U   U::::::U   R::::R     R:::::R  L:::::L         LLLLLL
 U:::::::UUU:::::::U RR:::::R     R:::::RLL:::::::LLLLLLLLL:::::L
  UU:::::::::::::UU  R::::::R     R:::::RL::::::::::::::::::::::L
    UU:::::::::UU    R::::::R     R:::::RL::::::::::::::::::::::L
      UUUUUUUUU      RRRRRRRR     RRRRRRRLLLLLLLLLLLLLLLLLLLLLLLL
-->


<h3 id="url-notation">
Image References and Image Slices: the <<url>> type and ''url()'' notation</h3>

	The simplest way to indicate an image is to reference an image file by URL.
	This can be done with the <a href="http://www.w3.org/TR/CSS21/syndata.html#uri">>url()'' notation</a>, defined in [[!CSS21]].

	<div class="example">

		In the example below, a background image is specified with ''url()''syntax:

		<pre>background-image: url(wavy.png);</pre>
	</div>

	If the UA cannot download, parse, or otherwise successfully display the contents at the URL as an image,
	it must be treated as an <a>invalid image</a>.


<!--
IIIIIIIIII
I::::::::I
I::::::::I
II::::::II
  I::::I     mmmmmmm    mmmmmmm     aaaaaaaaaaaaa     ggggggggg   ggggg    eeeeeeeeeeee
  I::::I   mm:::::::m  m:::::::mm   a::::::::::::a   g:::::::::ggg::::g  ee::::::::::::ee
  I::::I  m::::::::::mm::::::::::m  aaaaaaaaa:::::a g:::::::::::::::::g e::::::eeeee:::::ee
  I::::I  m::::::::::::::::::::::m           a::::ag::::::ggggg::::::gge::::::e     e:::::e
  I::::I  m:::::mmm::::::mmm:::::m    aaaaaaa:::::ag:::::g     g:::::g e:::::::eeeee::::::e
  I::::I  m::::m   m::::m   m::::m  aa::::::::::::ag:::::g     g:::::g e:::::::::::::::::e
  I::::I  m::::m   m::::m   m::::m a::::aaaa::::::ag:::::g     g:::::g e::::::eeeeeeeeeee
  I::::I  m::::m   m::::m   m::::ma::::a    a:::::ag::::::g    g:::::g e:::::::e
II::::::IIm::::m   m::::m   m::::ma::::a    a:::::ag:::::::ggggg:::::g e::::::::e
I::::::::Im::::m   m::::m   m::::ma:::::aaaa::::::a g::::::::::::::::g  e::::::::eeeeeeee
I::::::::Im::::m   m::::m   m::::m a::::::::::aa:::a gg::::::::::::::g   ee:::::::::::::e
IIIIIIIIIImmmmmm   mmmmmm   mmmmmm  aaaaaaaaaa  aaaa   gggggggg::::::g     eeeeeeeeeeeeee
                                                               g:::::g
                                                   gggggg      g:::::g
                                                   g:::::gg   gg:::::g
                                                    g::::::ggg:::::::g
                                                     gg:::::::::::::g
                                                       ggg::::::ggg
                                                          gggggg
-->


<h3 id="image-notation">
Image Fallbacks and Annotations: the ''image()'' notation</h3>

	The ''image()'' function allows an author to:

	<ul>
		<li>
			use <a href="http://www.w3.org/TR/media-frags/">media fragments</a> to clip out a portion of an image

		<li>
			specify fallback images in case the preferred image can't be decoded or is a type that the browser doesn't recognize

		<li>
			use a solid color as an image

		<li>
			automatically respect the image orientation specified in the image's metadata
	</ul>

	The ''image()'' notation is defined as:

	<pre class='prod'>
		<dfn>image()</dfn> = image( <<image-tags>>? [ <<image-src>> , ]* [ <<image-src>> | <<color>> ] )
		<dfn>&lt;image-tags></dfn> = [ ltr | rtl ]
		<dfn>&lt;image-src></dfn> = [ <<url>> | <<string>> ]
	</pre>

	Each <<string>> or <<url>> inside ''image()'' represents an image,
	just as if the <a href="#url-notation">>url()'' notation</a> had been used.
	As usual for URLs in CSS,
	relative URLs are resolved to an absolute URL
	(as described in Values &amp; Units [[!CSS3VAL]])
	when a specified ''image()'' value is computed.

	If the image has an orientation specified in its metadata,
	such as EXIF,
	the UA must rotate or flip the image to correctly orient it
	as the metadata specifies.

<h4 id="image-fragments">
Image Fragments</h4>

	When a URL specified in ''image()'' represents a portion of a resource
	(e.g. by the use of <a href="http://www.w3.org/TR/media-frags/#naming-space">media fragment identifiers</a>)
	that portion is clipped out of its context and used as a standalone image.

	<div class="example">

		For example, given the following image and CSS:

		<a href="images/sprites.svg">
			<img src="images/sprites.svg" height="20" width="180" alt="[9 circles, with 0 to 8 eighths filled in]">
		</a>

		<pre>background-image: image('sprites.svg#xywh=40,0,20,20')</pre>

		...the background of the element will be the portion of the image that starts at (40px,0px) and is 20px wide and tall,
		which is just the circle with a quarter filled in.
	</div>

	So that authors can take advantage of CSS's forwards-compatible parsing rules to provide a fallback for image slices,
	implementations that support the ''image()'' notation
	<em>must</em> support the <code>xywh=#,#,#,#</code> form of media fragment identifiers
	for images specified via ''image()''. [[!MEDIA-FRAGS]]

	<div class='example'>
		Note that image fragments can also be used with the ''url()'' notation.
		However, a legacy UA that doesn't understand the media fragments notation
		will ignore the fragment and simply display the entirety of the image.

		Since the ''image()'' notation requires UAs to support media fragments,
		authors can take advantage of CSS's forward-compatible parsing rules
		to provide a fallback when using an image fragment URL:

		<pre>
			background-image: url('swirl.png'); /* old UAs */
			background-image: image('sprites.png#xywh=10,30,60,20'); /* new UAs */
		</pre>
	</div>

<h4 id="image-fallbacks">
Image Fallbacks</h4>

	Multiple <<image-src>>s can be given separated by commas,
	in which case the function represents the first image that's not an <a>invalid image</a>.
	The final argument can specify a <<color>> to serve as an ultimate fallback;
	this can be used, e.g. for 'background-image',
	to ensure adequate contrast if none of the preceding <<image-src>>s can be used.
	If the final argument is a <<color>>,
	it represents a solid-color image of the given color with no <a>intrinsic dimensions</a>.
	If all of the provided <<image-src>>s are <a>invalid images</a>
	and a fallback color was not provided as the last argument,
	the entire ''image()'' function must be treated as an <a>invalid image</a>.

	<div class="example">

		The rule below would tell the UA to load "wavy.svg" if it can;
		failing that to load "wavy.png";
		and failing that to display "wavy.gif".
		For example, the browser might not understand how to render SVG images,
		and the PNG may be temporarily 404
		(returning an HTML 404 page, which the browser can't decode as an image)
		due to a server move,
		so the GIF is used until one of the previous problems corrects itself.

		<pre>background-image: image("wavy.svg", "wavy.png" , "wavy.gif");</pre>
	</div>

	<div class='example'>

		The fallback color can be used to ensure that text is still readable
		even when the image fails to load.
		For example, the following code works fine if the image is rectangular and has no transparency:

		<pre>
			body      { color: black; background: white; }
			p.special { color: white; background: url("dark.png") black; }
		</pre>

		When the image doesn't load,
		the background color is still there to ensure that the white text is readable.
		However, if the image has some transparency,
		the black will be visible behind it,
		which is probably not desired.
		The ''image()'' function addresses this:

		<pre>
			body      { color: black; background: white; }
			p.special { color: white; background: image("dark.png", black); }
		</pre>

		Now, the black won't show at all if the image loads,
		but if for whatever reason the image fails,
		it'll pop in and prevent the white text from being set against a white background.
	</div>

		If a URL uses a fragment identifier syntax that the implementation does not understand,
		or does not consider valid for that type of image,
		the URL must be treated as representing an <a>invalid image</a>.
		<span class='note'>This error-handling is limited to image(),
		and not in the definition of URL,
		for legacy compat reasons.</span>

	<div class='example'>

		For example, if a future specification defined a way to refer to a specific frame of an animated GIF with a fragment identifier,
		an author could write the following to get newer browsers to use the GIF's frame,
		and older browsers to instead download the fallback image:

		<pre>background-image: image("cat_meme.gif#frame=5", "lolcat.png");</pre>
	</div>

	<!-- XXX SVG fragment example with spriting / fallbacks (once SVG can provide this) -->

<h4 id="color-images">
Solid-color Images</h4>

	<div class='example'>

		At times, one may need a solid-color image for a property or function that does not accept the <<color>> type directly.
		The ''image()'' function can be used for this:
		by specifying <em>only</em> a color without any URLs,
		the function immediately falls back to representing a solid-color image of the chosen color.

		<pre>background-image: image(rgba(0,0,255,.5)), url("bg-image.png");</pre>

		In the above, the background is the image "bg-image.png",
		overlaid with partially-transparent blue.
	</div>


<h4 id='bidi-images'>
Bidi-sensitive Images</h4>

	Before listing any <code>&lt;image-src>s</code>,
	the author may specify a directionality for the image,
	similar to adding a <code>dir</code> attribute to an element in HTML.
	If a directional image is used on or in an element with opposite <a href="http://www.w3.org/TR/CSS21/visuren.html#propdef-direction">direction</a>,
	the image must be flipped in the inline direction
	(as if it was transformed by, e.g., <code>scaleX(-1)</code>, if the inline direction is the X axis).

	Note: Absent this declaration,
	images default to no directionality at all,
	and thus don't care about the directionality of the surrounding element.

	<div class='example'>

		A list may use an arrow for a bullet that points into the content.
		If the list can contain both LTR and RTL text,
		though, the bullet may be on the left or the right,
		and an image designed to point into the text on one side will point out of the text on the other side.
		This can be fixed with code like:

		<pre>
			&lt;ul style="list-style-image: image(ltr 'arrow.png');">
				&lt;li dir='ltr'>My bullet is on the left!&lt;/li>
				&lt;li dir='rtl'>MY BULLET IS ON THE RIGHT!&lt;/li>
			&lt;/ul>
		</pre>

			This should render something like:

		<pre>
			&#8658; My bullet is on the left!
			  !THGIR EHT NO SI TELLUB YM &#8656;
		</pre>

		In LTR list items, the image will be used as-is.
		In the RTL list items, however,
		it will be flipped in the inline direction,
		so it still points into the content.

	</div>

<!--
  iiii                                                                                                                                 tttt
 i::::i                                                                                                                             ttt:::t
  iiii                                                                                                                              t:::::t
                                                                                                                                    t:::::t
iiiiiii    mmmmmmm    mmmmmmm     aaaaaaaaaaaaa     ggggggggg   ggggg    eeeeeeeeeeee        ssssssssss       eeeeeeeeeeee    ttttttt:::::ttttttt
i:::::i  mm:::::::m  m:::::::mm   a::::::::::::a   g:::::::::ggg::::g  ee::::::::::::ee    ss::::::::::s    ee::::::::::::ee  t:::::::::::::::::t
 i::::i m::::::::::mm::::::::::m  aaaaaaaaa:::::a g:::::::::::::::::g e::::::eeeee:::::eess:::::::::::::s  e::::::eeeee:::::eet:::::::::::::::::t
 i::::i m::::::::::::::::::::::m           a::::ag::::::ggggg::::::gge::::::e     e:::::es::::::ssss:::::se::::::e     e:::::etttttt:::::::tttttt
 i::::i m:::::mmm::::::mmm:::::m    aaaaaaa:::::ag:::::g     g:::::g e:::::::eeeee::::::e s:::::s  ssssss e:::::::eeeee::::::e      t:::::t
 i::::i m::::m   m::::m   m::::m  aa::::::::::::ag:::::g     g:::::g e:::::::::::::::::e    s::::::s      e:::::::::::::::::e       t:::::t
 i::::i m::::m   m::::m   m::::m a::::aaaa::::::ag:::::g     g:::::g e::::::eeeeeeeeeee        s::::::s   e::::::eeeeeeeeeee        t:::::t
 i::::i m::::m   m::::m   m::::ma::::a    a:::::ag::::::g    g:::::g e:::::::e           ssssss   s:::::s e:::::::e                 t:::::t    tttttt
i::::::im::::m   m::::m   m::::ma::::a    a:::::ag:::::::ggggg:::::g e::::::::e          s:::::ssss::::::se::::::::e                t::::::tttt:::::t
i::::::im::::m   m::::m   m::::ma:::::aaaa::::::a g::::::::::::::::g  e::::::::eeeeeeee  s::::::::::::::s  e::::::::eeeeeeee        tt::::::::::::::t
i::::::im::::m   m::::m   m::::m a::::::::::aa:::a gg::::::::::::::g   ee:::::::::::::e   s:::::::::::ss    ee:::::::::::::e          tt:::::::::::tt
iiiiiiiimmmmmm   mmmmmm   mmmmmm  aaaaaaaaaa  aaaa   gggggggg::::::g     eeeeeeeeeeeeee    sssssssssss        eeeeeeeeeeeeee            ttttttttttt
                                                             g:::::g
                                                 gggggg      g:::::g
                                                 g:::::gg   gg:::::g
                                                  g::::::ggg:::::::g
                                                   gg:::::::::::::g
                                                     ggg::::::ggg
                                                        gggggg
-->


<h3 id='image-set-notation'>
Resolution Negotiation: the ''image-set()'' notation</h3>

	Delivering the most appropriate image resolution for a user's device can be a difficult task.
	Ideally, images should be in the same resolution as the device they're being viewed in,
	which can vary between users.
	However, other factors can factor into the decision of which image to send;
	for example, if the user is on a slow mobile connection,
	they may prefer to receive lower-res images
	rather than waiting for a large proper-res image to load.
	The ''image-set()'' function allows an author to ignore most of these issues,
	simply providing multiple resolutions of an image
	and letting the UA decide which is most appropriate in a given situation.

	<p class='issue'>
		This solution assumes that resolution is a proxy for filesize,
		and therefore doesn't appropriately handle multi-resolution sets of vector images,
		or mixing vector images with raster ones (e.g. for icons).
		For example, use a vector for high-res,
		pixel-optimized bitmap for low-res,
		and same vector again for low-bandwidth (because it's much smaller, even though it's higher resolution).

	The syntax for ''image-set()'' is:

	<pre class='prod'>
	<dfn>image-set()</dfn> = image-set( [ <<image-set-decl>>, ]* [ <<image-set-decl>> | <<color>>] )
	<dfn>&lt;image-set-decl></dfn> = [ <<image>> | <<string>> ] <<resolution>></pre>

	The ''image-set()'' function can not be nested inside of itself,
	either directly
	or indirectly
	(as an argument to another <<image>> type).

	<p class='issue'>
		WebKit's experimental implementation has an ''x'' unit
		which is identical to ''dppx''.
		Should we add it?

	Each <<string>> or <<url>> inside ''image-set()'' represents an image,
	just like in ''image()''.

	Every <<image-set-decl>> in a given ''image-set()'' must have a different <<resolution>>,
	or else the function is invalid.

	The value that a given ''image-set()'' represents is determined by
	the UA first ordering the set of <<image-set-decl>>s
	in a UA-determined order
	(which should be based on the <<resolution>> of each <<image-set-decl>>,
	but may include other factors that the UA deems relevant,
	such as connection speed).
	The function then represents the first such image that is not an <a>invalid image</a>.

	If a fallback color was provided,
	the UA may decide at any point that the remaining <<image-set-decl>>s are unsuitable,
	and choose to use the fallback color instead,
	in which case the function represents a solid-color image of the given color with no <a>intrinsic dimensions</a>.

	If <em>all</em> of the <<image-set-decl>>s represent <a>invalid images</a>,
	then if a fallback color was provided,
	the function represents a solid-color image of the given color with no <a>intrinsic dimensions</a>;
	otherwise, the function represents an <a>invalid image</a>.

	<p class='issue'>
		HTML currently doesnt' do fallback if the first-chosen image doesn't load.
		We should harmonize with HTML,
		either by convincing them to do fallback,
		or by removing our own fallback.

	If an <<image-set-decl>> is chosen and successfully loaded,
	the associated <<resolution>> is the image's <a>intrinsic resolution</a>.

	<p class='issue'>
		It's been suggested that we don't need a full <<resolution>> here,
		and should instead just use the ''x'' unit by itself.
		This seems silly to me,
		since the ''x'' unit is just an easier synonym for ''dppx'',
		but thoughts?
		Beyond theoretical purity considerations,
		it seems that ''dpi'' can be useful for use-cases involving printing,
		where dpi is actually used to talk about images
		and having an integer correlation between dots and pixels
		is either unnecessary or strictly non-sensical
		(as the screening resolution can depend on the colors being used).

	<div class='example'>
		This example shows how to use ''image-set()'' to provide an image in three versions:
		a "normal" version,
		a "high-res" version,
		and an extra-high resolution version for use in high-quality printing
		(as printers can have <em>extremely</em> high resolution):

		<pre>
			background-image: image-set( "foo.png" 1x,
			                             "foo-2x.png" 2x,
			                             "foo-print.png" 600dpi );
		</pre>
	</div>


<!--
EEEEEEEEEEEEEEEEEEEEEElllllll                                                                                            tttt
E::::::::::::::::::::El:::::l                                                                                         ttt:::t
E::::::::::::::::::::El:::::l                                                                                         t:::::t
EE::::::EEEEEEEEE::::El:::::l                                                                                         t:::::t
  E:::::E       EEEEEE l::::l     eeeeeeeeeeee       mmmmmmm    mmmmmmm       eeeeeeeeeeee    nnnn  nnnnnnnn    ttttttt:::::ttttttt
  E:::::E              l::::l   ee::::::::::::ee   mm:::::::m  m:::::::mm   ee::::::::::::ee  n:::nn::::::::nn  t:::::::::::::::::t
  E::::::EEEEEEEEEE    l::::l  e::::::eeeee:::::eem::::::::::mm::::::::::m e::::::eeeee:::::een::::::::::::::nn t:::::::::::::::::t
  E:::::::::::::::E    l::::l e::::::e     e:::::em::::::::::::::::::::::me::::::e     e:::::enn:::::::::::::::ntttttt:::::::tttttt
  E:::::::::::::::E    l::::l e:::::::eeeee::::::em:::::mmm::::::mmm:::::me:::::::eeeee::::::e  n:::::nnnn:::::n      t:::::t
  E::::::EEEEEEEEEE    l::::l e:::::::::::::::::e m::::m   m::::m   m::::me:::::::::::::::::e   n::::n    n::::n      t:::::t
  E:::::E              l::::l e::::::eeeeeeeeeee  m::::m   m::::m   m::::me::::::eeeeeeeeeee    n::::n    n::::n      t:::::t
  E:::::E       EEEEEE l::::l e:::::::e           m::::m   m::::m   m::::me:::::::e             n::::n    n::::n      t:::::t    tttttt
EE::::::EEEEEEEE:::::El::::::le::::::::e          m::::m   m::::m   m::::me::::::::e            n::::n    n::::n      t::::::tttt:::::t
E::::::::::::::::::::El::::::l e::::::::eeeeeeee  m::::m   m::::m   m::::m e::::::::eeeeeeee    n::::n    n::::n      tt::::::::::::::t
E::::::::::::::::::::El::::::l  ee:::::::::::::e  m::::m   m::::m   m::::m  ee:::::::::::::e    n::::n    n::::n        tt:::::::::::tt
EEEEEEEEEEEEEEEEEEEEEEllllllll    eeeeeeeeeeeeee  mmmmmm   mmmmmm   mmmmmm    eeeeeeeeeeeeee    nnnnnn    nnnnnn          ttttttttttt
-->


<h3 id='element-notation'>
Using Elements as Images: the ''element()'' notation</h3>

	The ''element()'' function allows an author to use an element in the document as an image.
	As the referenced element changes appearance,
	the image changes as well.
	This can be used, for example,
	to create live previews of the next/previous slide in a slideshow,
	or to reference a canvas element for a fancy generated gradient or even an animated background.

	Note: The ''element()'' function only reproduces the <em>appearance</em> of the referenced element,
	not the actual content and its structure.
	Authors should only use this for decorative purposes,
	and must not use ''element()'' to reproduce an element with significant content across the page.
	Instead, just insert multiple copies of the element into the document.

	The syntax for ''element()'' is:

	<pre class=prod><dfn>element()</dfn> = element( <<id-selector>> )</pre>

	where <<id-selector>> is an ID selector [[!SELECT]].

	<p class='issue'>
		Do we need to be able to refer to elements in external documents
		(such as SVG paint servers)?
		Or is it enough to just use url() for this?

	<p class='issue'>
		This name conflicts with a somewhat similar function in GCPM.
		This needs to be resolved somehow.

	<p class='issue'>
		Want the ability to do "reflections" of an element,
		either as a background-image on the element or in a pseudo-element.
		This needs to be specially-handled to avoid triggering the cycle-detection.

	<p class='issue'>
		When we have overflow:paged,
		how can we address a single page in the view?

	The ''element()'' function references the element matched by its argument.
	The ID is first looked up in the <a idl>elementSources</a> map,
	as described in that section.
	If it's not found,
	it's then matched against the document.
	If multiple elements are matched,
	the function references the first such element.

	The image represented by the ''element()'' function can vary based on whether the element is visible in the document:

	<dl>
		<dt>
			an <a title="element-not-rendered">element that is rendered</a>,
			is not a descendant of a replaced element,
			and generates a <a spec=css21>stacking context</a>
		<dd>
			The function represents an image with its intrinsic size equal to the <dfn export>decorated bounding box</dfn> of the referenced element:

			<ul>
				<li>
					for an element rendered using a CSS rendering model,
					the <a>decorated bounding box</a> is the smallest axis-aligned rectangle
					that contains the <a href="http://www.w3.org/TR/2011/CR-css3-background-20110215/#border-image-area">border image areas</a> of all the fragments of the principal box

				<li>
					for an element rendered using the SVG rendering model,
					<a href="http://www.w3.org/TR/SVGTiny12/intro.html#TermDecoratedBoundingBox">the decorated bounding box is defined by SVG</a>
			</ul>

			Note: Because images clip anything outside their bounds by default,
			this means that decorations that extend outside the <a>decorated bounding box</a>,
			like box shadows,
			may be clipped.

			The image is constructed by rendering the referenced element and its descendants
			(at the same size that they would be in the document)
			over an infinite ''transparent'' canvas,
			positioned so that the edges of the <a>decorated bounding box</a> are flush with the edges of the image.

			<p class='issue'>
				Requiring some degree of stacking context on the element appears to be required for an efficient implementation.
				Do we need a full stacking context, or just a pseudo-stacking context?
				Should it need to be a stacking context normally,
				or can we just render it as a stacking context when rendering it to element()?

			If the referenced element has a transform applied to it or an ancestor,
			the transform must be ignored when rendering the element as an image.  [[!CSS3-TRANSFORMS]]

			If the referenced element is broken across pages,
			the element is displayed as if the page content areas were joined flush in the pagination direction,
			with pages' edges corresponding to the initial containing block's start edge aligned.
			<span class='note'>Elements broken across lines or columns are just rendered with their <a>decorated bounding box</a>.</span>

			Implementations may either re-use existing bitmap data generated for the referenced element
			or regenerate the display of the element to maximize quality at the image's size
			(for example, if the implementation detects that the referenced element is an SVG fragment);
			in the latter case, the layout of the referenced element in the image must not be changed by the regeneration process.
			That is, the image must look identical to the referenced element,
			modulo rasterization quality.

			<div class='example'>

				As a somewhat silly example, a <code>&lt;p></code> element can be reused as a background elsewhere in the document:

				<pre>
					&lt;style>
					#src { color: white; background: lime; width: 300px; height: 40px; }
					#dst { color: black; background: element(#src); padding: 20px; margin: 20px 0; }
					&lt;/style>
					&lt;p id='src'>I'm an ordinary element!&lt;/p>
					&lt;p id='dst'>I'm using the previous element as my background!&lt;/p>
				</pre>

				<img src="images/element-function.png" alt="">
			</div>


		<dt>an <a title='element-not-rendered'>element that is not rendered</a>, but which provides a <a>paint source</a>
		<dd>
			The function represents an image with the intrinsic size and appearance of the <a>paint source</a>.
			The host language defines the size and appearance of paint sources.

			<div class='example'>
				For example, the ''element()'' function can reference an SVG <code>&lt;pattern></code> element in an HTML document:

				<pre>
					&lt;!DOCTYPE html>
					&lt;svg>
						&lt;defs>
							&lt;pattern id='pattern1'>
								&lt;path d='...'>
							&lt;/pattern>
						&lt;/defs>
					&lt;/svg>
					&lt;p style="background: element(#pattern1)">
						I'm using the pattern as a background!
						If the pattern is changed or animated,
						my background will be updated too!
					&lt;/p>
				</pre>

				HTML also defines that a handful of elements,
				such as <code>&lt;canvas></code>, <code>&lt;img></code>, and <code>&lt;video></code>,
				provide a paint source.
				This means that CSS can, for example,
				reference a canvas that's being drawn into,
				but not displayed in the page:

				<pre>
					&lt;!DOCTYPE html>
					&lt;script>
						var canvas = document.querySelector('#animated-bullet');
						canvas.width = 20; canvas.height = 20;
						drawAnimation(canvas);
					&lt;/script>
					&lt;canvas id='animated-bullet' style='display:none'>&lt;/canvas>
					&lt;ul style="list-style-image: element(#animated-bullet);">
						&lt;li>I'm using the canvas as a bullet!&lt;/li>
						&lt;li>So am I!&lt;/li>
						&lt;li>As the canvas is changed over time with Javascript,
						    we'll all update our bullet image with it!&lt;/li>
					&lt;/ul>
				</pre>
			</div>


		<dt>anything else
		<dd>

			The function represents an <a>invalid image</a>.

			<div class='example'>

				For example, all of the following ''element()'' uses will result in a transparent background:

				<pre>
					&lt;!DOCTYPE html>
					&lt;p id='one' style="display:none;">one&lt;/p>
					&lt;iframe src="http://example.com">
						&lt;p id='two'>I'm fallback content!&lt;/p>
					&lt;/iframe>
					&lt;ul>
						&lt;li style="background: element(#one);">
						  A display:none element isn't rendered, and a P element
						  doesn't provide a paint source.
						&lt;/li>
						&lt;li style="background: element(#two);">
						  The descendants of a replaced element like an IFRAME
						  can't be used in element() either.
						&lt;/li>
						&lt;li style="background: element(#three);">
						  There's no element with an id of "three", so this also
						  gets rendered as a transparent image.
						&lt;/li>
					&lt;/ul>
				</pre>
			</div>

	</dl>

	An element is <dfn export id='element-not-rendered' title='element-not-rendered'>not rendered</dfn> if it does not have an associated box.
	This can happen, for example,
	if the element or an ancestor is ''display:none''.
	Host languages may define additional ways in which an element can be considered not rendered;
	for example, in SVG,
	any descendant of a <code>&lt;defs></code> element is considered to be not rendered.

	<div class='example'>

		The ''element()'' function can be put to many uses.
		For example, it can be used to show a preview of the previous or next slide in a slideshow:

		<pre>
			&lt;!DOCTYPE html>
			&lt;script>
			function navigateSlides() {
				var currentSlide = ...;
				document.querySelector('#prev-slide').id = '';
				document.querySelector('#next-slide').id = '';
				currentSlide.previousElementSibling.id = 'prev-slide';
				currentSlide.nextElementSibling.id = 'next-slide';
			}
			&lt;/script>
			&lt;style>
			#prev-preview, #next-preview {
				position: fixed;
				...
			}
			#prev-preview { background: element(#prev-slide); }
			#next-preview { background: element(#next-slide); }
			&lt;/style>
			&lt;a id='prev-preview'>Previous Slide&lt;/a>
			&lt;a id='next-preview'>Next Slide&lt;/a>
			&lt;section class='slide'>...&lt;/section>
			&lt;section class='slide current-slide'>...&lt;/section>
			...
		</pre>

		In this example, the <code>navigateSlides</code> function updates the ids of the next and previous slides,
		which are then displayed in small floating boxes alongside the slides.
		Since you can't interact with the slides through the ''element()'' function (it's just an image),
		you could even use <code>click</code> handlers on the preview boxes to help navigate through the page.
	</div>

<h4 id='paint-sources'>
Paint Sources</h4>

	Host languages may define that some elements provide a <dfn export>paint source</dfn>.
	Paint sources have an intrinsic width, height, and appearance,
	separate from the process of rendering,
	and so may be used as images even when they're <a title='element-not-rendered'>not rendered</a>.

	In HTML, the <code>&lt;img></code>, <code>&lt;video></code>, and <code>&lt;canvas></code> elements provide paint sources
	(defined in each element's section in <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/'>HTML5</a>).

	In SVG, any element that provides a <a href='http://www.w3.org/TR/SVG/pservers.html'>paint server</a> provides a paint source.
	<span class='note'>Note: In SVG1.1,
		the <code>&lt;linearGradient></code>,
		<code>&lt;radialGradient></code>,
		and <code>&lt;pattern></code> elements
		provide paint sources.</span>
	They are drawn as described in the spec,
	with the coordinate systems defined as follows:

	<dl>
		<dt>objectBoundingBox
		<dd>
			The coordinate system has its origin at the top left corner of the rectangle defined by the <a>concrete object size</a> that it's being drawn into,
			and the same width and height as the <a>concrete object size</a>.
			A single <a href="http://www.w3.org/TR/SVG/coords.html#Units">user coordinate</a> is the width and height of the <a>concrete object size</a>.

		<dt>userSpaceOnUse
		<dd>
			The coordinate system has its origin at the top left corner of the rectangle defined by the <a>concrete object size</a> that it's being drawn into,
			and the same width and height as the <a>concrete object size</a>.
			<a href="http://www.w3.org/TR/SVG/coords.html#Units">User coordinates</a> are sized equivalently to the CSS ''px'' unit.
	</dl>

	Note: It is expected that a future version of this module will define ways to refer to paint sources in external documents,
	or ones that are created solely by script and never inserted into a document at all.

<h4 id='elementsources'>
Using Out-Of-Document Sources: the <code>ElementSources</code> interface</h4>

	The ''element()'' function normally selects elements within a document,
	but elements that provide a <a>paint source</a> don't necessarily need to be in-document.
	For example, an HTML <code>&lt;canvas></code> element can be created, maintained, and drawn into entirely in script,
	with no need for it to be inserted into the document directly.

	All that's needed is a way to refer to the element,
	as an ID selector cannot select elements outside of the document.
	The <a idl>elementSources</a> Map object provides this.

	<pre class='idl'>
		partial interface CSS {
			[SameObject] readonly attribute Map elementSources;
		};
	</pre>

	Any entries in the <a idl>elementSources</a> map with a string key
	and a value that is an object providing a <a>paint source</a>
	are made available to the ''element()'' function.

	Whenever ''element()'' uses an <<id-selector>>,
	the ID's value (without the leading <code>#</code> character)
	is first looked up in the <a idl>elementSources</a> map:

	<ul>
		<li>
			If it's found,
			and the object associated with it provides a <a>paint source</a>,
			the ''element()'' function represents that paint source.

		<li>
			If it's found,
			but the object associated with it <em>doesn't</em> provide a <a>paint source</a>,
			the ''element()'' function represent an <a>invalid image</a>.

		<li>
			If the ID isn't found in the map at all,
			it's then looked for in the document as normal.
	</ul>

	<p class='issue'>
		This reuse of the ID selector matches Moz behavior.
		I'm trying to avoid slapping a <<custom-ident>> right in the beginning of the grammar,
		as that eats too much syntax-space.
		Another possibility, though, is to start the value with a language-defined keyword
		<em>followed by</em> a <<custom-ident>>,
		like ''element(external fancy)'' or something.
		Naming suggestions welcome.

	<div class='example'>
		For example, fancy animating backgrounds can be done with an external canvas:

		<pre>
			&lt;script>
			var bg = document.createElement('canvas');
			bg.height = 200;
			bg.width = 1000;
			drawFancyBackground(bg);
			CSS.elementSources.set('fancy', bg);
			&lt;/script>
			&lt;style>
			h1 {
				background-image: element(#fancy);
			}
			&lt;/style>
		</pre>

		As the "fancy" canvas is drawn into and animated,
		the backgrounds of all the H1 elements will automatically update in tandem.

		Note that the <a idl>elementSources</a> map is consulted <em>before</em> the document
		to match the ID selector,
		so even if there's an element in the document that would match ''#fancy'',
		the backgrounds will still predictably come from the <a idl>elementSources</a> value instead.
	</div>

<h4 id='element-cycles'>
Cycle Detection</h4>

	The ''element()'' function can produce nonsensical circular relationships,
	such as an element using itself as its own background.
	These relationships can be easily and reliably detected and resolved, however,
	by keeping track of a dependency graph and using common cycle-detection algorithms.

	The dependency graph consists of edges such that:

	<ul>
		<li>
			every element depends on its children

		<li>
			for any element A with a property using the ''element()'' function pointing to an element B,
			A depends on B

		<li>
			if a host language defines a way for elements to refer to the rendering of other elements,
			the referencing element depends on the referenced element.
			For example, in SVG,
			a <code>&lt;use></code> element depends on the element it referenced.
	</ul>

	If the graph contains a cycle,
	any ''element()'' functions participating in the cycle are <a>invalid images</a>.


<!--
                                                                                                                                            dddddddd
        CCCCCCCCCCCCC                                                                          ffffffffffffffff                             d::::::d
     CCC::::::::::::C                                                                         f::::::::::::::::f                            d::::::d
   CC:::::::::::::::C                                                                        f::::::::::::::::::f                           d::::::d
  C:::::CCCCCCCC::::C                                                                        f::::::fffffff:::::f                           d:::::d
 C:::::C       CCCCCCrrrrr   rrrrrrrrr      ooooooooooo       ssssssssss       ssssssssss    f:::::f       ffffffaaaaaaaaaaaaa      ddddddddd:::::d     eeeeeeeeeeee
C:::::C              r::::rrr:::::::::r   oo:::::::::::oo   ss::::::::::s    ss::::::::::s   f:::::f             a::::::::::::a   dd::::::::::::::d   ee::::::::::::ee
C:::::C              r:::::::::::::::::r o:::::::::::::::oss:::::::::::::s ss:::::::::::::s f:::::::ffffff       aaaaaaaaa:::::a d::::::::::::::::d  e::::::eeeee:::::ee
C:::::C              rr::::::rrrrr::::::ro:::::ooooo:::::os::::::ssss:::::ss::::::ssss:::::sf::::::::::::f                a::::ad:::::::ddddd:::::d e::::::e     e:::::e
C:::::C               r:::::r     r:::::ro::::o     o::::o s:::::s  ssssss  s:::::s  ssssss f::::::::::::f         aaaaaaa:::::ad::::::d    d:::::d e:::::::eeeee::::::e
C:::::C               r:::::r     rrrrrrro::::o     o::::o   s::::::s         s::::::s      f:::::::ffffff       aa::::::::::::ad:::::d     d:::::d e:::::::::::::::::e
C:::::C               r:::::r            o::::o     o::::o      s::::::s         s::::::s    f:::::f            a::::aaaa::::::ad:::::d     d:::::d e::::::eeeeeeeeeee
 C:::::C       CCCCCC r:::::r            o::::o     o::::ossssss   s:::::s ssssss   s:::::s  f:::::f           a::::a    a:::::ad:::::d     d:::::d e:::::::e
  C:::::CCCCCCCC::::C r:::::r            o:::::ooooo:::::os:::::ssss::::::ss:::::ssss::::::sf:::::::f          a::::a    a:::::ad::::::ddddd::::::dde::::::::e
   CC:::::::::::::::C r:::::r            o:::::::::::::::os::::::::::::::s s::::::::::::::s f:::::::f          a:::::aaaa::::::a d:::::::::::::::::d e::::::::eeeeeeee
     CCC::::::::::::C r:::::r             oo:::::::::::oo  s:::::::::::ss   s:::::::::::ss  f:::::::f           a::::::::::aa:::a d:::::::::ddd::::d  ee:::::::::::::e
        CCCCCCCCCCCCC rrrrrrr               ooooooooooo     sssssssssss      sssssssssss    fffffffff            aaaaaaaaaa  aaaa  ddddddddd   ddddd    eeeeeeeeeeeeee
-->

<h3 id='cross-fade-function'>
Combining images: the ''cross-fade()'' notation</h3>

	When transitioning between images,
	CSS requires a way to explicitly refer to the intermediate image
	that is a combination of the start and end images.
	This is accomplished with the ''cross-fade()'' function,
	which indicates the two images to be combined
	and how far along in the transition the combination is.

	Note: Authors can also use the ''cross-fade()'' function for many simple image manipulations,
	such as tinting an image with a solid color
	or highlighting a particular area of the page by combining an image with a radial gradient.

	The syntax for ''cross-fade()'' is defined as:

	<pre class=prod><dfn>cross-fade()</dfn> = cross-fade( [ <<percentage>>? && <<image>> ] [, <<image>> | <<color>> ]? )</pre>

	The function represents an image generated by
	combining two images.

	The <<percentage>> represents how much of the first image is retained
	when it is blended with the second image.
	The <<percentage>> must be between ''0%'' and ''100%'' inclusive;
	any other value is invalid.
	If omitted,
	it defaults to the value ''50%''.

	If the last argument is a <<color>>,
	it represents a solid-color image with the same intrinsic dimensions as the first image.
	If omitted,
	it defaults to the color ''transparent''.

	More precisely,
	given ''cross-fade(<var>p</var> <var>A</var>, <var>B</var>)'',
	where <var>A</var> and <var>B</var> are images
	and <var>p</var> is a percentage between 0% and 100%,
	the function represents an image
	with width equal to <code>width<sub>A</sub> &times; <var>p</var> + width<sub>B</sub> &times; (1-<var>p</var>)</code>
	and height equal to <code>height<sub>A</sub> &times; <var>p</var> + height<sub>B</sub> &times; (1-<var>p</var>)</code>.
	The contents of the image must be constructed by
	first scaling <var>A</var> and <var>B</var> to the size of the generated image,
	then applying <code>dissolve(<var>A</var>,<var>p</var>) plus dissolve(<var>B</var>,1-<var>p</var>)</code>.
	The "dissolve()" function and "plus" compositing operator are defined in the literature by Porter-Duff. [[PORTERDUFF]]


<!--
                                                                    dddddddd
        GGGGGGGGGGGGG                                               d::::::d  iiii                                                 tttt
     GGG::::::::::::G                                               d::::::d i::::i                                             ttt:::t
   GG:::::::::::::::G                                               d::::::d  iiii                                              t:::::t
  G:::::GGGGGGGG::::G                                               d:::::d                                                     t:::::t
 G:::::G       GGGGGGrrrrr   rrrrrrrrr   aaaaaaaaaaaaa      ddddddddd:::::d iiiiiii     eeeeeeeeeeee    nnnn  nnnnnnnn    ttttttt:::::ttttttt        ssssssssss
G:::::G              r::::rrr:::::::::r  a::::::::::::a   dd::::::::::::::d i:::::i   ee::::::::::::ee  n:::nn::::::::nn  t:::::::::::::::::t      ss::::::::::s
G:::::G              r:::::::::::::::::r aaaaaaaaa:::::a d::::::::::::::::d  i::::i  e::::::eeeee:::::een::::::::::::::nn t:::::::::::::::::t    ss:::::::::::::s
G:::::G    GGGGGGGGGGrr::::::rrrrr::::::r         a::::ad:::::::ddddd:::::d  i::::i e::::::e     e:::::enn:::::::::::::::ntttttt:::::::tttttt    s::::::ssss:::::s
G:::::G    G::::::::G r:::::r     r:::::r  aaaaaaa:::::ad::::::d    d:::::d  i::::i e:::::::eeeee::::::e  n:::::nnnn:::::n      t:::::t           s:::::s  ssssss
G:::::G    GGGGG::::G r:::::r     rrrrrrraa::::::::::::ad:::::d     d:::::d  i::::i e:::::::::::::::::e   n::::n    n::::n      t:::::t             s::::::s
G:::::G        G::::G r:::::r           a::::aaaa::::::ad:::::d     d:::::d  i::::i e::::::eeeeeeeeeee    n::::n    n::::n      t:::::t                s::::::s
 G:::::G       G::::G r:::::r          a::::a    a:::::ad:::::d     d:::::d  i::::i e:::::::e             n::::n    n::::n      t:::::t    ttttttssssss   s:::::s
  G:::::GGGGGGGG::::G r:::::r          a::::a    a:::::ad::::::ddddd::::::ddi::::::ie::::::::e            n::::n    n::::n      t::::::tttt:::::ts:::::ssss::::::s
   GG:::::::::::::::G r:::::r          a:::::aaaa::::::a d:::::::::::::::::di::::::i e::::::::eeeeeeee    n::::n    n::::n      tt::::::::::::::ts::::::::::::::s
     GGG::::::GGG:::G r:::::r           a::::::::::aa:::a d:::::::::ddd::::di::::::i  ee:::::::::::::e    n::::n    n::::n        tt:::::::::::tt s:::::::::::ss
        GGGGGG   GGGG rrrrrrr            aaaaaaaaaa  aaaa  ddddddddd   dddddiiiiiiii    eeeeeeeeeeeeee    nnnnnn    nnnnnn          ttttttttttt    sssssssssss

-->


<h2 id="gradients">
Gradients</h2>

	A gradient is an image that smoothly fades from one color to another.
	These are commonly used for subtle shading in background images, buttons, and many other things.
	The gradient notations described in this section allow an author to specify such an image in a terse syntax,
	so that the UA can generate the image automatically when rendering the page.
	The syntax of a <<gradient>> is:

	<pre class=prod>
		<dfn>&lt;gradient></dfn> = [
			<<linear-gradient()>> | <<repeating-linear-gradient()>> |
			<<radial-gradient()>> | <<repeating-radial-gradient()>> |
			<<conic-gradient()>>  | <<repeating-conic-gradient()>> ]
	</pre>

	<div class=example>

		As with the other <<image>> types defined in this specification,
		gradients can be used in any property that accepts images.
		For example:

		<ul>
			<li><code>background: linear-gradient(white, gray);</code>
			<li><code>list-style-image: radial-gradient(circle, #006, #00a 90%, #0000af 100%, white 100%)</code>
		</ul>
	</div>

	A gradient is drawn into a box with the dimensions of the <a>concrete object size</a>,
	referred to as the <dfn export>gradient box</dfn>.
	However, the gradient itself has no <a>intrinsic dimensions</a>.

	<div class='example'>
		For example, if you use a gradient as a background,
		by default the gradient will draw into a <a>gradient box</a> the size of the element's padding box.
		If 'background-size' is explicitly set to a value such as ''100px 200px'',
		then the <a>gradient box</a> will be 100px wide and 200px tall.
		Similarly, for a gradient used as a 'list-style-image',
		the box would be a 1em square,
		which is the <a>default object size</a> for that property.
	</div>

	Gradients are specified by defining the <dfn>starting point</dfn> and <dfn>ending point</dfn>
	of a <dfn export>gradient line</dfn>
	(which, depending on the type of gradient,
	may be technically a line, or a ray, or a spiral),
	and then specifying colors at points along this line.
	The colors are smoothly blended to fill in the rest of the line,
	and then each type of gradient defines how to use the color of the <a>gradient line</a> to produce the actual gradient.


<!--
LLLLLLLLLLL               iiii
L:::::::::L              i::::i
L:::::::::L               iiii
LL:::::::LL
  L:::::L               iiiiiiinnnn  nnnnnnnn        eeeeeeeeeeee    aaaaaaaaaaaaa  rrrrr   rrrrrrrrr
  L:::::L               i:::::in:::nn::::::::nn    ee::::::::::::ee  a::::::::::::a r::::rrr:::::::::r
  L:::::L                i::::in::::::::::::::nn  e::::::eeeee:::::eeaaaaaaaaa:::::ar:::::::::::::::::r
  L:::::L                i::::inn:::::::::::::::ne::::::e     e:::::e         a::::arr::::::rrrrr::::::r
  L:::::L                i::::i  n:::::nnnn:::::ne:::::::eeeee::::::e  aaaaaaa:::::a r:::::r     r:::::r
  L:::::L                i::::i  n::::n    n::::ne:::::::::::::::::e aa::::::::::::a r:::::r     rrrrrrr
  L:::::L                i::::i  n::::n    n::::ne::::::eeeeeeeeeee a::::aaaa::::::a r:::::r
  L:::::L         LLLLLL i::::i  n::::n    n::::ne:::::::e         a::::a    a:::::a r:::::r
LL:::::::LLLLLLLLL:::::Li::::::i n::::n    n::::ne::::::::e        a::::a    a:::::a r:::::r
L::::::::::::::::::::::Li::::::i n::::n    n::::n e::::::::eeeeeeeea:::::aaaa::::::a r:::::r
L::::::::::::::::::::::Li::::::i n::::n    n::::n  ee:::::::::::::e a::::::::::aa:::ar:::::r
LLLLLLLLLLLLLLLLLLLLLLLLiiiiiiii nnnnnn    nnnnnn    eeeeeeeeeeeeee  aaaaaaaaaa  aaaarrrrrrr
-->


<h3 id='linear-gradients'>
Linear Gradients: the ''linear-gradient()'' notation</h3>

	A linear gradient is created by specifying a straight <a>gradient line</a>,
	and then several colors placed along that line.
	The image is constructed by creating an infinite canvas
	and painting it with lines perpendicular to the gradient line,
	with the color of the painted line being the color of the gradient line where the two intersect.
	This produces a smooth fade from each color to the next,
	progressing in the specified direction.

<h4 class='no-toc' id='linear-gradient-syntax'>
linear-gradient() syntax</h4>

The linear gradient syntax is:

	<pre class=prod>
		<dfn>linear-gradient()</dfn> = linear-gradient(
			[ [ <<angle>> | to <<side-or-corner>> ] ,]?
			<<color-stop-list>>
		)
		<dfn>&lt;side-or-corner></dfn> = [left | right] || [top | bottom]
	</pre>

	The first argument to the function specifies the <a>gradient line</a>,
	which gives the gradient a direction and determines how color-stops are positioned.
	It may be omitted;
	if so, it defaults to ''to bottom''.

	The <a>gradient line's</a> direction may be specified in two ways:

	<dl>
		<dt>using angles
		<dd>
			For the purpose of this argument,
			''0deg'' points upward,
			and positive angles represent clockwise rotation,
			so ''90deg'' point toward the right.

		<dt>using keywords
		<dd>
			If the argument is ''to top'', ''to right'', ''to bottom'', or ''to left'',
			the angle of the <a>gradient line</a> is ''0deg'', ''90deg'', ''180deg'', or ''270deg'', respectively.

			If the argument instead specifies a corner of the box such as ''to top left'',
			the <a>gradient line</a> must be angled such that it points into the same quadrant as the specified corner,
			and is perpendicular to a line intersecting the two neighboring corners of the <a>gradient box</a>.
			<span class='note'>This causes a color-stop at 50% to intersect the two neighboring corners (see <a href='#corner-gradient-example'>example</a>).</span>
	</dl>

	Starting from the center of the <a>gradient box</a>,
	extend a line at the specified angle in both directions.
	The ending point is the point on the <a>gradient line</a>
	where a line drawn perpendicular to the <a>gradient line</a>
	would intersect the corner of the <a>gradient box</a> in the specified direction.
	The starting point is determined identically, but in the opposite direction.

	Note: It is expected that the next level of this module will provide the ability to define the gradient's direction relative to the current text direction and writing-mode.

	<div class=example>
		<div style="overflow: hidden">
			<img style="float: right; margin-left: 1em;" src='images/gradient-diagram.png' alt="[An image showing a box with a background shading gradually from white in the bottom-left corner to black in the top-right corner.  There is a line, illustrating the gradient line, angled at 45 degrees and passing through the center of the box.  The starting point and ending point of the gradient line are indicated by the intersection of the gradient line with two additional lines that pass through the bottom-left and top-right corners of the box.]">

			This example illustrates visually how to calculate the <a>gradient line</a> from the rules above.
			This shows the starting and ending point of the <a>gradient line</a>,
			long with the actual gradient,
			produced by an element with ''background: linear-gradient(45deg, white, black);''.

			Notice how, though the starting point and ending point are outside of the box,
			they're positioned precisely right so that the gradient is pure white <em>exactly</em> at the corner,
			and pure black <em>exactly</em> at the opposite corner.
			That's intentional, and will always be true for linear gradients.
		</div>
	</div>

	<div class=note>
		Given:

		<ul>
			<li>
				<var>A</var> the angle defining the gradient line’s direction
				such that 0 degrees points upwards and positive angles represent clockwise rotation,
			<li><var>W</var> the width of the gradient box,
			<li><var>H</var> the height of the gradient box,
		</ul>

		The length of the gradient line (between the starting and ending point) is:
		<code>abs(W * sin(A)) + abs(H * cos(A))</code>
	</div>

	The gradient's color stops are typically placed between the starting point and ending point on the <a>gradient line</a>,
	but this isn't required -
	the <a>gradient line</a> extends infinitely in both directions.
	The starting point and ending point are merely arbitrary location markers -
	the starting point defines where 0%, 0px, etc are located when specifying color-stops,
	and the ending point defines where 100% is located.
	Color-stops are allowed to have positions before 0% or after 100%.

	The color of the gradient at any point is determined
	by finding the unique line passing through that point that is perpendicular to the <a>gradient line</a>.
	The point's color is the color of the <a>gradient line</a>
	at the point where this line intersects it.


<h4 class='no-toc' id='linear-gradient-examples'>
Linear Gradient Examples</h4>

	All of the following ''linear-gradient()'' examples are presumed to be backgrounds applied to a box that is 200px wide and 100px tall.

	<div class=example>
		Below are various ways of specifying a basic vertical gradient:

		<pre>
			linear-gradient(yellow, blue);
			linear-gradient(to bottom, yellow, blue);
			linear-gradient(180deg, yellow, blue);
			linear-gradient(to top, blue, yellow);
			linear-gradient(to bottom, yellow 0%, blue 100%);
		</pre>

		<img src="images/linear1.png" alt="" >
	</div>

	<div class=example>
		This demonstrates the use of an angle in the gradient.
		Note that, though the angle is not exactly the same as the angle between the corners,
		the <a>gradient line</a> is still sized so as to make the gradient yellow exactly at the upper-left corner,
		and blue exactly at the lower-right corner.

		<pre>
			linear-gradient(135deg, yellow, blue);
			linear-gradient(-45deg, blue, yellow);
		</pre>

		<img src="images/linear3.png" alt="" >
	</div>

	<div class=example>

		This demonstrates a 3-color gradient, and how to specify the location of a stop explicitly:

		<pre>linear-gradient(yellow, blue 20%, #0f0);</pre>

		<img src="images/linear4.png" alt="" >
	</div>

	<div class=example id='corner-gradient-example'>
		This demonstrates a corner-to-corner gradient specified with keywords.
		Note how the gradient is red and blue exactly in the bottom-left and top-right corners, respectively,
		exactly like the second example.
		Additionally, the angle of the gradient is automatically computed so that the color at 50% (in this case, white)
		stretches across the top-left and bottom-right corners.

		<pre>linear-gradient(to top right, red, white, blue)</pre>

		<object data="images/gradient1.svg" width="200" height="100">(Image requires SVG)</object>
	</div>


<!--
                                                 dddddddd
RRRRRRRRRRRRRRRRR                                d::::::d  iiii                    lllllll
R::::::::::::::::R                               d::::::d i::::i                   l:::::l
R::::::RRRRRR:::::R                              d::::::d  iiii                    l:::::l
RR:::::R     R:::::R                             d:::::d                           l:::::l
  R::::R     R:::::R  aaaaaaaaaaaaa      ddddddddd:::::d iiiiiii   aaaaaaaaaaaaa    l::::l
  R::::R     R:::::R  a::::::::::::a   dd::::::::::::::d i:::::i   a::::::::::::a   l::::l
  R::::RRRRRR:::::R   aaaaaaaaa:::::a d::::::::::::::::d  i::::i   aaaaaaaaa:::::a  l::::l
  R:::::::::::::RR             a::::ad:::::::ddddd:::::d  i::::i            a::::a  l::::l
  R::::RRRRRR:::::R     aaaaaaa:::::ad::::::d    d:::::d  i::::i     aaaaaaa:::::a  l::::l
  R::::R     R:::::R  aa::::::::::::ad:::::d     d:::::d  i::::i   aa::::::::::::a  l::::l
  R::::R     R:::::R a::::aaaa::::::ad:::::d     d:::::d  i::::i  a::::aaaa::::::a  l::::l
  R::::R     R:::::Ra::::a    a:::::ad:::::d     d:::::d  i::::i a::::a    a:::::a  l::::l
RR:::::R     R:::::Ra::::a    a:::::ad::::::ddddd::::::ddi::::::ia::::a    a:::::a l::::::l
R::::::R     R:::::Ra:::::aaaa::::::a d:::::::::::::::::di::::::ia:::::aaaa::::::a l::::::l
R::::::R     R:::::R a::::::::::aa:::a d:::::::::ddd::::di::::::i a::::::::::aa:::al::::::l
RRRRRRRR     RRRRRRR  aaaaaaaaaa  aaaa  ddddddddd   dddddiiiiiiii  aaaaaaaaaa  aaaallllllll
-->


<h3 id='radial-gradients'>
Radial Gradients: the ''radial-gradient()'' notation</h3>

	In a radial gradient,
	rather than colors smoothly fading from one side of the <a>gradient box</a> to the other
	as with linear gradients,
	they instead emerge from a single point
	and smoothly spread outward in a circular or elliptical shape.

	A radial gradient is specified by indicating the center of the gradient
	(where the 0% ellipse will be)
	and the size and shape of the <dfn>ending shape</dfn>
	(the 100% ellipse).
	Color stops are given as a list,
	just as for ''linear-gradient()''.
	Starting from the <a>gradient center</a>
	and progressing towards (and potentially beyond) the <a>ending shape</a>
	uniformly-scaled concentric ellipses are drawn and colored
	according to the specified color stops.


<h4 class='no-toc' id='radial-gradient-syntax'>
radial-gradient() Syntax</h4>

	The radial gradient syntax is:

	<pre>
		<dfn>radial-gradient()</dfn> = radial-gradient(
		  [ [ <<ending-shape>> || <<size>> ] [ at <<position>> ]? , |
		    at <<position>>,
		  ]?
		  <<color-stop-list>>
		)
	</pre>

	<div class=example>
		Here is an example of a circular radial gradient 5em wide
		and positioned with its center in the top left corner:

		<pre>radial-gradient(5em circle at top left, yellow, blue)</pre>
	</div>

	<p class='issue'>
		We should add the ability to move the focus of the gradient,
		as in the original -webkit-gradient() function.
		See proposal in <a href="http://lists.w3.org/Archives/Public/www-style/2011Nov/0210.html">http://lists.w3.org/Archives/Public/www-style/2011Nov/0210.html</a>
		for "from <<position>>" and "from offset <<offset>>".

	The arguments are defined as follows:

	<dl dfn-type=value dfn-for="radial-gradient() repeating-radial-gradient()">
		<dt><dfn><<position>></dfn>
		<dd>
			Determines the <dfn dfn>gradient center</dfn> of the gradient.
			The <<position>> value type
			(which is also used for 'background-position')
			is defined in [[!CSS3VAL]],
			and is resolved using the center-point as the object area
			and the <a>gradient box</a> as the positioning area.
			If this argument is omitted,
			it defaults to ''center''.

		<dt><dfn><<ending-shape>></dfn>
		<dd>
			Can be either ''circle'' or ''ellipse'';
			determines whether the gradient's <a>ending shape</a> is a circle or an ellipse, respectively.
			If <<ending-shape>> is omitted,
			the <a>ending shape</a> defaults to a circle
			if the <<size>> is a single <<length>>,
			and to an ellipse otherwise.

		<dt><dfn><<size>></dfn>
		<dd>
			Determines the size of the gradient's <a>ending shape</a>.
			If omitted it defaults to ''farthest-corner''.
			It can be given explicitly or by keyword.
			For the purpose of the keyword definitions,
			consider the <a>gradient box</a> edges as extending infinitely in both directions,
			rather than being finite line segments.

			If the ending-shape is an ellipse,
			its axises are aligned with the horizontal and vertical axises.

			Both ''circle'' and ''ellipse'' gradients accept the following keywords as their <dfn type for=''>&lt;size></dfn>:

			<dl dfn-for="<size>">
				<dt><dfn>closest-side</dfn>
				<dd>
					The <a>ending shape</a> is sized so that
					it exactly meets the side of the <a>gradient box</a> closest to the gradient's center.
					If the shape is an ellipse,
					it exactly meets the closest side in each dimension.

				<dt><dfn>farthest-side</dfn>
				<dd>
					Same as ''closest-side'',
					except the <a>ending shape</a> is sized based on the farthest side(s).

				<dt><dfn>closest-corner</dfn>
				<dd>
					The <a>ending shape</a> is sized so that
					it passes through the corner of the <a>gradient box</a> closest to the gradient's center.
					If the shape is an ellipse,
					the <a>ending shape</a> is given the same aspect-ratio it would have if ''closest-side'' were specified.

				<dt><dfn>farthest-corner</dfn>
				<dd>
					Same as ''closest-corner'',
					except the <a>ending shape</a> is sized based on the farthest corner.
					If the shape is an ellipse,
					the <a>ending shape</a> is given the same aspect ratio it would have if ''farthest-side'' were specified.
			</dl>

			If <<ending-shape>> is specified as ''circle'' or is omitted,
			the <<size>> may be given explicitly as:

			<dl>
				<dt><dfn for="<size>">&lt;length></dfn>
				<dd>
					Gives the radius of the circle explicitly.
					Negative values are invalid.

					Note: Percentages are <em>not</em> allowed here;
					they can only be used to specify the size of an elliptical gradient,
					not a circular one.
					This restriction exists because there is are multiple reasonable answers as to which dimension the percentage should be relative to.
					A future level of this module may provide the ability to size circles with percentages,
					perhaps with more explicit controls over which dimension is used.

			</dl>

			If <<ending-shape>> is specified as ''ellipse'' or is omitted,
			<<size>> may instead be given explicitly as:

			<dl>
				<dt><dfn for="<size>">[ <<length>> | <<percentage>> ]{2}</dfn>
				<dd>
					Gives the size of the ellipse explicitly.
					The first value represents the horizontal radius,
					the second the vertical radius.
					Percentages values are relative to the corresponding dimension of the <a>gradient box</a>.
					Negative values are invalid.
			</dl>
	</dl>

	<div class='note'>
		Expanded with the above definitions,
		the grammar becomes:

		<pre>
			radial-gradient() = radial-gradient(
			  [ [ circle               || <<length>> ]                          [ at <<position>> ]? , |
			    [ ellipse              || [ <<length>> | <<percentage>> ]{2} ]    [ at <<position>> ]? , |
			    [ [ circle | ellipse ] || <<extent-keyword>> ]                  [ at <<position>> ]? , |
			    at <<position>></span> ,
			  ]?
			  <<color-stop>> [ , <<color-stop>> ]+
			)
			<dfn noexport>&lt;extent-keyword></dfn> = closest-corner | closest-side | farthest-corner | farthest-side
		</pre>
	</div>


<h4 class="no-toc" id="radial-color-stops">
Placing Color Stops</h4>

	Color-stops are placed on a <a>gradient line</a> shaped like a ray
	(a line that starts at one point, and extends infinitely in a one direction),
	similar to the <a>gradient line</a> of linear gradients.
	The <a>gradient line's</a> <a>starting point</a> is at the center of the gradient,
	and it extends toward the right,
	with the <a>ending point</a> on the point where the <a>gradient line</a> intersects the <a>ending shape</a>.
	A color-stop can be placed at a location before 0%;
	though the negative region of the <a>gradient line</a> is never directly consulted for rendering,
	color stops placed there can affect the color of non-negative locations on the <a>gradient line</a> through interpolation or repetition
	(see <a href='#repeating-gradients'>repeating gradients</a>).
	For example, ''radial-gradient(red -50px, yellow 100px)'' produces an elliptical gradient
	that starts with a reddish-orange color in the center
	(specifically, #f50)
	and transitions to yellow.
	Locations greater than 100% simply specify a location a correspondingly greater distance from the center of the gradient.

	The color of the gradient at any point is determined by
	first finding the unique ellipse passing through that point
	with the same center, orientation, and ratio between major and minor axises as the ending-shape.
	The point's color is then the color of the positive section of the <a>gradient line</a> at the location where this ellipse intersects it.

<h4 class="no-toc" id="degenerate-radials">
Degenerate Radial Gradients</h4>

	Some combinations of position, size, and shape
	will produce a circle or ellipse with a radius of 0.
	This will occur, for example,
	if the center is on a <a>gradient box</a> edge and ''closest-side'' or ''closest-corner'' is specified
	or if the size and shape are given explicitly and either of the radiuses is zero.
	In these degenerate cases,
	the gradient must be be rendered as follows:

	<dl>
		<dt>If the <a>ending shape</a> is a circle with zero radius:
		<dd>
			Render as if the <a>ending shape</a> was
			a circle whose radius was an arbitrary very small number greater than zero.
			<span class='note'>This will make the gradient continue to look like a circle.</span>

		<dt>If the <a>ending shape</a> has zero width (regardless of the height):
		<dd>
			Render as if the <a>ending shape</a> was
			an ellipse whose height was an arbitrary very large number
			and whose width was an arbitrary very small number greater than zero.
			<span class='note'>This will make the gradient look similar to a horizontal linear gradient
			that is mirrored across the center of the ellipse.
			It also means that all color-stop positions specified with a percentage resolve to ''0px''.</span>

		<dt>Otherwise, if the <a>ending shape</a> has zero height:
		<dd>
			Render as if the <a>ending shape</a> was
			an ellipse whose width was an arbitrary very large number
			and whose height was an arbitrary very small number greater than zero.
			<span class='note'>This will make the gradient look like a solid-color image
			equal to the color of the last color-stop,
			or equal to the average color of the gradient if it's repeating.</span>
	</dl>

<!-- ====================================================================== -->

<h4 class='no-toc' id='radial-gradient-examples'>
Radial Gradient Examples</h4>

	All of the following examples are applied to a box that is 200px wide and 100px tall.

	<div class=example>
		These examples demonstrate different ways to write the basic syntax for radial gradients:

		<pre>
			radial-gradient(yellow, green);
			radial-gradient(ellipse at center, yellow 0%, green 100%);
			radial-gradient(farthest-corner at 50% 50%, yellow, green);
		</pre>

		<img src="images/radial1.png" alt="" >

		<pre>radial-gradient(circle, yellow, green);</pre>

		<img src="images/radial2.png" alt="" >

		<pre>radial-gradient(red, yellow, green);</pre>

		<img src="images/radial3.png" alt="" >
	</div>

	<div class=example>
		This image shows a gradient originating from somewhere other than the center of the box:

		<pre>radial-gradient(farthest-side at left bottom, red, yellow 50px, green);</pre>

		<img src="images/radial4.png" alt="" >
	</div>

	<div class=example>
		Here we illustrate a ''closest-side'' gradient.

		<pre>
			radial-gradient(closest-side at 20px 30px, red, yellow, green);
			radial-gradient(20px 30px at 20px 30px, red, yellow, green);
		</pre>

		<img src="images/radial6.png" alt="" >

		<pre>
			radial-gradient(closest-side circle at 20px 30px, red, yellow, green);
			radial-gradient(20px 20px at 20px 30px, red, yellow, green);
		</pre>

		<img src="images/radial7.png" alt="" >
	</div>

<!--
        CCCCCCCCCCCCC                                     iiii
     CCC::::::::::::C                                    i::::i
   CC:::::::::::::::C                                     iiii
  C:::::CCCCCCCC::::C
 C:::::C       CCCCCC   ooooooooooo   nnnn  nnnnnnnn    iiiiiii     cccccccccccccccc
C:::::C               oo:::::::::::oo n:::nn::::::::nn  i:::::i   cc:::::::::::::::c
C:::::C              o:::::::::::::::on::::::::::::::nn  i::::i  c:::::::::::::::::c
C:::::C              o:::::ooooo:::::onn:::::::::::::::n i::::i c:::::::cccccc:::::c
C:::::C              o::::o     o::::o  n:::::nnnn:::::n i::::i c::::::c     ccccccc
C:::::C              o::::o     o::::o  n::::n    n::::n i::::i c:::::c
C:::::C              o::::o     o::::o  n::::n    n::::n i::::i c:::::c
 C:::::C       CCCCCCo::::o     o::::o  n::::n    n::::n i::::i c::::::c     ccccccc
  C:::::CCCCCCCC::::Co:::::ooooo:::::o  n::::n    n::::ni::::::ic:::::::cccccc:::::c
   CC:::::::::::::::Co:::::::::::::::o  n::::n    n::::ni::::::i c:::::::::::::::::c
     CCC::::::::::::C oo:::::::::::oo   n::::n    n::::ni::::::i  cc:::::::::::::::c
        CCCCCCCCCCCCC   ooooooooooo     nnnnnn    nnnnnniiiiiiii    cccccccccccccccc
-->

<h3 id='conic-gradients'>
Conic Gradients: the ''conic-gradient()'' notation</h3>

	A conic gradient starts by specifying the center of a circle,
	similar to radial gradients,
	except that conic gradient color-stops are placed <em>around</em> the circumference of the circle,
	rather than on a line emerging from the center,
	causing the color to smoothly transition as you spin around the center,
	rather than as you progress outward from the center.

	A conic gradient is specified by indicating the center of the gradient,
	and then specifying a list of color-stops.
	Unlike linear and radial gradients,
	whose color-stops are placed by specifying a <<length>>,
	the color-stops of a conic gradient are specified with an <<angle>>.
	Rays are then drawn emerging from the center and pointing in all directions,
	with the color of each ray equal to the color of the gradient-line where they intersect it.

	Note: These gradients are called "conic" or "conical"
	because, if the color stops are chosen to be significantly lighter on one side than the other,
	it produces a pattern that looks like a cone observed from above.

<h4 id='conic-gradient-syntax' class='no-toc'>
''conic-gradient()'' Syntax</h4>

	The syntax for a conic gradient is:

	<pre class='prod'>
		<dfn>conic-gradient()</dfn> = conic-gradient(
			[ at <<position>> , ]?
			<<angular-color-stop-list>>
		)
	</pre>

	The <<position>> argument is defined in [!CSS3VAL],
	and is resolved using the center-point as the object area
	and the gradient box as the positioning area.
	If this argument is omitted,
	it defaults to 'at center'.

	<p class='issue'>
		Anything else that might be useful?  Defining the shape of the gradient as elliptical, perhaps?

<h4 id='conic-color-stops' class='no-toc'>
Placing Color Stops</h4>

	Color stops are placed on a <a>gradient line</a> that curves around the center in a circle,
	with both the 0% and 100% locations at 0deg.
	Just like linear gradients,
	0deg points to the top of the page,
	and increasing angles correspond to clockwise movement around the circle.

	Note: It may be more helpful to think of the gradient line as forming a spiral,
	where only the segment from 0deg to 360deg is rendered.
	This avoids any confusion about "overlap" when you have angles outside of the rendered region.

	A color-stop can be placed at a location before 0% or after 100%;
	though these regions are never directly consulted for rendering,
	color stops placed there can affect the color of color-stops within the rendered region
	through interpolation or repetition (see <a href="#repeating-gradients">repeating gradients</a>).
	For example, ''conic-gradient(red -50%, yellow 150%)'' produces a conic gradient
	that starts with a reddish-orange color at 0deg (specifically, #f50),
	and transitions to an orangish-yellow color at 360deg (specifically, #fa0).

	The color of the gradient at any point is determined by first finding the unique ray
	anchored at the center of the gradient that passes through the given point.
	The point's color is then the color of the <a>gradient line</a> at the location where this ray intersects it.

<h4 id='conic-gradient-examples' class='no-toc'>
Conic Gradient Examples</h4>

	<p class='issue'>
		Produce examples.
		Better yet, strike this section, and intermix some examples into the sections above.
		Do this for the other two types of gradients as well.



<!--
RRRRRRRRRRRRRRRRR                                                                                       tttt            iiii
R::::::::::::::::R                                                                                   ttt:::t           i::::i
R::::::RRRRRR:::::R                                                                                  t:::::t            iiii
RR:::::R     R:::::R                                                                                 t:::::t
  R::::R     R:::::R    eeeeeeeeeeee    ppppp   ppppppppp       eeeeeeeeeeee    aaaaaaaaaaaaa  ttttttt:::::ttttttt    iiiiiiinnnn  nnnnnnnn       ggggggggg   ggggg
  R::::R     R:::::R  ee::::::::::::ee  p::::ppp:::::::::p    ee::::::::::::ee  a::::::::::::a t:::::::::::::::::t    i:::::in:::nn::::::::nn    g:::::::::ggg::::g
  R::::RRRRRR:::::R  e::::::eeeee:::::eep:::::::::::::::::p  e::::::eeeee:::::eeaaaaaaaaa:::::at:::::::::::::::::t     i::::in::::::::::::::nn  g:::::::::::::::::g
  R:::::::::::::RR  e::::::e     e:::::epp::::::ppppp::::::pe::::::e     e:::::e         a::::atttttt:::::::tttttt     i::::inn:::::::::::::::ng::::::ggggg::::::gg
  R::::RRRRRR:::::R e:::::::eeeee::::::e p:::::p     p:::::pe:::::::eeeee::::::e  aaaaaaa:::::a      t:::::t           i::::i  n:::::nnnn:::::ng:::::g     g:::::g
  R::::R     R:::::Re:::::::::::::::::e  p:::::p     p:::::pe:::::::::::::::::e aa::::::::::::a      t:::::t           i::::i  n::::n    n::::ng:::::g     g:::::g
  R::::R     R:::::Re::::::eeeeeeeeeee   p:::::p     p:::::pe::::::eeeeeeeeeee a::::aaaa::::::a      t:::::t           i::::i  n::::n    n::::ng:::::g     g:::::g
  R::::R     R:::::Re:::::::e            p:::::p    p::::::pe:::::::e         a::::a    a:::::a      t:::::t    tttttt i::::i  n::::n    n::::ng::::::g    g:::::g
RR:::::R     R:::::Re::::::::e           p:::::ppppp:::::::pe::::::::e        a::::a    a:::::a      t::::::tttt:::::ti::::::i n::::n    n::::ng:::::::ggggg:::::g
R::::::R     R:::::R e::::::::eeeeeeee   p::::::::::::::::p  e::::::::eeeeeeeea:::::aaaa::::::a      tt::::::::::::::ti::::::i n::::n    n::::n g::::::::::::::::g
R::::::R     R:::::R  ee:::::::::::::e   p::::::::::::::pp    ee:::::::::::::e a::::::::::aa:::a       tt:::::::::::tti::::::i n::::n    n::::n  gg::::::::::::::g
RRRRRRRR     RRRRRRR    eeeeeeeeeeeeee   p::::::pppppppp        eeeeeeeeeeeeee  aaaaaaaaaa  aaaa         ttttttttttt  iiiiiiii nnnnnn    nnnnnn    gggggggg::::::g
                                         p:::::p                                                                                                           g:::::g
                                         p:::::p                                                                                               gggggg      g:::::g
                                        p:::::::p                                                                                              g:::::gg   gg:::::g
                                        p:::::::p                                                                                               g::::::ggg:::::::g
                                        p:::::::p                                                                                                gg:::::::::::::g
                                        ppppppppp                                                                                                  ggg::::::ggg

-->


<h3 id='repeating-gradients'>
Repeating Gradients: the ''repeating-linear-gradient()'', ''repeating-radial-gradient()'', and ''repeating-conic-gradient()'' notations</h3>

	In addition to ''linear-gradient()'', ''radial-gradient()'', and ''conic-gradient()'',
	this specification defines <dfn>repeating-linear-gradient()</dfn>,
	<dfn>repeating-radial-gradient()</dfn>,
	and <dfn>repeating-conic-gradient()</dfn> values.
	These notations take the same values
	and are interpreted the same
	as their respective non-repeating siblings defined previously.

	When rendered, however, the color-stops are repeated infinitely in both directions,
	with their positions shifted by multiples of the difference between
	the last specified color-stop's position
	and the first specified color-stop's position.
	For example, ''repeating-linear-gradient(red 10px, blue 50px)''
	is equivalent to ''linear-gradient(..., red -30px, blue 10px, red 10px, blue 50px, red 50px, blue 90px, ...)''.
	Note that the last color-stop and first color-stop will always coincide at the boundaries of each group,
	which will produce sharp transitions if the gradient does not start and end with the same color.

	<div class=example>

			Repeating gradient syntax is identical to that of non-repeating gradients:

		<pre>repeating-linear-gradient(red, blue 20px, red 40px)</pre>
		<img src="images/repeating1.png" alt="">

		<pre>repeating-radial-gradient(red, blue 20px, red 40px)</pre>
		<img src="images/repeating2.png" alt="">

		<pre>repeating-radial-gradient(circle closest-side at 20px 30px, red, yellow, green 100%, yellow 150%, red 200%)</pre>
		<img src="images/repeating3.png" alt="">

		<pre>repeating-conic-gradient(at 20%, white 0deg, white 20deg, red 20deg, red 40deg)</pre>
		<p class='issue'>Insert rendering here.
	</div>

	If the gradient has only a single color-stop,
	it must render as a solid-color image equal to the color of that color-stop.

	If the distance between the first and last color-stops is non-zero,
	but is small enough that the implementation knows that the physical resolution of the output device is insufficient to faithfully render the gradient,
	the implementation must <a title="gradient-average-color">find the average color of the gradient</a>
	and render the gradient as a solid-color image equal to the average color.

	If the distance between the first and last color-stops is zero
	(or rounds to zero due to implementation limitations),
	the implementation must <a title="gradient-average-color">find the average color of a gradient</a>
	with the same number and color of color-stops,
	but with the first and last color-stop an arbitrary non-zero distance apart,
	and the remaining color-stops equally spaced between them.
	Then it must render the gradient as a solid-color image equal to that average color.

	If the width of the ending shape of a repeating radial gradient is non-zero
	and the height is zero,
	or is close enough to zero that the implementation knows that the physical resolution of the output device is insufficient to faithfully render the gradient,
	the implementation must <a title="gradient-average-color">find the average color of the gradient</a>
	and render the gradient as a solid-color image equal to the average color.

	Note: The <a href="#degenerate-radials">Degenerate Radial Gradients</a> section
	describes how the ending shape is adjusted when its width is zero.

	To <dfn title="gradient-average-color">find the average color of a gradient</dfn>,
	run these steps:

	<ol>
		<li>
			Define <var>list</var> as an initially-empty list of premultiplied RGBA colors,
			and <var>total-length</var> as the distance between first and last color stops.

		<li>
			For each adjacent pair of color-stops,
			define <var>weight</var> as half the distance between the two color-stops,
			divided by <var>total-length</var>.
			Add two entries to <var>list</var>,
			the first obtained by representing the color of the first color-stop in premultiplied sRGBA
			and scaling all of the components by <var>weight</var>,
			and the second obtained in the same way with the second color-stop.

		<li>
			Sum the entries of <var>list</var> component-wise to produce the average color,
			and return it.
	</ol>

	Note: As usual, implementations may use whatever algorithm they wish,
	so long as it produces the same result as the above.

	<div class='example'>
		For example, the following gradient is rendered as a solid light-purple image (equal to <code>rgb(75%,50%,75%)</code>):

		<pre class="css">repeating-linear-gradient(red 0px, white 0px, blue 0px);</pre>

		The following gradient would render the same as the previous under normal circumstances
		(because desktop monitors can't faithfully render color-stops 1/10th of a pixel apart),
		but would render as a normal repeating gradient if, for example,
		the author applied "zoom:100;" to the element on which the gradient appears:

		<pre class="css">repeating-linear-gradient(red 0px, white .1px, blue .2px);</pre>
	</div>


<!--
   SSSSSSSSSSSSSSS      tttt
 SS:::::::::::::::S  ttt:::t
S:::::SSSSSS::::::S  t:::::t
S:::::S     SSSSSSS  t:::::t
S:::::S        ttttttt:::::ttttttt       ooooooooooo   ppppp   ppppppppp       ssssssssss
S:::::S        t:::::::::::::::::t     oo:::::::::::oo p::::ppp:::::::::p    ss::::::::::s
 S::::SSSS     t:::::::::::::::::t    o:::::::::::::::op:::::::::::::::::p ss:::::::::::::s
  SS::::::SSSSStttttt:::::::tttttt    o:::::ooooo:::::opp::::::ppppp::::::ps::::::ssss:::::s
    SSS::::::::SS    t:::::t          o::::o     o::::o p:::::p     p:::::p s:::::s  ssssss
       SSSSSS::::S   t:::::t          o::::o     o::::o p:::::p     p:::::p   s::::::s
            S:::::S  t:::::t          o::::o     o::::o p:::::p     p:::::p      s::::::s
            S:::::S  t:::::t    tttttto::::o     o::::o p:::::p    p::::::pssssss   s:::::s
SSSSSSS     S:::::S  t::::::tttt:::::to:::::ooooo:::::o p:::::ppppp:::::::ps:::::ssss::::::s
S::::::SSSSSS:::::S  tt::::::::::::::to:::::::::::::::o p::::::::::::::::p s::::::::::::::s
S:::::::::::::::SS     tt:::::::::::tt oo:::::::::::oo  p::::::::::::::pp   s:::::::::::ss
 SSSSSSSSSSSSSSS         ttttttttttt     ooooooooooo    p::::::pppppppp      sssssssssss
                                                        p:::::p
                                                        p:::::p
                                                       p:::::::p
                                                       p:::::::p
                                                       p:::::::p
                                                       ppppppppp
-->


<h3 id='color-stop-syntax'>
Gradient Color-Stops</h3>

	<pre class=prod>
		<dfn>&lt;color-stop-list></dfn> =
			<<cap-linear-color-stop>> , [ <<linear-color-stop>># , ]? <<cap-linear-color-stop>>
		<dfn>&lt;cap-linear-color-stop></dfn> = <<color>> &amp;&amp; <<color-stop-length>>?
		<dfn>&lt;linear-color-stop></dfn> = <<color>> || <<color-stop-length>>
		<dfn>&lt;color-stop-length></dfn> = [ <<length>> | <<percentage>> ]{1,2}

		<dfn>&lt;angular-color-stop-list></dfn> =
			<<cap-angular-color-stop>> , [ <<angular-color-stop>># , ]? <<cap-angular-color-stop>>H
		<dfn>&lt;cap-angular-color-stop></dfn> = <<color>> &amp;&amp; <<color-stop-angle>>?
		<dfn>&lt;angular-color-stop></dfn> = <<color>> || <<color-stop-angle>>
		<dfn>&lt;color-stop-angle></dfn> = [ <<angle>> | <<percentage>> ]{1,2}

		<dfn>&lt;color-stop></dfn> = <<color-stop-length>> | <<color-stop-angle>>
	</pre>

	<p class='issue'>
		This is past the complexity point where it can be easily understood with just prose.
		Add a diagram illustrating the possibilities,
		preferably for all three kinds of gradients
		(to show off the three shapes of gradient lines).

	The colors in gradients are specified using <a>color stops</a>.
	A <dfn export>color stop</dfn> is a combination of a color and one or two positions.
	(Depending on the type of gradient, that position can be a length, angle, or percentage.)
	While every color stop conceptually has both of these,
	either of them can be omitted when writing a stylesheet.
	(The missing parts are automatically filled in by the user agent.)

	Color stops are organized into a <dfn export>color stop list</dfn>,
	which is a list of one or more <a>color stops</a>.
	The first and last <a>color stops</a> in the list
	must have a color
	(though their position can be omitted).

	<a>Color stops</a> are placed on a <a>gradient line</a>,
	which defines the colors at every point of a gradient.
	The gradient function defines the shape and length of the <a>gradient line</a>,
	along with its <a>starting point</a> and <a>ending point</a>.

	<a>Color stops</a> must be specified in order.
	Percentages refer to the length of the <a>gradient line</a> between the <a>starting point</a> and <a>ending point</a>,
	with 0% being at the starting point
	and 100% being at the ending point.
	Lengths are measured from the <a>starting point</a> in the direction of the <a>ending point</a> along the <a>gradient line</a>.
	Angles are measured with 0deg pointing up,
	and positive angles corresponding to clockwise rotations from there.

	<a>Color stops</a> are usually placed between the <a>starting point</a> and <a>ending point</a>,
	but that's not required;
	the gradient line extends infinitely in both directions,
	and a <a>color stop</a> can be placed at any position on the <a>gradient line</a>.

	A <a>color stop</a> with two locations is mostly equivalent
	to specifying two <a>color stops</a> with the same color,
	one for each position.
	However, if the color is omitted,
	it's treated slightly differently by step 4 in the clean-up algorithm below.
	<span class='note'>Specifying two locations makes it easier to create solid-color "stripes" in a gradient,
		without having to repeat the color twice.</span>

	The position of a <a>color stop</a> can be omitted.
	This causes the <a>color stop</a> to position itself automatically
	between the two surrounding stops.
	If multiple stops in a row lack a position,
	they space themselves out equally.

	Similarly, the color of a <a>color stop</a> can be omitted.
	The causes the <em>color</em> to be automatically computed
	to halfway between the two surrounding stops,
	so that the "midpoint" of a transition can be easily adjusted.
	If multiple stops in a row lack a color,
	they space themselves out equally in "color space",
	giving more control over the smoothness of the transition.

	The following steps must be applied <em>in order</em> to process the list of <a>color stops</a>.
	After applying these rules,
	all <a>color stops</a> will have a definite position and color
	and they will be in ascending order:

	<ol>
		<li>
			If the first <a>color stop</a> does not have a position,
			set its position to 0%.
			If the last <a>color stop</a> does not have a position,
			set its position to 100%.

		<li>
			If a <a>color stop</a> has a position that is less than the specified position of any <a>color stop</a> before it in the list,
			set its position to be equal to the largest specified position of any <a>color stop</a> before it.

		<li>
			If any <a>color stop</a> still does not have a position,
			then, for each run of adjacent <a>color stops</a> without positions,
			set their positions so that they are evenly spaced between the preceding and following <a>color stops</a> with positions.

		<li>
			If any <a>color stop</a> does not have a color,
			then, for each run of adjacent <a>color stops</a> without colors,
			set their colors to be evenly spaced linear interpolations in premultiplied sRGBA space
			between the preceding and following <a>color stops</a> with colors.
			Note that a <a>color stop</a> with two positions is still counted as a single <a>color stop</a> by this step,
			so both positions will be assigned the same color.
	</ol>

	<p class='issue'>
		This requires us to wait until <em>after</em> layout to do fix-up,
		because implied-position stops (set by step 3)
		may depend on stops that need layout information to place,
		and which may be corrected by step 2.
		Swapping steps 2 and 3 would let us interpolate <a>color stops</a> purely at computed-value time,
		which is a nice plus,
		at the cost of changing behavior from level 3 for some edge cases that triggered fixup.
		Make sure this is handled well in the serialization rules.

	At each <a>color stop</a> position,
	the line is the color of the <a>color stop</a>.
	Between two <a>color stops</a>,
	the line's color is linearly interpolated between the colors of the two <a>color stops</a>,
	with the interpolation taking place in premultiplied RGBA space.
	Before the first <a>color stop</a>,
	the line is the color of the first <a>color stop</a>.
	After the last <a>color stop</a>, the line is the color of the last <a>color stop</a>.

	If multiple <a>color stops</a> have the same position,
	they produce an infinitesimal transition from the one specified first in the rule
	to the one specified last.
	In effect, the color suddenly changes at that position rather than smoothly transitioning.

	<div class=example>
		Below are several pairs of gradients.
		The latter of each pair is a manually "fixed-up" version of the former,
		obtained by applying the above rules.
		For each pair, both gradients will render identically.
		<span class='note'>The numbers in each arrow specify which fixup steps are invoked in the transformation.</span>

		<pre>
			1. linear-gradient(red, white 20%, blue)
			   =1=>
			   linear-gradient(red 0%, white 20%, blue 100%)

			2. linear-gradient(red 40%, white, black, blue)
			   =13=>
			   linear-gradient(red 40%, white 60%, black 80%, blue 100%)

			3. linear-gradient(red -50%, white, blue)
			   =13=>
			   linear-gradient(red -50%, white 25%, blue 100%)

			4. linear-gradient(red -50px, white, blue)
			   =13=>
			   linear-gradient(red -50px, white calc(-25px + 50%), blue 100%)

			5. linear-gradient(red 20px, white 0px, blue 40px)
			   =2=>
			   linear-gradient(red 20px, white 20px, blue 40px)

			6. linear-gradient(red, white -50%, black 150%, blue)
			   =12=>
			   linear-gradient(red 0%, white 0%, black 150%, blue 150%)

			7. linear-gradient(red 80px, white 0px, black, blue 100px)
			   =23=>
			   linear-gradient(red 80px, white 80px, black 90px, blue 100px)

			8. linear-gradient(red, 25%, white)
			   =14=>
			   linear-gradient(red 0%, rgb(100%,50%,50%) 25%, white 100%)
		</pre>
	</div>

	<div class=example>
		The following example illustrates the difference between
		a gradient transitioning in pre-multiplied sRGBA
		and one transitioning (incorrectly) in non-premultiplied.
		In both of these example,
		the gradient is drawn over a white background.
		Both gradients could be written with the following value:

		<pre>linear-gradient(90deg, red, transparent, blue)</pre>

		In premultiplied space,
		transitions to or from "transparent" always look nice:

		<object data="images/gradient2.svg" width="200"height="100">(Image requires SVG)</object>

		On the other hand,
		if a gradient were to incorrectly transition in non-premultiplied space,
		the colors near "transparent" would noticeably darken to a grayish color,
		because "transparent" is actually a shorthand for ''rgba(0,0,0,0)'', or transparent black:

		<object data="images/gradient3.svg" width="200"height="100">(Image requires SVG)</object>
	</div>

	Note: It is recommended that authors not mix different types of units,
	such as px, em, or %,
	in a single rule,
	as this can cause a <a>color stop</a> to unintentionally try to move before an earlier one.
	For example, the rule ''background-image: linear-gradient(yellow 100px, blue 50%)''
	wouldn't require any fix-up as long as the background area is at least 200px tall.
	If it was 150px tall, however,
	the blue <a>color stop's</a> position would be equivalent to "75px",
	which precedes the yellow <a>color stop</a>,
	and would be corrected to a position of 100px.

	Note: The definition and implications of "premultiplied" color spaces are given elsewhere in the technical literature,
	but a quick primer is given here to illuminate the process.
	Given a color expressed as an rgba() 4-tuple,
	one can convert this to a premultiplied representation
	by multiplying the red, green, and blue components by the alpha component.
	For example, a partially-transparent blue may be given as rgba(0,0,255,.5),
	which would then be expressed as [0, 0, 127.5, .5] in its premultiplied representation.
	Interpolating colors using the premultiplied representations
	rather than the plain rgba representations
	tends to produce more attractive transitions,
	particularly when transitioning from a fully opaque color to fully transparent.
	Note that transitions where either the transparency or the color are held constant
	(for example, transitioning between rgba(255,0,0,100%) and rgba(0,0,255,100%),
	or rgba(255,0,0,100%) and rgba(255,0,0,0%))
	have identical results whether the color interpolation is done in premultiplied or non-premultiplied color-space.
	Differences only arise when both the color and transparency differ between the two endpoints.


<!--
   SSSSSSSSSSSSSSS   iiii                     iiii
 SS:::::::::::::::S i::::i                   i::::i
S:::::SSSSSS::::::S  iiii                     iiii
S:::::S     SSSSSSS
S:::::S            iiiiiii zzzzzzzzzzzzzzzzziiiiiiinnnn  nnnnnnnn       ggggggggg   ggggg
S:::::S            i:::::i z:::::::::::::::zi:::::in:::nn::::::::nn    g:::::::::ggg::::g
 S::::SSSS          i::::i z::::::::::::::z  i::::in::::::::::::::nn  g:::::::::::::::::g
  SS::::::SSSSS     i::::i zzzzzzzz::::::z   i::::inn:::::::::::::::ng::::::ggggg::::::gg
    SSS::::::::SS   i::::i       z::::::z    i::::i  n:::::nnnn:::::ng:::::g     g:::::g
       SSSSSS::::S  i::::i      z::::::z     i::::i  n::::n    n::::ng:::::g     g:::::g
            S:::::S i::::i     z::::::z      i::::i  n::::n    n::::ng:::::g     g:::::g
            S:::::S i::::i    z::::::z       i::::i  n::::n    n::::ng::::::g    g:::::g
SSSSSSS     S:::::Si::::::i  z::::::zzzzzzzzi::::::i n::::n    n::::ng:::::::ggggg:::::g
S::::::SSSSSS:::::Si::::::i z::::::::::::::zi::::::i n::::n    n::::n g::::::::::::::::g
S:::::::::::::::SS i::::::iz:::::::::::::::zi::::::i n::::n    n::::n  gg::::::::::::::g
 SSSSSSSSSSSSSSS   iiiiiiiizzzzzzzzzzzzzzzzziiiiiiii nnnnnn    nnnnnn    gggggggg::::::g
                                                                                 g:::::g
                                                                     gggggg      g:::::g
                                                                     g:::::gg   gg:::::g
                                                                      g::::::ggg:::::::g
                                                                       gg:::::::::::::g
                                                                         ggg::::::ggg
                                                                            gggggg
-->


<h2 id="sizing">
Sizing Images and Objects in CSS</h2>

	Images used in CSS may come from a number of sources:
	from binary image formats (such as gif, jpeg, etc),
	dedicated markup formats (such as SVG),
	and CSS-specific formats (such as the linear-gradient() value type defined in this specification).
	As well, a document may contain many other types of objects,
	such as video, plugins, or nested documents.
	These images and objects
	(just <dfn>objects</dfn> hereafter)
	may offer many types of sizing information to CSS,
	or none at all.
	This section defines generically the size negotiation model between the object and the CSS layout algorithms.

<!-- ====================================================================== -->

<h3 id="sizing-terms">
Object-Sizing Terminology</h3>

	In order to define this handling,
	we define a few terms,
	to make it easier to refer to various concepts:

	<dl>
		<dt><dfn export>intrinsic dimensions</dfn>
		<dd>
			The term intrinsic dimensions refers to the set of
			the <dfn export>intrinsic height</dfn>,
			<dfn export>intrinsic width</dfn>,
			and <dfn export>intrinsic aspect ratio</dfn>
			(the ratio between the width and height),
			each of which may or may not exist for a given object.
			These intrinsic dimensions represent a preferred or natural size of the object itself;
			that is, they are not a function of the context in which the object is used.
			CSS does not define how the intrinsic dimensions are found in general.

			Raster images are an example of an object with all three intrinsic dimensions.
			SVG images designed to scale might have only an intrinsic aspect ratio;
			SVG images can also be created with only an intrinsic width or height.
			CSS gradients, defined in this specification, are an example of an object with no intrinsic dimensions at all.
			Another example of this is embedded documents,
			such as the <code>&lt;iframe></code> element in HTML.
			An object cannot have only two intrinsic dimensions,
			as any two automatically define the third.

			If an object (such as an icon) has multiple sizes,
			then the largest size (by area) is taken as its intrinsic size.
			If it has multiple aspect ratios at that size,
			or has multiple aspect ratios and no size,
			then the aspect ratio closest to the aspect ratio of the <a>default object size</a> is used.
			Determine this by seeing which aspect ratio produces the largest area
			when fitting it within the <a>default object size</a> using a <a>contain constraint</a> fit;
			if multiple sizes tie for the largest area,
			the wider size is chosen as its intrinsic size.


		<dt><dfn export>specified size</dfn>
		<dd>
			The specified size of an object is given by CSS,
			such as through the 'width' and 'height' or 'background-size' properties.
			The specified size can be a definite width and height,
			a set of constraints,
			or a combination thereof.

		<dt><dfn export>concrete object size</dfn>
		<dd>
			The <a>concrete object size</a> is the result of combining
			an object's <a>intrinsic dimensions</a> and <a>specified size</a>
			with the <a>default object size</a> of the context it's used in,
			producing a rectangle with a definite width and height.

		<dt><dfn export>default object size</dfn>
		<dd>
			The <a>default object size</a> is a rectangle with a definite height and width
			used to determine the <a>concrete object size</a>
			when both the <a>intrinsic dimensions</a> and <a>specified size</a> are missing dimensions.

	</dl>


<h3 id="object-negotiation">
CSS⇋Object Negotiation</h3>

	Objects in CSS are sized and rendered by the <dfn export>object size negotiation</dfn> algorithm as follows:

	<ol>
		<li>
			When an image or object is specified in a document,
			such as through a ''url()'' value in a 'background-image' property
			or a <code>src</code> attribute on an <code>&lt;img></code> element,
			CSS queries the object for its <a>intrinsic dimensions</a>.

		<li>
			Using the <a>intrinsic dimensions</a>,
			the <a>specified size</a>,
			and the <a>default object size</a> for the context the image or object is used in,
			CSS then computes a <a>concrete object size</a>.
			(See the <a href="#default-sizing">following section</a>.)
			This defines the size and position of the region the object will render in.

		<li>
			CSS asks the object to render itself at the <a>concrete object size</a>.
			CSS does not define how objects render when the <a>concrete object size</a> is different from the object's <a>intrinsic dimensions</a>.
			The object may adjust itself to match the <a>concrete object size</a> in some way,
			or even render itself larger or smaller than the <a>concrete object size</a> to satisfy sizing constraints of its own.

		<li>
			Unless otherwise specified by CSS,
			the object is then clipped to the <a>concrete object size</a>.
	</ol>

<!-- ====================================================================== -->

<h3 id="concrete-size-resolution">
Concrete Object Size Resolution</h3>

	Currently the rules for sizing objects are described in each context that such objects are used.
	This section defines some common sizing constraints
	and how to resolve them
	so that future specs can refer to them instead of redefining size resolution in each instance.

<h4 id="default-sizing">
Default Sizing Algorithm</h4>

	The <dfn export>default sizing algorithm</dfn> is a set of rules commonly used to find an object's <a>concrete object size</a>.
	It resolves the simultaneous constraints presented by the object's <a>intrinsic dimensions</a>
	and either an unconstrained <a>specified size</a>
	or one consisting of only a definite width and/or height.

	Some object sizing rules
	(such as those for 'list-style-image')
	correspond exactly to the <a>default sizing algorithm</a>.
	Others
	(such as those for 'border-image')
	invoke the default sizing algorithm
	but also apply additional sizing rules before arriving at a final <a>concrete object size</a>.

	The <a>default sizing algorithm</a> is defined as follows:

	<ul>
		<li>
			If the <a>specified size</a> is a definite width and height,
			the <a>concrete object size</a> is given that width and height.

		<li>
			If the <a>specified size</a> is only a width or height (but not both)
			then the <a>concrete object size</a> is given that specified width or height.
			The other dimension is calculated as follows:

			<ol>
				<li>
					If the object has an <a>intrinsic aspect ratio</a>,
					the missing dimension of the <a>concrete object size</a>
					is calculated using the <a>intrinsic aspect ratio</a> and the present dimension.

				<li>
					Otherwise, if the missing dimension is present in the object's <a>intrinsic dimensions</a>,
					the missing dimension is taken from the object's <a>intrinsic dimensions</a>.

				<li>
					Otherwise, the missing dimension of the <a>concrete object size</a> is taken from the <a>default object size</a>.
			</ol>


		<li>
			If the <a>specified size</a> has no constraints:

			<ol>
				<li>
					If the object has an intrinsic height or width,
					its size is resolved as if its <a>intrinsic dimensions</a> were given as the <a>specified size</a>.

				<li>
					Otherwise, its size is resolved as a <a>contain constraint</a> against the <a>default object size</a>.
			</ol>

	</ul>

<h4 id="cover-contain">
Cover and Contain Constraint Sizing</h4>

	Two other common specified sizes are the <a>contain constraint</a> and the <a>cover constraint</a>,
	both of which are resolved against a specified <dfn export>constraint rectangle</dfn>
	using the object's <a>intrinsic aspect ratio</a>:

	<ul>
		<li>
			A <dfn export>contain constraint</dfn> is resolved
			by setting the <a>concrete object size</a> to the largest rectangle that has the object's <a>intrinsic aspect ratio</a>
			and additionally has neither width nor height larger than the constraint rectangle's width and height, respectively.

		<li>
			A <dfn export>cover constraint</dfn> is resolved
			by setting the <a>concrete object size</a> to the smallest rectangle that has the object's <a>intrinsic aspect ratio</a>
			and additionally has neither width nor height smaller than the constraint rectangle's width and height, respectively.
	</ul>

	In both cases,
	if the object doesn't have an intrinsic aspect ratio,
	the <a>concrete object size</a> is the specified constraint rectangle.

<h3 id='object-sizing-examples'>
Examples of CSS Object Sizing</h3>

	<div class="example">
		The following examples show how the <a href="http://www.w3.org/TR/CSS21/">CSS 2.1</a>
		and <a href="http://www.w3.org/TR/css3-background/">CSS3 Backgrounds &amp; Borders</a> sizing algorithms
		correspond to concepts defined in this specification.

		<dl>
			<dt><a href="http://www.w3.org/TR/css3-background/#the-background-image">'background-image'</a>
			<dd>
				The rules for calculating the <a>concrete object size</a> of a background
				are defined in <a href="http://www.w3.org/TR/CSS21/colors.html#background-properties">CSS2.1§14.2.1</a>
				and <a href="http://www.w3.org/TR/css3-background/#the-background-size">CSS3BG§3.9</a>.
				CSS2.1 uses the <a>default sizing algorithm</a>
				with no <a>specified size</a>
				and the <a>background positioning area</a> as the <a>default object size</a>. [[!CSS21]]
				In CSS3, 'background-size' property can give a sizing constraint,
				invoking either the <a>default sizing algorithm</a>
				or one of the <a title="contain constraint">contain</a> or <a title="cover constraint">cover</a> constraints.
				The concrete object size is further adjusted in later steps if 'background-repeat' has a ''round'' value. [[CSS3BG]]

			<dt><a href="http://www.w3.org/TR/CSS21/generate.html#propdef-list-style-image">'list-style-image'</a>
			<dd>
				The rules for calculating the <a>concrete object size</a> of a list-style image
				are defined in <a href="http://www.w3.org/TR/CSS21/generate.html#propdef-list-style-image">CSS2.1§12.5.1</a>.
				They use the <a>default sizing algorithm</a>
				with no <a>specified size</a>
				and a <a>default object size</a> of 1em square.

			<dt><a href="http://www.w3.org/TR/css3-background/#border-images">'border-image'</a>
			<dd>
				Border images are sized twice:
				first the entire image is sized to determine the slice points,
				then the slices are sized to decorate the border.
				The first sizing operation is defined in <a href="http://www.w3.org/TR/css3-background/#the-border-image-slice">CSS3BG§6.2</a>
				and uses the <a>default sizing algorithm</a>
				with no <a>specified size</a>,
				and the <a href="http://www.w3.org/TR/css3-background/#border-image-area">border image area</a> as the <a>default object size</a>.
				The second operation is defined in <a href="http://www.w3.org/TR/css3-background/#border-image-process">CSS3BG§6.2</a>:
				the <a>default sizing algorithm</a> is used to determine an initial size for each slice
				with the corresponding <a>border image area</a> part as the default object size.
				By default the <a>specified size</a> matches this <a>default object size</a>;
				however the 'border-image-repeat' property can drop the specified size in one or more directions
				and may also apply an additional rounding step. [[CSS3BG]]


			<dt><a href="http://www.w3.org/TR/CSS21/ui.html#cursor-props">'cursor'</a>
			<dd>
				The rules for calculating the <a>concrete object size</a> of a cursor
				are defined in <a href="http://www.w3.org/TR/CSS21/ui.html#cursor-props">CSS2.1 § 18.1: Cursors</a>.
				The <a>default object size</a> is a UA-defined size
				that should be based on the size of a typical cursor on the UA's operating system.  [[!CSS21]]

			<dt><a href="http://www.w3.org/TR/CSS21/generate.html#content">'content'</a>
			<dd>
				Objects inserted via the CSS2.1 'content' property
				are anonymous <a href="http://www.w3.org/TR/CSS21/conform.html#replaced-element">replaced elements</a>,
				and are sized the same way. [[!CSS21]]
				Note that such anonymous elements have all their non-inherited properties (including 'width', 'height', etc.)
				set to their initial values.

			<dt><a href="http://www.w3.org/TR/CSS21/conform.html#replaced-element">replaced elements</a>
			<dd>
				<a href="http://www.w3.org/TR/CSS21/">CSS 2.1</a> defines the sizing of replaced elements
				(including those inserted as <a href="http://www.w3.org/TR/CSS21/generate.html#content">generated content</a> via 'content')
				in sections <a href="http://www.w3.org/TR/CSS21/visudet.html#inline-replaced-width">10.3.2</a>,
				<a href="http://www.w3.org/TR/CSS2/visudet.html#min-max-widths">10.4</a>,
				<a href="http://www.w3.org/TR/CSS21/visudet.html#inline-replaced-height">10.6.2</a>,
				and <a href="http://www.w3.org/TR/CSS2/visudet.html#min-max-heights">10.7</a>. [[!CSS21]]
				The 'object-fit' property defined below defines how the <a>concrete object size</a> corresponds to the element's used width and height;
				by default they coincide.
		</dl>
	</div>


<h3 id="the-object-fit">
Sizing Objects: the 'object-fit' property</h3>

	<pre class='propdef'>
	Name: object-fit
	Value: fill | contain | cover | none | scale-down
	Initial: fill
	Applies to: replaced elements
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	The 'object-fit' property specifies how the contents of a replaced element
	should be fitted to the box established by its used height and width.

	<dl dfn-type=value dfn-for=object-fit>
		<dt><dfn>fill</dfn>
		<dd>
			The replaced content is sized to fill the element's content box:
			the object's <a>concrete object size</a> is the element's used width and height.

		<dt><dfn>contain</dfn>
		<dd>
			The replaced content is sized to maintain its aspect ratio
			while fitting within the element's content box:
			its <a>concrete object size</a> is resolved as a <a>contain constraint</a>
			against the element's used width and height.

		<dt><dfn>cover</dfn>
		<dd>
			The replaced content is sized to maintain its aspect ratio
			while filling the element's entire content box:
			its <a>concrete object size</a> is resolved as a <a>cover constraint</a>
			against the element's used width and height.

		<dt><dfn>none</dfn>
		<dd>
			The replaced content is not resized to fit inside the element's content box:
			determine the object's <a>concrete object size</a>
			using the <a>default sizing algorithm</a> with no specified size,
			and a <a>default object size</a> equal to the replaced element's used width and height.

		<dt><dfn>scale-down</dfn>
		<dd>
			Size the content as if ''none'' or ''contain'' were specified,
			whichever would result in a smaller <a>concrete object size</a>.

			Note: Both ''none'' and ''contain'' respect the content's intrinsic aspect ratio,
			so the concept of "smaller" is well-defined.
	</dl>

	If the content does not completely fill the replaced element's content box,
	the unfilled space shows the replaced element's background.
	Since replaced elements always clip their contents to the content box,
	the content will never overflow.
	See the 'object-position' property for positioning the object with respect to the content box.

	<figure>
		<img src="images/img_scale.png" style="border: thin solid black;" alt="">

		<figcaption>
			An example showing how four of the values of 'object-fit' cause the replaced element (blue figure)
			to be scaled to fit its height/width box (shown with a green background),
			using the initial value for 'object-position'.
			The fifth value, ''scale-down'',
			in this case looks identical to ''contain''.
		</figcaption>
	</figure>

	Note: The 'object-fit' property has similar semantics to
	the <code>fit</code> attribute in [[SMIL10]]
	and the <<meetOrSlice>> parameter
	on the <a href="http://www.w3.org/TR/SVG11/coords.html#PreserveAspectRatioAttribute"><code>preserveAspectRatio</code> attribute</a> in [[SVG11]].

	Note: Per the <a>object size negotiation</a> algorithm,
	the <a>concrete object size</a>
	(or, in this case, the size of the content)
	does not directly scale the object itself -
	it is merely passed to the object as information about the size of the visible canvas.
	How to then draw into that size is up to the image format.
	In particular, raster images always scale to the given size,
	while SVG uses the given size as the size of the "SVG Viewport"
	(a term defined by SVG)
	and then uses the values of several attributes on the root <code>&lt;svg></code> element to determine how to draw itself.


<h3 id="the-object-position">
Positioning Objects: the 'object-position' property</h3>

	<pre class='propdef'>
	Name: object-position
	Value: <<position>>
	Initial: 50% 50%
	Applies to: replaced elements
	Inherited: no
	Percentages: refer to width and height of element itself
	Media: visual
	Computed value: specified value
	Animatable: yes
	Canonical Order: the horizontal component of the <<position>>, followed by the vertical component
	</pre>

	The 'object-position' property determines the alignment of the replaced element inside its box.
	The <<position>> value type
	(which is also used for 'background-position')
	is defined in [[!CSS3VAL]],
	and is resolved using the <a>concrete object size</a> as the object area
	and the content box as the positioning area.

	Note: Areas of the box not covered by the replaced element will show the element's background.


<!--
IIIIIIIIII
I::::::::I
I::::::::I
II::::::II
  I::::I     mmmmmmm    mmmmmmm     aaaaaaaaaaaaa     ggggggggg   ggggg    eeeeeeeeeeee
  I::::I   mm:::::::m  m:::::::mm   a::::::::::::a   g:::::::::ggg::::g  ee::::::::::::ee
  I::::I  m::::::::::mm::::::::::m  aaaaaaaaa:::::a g:::::::::::::::::g e::::::eeeee:::::ee
  I::::I  m::::::::::::::::::::::m           a::::ag::::::ggggg::::::gge::::::e     e:::::e
  I::::I  m:::::mmm::::::mmm:::::m    aaaaaaa:::::ag:::::g     g:::::g e:::::::eeeee::::::e
  I::::I  m::::m   m::::m   m::::m  aa::::::::::::ag:::::g     g:::::g e:::::::::::::::::e
  I::::I  m::::m   m::::m   m::::m a::::aaaa::::::ag:::::g     g:::::g e::::::eeeeeeeeeee
  I::::I  m::::m   m::::m   m::::ma::::a    a:::::ag::::::g    g:::::g e:::::::e
II::::::IIm::::m   m::::m   m::::ma::::a    a:::::ag:::::::ggggg:::::g e::::::::e
I::::::::Im::::m   m::::m   m::::ma:::::aaaa::::::a g::::::::::::::::g  e::::::::eeeeeeee
I::::::::Im::::m   m::::m   m::::m a::::::::::aa:::a gg::::::::::::::g   ee:::::::::::::e
IIIIIIIIIImmmmmm   mmmmmm   mmmmmm  aaaaaaaaaa  aaaa   gggggggg::::::g     eeeeeeeeeeeeee
                                                               g:::::g
                                                   gggggg      g:::::g
                                                   g:::::gg   gg:::::g
                                                    g::::::ggg:::::::g
                                                     gg:::::::::::::g
                                                       ggg::::::ggg
                                                          gggggg


PPPPPPPPPPPPPPPPP                                                                                                                    iiii
P::::::::::::::::P                                                                                                                  i::::i
P::::::PPPPPP:::::P                                                                                                                  iiii
PP:::::P     P:::::P
  P::::P     P:::::Prrrrr   rrrrrrrrr      ooooooooooo       cccccccccccccccc    eeeeeeeeeeee        ssssssssss       ssssssssss   iiiiiiinnnn  nnnnnnnn       ggggggggg   ggggg
  P::::P     P:::::Pr::::rrr:::::::::r   oo:::::::::::oo   cc:::::::::::::::c  ee::::::::::::ee    ss::::::::::s    ss::::::::::s  i:::::in:::nn::::::::nn    g:::::::::ggg::::g
  P::::PPPPPP:::::P r:::::::::::::::::r o:::::::::::::::o c:::::::::::::::::c e::::::eeeee:::::eess:::::::::::::s ss:::::::::::::s  i::::in::::::::::::::nn  g:::::::::::::::::g
  P:::::::::::::PP  rr::::::rrrrr::::::ro:::::ooooo:::::oc:::::::cccccc:::::ce::::::e     e:::::es::::::ssss:::::ss::::::ssss:::::s i::::inn:::::::::::::::ng::::::ggggg::::::gg
  P::::PPPPPPPPP     r:::::r     r:::::ro::::o     o::::oc::::::c     ccccccce:::::::eeeee::::::e s:::::s  ssssss  s:::::s  ssssss  i::::i  n:::::nnnn:::::ng:::::g     g:::::g
  P::::P             r:::::r     rrrrrrro::::o     o::::oc:::::c             e:::::::::::::::::e    s::::::s         s::::::s       i::::i  n::::n    n::::ng:::::g     g:::::g
  P::::P             r:::::r            o::::o     o::::oc:::::c             e::::::eeeeeeeeeee        s::::::s         s::::::s    i::::i  n::::n    n::::ng:::::g     g:::::g
  P::::P             r:::::r            o::::o     o::::oc::::::c     ccccccce:::::::e           ssssss   s:::::s ssssss   s:::::s  i::::i  n::::n    n::::ng::::::g    g:::::g
PP::::::PP           r:::::r            o:::::ooooo:::::oc:::::::cccccc:::::ce::::::::e          s:::::ssss::::::ss:::::ssss::::::si::::::i n::::n    n::::ng:::::::ggggg:::::g
P::::::::P           r:::::r            o:::::::::::::::o c:::::::::::::::::c e::::::::eeeeeeee  s::::::::::::::s s::::::::::::::s i::::::i n::::n    n::::n g::::::::::::::::g
P::::::::P           r:::::r             oo:::::::::::oo   cc:::::::::::::::c  ee:::::::::::::e   s:::::::::::ss   s:::::::::::ss  i::::::i n::::n    n::::n  gg::::::::::::::g
PPPPPPPPPP           rrrrrrr               ooooooooooo       cccccccccccccccc    eeeeeeeeeeeeee    sssssssssss      sssssssssss    iiiiiiii nnnnnn    nnnnnn    gggggggg::::::g
                                                                                                                                                                        g:::::g
                                                                                                                                                            gggggg      g:::::g
                                                                                                                                                            g:::::gg   gg:::::g
                                                                                                                                                             g::::::ggg:::::::g
                                                                                                                                                              gg:::::::::::::g
                                                                                                                                                                ggg::::::ggg
                                                                                                                                                                   gggggg

-->


<h2 id="image-processing">
Image Processing</h2>

<h3 id="the-image-resolution">
Overriding Image Resolutions: the 'image-resolution' property</h3>

	The <dfn export>image resolution</dfn> is defined as
	the number of image pixels per unit length,
	e.g., pixels per inch.
	Some image formats can record information about the resolution of images.
	This information can be helpful when determining the actual size of the image in the formatting process.
	However, the information can also be wrong,
	in which case it should be ignored.
	By default, CSS assumes a resolution of one image pixel per CSS ''px'' unit;
	however, the 'image-resolution' property allows using some other resolution.

	<pre class='propdef'>
	Name: image-resolution
	Value: [ from-image || <<resolution>> ] && snap?
	Initial: 1dppx
	Applies to: all elements
	Inherited: yes
	Media: visual
	Computed value: as specified, except with <<resolution>> possibly altered by computed for ''snap'' (see below)
	Animatable: no
	</pre>

	<p class='issue'>
		The ''image-set()'' notation can alter the intrinsic resolution of an image,
		which ideally would be automatically honored without having to set this property.
		How should we best address this?
		Change the initial value to ''auto'', meaning "1dppx, unless CSS says otherwise"?
		Say that image-resolution has no effect on images whose resolution was set by something else in CSS?
		Or somehow wordsmithing ''image-set()'' in some way such that it always produces ''1dppx'' images somehow?

	The 'image-resolution' property specifies the <a>intrinsic resolution</a> of all raster images used in or on the element.
	It affects both content images
	(e.g. replaced elements and generated content)
	and decorative images
	(such as 'background-image').
	The <dfn export>intrinsic resolution</dfn> of an image is used to determine the image's <a>intrinsic dimensions</a>.
	Values have the following meanings:

	<dl dfn-type=value dfn-for=image-resolution>
		<dt><dfn><<resolution>></dfn>
		<dd>
			Specifies the intrinsic resolution explicitly.
			A "dot" in this case corresponds to a single image pixel.

		<dt><dfn>from-image</dfn>
		<dd>
			The image's intrinsic resolution is taken as that specified by the image format.
			If the image does not specify its own resolution,
			the explicitly specified resolution is used (if given),
			else it defaults to ''1dppx''.

		<dt><dfn>snap</dfn>
		<dd>
			If the "snap" keyword is provided,
			the computed <<resolution>> (if any)
			is the specified resolution rounded to the nearest value
			that would map one image pixel to an integer number of device pixels.
			If the resolution is taken from the image,
			then the used intrinsic resolution is the image's native resolution similarly adjusted.
	</dl>

	As vector formats such as SVG do not have an intrinsic resolution,
	this property has no effect on vector images.

	<div class='example'>
		Printers tend to have substantially higher resolution than computer monitors;
		due to this, an image that looks fine on the screen may look pixellated when printed out.
		The 'image-resolution' property can be used to embed a high-resolution image into the document
		and maintain an appropriate size,
		ensuring attractive display both on screen and on paper:

		<pre>
			img.high-res {
				image-resolution: 300dpi;
			}
		</pre>

		With this set, an image meant to be 5 inches wide at 300dpi
		will actually display as 5in wide;
		without this set,
		the image would display as approximately 15.6in wide
		since the image is 15000 image pixels across,
		and by default CSS displays 96 image pixels per inch.
	</div>


	<div class="example">
		Some image formats can encode the image resolution into the image data.
		This rule specifies that the UA should use the image resolution found in the image itself,
		falling back to 1 image pixel per CSS ''px'' unit.

		<pre>img { image-resolution: from-image }</pre>

		These rules both specify that the UA should use the image resolution found in the image itself,
		but if the image has no resolution,
		the resolution is set to ''300dpi'' instead of the default ''1dppx''.

		<pre>
			img { image-resolution: from-image 300dpi }
			img { image-resolution: 300dpi from-image }
		</pre>

	</div>

	<div class="example">

		Using this rule, the image resolution is set to 300dpi.
		(The resolution in the image, if any, is ignored.)

		<pre>img { image-resolution: 300dpi }</pre>

		This rule, on the other hand,
		if used when the screen's resolution is 96dpi,
		would instead render the image at 288dpi
		(so that 3 image pixels map to 1 device pixel):

		<pre>img { image-resolution: 300dpi snap; }</pre>

		The ''snap'' keyword can also be used when the resolution is taken from the image:

		<pre>img { image-resolution: snap from-image; }</pre>

		An image declaring itself as 300dpi will,
		in the situation above,
		display at 288dpi
		(3 image pixels per device pixel)
		whereas an image declaring 72dpi will render at 96dpi
		(1 image pixel per device pixel).
	</div>



<h3 id="the-image-orientation">
Orienting an Image on the Page: the 'image-orientation' property</h3>

	Issue: This property is likely going to be deprecated and its functionality moved to HTML.
	At minimum, it will likely lose all but its initial value and ''image-orientation/from-image''.

	If a picture is taken with a camera turned on its side,
	or a document isn't positioned correctly within a scanner,
	the resultant image may be "sideways" or even upside-down.
	The 'image-orientation' property provides a way to apply an "out-of-band" rotation to image source data to correctly orient an image.

	Note: This property is not intended to specify layout transformations
	such as arbitrary rotation or flipping the image in the horizontal or vertical direction.
	(See [[CSS3-2D-TRANSFORMS]] for a feature designed to do that.)
	It is also not needed to correctly orient an image when printing in landscape versus portrait orientation,
	as that rotation is done as part of layout. (See [[CSS3PAGE]].)
	It should only be used to correct incorrectly-oriented images.

	<pre class='propdef'>
	Name: image-orientation
	Value: from-image | <<angle>> | [ <<angle>>? flip ]
	Initial: 0deg
	Applies to: all elements
	Inherited: yes
	Media: visual
	Computed value: an <<angle>>, rounded and normalized (see text), plus optionally a ''flip'' keyword
	Animatable: no
	</pre>

	This property specifies an orthogonal rotation to be applied to an image before it is laid out.
	It applies only to content images
	(e.g. replaced elements and generated content),
	not decorative images
	(such as 'background-image').
	CSS layout processing applies to the image <em>after</em> rotation.
	This implies, for example:

	<ul>
		<li>
			The intrinsic height and width are derived from the rotated rather than the original image dimensions.

		<li>
			The height (width) property applies to the vertical (horizontal) dimension of the image,
			<em>after</em> rotation.
	</ul>

	Values have the following meanings:

	<dl dfn-type=value dfn-for=image-orientation>
		<dt><dfn>from-image</dfn>
		<dd>
			If the image has an orientation specified in its metadata,
			such as EXIF,
			this value computes to the angle that the metadata specifies is necessary to correctly orient the image.
			If necessary, this angle is then rounded and normalized as described above for an <<angle>> value.
			If there is no orientation specified in its metadata,
			this value computes to ''0deg''.

		<dt><dfn><<angle>></dfn>
		<dd>
			Positive values cause the image to be rotated to the right
			(in a clockwise direction),
			while negative values cause a rotation to the left.
			The computed value of the property is calculated
			by rounding the specified angle to the nearest quarter-turn
			(90deg, 100grad, .25turn, etc.),
			rounding away from 0
			(that is, 45deg is rounded  to 90deg, while -45deg is rounded to -90deg),
			then moduloing the value by 1 turn (360deg, 400grad, etc.).

		<dt><dfn><<angle>>? flip</dfn>
		<dd>
			Identical to the plain <<angle>> case,
			except that after rotation the image is flipped horizontally.
			If the <<angle>> is omitted,
			it defaults to ''0deg''.

			Note: This value is only necessary to represent all 8 possible EXIF orientations that <a value for=image-orientation>from-image</a> can produce.
	</dl>

	The 'image-orientation' property must be applied before any other transformations,
	such as being specified in the ''image()'' function with an opposite directionality to its context,
	or using CSS Transforms.

	<div class="example">

		The following example rotates the image 90 degrees clockwise:

		<pre>
			img.ninety     { image-orientation: 90deg }
			...
			&lt;img class="ninety" src=...>
		</pre>

		The same effect could be achieved with, for example,
		an angle of -270deg or 450deg.
	</div>


<h3 id='the-image-rendering'>
Determing How To Scale an Image: the 'image-rendering' property</h3>

	<pre class='propdef'>
	Name: image-rendering
	Value: auto | crisp-edges | pixelated
	Initial: auto
	Applies to: all elements
	Inherited: yes
	Media: visual
	Computed value: specified value
	Animatable: no
	</pre>

	The 'image-rendering' property provides a hint to the user-agent
	about what aspects of an image are most important to preserve when the image is scaled,
	to aid the user-agent in the choice of an appropriate scaling algorithm.
	When specified on an element,
	it applies to all images given in properties for the element,
	such as background images,
	list-style images,
	or the content of replaced elements when they represent an image that must be scaled.
	The values of the 'image-rendering' property are interpreted as follows:

	<dl dfn-type=value dfn-for=image-rendering>
		<dt><dfn>auto</dfn>
		<dd>
			The image should be scaled with an algorithm that maximizes the appearance of the image.
			In particular, scaling algorithms that "smooth" colors are acceptable,
			such as bilinear interpolation.
			This is intended for images such as photos.

		<dt><dfn>crisp-edges</dfn>
		<dd>
			The image must be scaled with an algorithm that preserves contrast and edges in the image,
			and which does not smooth colors or introduce blur to the image in the process.
			This is intended for images such as pixel art.

		<dt><dfn>pixelated</dfn>
		<dd>
			When scaling the image up, the "nearest neighbor" or similar algorithm must be used,
			so that the image appears to be simply composed of very large pixels.
			When scaling down,
			this is the same as <a value for=image-rendering>auto</a>.
	</dl>

	<p class='issue'>
		Should we move the current ''auto'' behavior to a well-named keyword (''smooth''?)
		and just define ''auto'' to be "whatever the UA wants",
		which is what ''auto'' usually means?

	This property does not dictate any particular scaling algorithm to be used.
	For example, with ''image-rendering: auto'',
	a user agent might scale images with bilinear interpolation by default,
	switch to nearest-neighbor interpolation in high-load situations,
	and switch to a high-quality scaling algorithm like Lanczos interpolation for static images that aren't moving or changing.
	Similarly, with 'image-rendering: crisp-edges',
	a user agent might scale images with nearest-neighbor interpolation by default,
	and switch to EPX interpolation in low-load situations.

	This property previously accepted the values ''optimizeSpeed'' and ''optimizeQuality''.
	These are now deprecated;
	a user agent must accept them as valid values
	but must treat them as having the same behavior as <a value for=image-rendering>auto</a>,
	and authors must not use them.


<!--
IIIIIIIIII                         tttt
I::::::::I                      ttt:::t
I::::::::I                      t:::::t
II::::::II                      t:::::t
  I::::Innnn  nnnnnnnn    ttttttt:::::ttttttt        eeeeeeeeeeee    rrrrr   rrrrrrrrr   ppppp   ppppppppp
  I::::In:::nn::::::::nn  t:::::::::::::::::t      ee::::::::::::ee  r::::rrr:::::::::r  p::::ppp:::::::::p
  I::::In::::::::::::::nn t:::::::::::::::::t     e::::::eeeee:::::eer:::::::::::::::::r p:::::::::::::::::p
  I::::Inn:::::::::::::::ntttttt:::::::tttttt    e::::::e     e:::::err::::::rrrrr::::::rpp::::::ppppp::::::p
  I::::I  n:::::nnnn:::::n      t:::::t          e:::::::eeeee::::::e r:::::r     r:::::r p:::::p     p:::::p
  I::::I  n::::n    n::::n      t:::::t          e:::::::::::::::::e  r:::::r     rrrrrrr p:::::p     p:::::p
  I::::I  n::::n    n::::n      t:::::t          e::::::eeeeeeeeeee   r:::::r             p:::::p     p:::::p
  I::::I  n::::n    n::::n      t:::::t    tttttte:::::::e            r:::::r             p:::::p    p::::::p
II::::::IIn::::n    n::::n      t::::::tttt:::::te::::::::e           r:::::r             p:::::ppppp:::::::p
I::::::::In::::n    n::::n      tt::::::::::::::t e::::::::eeeeeeee   r:::::r             p::::::::::::::::p  ......
I::::::::In::::n    n::::n        tt:::::::::::tt  ee:::::::::::::e   r:::::r             p::::::::::::::pp   .::::.
IIIIIIIIIInnnnnn    nnnnnn          ttttttttttt      eeeeeeeeeeeeee   rrrrrrr             p::::::pppppppp     ......
                                                                                          p:::::p
                                                                                          p:::::p
                                                                                         p:::::::p
                                                                                         p:::::::p
                                                                                         p:::::::p
                                                                                         ppppppppp
-->

<h2 id='interpolation'>
Interpolation</h2>

	This section describes how to interpolate between new value types defined in this specification,
	for use with modules such as CSS Transitions and CSS Animations.

	If an algorithm below simply states that two values should be "interpolated" or "transitioned" without further details,
	then the value should be interpolated as described by the Transitions spec.
	Otherwise, the algorithm may reference a variable "t" in its detailed description of the interpolation.
	This is a number which starts at 0% and goes to 100%,
	and is set to a value that represents the progress through the transition,
	based on the duration of the transition,
	the elapsed time,
	and the timing function in use.
	For example, with a linear timing function and a 1s duration,
	after .3s t is equal to 30%.

<h3 id='interpolating-images'>
Interpolating <<image>></h3>

	All images can be interpolated,
	though some special types of images
	(like some gradients)
	have their own special interpolation rules.
	In general terms,
	images are interpolated by scaling them to the size of the start image
	and cross-fading the two while they transition to the size of the end image.

	In specific terms,
	at each point in the interpolation
	the image is equal to <code>cross-fade( (100% - t) <var>start image</var>, <var>end image</var>)</code>.

	<p class='issue'>
		Special-case interpolating to/from no image,
		like "background-image: url(foo);" to "background-image: none;".


<h3 id='interpolating-image-combinations'>
Interpolating cross-fade()</h3>

	If both the starting and ending images are <a>cross-fade()</a>s
	which differ only by by their <<percentage>>,
	they must be interpolated by interpolating their <<percentage>>.
	Otherwise, they must be interpolated as generic <<image>>s.


<h3 id='interpolating-gradients'>
Interpolating <<gradient>></h3>

	<p class='issue'>
		This section needs review and improvement.
		In particular, I believe the handling of linear-gradient() is incomplete -
		I think we want to specifically interpolate the "length" of the gradient line
		(the distance between 0% and 100%)
		between the starting and ending positions explicitly,
		so it doesn't grow and then shrink over a single animation.

	Gradient images can be interpolated directly in CSS transitions and animations,
	smoothly animating from one gradient to another.
	There are only a few restrictions on what gradients are allowed to be interpolated:

	<ol>
		<li>
			Both the starting and ending gradient must be expressed with the same function.
			(For example, you can transition from a ''linear-gradient()'' to a ''linear-gradient()'',
			but not from a ''linear-gradient()'' to a ''radial-gradient()'' or a ''repeating-linear-gradient()''.)

		<li>
			Both the starting and ending gradient must have the same number of <<color-stop>>s.
			<span class='note'>Note that one can pad a gradient with additional <<color-stop>>s placed atop each other,
			if necessary to make two gradients have the same number of <<color-stop>>s.)</span>

			For this purpose, all repeating gradients are considered to have "infinite" color stops,
			and thus all repeating gradients match in this respect.
	</ol>

	If the two gradients satisfy both of those constraints,
	they must be interpolated as described below.
	If not, they must be interpolated as a generic <<image>>.

	<ol>
		<li>
			Convert both the start and end gradients to their explicit forms:

			<dl>
				<dt>For linear gradients:
				<dd>
					<ul>
						<li>
							If the direction is specified as an	<<angle>>,
							it is already in its explicit form.

						<li>
							Otherwise,
							change its direction to an <<angle>> in [''0deg'',''360deg'')
							that would produce an equivalent rendering.

							If both the start and end gradients had their direction specified with keywords,
							and the absolute difference between the angles their directions mapped to is greater than 180deg,
							add 360deg to the direction of the gradient with the smaller angle.
							<span class='note'>This ensures that a transition from, for example,
							"to left" (270deg) to "to top" (0deg)
							rotates the gradient a quarter-turn clockwise,
							as expected,
							rather than rotating three-quarters of a turn counter-clockwise.</span>
					</ul>


				<dt>For radial gradients:
				<dd>
					<ul>
						<li>
							If the size is specified as two <<length>>s or <<percentage>>s,
							it is already in its explicit form.

						<li>
							Otherwise, the size must be changed to a pair of <<length>>s
							that would produce an equivalent ending-shape.
							If the <<ending-shape>> was specified as ''circle'',
							change it to ''ellipse''.
					</ul>
			</dl>


		<li>
			Interpolate each component and color-stop of the gradients independently.
			For linear gradients,
			the only component is the angle.
			For radial gradients,
			the components are the horizontal and vertical position of the center
			and the horizontal and vertical axis lengths.

		<li>
			To interpolate a color-stop,
			first match each color-stop in the start gradient
			to the corresponding color-stop at the same index in the end gradient.
			For repeating gradients,
			the first specified color-stop in the start and end gradients
			are considered to be at the same index,
			and all other color-stops following and preceding are indexed appropriately,
			repeating and shifting each gradient's list of color-stops as needed.
			Then, for each pair of color-stops,
			interpolate the position and color independently.
	</ol>

<!--
   SSSSSSSSSSSSSSS                                          iiii                    lllllll   iiii                     iiii
 SS:::::::::::::::S                                        i::::i                   l:::::l  i::::i                   i::::i
S:::::SSSSSS::::::S                                         iiii                    l:::::l   iiii                     iiii
S:::::S     SSSSSSS                                                                 l:::::l
S:::::S                eeeeeeeeeeee    rrrrr   rrrrrrrrr  iiiiiii   aaaaaaaaaaaaa    l::::l iiiiiii zzzzzzzzzzzzzzzzziiiiiiinnnn  nnnnnnnn       ggggggggg   ggggg
S:::::S              ee::::::::::::ee  r::::rrr:::::::::r i:::::i   a::::::::::::a   l::::l i:::::i z:::::::::::::::zi:::::in:::nn::::::::nn    g:::::::::ggg::::g
 S::::SSSS          e::::::eeeee:::::eer:::::::::::::::::r i::::i   aaaaaaaaa:::::a  l::::l  i::::i z::::::::::::::z  i::::in::::::::::::::nn  g:::::::::::::::::g
  SS::::::SSSSS    e::::::e     e:::::err::::::rrrrr::::::ri::::i            a::::a  l::::l  i::::i zzzzzzzz::::::z   i::::inn:::::::::::::::ng::::::ggggg::::::gg
    SSS::::::::SS  e:::::::eeeee::::::e r:::::r     r:::::ri::::i     aaaaaaa:::::a  l::::l  i::::i       z::::::z    i::::i  n:::::nnnn:::::ng:::::g     g:::::g
       SSSSSS::::S e:::::::::::::::::e  r:::::r     rrrrrrri::::i   aa::::::::::::a  l::::l  i::::i      z::::::z     i::::i  n::::n    n::::ng:::::g     g:::::g
            S:::::Se::::::eeeeeeeeeee   r:::::r            i::::i  a::::aaaa::::::a  l::::l  i::::i     z::::::z      i::::i  n::::n    n::::ng:::::g     g:::::g
            S:::::Se:::::::e            r:::::r            i::::i a::::a    a:::::a  l::::l  i::::i    z::::::z       i::::i  n::::n    n::::ng::::::g    g:::::g
SSSSSSS     S:::::Se::::::::e           r:::::r           i::::::ia::::a    a:::::a l::::::li::::::i  z::::::zzzzzzzzi::::::i n::::n    n::::ng:::::::ggggg:::::g
S::::::SSSSSS:::::S e::::::::eeeeeeee   r:::::r           i::::::ia:::::aaaa::::::a l::::::li::::::i z::::::::::::::zi::::::i n::::n    n::::n g::::::::::::::::g
S:::::::::::::::SS   ee:::::::::::::e   r:::::r           i::::::i a::::::::::aa:::al::::::li::::::iz:::::::::::::::zi::::::i n::::n    n::::n  gg::::::::::::::g
 SSSSSSSSSSSSSSS       eeeeeeeeeeeeee   rrrrrrr           iiiiiiii  aaaaaaaaaa  aaaalllllllliiiiiiiizzzzzzzzzzzzzzzzziiiiiiii nnnnnn    nnnnnn    gggggggg::::::g
                                                                                                                                                          g:::::g
                                                                                                                                              gggggg      g:::::g
                                                                                                                                              g:::::gg   gg:::::g
                                                                                                                                               g::::::ggg:::::::g
                                                                                                                                                gg:::::::::::::g
                                                                                                                                                  ggg::::::ggg
                                                                                                                                                     gggggg
-->

<h2 id='serialization'>
Serialization</h2>

	This section describes the serialization of all new properties and value types introduced in this specification,
	for the purpose of interfacing with the CSS Object Model [[CSSOM]].

	To serialize any function defined in this module,
	serialize it per its individual grammar,
	in the order its grammar is written in,
	omitting components when possible without changing the meaning,
	joining space-separated tokens with a single space,
	and following each serialized comma with a single space.

	For ''cross-fade()'',
	always serialize the <<percentage>>.

	<div class='example'>

		For example, a gradient specified as:

		<pre>Linear-Gradient( to bottom, red 0%,yellow,black 100px)</pre>

		must serialize as:

		<pre>linear-gradient(red, yellow, black 100px)</pre>
	</div>


<!--
                                                                                                                        dddddddd
TTTTTTTTTTTTTTTTTTTTTTThhhhhhh                                      EEEEEEEEEEEEEEEEEEEEEE                              d::::::d
T:::::::::::::::::::::Th:::::h                                      E::::::::::::::::::::E                              d::::::d
T:::::::::::::::::::::Th:::::h                                      E::::::::::::::::::::E                              d::::::d
T:::::TT:::::::TT:::::Th:::::h                                      EE::::::EEEEEEEEE::::E                              d:::::d
TTTTTT  T:::::T  TTTTTT h::::h hhhhh           eeeeeeeeeeee           E:::::E       EEEEEEnnnn  nnnnnnnn        ddddddddd:::::d
        T:::::T         h::::hh:::::hhh      ee::::::::::::ee         E:::::E             n:::nn::::::::nn    dd::::::::::::::d
        T:::::T         h::::::::::::::hh   e::::::eeeee:::::ee       E::::::EEEEEEEEEE   n::::::::::::::nn  d::::::::::::::::d
        T:::::T         h:::::::hhh::::::h e::::::e     e:::::e       E:::::::::::::::E   nn:::::::::::::::nd:::::::ddddd:::::d
        T:::::T         h::::::h   h::::::he:::::::eeeee::::::e       E:::::::::::::::E     n:::::nnnn:::::nd::::::d    d:::::d
        T:::::T         h:::::h     h:::::he:::::::::::::::::e        E::::::EEEEEEEEEE     n::::n    n::::nd:::::d     d:::::d
        T:::::T         h:::::h     h:::::he::::::eeeeeeeeeee         E:::::E               n::::n    n::::nd:::::d     d:::::d
        T:::::T         h:::::h     h:::::he:::::::e                  E:::::E       EEEEEE  n::::n    n::::nd:::::d     d:::::d
      TT:::::::TT       h:::::h     h:::::he::::::::e               EE::::::EEEEEEEE:::::E  n::::n    n::::nd::::::ddddd::::::dd
      T:::::::::T       h:::::h     h:::::h e::::::::eeeeeeee       E::::::::::::::::::::E  n::::n    n::::n d:::::::::::::::::d
      T:::::::::T       h:::::h     h:::::h  ee:::::::::::::e       E::::::::::::::::::::E  n::::n    n::::n  d:::::::::ddd::::d
      TTTTTTTTTTT       hhhhhhh     hhhhhhh    eeeeeeeeeeeeee       EEEEEEEEEEEEEEEEEEEEEE  nnnnnn    nnnnnn   ddddddddd   ddddd
-->


<h2 id='changes'>
Changes since Images 3</h2>

	<ul>
		<li>added ''x'' unit (or rather, put in an issue about adding it as a general alias for ''dppx'')
		<li>restored the ltr/rtl keywords in image(), but in a different place
		<li>added ''image-set()''
		<li>re-added ''element()''
		<li>re-added ''cross-fade()''
			<ul>
	    		<li>changed the syntax a bit to allow interesting things
	    	</ul>
		<li>added issue for focus-moving to ''radial-gradient()''
		<li>added ''conic-gradient()''
		<li>added two-position syntax for color-stops
		<li>allowed the color to be omitted from color-stops
		<li>loosened the syntax for color-stops to allow color/length in either order
		<li>added ''image-orientation:from-image''
		<li>re-added 'image-rendering'
		<li>added interpolation section
		<li>added serialization section
	</ul>
