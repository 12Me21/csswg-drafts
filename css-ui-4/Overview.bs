<h1>CSS Basic User Interface Module Level 4</h1>

<pre class='metadata'>
ED: http://dev.w3.org/csswg/css-ui-4/
Previous Version: http://www.w3.org/TR/css3-ui/
Shortname: css-ui
Level: 4
Group: csswg
!Issue Tracking: https://wiki.csswg.org/spec/css4-ui#css4-ui-issues-list
Status: UD
Editor: Florian Rivoal, Invited Expert, florian@rivoal.net, http://florian.rivoal.net
Ignored Terms: box-sizing, resize, text-overflow, caret-color, nav-up, nav-down, nav-left, nav-right

Abstract: This is a delta specification over CSS-UI Level 3.
          Once the level 3 specification is final,
          its content will be integrated into this specification,
          which will then replace it.
          Until then, CSS-UI Level 4 only contains additions and extensions to level 3.
</pre>

<h2 id="intro">Introduction</h2>

	Issue: Add final level 3 content

<h2 id="interaction">Module Interactions</h2>

	Issue: Add final level 3 content

<h2 id="box-model">Box Model addition</h2>

<h3 id="box-sizing">'box-sizing' property</h3>

	Issue: Add final level 3 content

<h2 id="outline-props">Outline properties</h2>

	Issue: Add final level 3 content

<h3 id="outline">'outline' property</h3>

	Issue: Add final level 3 content

<h3 id="outline-width">'outline-width' property</h3>

	Issue: Add final level 3 content

<h3 id="outline-style">'outline-style' property</h3>

	Issue: Add final level 3 content

<h3 id="outline-color">'outline-color' property</h3>

	Issue: Add final level 3 content

<h2 id="resizing-and-overflow">Resizing &amp; Overflow</h2>

	Issue: Add final level 3 content

<h3 id="resize">'resize' property</h3>

	Issue: Add final level 3 content

<h3 id="text-overflow"> Overflow Ellipsis: the 'text-overflow' property</h3>

	Issue: Add final level 3 content

<h2 id="pointing-keyboard">Pointing Devices and Keyboards</h2>

<h3 id="pointer-interaction">Pointer interaction</h3>

<h4 id="cursor">'cursor' property</h4>

	Issue: Add final level 3 content

	Issue: Amend the definition of ''cursor/auto''
	to show ''cursor/pointer'' rather than ''cursor/text''
	over text when 'user-select' is ''user-select/none''.

<h3 id="insertion-caret">Insertion caret</h3>

<h4 id="caret-color">Coloring the insertion caret: 'caret-color'</h4>

	Issue: Add final level 3 content

<h3 id="keyboard">Keyboard control</h3>

<h4 id="nav-dir">Directional focus navigation: the 'nav-up', 'nav-right', 'nav-down', 'nav-left' properties</h4>

	Issue: Add final level 3 content

<h4 id="input-method-editor">Obsolete: the ime-mode property</h4>

	Issue: Add final level 3 content

<h2 id="user-interaction">User Interaction</h2>

<h3 id="content-selection">Controling content selection</h3>

	The 'user-select' property enables authors to specify
	which elements in the document can be selected by the user and how.
	This allows for more easier interactions when not
	all elements are equally useful to select,
	avoiding accidental selections of neighbouring content.

	<pre class='propdef'>
		Name: user-select
		Value: auto | text | none | element | all
		Initial: auto
		Inherited: no
		Applies to: all elements
		Media: interactive
		Computed value: See below
	</pre>

	The computed value is the specified value,
	except on <a>editable element</a>s
	where the computed value is always ''user-select/element''
	regardless of the specified value,
	and when the specified value is ''auto'',
	which computes one of the other values as defined below.

	For the purpose of this specification,
	an <dfn>editable element</dfn> is either
	an <a href="https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#editing-host">editing host</a>
	or a <a href="http://www.w3.org/TR/html/forms.html#mutability">mutable</a> form control with textual content,
	such as <{textarea}>.


	<dl dfn-type=value dfn-for=user-select>
		<dt><dfn>auto</dfn>
		<dd>The computed value of ''auto'' is determined as follow:
		<ul>
			<li>If the element is an <a>editable element</a>
			the computed value is ''element''
			<li>Otherwise, if the element is not absolutely positioned
			and the computed value of 'user-select' on the parent of this element is ''all'',
			the computed value is ''all''
			<li>Otherwise, if the element is not absolutely positioned
			and the computed value of 'user-select' on the parent of this element is ''none'',
			the computed value is ''none''
			<li>Otherwise, the computed value is ''text''
		</ul>

		Note: This unusual combination of a non inherited property with an initial value of ''auto''
		whose computed value depends on the parent element
		makes it possible to create what is effectively selective inheritance.
		This was initially proposed by Microsoft in IE to introduce a behavior similar to inheritance
		except that the ''element'' value does not inherit.
		This also enables the behavior introduced by Mozilla in Firefox where absolutely positioned
		children do not inherit from their parent.

		<dt><dfn>text</dfn>
		<dd>The element imposes no constraint on the selection.

		Issue: Shouldn't we call this "normal" instead? The selection
		is not restricted to textual elements, and may contain tables, images...
		The webkit documentation claims their implementation of text only selects text,
		while auto selects anything,
		but sine webkit computes ''auto'' into ''text'',
		this does not match reality.

		<dt><dfn>none</dfn>
		<dd>Users cannot select the content of the element.
		No selection may be started in this element.

		However, if this element has descendants on which the computed value of 'user-select' is not ''none'',
		these descendants can be selected.

		A selection started outside of this element may not end in this element.
		If the user attempts to create such a selection,
		the UA must instead end the selection range at the element boundary.

		Issue: As of the time of writing, experimental implementations do not all behave like this.
		Firefox does.
		Chrome and Safari almost do: for a selection started after the element
		and trying to go backwards into the element
		they behave as specified here,
		but for a selection started before the element
		and trying to go into the element
		they behave as if the element has ''all'' and select it entierly.
		IE does not restrict selections started outside of the element
		from going into it at all.

		A selection may extend across this element.
		In this case, browsers which support multiple ranges per selection
		may exclude this element from the selection.
		If the element has descendants on which 'user-select' does not compute to ''none'',
		these descendants must be included in a selection extending across the element.

		Note: ''none'' is not a copy protection mechanism,
		and using it as such is ineffective:
		it will have no effect on legacy User Agents that do not support it,
		and the user can disable it through the user style sheet or equivalent mechanisms
		on UAs that do anyway.
		Instead, ''none'' is meant to
		make it easier for the user to select the content they want,
		by letting the author disable selection on UI elements
		that are not useful to select.

		<dt><dfn>element</dfn>
		<dd>A selection which is started in this element
		may not be extended outside of this element.

		Issue: If the user tries to create a selection
		that starts outside and ends inside, what happens?
		How about selections that extend across this element?
		At the time of writing, browsers behave differently.
		The behavior can be observed even on browsers that do not explicitly support ''element''
		by trying to select into / across from a &ly;textarea>.

		<dt><dfn>all</dfn>
		<dd>The content of the element must be selected atomically:
		If a selection would contain part of the element,
		then the selection must contain the entire element including all its descendant.
		If the element is selected
		and the computed value of 'user-select' on its parent is ''all'',
		then the parent must included in the selection, recursively.

		If this element has descendants on which the computed value of 'user-select' is not ''all''
		and if a selection is entirely contained in these descendants,
		then the selection is not extended to include this whole element.
	</dl>

	Note: Selections can include more than just text and extend over images, tables, videos, etc.
	The behavior when copying and pasting a such selections is out of scope for this specification.

	The following additions are made to the UA stylesheet for HTML:
	<pre><code class="lang-css">
	button, meter, progress, select { user-select: none; }
	</code></pre>

	Issue: the list above is incomplete, and needs to include
	at least the various button-like variants of <{input}>.

<hr title="Separator from footer">


<h2 class="no-num" id="acknowledgments">Appendix A. Acknowledgments</h2>

This appendix is <em>informative</em>.

	Issue: Add final level 3 content

<h2 class="no-num" id="changes">Appendix B. Changes</h2>

This appendix is <em>informative</em>.

	Issue: List changes sinces Level 3

<h2 class="no-num" id="default-style-sheet">Appendix C. Default style sheet additions for HTML</h2>

	Issue: Add final level 3 content
