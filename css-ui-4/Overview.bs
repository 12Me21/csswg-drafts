<h1>CSS Basic User Interface Module Level 4</h1>

<pre class='metadata'>
ED: http://dev.w3.org/csswg/css-ui-4/
Previous Version: http://www.w3.org/TR/css3-ui/
Shortname: css-ui
Level: 4
Group: csswg
!Issue Tracking: https://wiki.csswg.org/spec/css4-ui#css4-ui-issues-list
Status: UD
Editor: Florian Rivoal, Invited Expert, florian@rivoal.net, http://florian.rivoal.net
Ignored Terms: box-sizing, resize, text-overflow, caret-color, nav-up, nav-down, nav-left, nav-right

Abstract: This is a delta specification over CSS-UI Level 3.
          Once the level 3 specification is final,
          its content will be integrated into this specification,
          which will then replace it.
          Until then, CSS-UI Level 4 only contains additions and extensions to level 3.
</pre>

<h2 id="intro">Introduction</h2>

	Issue: Add final level 3 content

<h2 id="interaction">Module Interactions</h2>

	Issue: Add final level 3 content

<h2 id="box-model">Box Model addition</h2>

<h3 id="box-sizing">'box-sizing' property</h3>

	Issue: Add final level 3 content

<h2 id="outline-props">Outline properties</h2>

	Issue: Add final level 3 content

<h3 id="outline">'outline' property</h3>

	Issue: Add final level 3 content

<h3 id="outline-width">'outline-width' property</h3>

	Issue: Add final level 3 content

<h3 id="outline-style">'outline-style' property</h3>

	Issue: Add final level 3 content

<h3 id="outline-color">'outline-color' property</h3>

	Issue: Add final level 3 content

<h2 id="resizing-and-overflow">Resizing &amp; Overflow</h2>

	Issue: Add final level 3 content

<h3 id="resize">'resize' property</h3>

	Issue: Add final level 3 content

<h3 id="text-overflow"> Overflow Ellipsis: the 'text-overflow' property</h3>

	Issue: Add final level 3 content

<h2 id="pointing-keyboard">Pointing Devices and Keyboards</h2>

<h3 id="pointer-interaction">Pointer interaction</h3>

<h4 id="cursor">'cursor' property</h4>

	Issue: Add final level 3 content

	Issue: Amend the definition of ''cursor/auto''
	to show ''cursor/pointer'' rather than ''cursor/text''
	over text when 'user-select' is ''user-select/none''.

<h3 id="insertion-caret">Insertion caret</h3>

<h4 id="caret-color">Coloring the insertion caret: 'caret-color'</h4>

	Issue: Add final level 3 content

<h3 id="keyboard">Keyboard control</h3>

<h4 id="nav-dir">Directional focus navigation: the 'nav-up', 'nav-right', 'nav-down', 'nav-left' properties</h4>

	Issue: Add final level 3 content

<h4 id="input-method-editor">Obsolete: the ime-mode property</h4>

	Issue: Add final level 3 content

<h2 id="user-interaction">User Interaction</h2>

<h3 id="content-selection">Controling content selection</h3>

	<pre class='propdef'>
		Name: user-select
		Value: auto | text | none | element | all
		Initial: auto
		Inherited: yes
		Applies to: all elements except replaced elements
		Media: interactive
		Computed value: See below
	</pre>

	Issue: In Firefox, -moz-user-select is not inherited by absolutely positioned elements,
	but in Safari and Chrome,
	-webkit-user-select is inherited by those elements.
	In IE, it is not an inherited property.

	Issue: Some browsers (Safari at least) select and copy not only text,
	but also images.
	Should we make this property apply to (some) replaced elements as well?
	In Firefox it applies to buttons,
	but not in Safari and Chrome (where buttons always behave like ''user-select/none''.
	I am tempted to make it apply to all elements, and the UA stylesheet to deal
	with form controls. What it does when you copy&paste the selection and it contains
	non textual elements (images? videos?) is out of scope for this specification,
	but I see no reason why this property should not apply to such elements.

	The computed value is the specified value,
	except on elements containing editable text
	where the computed value is always ''user-select/element''
	regardless of the specified value.

	Issue: Prefixed implementations disagree on the computed value of ''user-select/auto''.
	In Webkit and Blink, it computes to ''user-select/text''.
	In IE, it computes to ''user-select/text'' on editable elements;
	on other elements, if the parent element's is ''user-select:none''
	it computes to ''user-select/none'',
	otherwise it computes to ''user-select/text''.
	In Firefox, it computes to ''user-select/auto'' with the same meaning as text on most elements,
	but to ''user-select/none'' on &lt;buttons>, and to ''user-select/text'' on &lt;input>
	(and maybe other things, I could not find documentation and have not run extensive tests)

	<dl dfn-type=value dfn-for=user-select>
		<dt><dfn>auto</dfn>
		<dt><dfn>text</dfn>
		<dd>The element imposes no constraint on the selection.

		Issue: Webkit's documentation claims that 
		auto selects anything,
		while text it means only select text,
		but this does not appears to be true
		since ''user-select/auto'' computes to ''user-select/text'',
		and you can select tables (in both chrome and safari)
		and images (in safari) anyway.

		Issue: Do we really need both ''user-select/text'' and ''user-select/auto''?
		In Webkit/Blink, the two values
		are redundant. While in Firefox they are not. However, the way firefox uses
		auto could be replace by UA styles.

		<dt><dfn>none</dfn>
		<dd>users cannot select the content of the element.

		Note: ''user-select/none'' is not a copy protection mechanism,
		and using it as such is ineffective:
		it will have no effect on legacy User Agents that do not support it,
		and the user can disable it through the user style sheet or equivalent mechanisms
		on UAs that do anyway.
		Instead, ''user-select/none'' is meant to
		make it easier for the user to select the content they want,
		by letting the author disable selection on UI elements
		that are not useful to select.

		<div class=issue> In IE,
		it only prevents the selection from starting on that element,
		but it will not block an existing selection from entering the element.
		Other browsers do block an existing selection from entering the element
		(mostly. Webkit&Blink's behavior isn't that straightforward),
		though they differ in terms of
		what happens when an existing selection extends across the element.
		We have a few options:
		<ol>
			<li>Do as IE does.
			This is the simplest,
			and avoids complications for selections that extend across an element.
			It may not be what authors want though.
			<li>Prevent selections from ending in the element
			and from extending across it,
			stopping the selection range at the element boundary.
			<li>Prevent selections from ending in the element
			but allow extending across it,
			and excplicitly include the content the element in such selections.
			<li>Prevent selections from ending in the element
			but allow extending across it,
			and leave undefined whether to include the content the element in such selections,
			allowing browsers with multi-range selections to skip it,
			while others would include it.
		</ol>
		An interesting subcase is when the ''user-select/none'' element
		has a non ''user-select/none'' child. Can the selection go from
		outside of the element to inside the child?
		</div>


		<dt><dfn>element</dfn>
		<dd>A selection which is started in this element
		may not be extended outside of this element.

		Issue: If the user tries to create a selection
		that starts outside and ends inside, what happens?
		What about starting outside and ending across?

		Issue: children inheriting the ''element'' value seems wrong.

		<dt><dfn>all</dfn>
		<dd>The content of the element must be selected atomically:
		If a selection would contain part of the element,
		then the selection must contain the entire element including all its descendant.
		If the element is selected
		and the computed value of 'user-select' on its parent is ''all'',
		then the parent must included in the selection, recursively.

		If this element has descendants on which the computed value of 'user-select' is not ''all''
		and if a selection is entirely contained in these descendants,
		then the selection is not extended to include this whole element.

		Issue: What happens if descendants of an ''all'' element are ''none''?
		That depends on what we say about selections that extend across a ''none'' element.
	</dl>

	Issue: IE has an auto value (which is the initial value)
	where if the element contains editable text
	such as an input element or contenteditable element,
	the text is selectable,
	but otherwise selection is determined by the parent nodeâ€™s value.
	Should we have this?
	The approach taken by this spec is
	to have the property be inherited (it isn't in IE),
	and have user-select compute to ''element'' on editable elements.

<hr title="Separator from footer">


<h2 class="no-num" id="acknowledgments">Appendix A. Acknowledgments</h2>

This appendix is <em>informative</em>.

	Issue: Add final level 3 content

<h2 class="no-num" id="changes">Appendix B. Changes</h2>

This appendix is <em>informative</em>.

	Issue: List changes sinces Level 3

<h2 class="no-num" id="default-style-sheet">Appendix C. Default style sheet additions for HTML</h2>

	Issue: Add final level 3 content
