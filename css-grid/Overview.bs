<h1>CSS Grid Layout Module Level 1</h1>

<pre class='metadata'>
Status: ED
Shortname: css-grid
Level: 1
Group: csswg
ED: http://dev.w3.org/csswg/css-grid/
TR: http://www.w3.org/TR/css-grid-1/
Previous version: http://www.w3.org/TR/2014/WD-css-grid-1-20140513/
Previous version: http://www.w3.org/TR/2014/WD-css-grid-1-20140123/
Previous version: http://www.w3.org/TR/2013/WD-css3-grid-layout-20130402/
Previous version: http://www.w3.org/TR/2012/WD-css3-grid-layout-20121106/
Editor: Tab Atkins Jr., Google, http://www.xanthir.com/contact/
Editor: fantasai, Mozilla, http://fantasai.inkedblade.net/contact
Editor: Rossen Atanassov, Microsoft, ratan@microsoft.com
Former editor: Alex Mogilevsky, Microsoft Corporation, alexmog@microsoft.com
Former editor: Phil Cupp, Microsoft Corporation, pcupp@microsoft.com
!Issues list: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=CSS&amp;component=Grid+Layout&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED">In Bugzilla</a>
Abstract: This CSS module defines a two-dimensional grid-based layout system, optimized for user interface design. In the grid layout model, the children of a grid container can be positioned into arbitrary slots in a flexible or fixed predefined layout grid.
Ignored Terms: containing block, <positive-integer>, <ident>, auto, grid-*-start, grid-*-end, flex factor, flex factors, block formatting context, grid-auto-position
Link Defaults: css21 (property) margin, css-align-3 (dfn) alignment container/alignment subject
At Risk: the ''grid-template-rows/subgrid'' value of 'grid-template-columns' and 'grid-template-rows', and its component parts individually
</pre>

<style type="text/css">
.example {
	clear:both
}

.pseudo-code {
	font-family:monospace
}
.pseudo-code > ol {
	list-style-type:decimal
}
.pseudo-code > ol > li > ol {
	list-style-type:lower-latin
}
.pseudo-code > ol > li > ol > li > ol {
	list-style-type:lower-roman
}
.pseudo-code ul {
	list-style-type:disc
}

dd > p:nth-child(1) {
	margin-top:0
}

dd:last-child {
	margin-bottom: 0;
}

dl.phase {
	padding-left: .5em;
	border-left: .5em #e0e0e0 solid;
}
</style>

<h2 id='intro'>
Introduction and Overview</h2>

	Grid layout contains features targeted at web application authors.
	The grid can be used to achieve many different layouts.
	It excels at dividing up space for major regions of an application,
	or defining the relationship in terms of size, position, and layer
	between parts of a control built from HTML primitives.

	Like tables,
	grid layout enables an author to align elements into columns and rows,
	but unlike tables,
	grid layout doesn't have content structure,
	and thus enables a wide variety of layouts not possible with tables.
	For example, the children of a grid container can position themselves
	such that they overlap and layer similar to positioned elements.

	In addition, the absence of content structure in grid layout helps to manage changes to layout
	by using fluid and source order independent layout techniques.
	By combining media queries with the CSS properties that control layout of the grid container and its children,
	authors can adapt their layout to changes in device form factors, orientation, and available space,
	without needing to alter the semantic nature of their content.


<h3 id='background'>
Background and Motivation</h3>

	<figure class="sidefigure">
		<img class="figure" alt="Image: Application layout example requiring horizontal and vertical alignment." src="images/basic-form.png" />
		<figcaption>Application layout example requiring horizontal and vertical alignment.</figcaption>
	</figure>

	As websites evolved from simple documents into complex, interactive applications,
	tools for document layout, e.g. floats,
	were not necessarily well suited for application layout.
	By using a combination of tables, JavaScript, or careful measurements on floated elements,
	authors discovered workarounds to achieve desired layouts.
	Layouts that adapted to the available space were often brittle
	and resulted in counter-intuitive behavior as space became constrained.
	As an alternative, authors of many web applications opted for a fixed layout
	that cannot take advantage of changes in the available rendering space on a screen.

	The capabilities of grid layout address these problems.
	It provides a mechanism for authors to divide available space for layout into columns and rows
	using a set of predictable sizing behaviors.
	Authors can then precisely position and size the building block elements of their application
	by into <a>grid areas</a> defined by these columns and rows.
	Figure 1 illustrates a basic layout which can be achieved with grid layout.

<h3 id='adapting-to-available-space'>
Adapting Layouts to Available Space</h3>

	<figure class="sidefigure">
			<img alt="Image: Five grid items arranged according to content size and available space." src="images/game-smaller.png" />

		<figcaption>Five grid items arranged according to content size and available space.</figcaption>
	</figure>

	<figure class="sidefigure">
			<img alt="Image: Growth in the grid due to an increase in available space." src="images/game-larger.png" />

		<figcaption>Growth in the grid due to an increase in available space.</figcaption>
	</figure>

	Grid layout can be used to intelligently reflow elements within a webpage.
	Figure 2 represents a game with five major areas in the layout:
	the game title, stats area, game board, score area, and control area.
	The author's intent is to divide the space for the game such that:

	<ul>
		<li>
			The stats area always appears immediately under the game title.
		<li>
			The game board appears to the right of the stats and title.
		<li>
			The top of the game title and the game board should always align.
		<li>
			The bottom of the game board and the stats area align when the game has reached its minimum height,
			but otherwise the game board will stretch to take advantage of all the screen real-estate available to it.
		<li>
			The score area should align into the column created by the game and stats area,
			while the controls are centered under the board.
	</ul>

	As an alternative to using script to control the absolute position, width, and height of all elements,
	the author can use grid layout,
	as shown in Figure 3.
	The following example shows how an author might achieve all the sizing, placement, and alignment rules declaratively.

	Note that there are multiple ways to specify the structure of the grid
	and to position and size <a>grid items</a>,
	each optimized for different scenarios.
	This example illustrates one that an author may use to define the position and space for each <a>grid item</a>
	using the 'grid-template-rows' and 'grid-template-columns' properties on the <a>grid container</a>,
	and the 'grid-row' and 'grid-column' properties on each <a>grid item</a>.

	<pre class="example">
		&lt;style type="text/css">
		  #grid {
			display: grid;

			/* Two columns: the first sized to content, the second receives
			 * the remaining space, but is never smaller than the minimum
			 * size of the board or the game controls, which occupy this
			 * column. */
			grid-template-columns: auto minmax(min-content, 1fr);

			/* Three rows: the first and last sized to content, the middle
			 * row receives the remaining space, but is never smaller than
			 * the minimum height of the board or stats areas. */
			grid-template-rows: auto minmax(min-content, 1fr) auto
		  }

		  /* Each part of the game is positioned between grid lines by
		   * referencing the starting grid line and then specifying, if more
		   * than one, the number of rows or columns spanned to determine
		   * the ending grid line, which establishes bounds for the part. */
		  #title    { grid-column: 1; grid-row: 1 }
		  #score    { grid-column: 1; grid-row: 3 }
		  #stats    { grid-column: 1; grid-row: 2; justify-self: start }
		  #board    { grid-column: 2; grid-row: 1 / span 2; }
		  #controls { grid-column: 2; grid-row: 3; align-self: center }
		&lt;/style>

		&lt;div id="grid">
		  &lt;div id="title">Game Title&lt;/div>
		  &lt;div id="score">Score&lt;/div>
		  &lt;div id="stats">Stats&lt;/div>
		  &lt;div id="board">Board&lt;/div>
		  &lt;div id="controls">Controls&lt;/div>
		&lt;/div>
	</pre>

<h3 id='source-independence'>
Source Independence</h3>

	<figure class="sidefigure">
		<img alt="Image: An arrangement suitable for portrait orientation." src="images/game-portrait.png" />

		<figcaption>An arrangement suitable for ''portrait'' orientation.</figcaption>
	</figure>

	<figure class="sidefigure">
		<img alt="Image: An arrangement suitable for landscape orientation." src="images/game-landscape.png" />

		<figcaption>An arrangement suitable for ''landscape'' orientation.</figcaption>
	</figure>

	Continuing the prior example,
	the author also wants the game to adapt to the space available on traditional computer monitors, handheld devices, or tablet computers.
	Also, the game should optimize the placement of the components when viewed either in landscape or portrait orientation (Figures 4 and 5).
	By combining grid layout with media queries,
	the author is able to use the same semantic markup,
	but rearrange the layout of elements independent of their source order,
	to achieve the desired layout in both orientations.

	The following example leverages grid layout’s ability to name the space which will be occupied by a <a>grid item</a>.
	This allows the author to avoid rewriting rules for <a>grid items</a>
	as the grid’s definition changes.

	<pre class="example">
		&lt;style type="text/css">
		  @media (orientation: portrait) {
			#grid {
			  display: grid;

			  /* The rows, columns and areas of the grid are defined visually
			   * using the grid-template-areas property.  Each string is a row, and
			   * each word an area.  The number of words in a string
			   * determines the number of columns. Note the number of words
			   * in each string must be identical. */
			  grid-template-areas: "title stats"
								   "score stats"
								   "board board"
								   "ctrls ctrls";

			  /* Columns and rows created with the template property can be
			   * assigned a sizing function with the grid-template-columns
			   * and grid-template-rows properties. */
			  grid-template-columns: auto minmax(min-content, 1fr);
			  grid-template-rows: auto auto minmax(min-content, 1fr) auto
			}
		  }

		  @media (orientation: landscape) {
			#grid {
			  display: grid;

			  /* Again the template property defines areas of the same name,
			   * but this time positioned differently to better suit a
			   * landscape orientation. */
			  grid-template-areas: "title board"
								   "stats board"
								   "score ctrls";

			  grid-template-columns: auto minmax(min-content, 1fr);
			  grid-template-rows: auto minmax(min-content, 1fr) auto
			}
		  }

		  /* The grid-area property places a grid item into a named
		   * region (area) of the grid. */
		  #title    { grid-area: title }
		  #score    { grid-area: score }
		  #stats    { grid-area: stats }
		  #board    { grid-area: board }
		  #controls { grid-area: ctrls }
		&lt;/style>

		&lt;div id="grid">
		  &lt;div id="title">Game Title&lt;/div>
		  &lt;div id="score">Score&lt;/div>
		  &lt;div id="stats">Stats&lt;/div>
		  &lt;div id="board">Board&lt;/div>
		  &lt;div id="controls">Controls&lt;/div>
		&lt;/div>
	</pre>


<h3 id='grid-layering'>
Grid Layering of Elements</h3>

	<figure class="sidefigure">
		<img alt="Image: A control composed of layered HTML elements." src="images/control-layering-and-alignment.png" />

		<figcaption>A control composed of layered HTML elements.</figcaption>
	</figure>

	In the example shown in Figure 6,
	the author is creating a custom slider control.
	The control has six parts.
	The lower and upper labels align to the left and right edges of the control.
	The track of the slider spans the area between the labels.
	The lower and upper fill parts touch beneath the thumb,
	and the thumb is a fixed width and height that can be moved along the track
	by updating the two flex-sized columns.

	Prior to the introduction of grid layout,
	the author would have likely used absolute positioning to control the top and left coordinates,
	along with the width and height of each HTML element that comprises the control.
	By leveraging grid layout,
	the author can instead limit script usage to handling mouse events on the thumb,
	which snaps to various positions along the track
	as the 'grid-template-columns' property of the <a>grid container</a> is updated.

	<pre class="example">
		&lt;style type="text/css">
		  #grid {
			display: grid;

			/* The grid-template-columns and rows properties also support
			 * naming grid lines which can then be used to position grid
			 * items.  The line names are assigned on either side of a column
			 * or row sizing function where the line would logically exist. */
			grid-template-columns:
			  (start)        auto
			  (track-start)  0.5fr
			  (thumb-start)  auto
			  (fill-split)   auto
			  (thumb-end)    0.5fr
			  (track-end)    auto
			  (end);
		  }

		  /* The grid-placement properties accept named lines. Below the
		   * lines are referred to by name. Beyond any
		   * semantic advantage, the names also allow the author to avoid
		   * renumbering the grid-column-start and grid-row-start properties of the
		   * grid items.  This is similar to the concept demonstrated in the
		   * prior example with the grid-template-areas property during orientation
		   * changes, but grid lines can also work with layered grid items
		   * that have overlapping areas of different shapes like the thumb
		   * and track parts  in this example. */
		  #lower-label { grid-column-start: start }
		  #track       { grid-column: track-start / track-end; align-self: center }
		  #upper-label { grid-column-end: end; }

		  /* Fill parts are drawn above the track so set z-index to 5. */
		  #lower-fill  { grid-column: track-start / fill-split;
						 align-self: end;
						 z-index: 5 }
		  #upper-fill  { grid-column: fill-split / track-end;
						 align-self: start;
						 z-index: 5 }

		  /* Thumb is the topmost part; assign it the highest z-index value. */
		  #thumb       { grid-column: thumb-start / thumb-end; z-index: 10 }
		&lt;/style>

		&lt;div id="grid">
		  &lt;div id="lower-label">Lower Label&lt;/div>
		  &lt;div id="upper-label">Upper Label&lt;/div>
		  &lt;div id="track">Track&lt;/div>
		  &lt;div id="lower-fill">Lower Fill&lt;/div>
		  &lt;div id="upper-fill">Upper Fill&lt;/div>
		  &lt;div id="thumb">Thumb&lt;/div>
		&lt;/div>
	</pre>


<h2 id='grid-concepts'>
Grid Layout Concepts and Terminology</h2>

	In <dfn export>grid layout</dfn>,
	the content of a <a>grid container</a> is laid out
	by positioning and aligning it into a <a>grid</a>.
	The <dfn export>grid</dfn> is an intersecting set of horizontal and vertical <a>grid lines</a>
	that divides the <a>grid container</a>’s space into <a>grid areas</a>,
	into which <a>grid items</a> (representing the <a>grid container</a>’s content) can be placed.
	There are two sets of <a>grid lines</a>:
	one set defining <dfn export title="grid column | column">columns</dfn>
	that run along the <a href="http://www.w3.org/TR/css3-writing-modes/#block-axis-">block axis</a> (the <dfn export>column axis</dfn>),
	and an orthogonal set defining <dfn export title="grid row | row">rows</dfn>
	along the <a href="http://www.w3.org/TR/css3-writing-modes/#inline-axis-">inline axis</a> (the <dfn export>row axis</dfn>).
	[[!CSS3-WRITING-MODES]]

<!--
	<div class="figure">
		<img class="figure" alt="Image: A diagram illustrating the relationship between the Grid Element and its Tracks, Lines, Areas and Items." src="images/grid-concepts.png" />
		<p class="caption">A diagram illustrating the relationship between the <a>grid container</a> and its tracks, lines, areas and items.
	</div>
-->

	<figure>
		<img class="figure" alt="Image: Grid Lines." src="images/grid-lines.png" />
		<figcaption>Grid lines: Three in the block axis and four in the inline axis.</figcaption>
	</figure>

<h3 id="grid-track-concept">
Grid Tracks and Cells</h3>

	<dfn export>Grid track</dfn> is a generic term for a <a>grid column</a> or <a>grid row</a>&mdash;in
	other words, it is the space between two adjacent <a>grid lines</a>.
	Each <a>grid track</a> is assigned a sizing function,
	which controls how wide or tall the column or row may grow,
	and thus how far apart its bounding <a>grid lines</a> are.

	A <dfn export>grid cell</dfn> is the similar term for the full grid&mdash;it
	is the space between two adjacent row and two adjacent column <a>grid lines</a>.
	It is the smallest unit of the grid that can be referenced when positioning <a>grid items</a>.

	<div class="example">
		In the following example there are two columns and three rows.
		The first column is fixed at 150px.
		The second column uses flexible sizing, which is a function of the unassigned space in the Grid,
		and thus will vary as the width of the <a>grid container</a> changes.
		If the used width of the <a>grid container</a> is 200px, then the second column 50px wide.
		If the used width of the <a>grid container</a> is 100px, then the second column is 0px
		and any content positioned in the column will overflow the <a>grid container</a>.

		<pre>
			&lt;style type="text/css">
				#grid {
					display: grid;
					grid-template-columns: 150px 1fr; /* two columns */
					grid-template-rows: 50px 1fr 50px /* three rows  */
				}
			&lt;/style>
		</pre>
	</div>

<h3 id="grid-line-concept">
Grid Lines</h3>

	<dfn id='grid-line' export title='grid line|grid row line|grid column line'>Grid lines</dfn> are the horizontal and vertical dividing lines of the <a>grid</a>.
	A <a>grid line</a> exists on either side of a column or row.
	They can be referred to by numerical index,
	or by an author-specified name.
	A <a>grid item</a> references the <a>grid lines</a> to determine its position within the <a>grid</a>
	using the <a href="#placement">grid-placement properties</a>.

	<div class="example">
		The following two examples create three column <a>grid lines</a> and four row <a>grid lines</a>.
		The first example demonstrates how an author would position a <a>grid item</a> using <a>grid line</a> numbers.
		The second example uses explicitly named <a>grid lines</a>.

		<pre>
			&lt;style type="text/css">
			  #grid {
				display: grid;
				grid-template-columns: 150px 1fr;
				grid-template-rows: 50px 1fr 50px
			  }

			  #item1 { grid-column: 2;
					   grid-row-start: 1; grid-row-end: 4; }
			&lt;/style>
		</pre>

		<pre>
			&lt;style type="text/css">
			  /* equivalent layout to the prior example, but using named lines */
			  #grid {
				display: grid;
				grid-template-columns: 150px (item1-start) 1fr (item1-end);
				grid-template-rows: (item1-start) 50px 1fr 50px (item1-end);
			  }

			  #item1 {
				grid-column: item1-start / item1-end;
				grid-row: item1-start / item1-end
			  }
			&lt;/style>
		</pre>
	</div>


<h3 id="grid-area-concept">
Grid Areas</h3>

	A <dfn export>grid area</dfn> is the logical space used to lay out one or more <a>grid items</a>.
	It is bound by four <a>grid lines</a>, one on each side of the <a>grid area</a>,
	and participates in the sizing of the <a>grid tracks</a> it intersects.
	A <a>grid area</a> can be named explicitly using the 'grid-template-areas' property of the <a>grid container</a>,
	or referenced implicitly by its bounding <a>grid lines</a>.
	A <a>grid item</a> is assigned to a <a>grid area</a>
	using the <a href="#placement">grid-placement properties</a>.

	<div class="example">
		<pre>
			&lt;style type="text/css">
			  /* using the template syntax */
			  #grid  {
			  display: grid;
			  grid-template-areas: ". a"
								   "b a"
								   ". a";
			  grid-template-columns: 150px 1fr;
			  grid-template-rows: 50px 1fr 50px
			  }

			  #item1 { grid-area: a }
			  #item2 { grid-area: b }
			  #item3 { grid-area: b }

			  /* Align items 2 and 3 at different points in the Grid Area "b".  */
			  /* By default, Grid Items are stretched to fit their Grid Area    */
			  /* and these items would layer one over the other. */
			  #item2 { align-self: start }
			  #item3 { justify-self: end; align-self: end }
			&lt;/style>
		</pre>
	</div>

	A <a>grid item</a>’s <a>grid area</a> forms the containing block into which it is laid out.
	Percentage lengths specified on a <a>grid item</a> resolve against this containing block.
	Percentages specified for 'margin-top', 'padding-top', 'margin-bottom', and 'padding-bottom' on a <a>grid item</a>
	resolve against the height of its containing block,
	rather than the width (as for blocks).

	<a>Grid items</a> placed into the same <a>grid area</a> do not directly affect each other's layout.
	Indirectly, a <a>grid item</a> can affect the position of a <a>grid line</a> in a column or row that uses a contents-based relative size,
	which in turn can affect the position or size of another <a>grid item</a>.

<h2 id="grid-model">
Grid Containers</h2>

<h3 id='grid-containers'>
Establishing Grid Containers: the ''display/grid'' and ''inline-grid'' 'display' values</h3>

	<pre class="propdef">
	Name: display
	New values: grid | inline-grid
	</pre>

	<dl dfn-for="display" dfn-type=value>
		<dt><dfn>grid</dfn>
		<dd>
			This value causes an element to generate a block-level <a>grid container</a> box.

		<dt><dfn>inline-grid</dfn>
		<dd>
			This value causes an element to generate an inline-level <a>grid container</a> box.
	</dl>

	A <dfn export>grid container</dfn> establishes a new <dfn export>grid formatting context</dfn> for its contents.
	This is the same as establishing a block formatting context,
	except that grid layout is used instead of block layout:
	floats do not intrude into the grid container,
	and the grid container's margins do not collapse with the margins of its contents.
	<a>Grid containers</a> form a containing block for their contents
	<a href="http://www.w3.org/TR/CSS21/visudet.html#containing-block-details">exactly like block containers do</a>. [[!CSS21]]
	The 'overflow' property applies to <a>grid containers</a>.

	Grid containers are not block containers,
	and so some properties that were designed with the assumption of block layout
	don't apply in the context of grid layout.
	In particular:

	<ul>
		<li>
			all of the 'column-*' properties in the Multicol module have no effect on a grid container.

		<li>
			'float' and 'clear' have no effect on a <a>grid item</a>.
			(However, the 'float' property still affects the computed value of 'display' on children of a grid container,
			as this occurs <em title=''>before</em> <a>grid items</a> are determined.)

		<li>
			'vertical-align' has no effect on a grid item.

		<li>
			the ''::first-line'' and ''::first-letter'' pseudo-elements do not apply to <a>grid containers</a>.
	</ul>

	If an element's specified 'display' is ''inline-grid''
	and the element is floated or absolutely positioned,
	the computed value of 'display' is <a value>grid</a>.
	The table in <a href="http://www.w3.org/TR/CSS2/visuren.html#dis-pos-flo">CSS 2.1 Chapter 9.7</a> is thus amended
	to contain an additional row,
	with ''inline-grid'' in the "Specified Value" column
	and <a>grid</a> in the "Computed Value" column.

<h3 id='intrinsic-sizes'>
Sizing Grid Containers</h3>

	A <i>grid container</i> is sized
	using the rules of the formatting context in which it participates.
	As a block-level box in a <a>block formatting context</a>,
	it is sized like any other block-level box that establishes a formatting context,
	with an ''auto'' inline size calculated as for in-flow block boxes.
	As an inline-level box in an inline formatting context,
	it is sized as an atomic inline-level box (such as an inline-block).
	In both inline and block formatting contexts,
	the <i>grid container</i>’s ''auto'' block size is its max-content size.
	<span class="issue">The block layout spec should define this?</span>

	The <a>max-content size</a> of a <a>grid container</a> is
	the sum of the <a>grid container’s</a> track sizes in the appropriate axis,
	when the grid is sized under a <a>max-content constraint</a>.

	The <a>min-content size</a> of a <a>grid container</a> is
	the sum of the <a>grid container’s</a> track sizes in the appropriate axis,
	when the grid is sized under a <a>min-content constraint</a>.

	See [[!CSS3-SIZING]] for a definition of the terms in this section.



<h2 id="grid-items">
Grid Items</h2>

	The contents of a <a>grid container</a> consists of zero or more <dfn export id="grid-item" title="grid item">grid items</dfn>:
	each child of a <a>grid container</a>
	becomes a <a>grid item</a>,
	and each contiguous run of text that is directly contained inside a <a>grid container</a>
	is wrapped in an anonymous <a>grid item</a>.
	However, an anonymous grid item that contains only
	<a href="http://www.w3.org/TR/CSS21/text.html#white-space-prop">white space</a>
	is not rendered, as if it were ''display:none''.

	A <a>grid item</a> establishes a new formatting context for its contents.
	The type of this formatting context is determined by its 'display' value, as usual.
	The computed 'display' of a <a>grid item</a>
	is determined by applying the table in
	<a href="http://www.w3.org/TR/CSS2/visuren.html#dis-pos-flo">CSS 2.1 Chapter 9.7</a>.
	However, grid items are grid-level boxes, not block-level boxes:
	they participate in their container's <a>grid formatting context</a>,
	not in a block formatting context.

	<div class="example">
			Examples of grid items:
		<pre>
&lt;div style="display:grid">

	&lt;!-- grid item: block child -->
	&lt;div id="item1">block&lt;/div>

	&lt;!-- grid item: floated element; floating is ignored -->
	&lt;div id="item2" style="float: left;">float&lt;/div>

	&lt;!-- grid item: anonymous block box around inline content -->
	anonymous item 3

	&lt;!-- grid item: inline child -->
	&lt;span>
		item 4
		&lt;!-- grid items do not split around blocks -->
		&lt;div id=not-an-item>item 4&lt;/div>
		item 4
	&lt;/span>
&lt;/div></pre>
	</div>

	Some values of 'display' trigger the generation of anonymous boxes.
	For example, a misparented ''table-cell'' child is fixed up
	by <a href="http://www.w3.org/TR/CSS21/tables.html#anonymous-boxes">generating anonymous ''table'' and ''table-row'' elements</a> around it. [[!CSS21]]
	This fixup must occur <em>before</em> a <a>grid container</a>’s children are promoted to <a>grid items</a>.
	For example, given two contiguous child elements with ''display:table-cell'',
	an anonymous table wrapper box around them becomes the <a>grid item</a>.

	<p class='note'>
		Future display types may generate anonymous containers (e.g. ruby) or otherwise mangle the box tree (e.g. run-ins).
		It is intended that grid item determination run after these operations.

<!--
<h3 id="position-grid">
Non-children Grid Items</h3>

	<p class="issue">
		This is a proposal to create the ability to have descendants of a grid item participate in a grid layout,
		similar to the behavior defined by the Template Layout module.

		A descendant of the grid can be pulled out of flow and participate directly in the grid
		by assigning it ''position: grid''.
		An element with ''position: grid'' is pulled out of flow and participates as a grid item
		belonging to the first ancestor with ''display: grid''.
		If the element is positioned using named lines or slots,
		it belongs to the first ancestor with ''display: grid'' that has all of the corresponding named lines/slots.
		If no such ancestor exists, the item remains in flow.

	<p class="issue">
		Alternatively, the item can just go into the first grid,
		and missing names are treated as <a value for="<grid-line>">auto</a>.
-->

<h3 id="visibility-collapse">
	Collapsed Grid Items: the 'visibility' property</h3>

	<p class='issue'>
		We want the ability to collapse grid tracks
		(similar to <a href="http://www.w3.org/TR/css3-flexbox/#visibility-collapse">collapsing flex items</a>
		 or <a href="http://www.w3.org/TR/CSS21/tables.html#dynamic-effects">table rows/columns</a>),
		but we're not sure exactly how to do it.
		Ideas welcome, please <a href="mailto:www-style@w3.org?Subject=%5Bcss-grid%5D%20Collapsing%20Grid%20Tracks">post them to www-style@w3.org</a>.

<h3 id='order-property'>
Reordered Grid Items: the 'order' property</h3>

	The 'order' property also applies to <a>grid items</a>.
	It affects their <a href="#grid-auto-flow-property">auto-placement</a> and <a href="#z-order">painting order</a>.


<h3 id="static-position">
Static Position of Grid Container Children</h3>

	The <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">static position</a> [[!CSS21]]
	of an absolutely-positioned child of a <a>grid container</a>
	is determined as if it were the sole grid item
	in a fixed-size <i>grid area</i>
	whose edges coincide with the padding edges of the <i>grid container</i>.

	Note: Note that this position is affected by the values of 'justify-self' and 'align-self' on the child,
	and that, as in most other layout models,
	the absolutely-positioned child has no effect on the size of the containing block
	or layout of its contents.

<h2 id='grid-definition'>
The Explicit Grid</h2>

	The three properties 'grid-template-rows', 'grid-template-columns', and 'grid-template-areas'
	together define the <dfn export>explicit grid</dfn> of a <a>grid container</a>.
	The 'grid-template' property is a shorthand that sets all three at the same time.
	The final grid may end up larger due to <a>grid items</a> placed outside the <a>explicit grid</a>;
	in this case, any implicit tracks are sized by the 'grid-auto-rows' and 'grid-auto-columns' properties.

	The size of the <a>explicit grid</a> is determined by the larger of
	the number of rows/columns defined by 'grid-template-areas'
	and the number of rows/columns sized by 'grid-template-rows'/'grid-template-columns'.
	Any rows/columns defined by 'grid-template-areas' but not sized by 'grid-template-rows'/'grid-template-columns'
	take their size from the 'grid-auto-rows'/'grid-auto-columns' properties.

	Numeric indexes in the <a>grid-placement properties</a>
	count from the edges of the <a>explicit grid</a>,
	starting from 1.
	Positive indexes count from the before/start side,
	while negative indexes count from the after/end side.

<h3 id='track-sizing'>
Track Sizing: the 'grid-template-rows' and 'grid-template-columns' properties</h3>

	<pre class='propdef'>
	Name: grid-template-columns, grid-template-rows
	Value: none | <<track-list>> | subgrid <<line-name-list>>?
	Initial: none
	Applies to: <a>grid containers</a>
	Inherited: no
	Percentages: refer to corresponding dimension of the content area
	Media: visual
	Computed value: As specified, except for ''grid-template-columns/auto'' (see prose), with lengths made absolute
	</pre>

	These properties specify,
	as a space-separated <dfn export>track list</dfn>,
	the line names and <a>track sizing functions</a> of the <a>grid</a>.
	Each <dfn title="track sizing function|sizing function">track sizing function</dfn> can be specified as a length,
	a percentage of the <a>grid container</a>’s size,
	a measurement of the contents occupying the column or row,
	or a fraction of the free space in the grid.
	It can also be specified as a range using the ''minmax()'' notation,
	which can combine any of the previously mentioned mechanisms
	to specify separate <i title="min track sizing function">min</i>
	and <i>max track sizing functions</i> for the column or row.

	The 'grid-template-columns' property specifies the <a>track list</a> for the grid's columns,
	while 'grid-template-rows' specifies the <a>track list</a> for the grid's rows.
	The syntax of a <a>track list</a> is:

	<pre>
		<dfn>&lt;track-list></dfn>     = [ <<line-names>>? [ <<track-size>> | <<repeat()>> ] ]+ <<line-names>>?
		<dfn>&lt;track-size></dfn>     = minmax( <<track-breadth>> , <<track-breadth>> ) | auto | <<track-breadth>>
		<dfn>&lt;track-breadth></dfn>  = <<length>> | <<percentage>> | <<flex>> | min-content | max-content
		<dfn>&lt;line-names></dfn>     = ( <<custom-ident>>* )
		<dfn>&lt;line-name-list></dfn> = [ <<line-names>> | repeat(<<positive-integer>>, <<line-names>>+) ]+
	</pre>

	Where:

	<dl dfn-for="grid-template-columns grid-template-rows" dfn-type=value>
		<dt><dfn><<length>></dfn>
		<dd>
			A non-negative length, as defined by CSS3 Values. [[!CSS3VAL]]

		<dt><dfn><<percentage>></dfn>
		<dd>
			A non-negative percentage, as defined by CSS3 Values. [[!CSS3VAL]]
			<<percentage>> values are relative to the measure (logical width) of the <a>grid container</a> in column <a>grid tracks</a>,
			and the extent (logical height) of the <a>grid container</a> in row <a>grid tracks</a>.
			If the measure or extent of the <a>grid container</a> is an <a href="http://www.w3.org/TR/css3-sizing/#indefinite-size">indefinite size</a>,
			<<percentage>> values relative to that size are treated as <a value for=width>auto</a>
			(or, if in a ''minmax()'' function, as ''min-content'' when in the first position
			and as ''max-content'' when in the second).

		<dt><dfn><<flex>></dfn>
		<dd>
			A non-negative dimension with the unit ''fr'' specifying the track's <dfn noexport>flex factor</dfn>.
			Each <<flex>>-sized track takes a share of the remaining space in proportion to its <i>flex factor</i>.
			See <a href="#fr-unit">Flexible Lengths</a> for more details.

		<dt><dfn>max-content</dfn>
		<dd>
			Represents the largest <i>max-content contribution</i>
			of the <a>grid items</a> occupying the <a>grid track</a>.

		<dt><dfn>min-content</dfn>
		<dd>
			Represents the largest <i>min-content contribution</i>
			of the  <a>grid items</a> occupying the <a>grid track</a>.

		<dt><dfn title="minmax()">minmax(min, max)</dfn>
		<dd>
			Defines a size range
			greater than or equal to <var>min</var>
			and less than or equal to <var>max</var>.
			If <var>max</var> &lt; <var>min</var>,
			then <var>max</var> is ignored and ''minmax(min,max)'' is treated as <var>min</var>.
			As a maximum, a <<flex>> value sets the track's <i>flex factor</i>.
			As a minimum, it is treated as zero
			(or ''min-content'', if the <i>grid container</i> is sized under a <i>min-content constraint</i>).

		<dt><dfn>auto</dfn>
		<dd>
			Computes to ''minmax(min-content, max-content)''.
	</dl>

	The <dfn value for="grid-template-rows grid-template-columns">none</dfn> value indicates that there is no <a>explicit grid</a>;
	any rows/columns will be implicitly generated,
	and their size will be determined by the 'grid-auto-rows' and 'grid-auto-columns' properties.

	The <dfn value for="grid-template-rows grid-template-columns">subgrid</dfn> value indicates that the grid will align to its parent grid in that axis.
	Rather than specifying the sizes of rows/columns explicitly,
	they'll be taken from the parent grid's definition.

	<div class='example'>
		Given the following 'grid-template-columns' declaration:

		<pre>grid-template-columns: 100px 1fr max-content minmax(min-content, 1fr);</pre>

		Five grid lines are created:

		<ol>
			<li>
				At the start edge of the <a>grid container</a>.

			<li>
				100px from the start edge of the <a>grid container</a>.

			<li>
				A distance from the previous line equal to half the <a>free space</a>
				(the width of the <a>grid container</a>, minus the width of the non-flexible <a>grid tracks</a>).

			<li>
				A distance from the previous line equal to the maximum size of any <a>grid items</a>
				belonging to the column between these two lines.

			<li>
				A distance from the previous line at least as large as the largest minimum size of any <a>grid items</a>
				belonging to the column between these two lines,
				but no larger than the other half of the <a>free space</a>.
		</ol>

		If the non-flexible sizes
		(''100px'', ''max-content'', and ''min-content'')
		sum to larger than the <a>grid container</a>’s width,
		the final <a>grid line</a> will be a distance equal to their sum away from the start edge of the <a>grid container</a>
		(the ''1fr'' sizes both resolve to ''0'').
		If the sum is less than the <a>grid container</a>’s width,
		the final <a>grid line</a> will be exactly at the end edge of the <a>grid container</a>.
		This is true in general whenever there's at least one <<flex>> value among the <a>grid track</a> sizes.
	</div>

	<div class='example'>
		Additional examples of valid <a>grid track</a> definitions:

		<pre>
			/* examples of valid track definitions */
			grid-template-rows: 1fr minmax(min-content, 1fr);
			grid-template-rows: 10px repeat(2, 1fr auto minmax(30%, 1fr));
			grid-template-rows: calc(4em - 5px)
		</pre>
	</div>


<h4 id='named-lines'>
Named Grid Lines: the ''(<<custom-ident>>*)'' syntax</h4>

	While <a>grid lines</a> can always be referred to by their numerical index,
	<dfn export title="named line">named lines</dfn>
	can make the <a>grid-placement properties</a> easier to understand and maintain.
	Lines can be explicitly named in the 'grid-template-rows' and 'grid-template-columns' properties,
	or <a href="#implicit-named-lines">implicitly named</a> by creating <a>named grid areas</a> with the 'grid-template-areas' property.

	<div class='example'>
		For example,
		the following code gives meaningful names to all of the lines in the grid.
		Note that some of the lines have multiple names.

		<pre>
			&lt;style>
			  #grid {
				display: grid;
				grid-template-columns: (first nav) 150px (main) 1fr (last);
				grid-template-rows: (first header) 50px (main) 1fr (footer) 50px (last);
			  }
			&lt;/style>
		</pre>

		<figure class="figure">
			<img class="figure" alt="Image: Named Grid Lines." src="images/grid-named-lines.png" />
			<figcaption>Named Grid Lines.</figcaption>
		</figure>
	</div>


<h4 id='repeat-notation'>
Repeating Rows and Columns: the ''repeat()'' notation</h4>

	The ''repeat()'' notation represents a repeated fragment of the <a>track list</a>.
	This is just a syntactic shorthand that allows
	writing a large number of columns or rows that exhibit a recurring pattern
	in a more compact form.
	The syntax of the ''repeat()'' notation is:

	<pre class='prod'><dfn>repeat()</dfn> = repeat( <<positive-integer>> , [ <<line-names>>? <<track-size>> ]+ <<line-names>>? )</pre>

	The first argument specifies the number of repetitions.
	The second argument is a <a>track list</a>,
	which is repeated that number of times.
	The ''repeat()'' notation cannot be nested;
	doing so makes the declaration invalid.

	<div class='example'>
		This example shows two equivalent ways of writing the same grid definition.
		Both ways produce a grid with a single row and four "main" columns, each 250px wide,
		surrounded by 10px "gutter" columns.

		<pre>
			&lt;style>
			  #grid {
				display: grid;
				grid-template-columns: 10px (col-start) 250px (col-end)
									   10px (col-start) 250px (col-end)
									   10px (col-start) 250px (col-end)
									   10px (col-start) 250px (col-end) 10px;
				grid-template-rows: 1fr;
			  }

			  /* Equivalent definition. */
			  #grid {
				display: grid;
				grid-template-columns: repeat(4, 10px (col-start) 250px (col-end)) 10px;
				grid-template-rows: 1fr;
			  }
			&lt;/style>
		</pre>
	</div>

	If the ''repeat()'' function ends up placing two <<line-names>> adjacent to each other,
	the name lists are merged.
	For example, ''repeat(2, (a) 1fr (b))'' is equivalent to ''(a) 1fr (b a) 1fr (b)''.

	Note: It is expected that a future level of this specification will define a value to be inserted between the repetitions,
	similar to the argument of the <code>Array#join</code> method in JavaScript.

	Implementations may cap the maximum number of repetitions they allow.
	If they do so, they must support at least 10000 repetitions,
	and if the number of repetitions is greater than the implementation's maximum,
	the value must be capped to the implementation's maximum
	(rather than being invalid, overflowing, or some other behavior).

<h4 id='fr-unit'>
Flexible Lengths: the ''fr'' unit</h4>

	A <dfn export>flexible length</dfn> or <dfn><<flex>></dfn> is a dimension with the ''fr'' unit,
	which represents a fraction of the <a>free space</a> in the <a>grid container</a>.

	The distribution of <a>free space</a> occurs after all non-flexible <a>track sizing functions</a> have reached their maximum.
	The total size of such rows or columns is subtracted from the available space, yielding the <a>free space</a>,
	which is then divided among the flex-sized rows and columns in proportion to their <i>flex factor</i>.

	Note: Flexible lengths in a <a>track list</a> work similarly to flexible lengths with a zero base size in [[CSS3-FLEXBOX]].

	Each column or row's share of the <a>free space</a> can be computed as the column or row's
	<code>&lt;flex> * &lt;free space> / &lt;sum of all <i>flex factors</i></code>.
	For the purpose of this calculation,
	a flexible length in the <var>min</var> position of a ''minmax()'' function is treated as ''0'' (an inflexible length).

	When the available space is infinite
	(which happens when the <a>grid container</a>’s width or height is <a>indefinite</a>),
	flex-sized <a>grid tracks</a> are sized to their contents while retaining their respective proportions.
	The used size of each flex-sized <a>grid track</a> is computed by
	determining the ''max-content'' size of each flex-sized <a>grid track</a>
	and dividing that size by the respective <i>flex factor</i>
	to determine a “hypothetical ''1fr'' size”.
	The maximum of those is used as the resolved ''1fr'' length (the <dfn>flex fraction</dfn>),
	which is then multiplied by each <a>grid track</a>’s <i>flex factor</i> to determine its final size.


<h4 id="subgrids">
Subgrids: the ''grid-template-rows/subgrid'' keyword</h4>

	A <a>grid item</a> can itself be a <a>grid container</a> by giving it ''display: grid'';
	in this case the layout of its contents will be independent of the layout of the grid it participates in.

	In some cases it might be necessary for the contents of multiple <a>grid items</a> to align to each other.
	A <a>grid container</a> that is itself a <a>grid item</a>
	can defer the definition of its rows or columns to its parent <a>grid container</a>
	by using the ''grid-template-rows/subgrid'' keyword in 'grid-template-rows' and/or 'grid-template-columns',
	making it a <dfn export>subgrid</dfn> in that dimension.
	In this case, the <a>grid items</a> of the <a>subgrid</a>
	participate in sizing the <a>grid</a> of the parent <a>grid container</a>,
	allowing the contents of both grids to align.

	<div class="example">
			For example, suppose we have a form consisting of a list of inputs with labels:
		<pre>
			&lt;ul>
				&lt;li>&lt;label>Name:&lt;/label> &lt;input name=fn>
				&lt;li>&lt;label>Address:&lt;/label> &lt;input name=address>
				&lt;li>&lt;label>Phone:&lt;/label> &lt;input name=phone>
			&lt;/ul>
		</pre>

		We want the labels and inputs to align, and we want to style each list item with a border.
		This can be accomplished with subgrid layout:

		<pre>
			ul {
				display: grid;
				grid-auto-flow: row;
				grid-template-columns: auto 1fr;
			}
			li {
				display: grid;
				grid: subgrid;
				margin: 0.5em;
				border: solid;
				padding: 0.5em;
			}
			label {
				grid-column: 1;
			}
			input {
				grid-column: 2;
			}
		</pre>
	</div>

	A <a>subgrid</a> behaves just like a normal <a>grid container</a> except that:

	<ul style="list-style-type: lower-alpha">
		<li>
			The number of explicit tracks is given by its <a>grid span</a>,
			rather than by 'grid-template-rows'/'grid-template-columns'.
			If the grid has an <a>automatic grid span</a>,
			the number of tracks is determined by the size of the <a>subgrid</a>’s <a>implicit grid</a>.

		<li>
			The <a>grid-placement properties</a> of the <a>subgrid</a>’s <a>grid items</a>
			are scoped to the lines covered by the subgrid.
			E.g., numeric indices count starting from the first line of the subgrid
			rather than the first line of the parent grid.

		<li>
			The <a>subgrid</a>'s own grid items participate in the sizing of its parent grid and are aligned to it.
			In this process, the sum of the item's margin, padding, and borders are applied as an extra layer of margin to the items at those edges.

			<div class="example">
				For example, if we have a 3&times;3 grid with the following tracks:

				<pre>#parent-grid { grid-template-columns: 300px auto 300px; }</pre>

				If a subgrid covers the last two tracks, its first two columns correspond to the parent grid's last two columns,
				and any items positioned into those tracks participate in sizing the parent grid.
				Specifically, an item positioned in the first track of the subgrid
				influences the auto-sizing of the parent grid's middle track.

				<pre>
					#subgrid { grid-column: 2 / span 2; } /* cover parent's 2nd and 3rd tracks */
					#subgrid :first-child { grid-column: 1; } /* subgrid's 1st track, parent grid's 2nd track */
				</pre>

				If the subgrid has margins/borders/padding,
				the the size of those margins/borders/padding also influence sizing.
				For example, if the subgrid has 100px padding:

				<pre>#subgrid { padding: 100px; }</pre>

				Then when the parent grid auto-sizes its second track,
				it will be at least 100px wider than any items in the subgrid's first track,
				and any items in the subgrid's second track will be sized to fit a slot 200px wide (instead of 300px wide).
			</div>

			However, any overflow tracks
			(i.e. those outside the <i>explicit grid</i> when the <i>subgrid</i> has a <i>definite grid span</i>)
			do not correspond to any tracks in the parent grid;
			they effectively extend in a third dimension.

			<div class="example">
				For example, if a parent grid has adjacent tracks <var>A</var>, <var>B</var>, and <var>C</var>,
				and a ''span 1'' subgrid with an extra <i>implicit grid track</i> is placed in track <var>B</var>,
				the items in that <i>implicit grid track</i> are not considered part of track <var>B</var>.
			</div>

		<li>
			The <a>subgrid</a> is always stretched;
			the 'align-self'/'justify-self' properties on it are ignored.
			Any specified width/height constraints are also ignored.

		<li>
			Layoutwise, the <a>subgrid</a>’s <a>explicit grid</a> is always aligned with the corresponding section of the parent <a>grid</a>;
			the 'align-content'/'justify-content' properties on it are ignored.
			However, 'overflow' does apply,
			so the contents of the subgrid can be scrolled aside.
			(Note: the act of scrolling does not affect layout.)

		<li>
			Explicit named lines can also be specified together with the ''grid-template-rows/subgrid'' keyword;
			these names apply (within the <a>subgrid</a>) to the corresponding lines of the parent <a>grid</a>.
			If the <a>subgrid</a> has an explicit <a>grid span</a>,
			any names specified for lines beyond the span are ignored.

			<div class="example">
				For example, if the subgrid above were specified with 5 names:

				<pre>#subgrid { grid-template-columns: subgrid (first) (second) (third) (fourth) (fifth); }</pre>

				Items within the subgrid could be positioned using the first four line names;
				the last name would be ignored (as if it didn't exist),
				since the subgrid only covers four lines.
			</div>

			If the <a>subgrid</a> has an explicit <a>grid position</a> as well as an explicit <a>grid span</a>,
			it also automatically receives the line names specified for its parent <a>grid</a>.
			(In such cases the author can rely on the names specified in the parent grid,
			and does not need to duplicate those names in each subgrid declaration.)
	</ul>

<h4 id='resolved-track-list'>
Resolved Values</h4>

	When an element's 'display' is ''grid'' or ''inline-grid'' and it generates a box,
	the <a href="http://www.w3.org/TR/cssom/#resolved-values">resolved value</a>
	of the 'grid-template-rows' and 'grid-template-columns' properties is the used value,
	serialized as follows:

	<ul>
		<li>
			Every track listed,
			whether implicitly or explicitly created.

		<li>
			Every track size given as a length in pixels,
			regardless of sizing function.

		<li>
			A contiguous run of two or more tracks that have the same size and associated line names
			may be serialized with the ''repeat()'' notation.
	</ul>

	Otherwise, (e.g. when the element has ''display: none'' or is not a grid)
	the resolved value is simply the computed value.

	<div class="example">
		<pre>
			&lt;style>
			  #grid {
				width: 500px;
				grid-template-columns:
				  (a)     auto
				  (b)     minmax(min-content, 1fr)
				  (b c d) repeat(2, (e) 40px)
						  repeat(5, auto);
			  }
			&lt;/style>
			&lt;div id="grid">
			  &lt;div style="grid-column-start:1; width:50px">&lt;/div>
			  &lt;div style="grid-column-start:9; width:50px">&lt;/div>
			&lt;/div>
			&lt;script>
			  var gridElement = document.getElementById("grid");
			  getComputedStyle(gridElement).gridDefinitionColumns;
			  // (a) 50px (b) 320px (b c d) repeat(2, (e) 40px) repeat(4, 0px) 50px
			&lt;/script>
		</pre>
	</div>

	Note: In general, resolved values are the computed values,
	except for a small list of legacy 2.1 properties.
	However, compatibility with early implementations of this module
	requires us to define 'grid-template-rows' and 'grid-template-columns' as returning used values.
	Authors are recommended to use the
	<a href="http://dev.w3.org/csswg/cssom/#the-getstyleutils-interface"><code>.rawComputedStyle</code> and <code>.usedStyle</code> attributes</a>
	instead of <code>getComputedStyle()</code>.


<h3 id="grid-template-areas-property">
Named Areas: the 'grid-template-areas' property</h3>

	<pre class='propdef'>
	Name: grid-template-areas
	Value: none | <<string>>+
	Initial: none
	Applies to: <a>grid containers</a>
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	</pre>

	This property specifies <dfn export title="named grid area">named grid areas</dfn>,
	which are not associated with any particular <a>grid item</a>,
	but can be referenced from the <a>grid-placement properties</a>.
	The syntax of the 'grid-template-areas' property also provides a visualization
	of the structure of the <a>grid</a>,
	making the overall layout of the <a>grid container</a> easier to understand.

	Values have the following meanings:

	<dl dfn-for="grid-template-areas" dfn-type=value>
		<dt><dfn>none</dfn>
		<dd>
			The <a>grid container</a> doesn't define any <a>named grid areas</a>.

		<dt><dfn><<string>>+</dfn>
		<dd>
			A row is created for every separate string listed for the 'grid-template-areas' property,
			and a column is created for each cell in the string,
			when parsed as follows:

			Tokenize the string into a list of the following tokens,
			using longest-match semantics:

			<ul dfn-type="dfn">
				<li>
					A sequence of <a>name code points</a>,
					representing a <dfn>named cell token</dfn>
					with a name consisting of its code points.
				<li>
					A "." (U+002E FULL STOP),
					representing a <dfn>null cell token</dfn>.

				<li>
					A sequence of <a>whitespace</a>,
					representing nothing
					(do not produce a token).

				<li>
					A sequence of any other characters,
					representing a <dfn>trash token</dfn>.
			</ul>

			Note: These rules can produce cell names that do not match the <<ident>> syntax,
			such as "1st 2nd 3rd",
			which requires escaping when referencing those areas by name in other properties,
			like ''grid-row: \31st;'' to reference the area named ''1st''.

			<ul>
				<li>
					A <a>null cell token</a> represents an unnamed area in the <a>grid container</a>.

				<li>
					A <a>named cell token</a> creates a <a>named grid area</a> with the same name.
					Multiple <a>named cell tokens</a> within and between rows
					create a single <a>named grid area</a> that spans the corresponding <a>grid cells</a>.

				<li>
					A <a>trash token</a> is a syntax error,
					and makes the declaration invalid.
			</ul>

			All strings must have the same number of columns,
			or else the declaration is invalid.
			If a <a>named grid area</a> spans multiple <a>grid cells</a>,
			but those cells do not form a single filled-in rectangle,
			the declaration is invalid.

			Note: Non-rectangular or disconnected regions may be permitted in a future version of this module.
	</dl>


	<div class='example'>
		In this example, the 'grid-template-areas' property is used to create a page layout
		where areas are defined for header content (<code>head</code>),
		navigational content (<code>nav</code>),
		footer content (<code>foot</code>),
		and main content (<code>main</code>).
		Accordingly, the template creates three rows and two columns,
		with four <a>named grid areas</a>.
		The <code>head</code> area spans both columns and the first row of the grid.

		<pre>
			&lt;style type="text/css">
			  #grid {
				display: grid;
				grid-template-areas: "head head"
									 "nav  main"
									 "foot .   "
			  }
			  #grid > header { grid-area: head; }
			  #grid > nav    { grid-area: nav; }
			  #grid > main   { grid-area: main; }
			  #grid > footer { grid-area: foot; }
			&lt;/style>
		</pre>
	</div>

<h4 id="implicit-named-lines">
Implicit Named Lines</h4>

	The 'grid-template-areas' property creates <dfn export title="implicit named line">implicit named lines</dfn> from the <a>named grid areas</a> in the template.
	For each <a>named grid area</a> <var>foo</var>, four <a>implicit named lines</a> are created:
	two named ''<var>foo</var>-start'', naming the row-start and column-start lines of the <a>named grid area</a>,
	and two named ''<var>foo</var>-end'', naming the row-end and column-end lines of the <a>named grid area</a>.

	These named lines behave just like any other named line,
	except that they do not appear in the value of 'grid-template-rows'/'grid-template-columns'.
	Even if an explicit line of the same name is defined,
	the implicit named lines are just more lines with the same name.

<h4 id="implicit-named-areas">
Implicit Named Areas</h4>

	Since a <i>named grid area</i> is referenced by the <i>implicit named lines</i> it produces,
	explicitly adding named lines of the same form (''foo-start''/''foo-end'')
	effectively creates a <i>named grid area</i>.
	Such <dfn export title="implicit named area">implicit named areas</dfn> do not appear in the value of 'grid-template-areas',
	but can still be referenced by the <a>grid-placement properties</a>.

<h3 id='explicit-grid-shorthand'>
Explicit Grid Shorthand: the 'grid-template' property</h3>

	<pre class='propdef'>
	Name: grid-template
	Value: none | subgrid | <<'grid-template-columns'>> / <<'grid-template-rows'>> |<br> [ <<track-list>> / ]? [ <<line-names>>? <<string>> <<track-size>>? <<line-names>>? ]+
	Initial: see individual properties
	Applies to: <a>grid containers</a>
	Inherited: see individual properties
	Percentages: see individual properties
	Media: visual
	Computed value: see individual properties
	</pre>

	The 'grid-template' property is a shorthand for setting
	'grid-template-columns', 'grid-template-rows', and 'grid-template-areas' in a single declaration.
	It has several distinct syntax forms:

	<dl dfn-for=grid-template dfn-type=value>
		<dt><dfn>none</dfn>
		<dd>
			Sets all three properties to their initial values (<a value for=grid-template-rows>none</a>).

		<dt><dfn>subgrid</dfn>
		<dd>
			Sets 'grid-template-rows' and 'grid-template-columns' to ''grid-template-rows/subgrid'',
			and 'grid-template-areas' to its initial value.

		<dt><dfn id='grid-template-rowcol'><<'grid-template-columns'>> / <<'grid-template-rows'>></dfn>
		<dd>
			Sets 'grid-template-columns' and 'grid-template-rows' to the specified values, respectively,
			and sets 'grid-template-areas' to <a value for=grid-template-areas>none</a>.

			<div class='example'>
				<pre>grid-template: auto 1fr auto / auto 1fr;</pre>

					is equivalent to

				<pre>
					grid-template-columns: auto 1fr auto;
					grid-template-rows: auto 1fr;
					grid-template-areas: none;
				</pre>
			</div>

		<dt><dfn id='grid-template-ascii'>[ <<track-list>> / ]? [ <<line-names>>? <<string>> <<track-size>>? <<line-names>>? ]+</dfn>
		<dd>
			<ul>
				<li>
					Sets 'grid-template-columns' to the track listing specified before the slash
					(or <a value for=grid-template-columns>none</a>, if not specified).

				<li>
					Sets 'grid-template-areas' to the strings listed after the slash.

				<li>
					Sets 'grid-template-rows' to the <<track-size>>s following each string
					(filling in <a value for=grid-template-rows>auto</a> for any missing sizes),
					and splicing in the named lines defined before/after each size.
			</ul>

				This syntax allows the author to align track names and sizes inline with their respective grid areas.

			<div class='example'>
				<pre>
					grid-template: auto 1fr auto /
					  (header-top) "a   a   a"     (header-bottom)
						(main-top) "b   b   b" 1fr (main-bottom);
				</pre>

					is equivalent to

				<pre>
					grid-template-columns: auto 1fr auto;
					grid-template-rows: (header-top) auto (header-bottom main-top) 1fr (main-bottom);
					grid-template-areas: "a a a"
										 "b b b";
				</pre>
			</div>
	</dl>

	Note: The 'grid' shorthand accepts the same syntax,
	but also resets the implicit grid properties to their initial values.
	Unless authors want those to cascade in separately,
	it is therefore recommended to use 'grid' instead of 'grid-template'.

<h2 id='implicit-grids'>
The Implicit Grid</h2>

	While 'grid-template' and its longhand properties define the <a>explicit grid</a>,
	<a>grid items</a> can be positioned outside of these bounds.
	This causes the <a>grid container</a> to generate <a>implicit grid tracks</a>,
	forming the <dfn export>implicit grid</dfn>.
	The 'grid-auto-rows' and 'grid-auto-columns' properties size these <a>implicit grid tracks</a>.

	The 'grid-auto-flow' property controls auto-placement of <a>grid items</a>
	without an explicit position.
	Once the <a>explicit grid</a> is filled
	(or if there is no <a>explicit grid</a>)
	auto-placement will also cause the generation of <a>implicit grid tracks</a>.

<h3 id='auto-tracks'>
Sizing Auto-generated Rows and Columns: the 'grid-auto-rows' and 'grid-auto-columns' properties</h3>

	<pre class='propdef'>
	Name: grid-auto-columns, grid-auto-rows
	Value: <<track-size>>
	Initial: auto
	Applies to: <a>grid containers</a>
	Inherited: no
	Percentages: see <a href="#track-sizing">Track Sizing</a>
	Media: visual
	Computed value: see <a href="#track-sizing">Track Sizing</a>
	</pre>

	If a grid item is positioned into a row or column that is not explicitly sized
	by 'grid-template-rows' or 'grid-template-columns',
	<dfn export title="implicit grid track|implicit grid row|implicit grid column">implicit grid tracks</dfn> are created to hold it.
	This can happen either by explicitly positioning into a row or column that is out of range,
	or by the <a>auto-placement algorithm</a> creating additional rows or columns.
	The 'grid-auto-columns' and 'grid-auto-rows' properties specify the size of such implicitly-created tracks.

	<div class='example'>
		This example illustrates the sizing of <a>implicit grid tracks</a>.
		Note that <a>grid item</a> B is positioned on <a>grid line</a> 5,
		which automatically creates <strong>four</strong> <a>implicit grid columns</a>.
		However, only two of them
		(the first and the last)
		are occupied by any <a>grid items</a>,
		so the two empty <a>grid tracks</a>
		collapse to zero width.

		<figure class="figure">
				<img alt="" src="images/implicit-columns-and-rows.png" />

			<figcaption>A Grid with an implicit row and four implicit columns, two of which are zero-sized.</figcaption>
		</figure>

		<pre>
			&lt;style type="text/css">
				#grid {
					display: grid;
					grid-template-columns: 20px;
					grid-template-rows: 20px }
				#A { grid-column: 1;          grid-row: 1; }
				#B { grid-column: 5;          grid-row: 1 / span 2; }
				#C { grid-column: 1 / span 2; grid-row: 2; }
			&lt;/style>

			&lt;div id="grid">
				&lt;div id="A">A&lt;/div>
				&lt;div id="B">B&lt;/div>
				&lt;div id="C">C&lt;/div>
			&lt;/div>
		</pre>
	</div>

<h3 id="grid-auto-flow-property">
Automatic Placement: the 'grid-auto-flow' property</h3>

	<pre class='propdef'>
	Name: grid-auto-flow
	Value: [ row | column ] && dense?  |   stack && [ row | column ]?
	Initial: row
	Applies to: <a>grid containers</a>
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	</pre>

	<a>Grid items</a> that aren't explicitly placed are automatically placed into an unoccupied space in the <a>grid container</a>.
	The 'grid-auto-flow' property controls the direction in which the search for unoccupied space takes place,
	and whether rows or columns are added as needed to accommodate the content.

	<dl dfn-for=grid-auto-flow dfn-type=value>
		<dt><dfn>row</dfn>
		<dd>
			The <a>auto-placement algorithm</a> places items
			by filling each row in turn,
			adding new rows as necessary.

		<dt><dfn>column</dfn>
		<dd>
			The <a>auto-placement algorithm</a> places items
			by filling each column in turn,
			adding new columns as necessary.

		<dt><dfn>dense</dfn>
		<dd>
			If specified, the auto-placement algorithm uses a "dense" packing algorithm,
			which attempts to fill in holes in the grid if smaller items come up later.
			(By default, the auto-placement algorithm is "sparse",
			permanently skipping spaces that it can't fill with the current <a>grid item</a>.)

			Note: This may cause items to appear out-of-order.

		<dt><dfn>stack</dfn>
		<dd>
			The auto-placement algorithm is run with a single hypothetical 1×1 grid item,
			as if ''grid-auto-flow: row'' or ''grid-auto-flow: column'' were specified,
			depending on whether ''row'' or ''column'' is specified alongside it,
			respectively.
			If neither ''row'' nor ''column'' are specified,
			it defaults to running the algorithm as if ''grid-auto-flow: row'' were specified.

			Wherever the hypothetical item would be placed,
			all auto-placed items are placed there,
			stacked atop one another.
			(This happens even if the auto-placed item is greater than 1×1,
			even if doing so would cause it to overlap explicitly-placed <a>grid items</a>.)
	</dl>

	Note: A future level of this module is expected to add a value that flows auto-positioned items together into a single “default” cell.

	Auto-placement takes <a>grid items</a> in <a>order-modified document order</a>.

	<div class='example'>
		In the following example, there are three columns, each auto-sized to their contents.
		No rows are explicitly defined.
		The 'grid-auto-flow' property is ''grid-auto-flow/row''
		which instructs the grid to search across its three columns starting with the first row,
		then the next,
		adding rows as needed until sufficient space is located to accommodate the position of any auto-placed <a>grid item</a>.

		<div class="figure">
				<img alt="Image: A form arranged using automatic placement." src="images/auto-placed-form.png" />

			<p class="caption">A form arranged using automatic placement.
		</div>

		<pre>
			&lt;style type="text/css">
			  form {
				display: grid;
				/* Define three columns, all content-sized,
				   and name the corresponding lines. */
				grid-template-columns: (labels) auto (controls) auto (oversized) auto;
				grid-auto-flow: row;
			  }
			  form > label {
				/* Place all labels in the "labels" column and
				   automatically find the next available row. */
				grid-column: labels;
				grid-row: auto;
			  }
			  form > input, form > select {
				/* Place all controls in the "controls" column and
				   automatically find the next available row. */
				grid-column: controls;
				grid-row: auto;
			  }

			  #department {
				/* Auto place this item in the "oversized" column
				   in the first row where an area that spans three rows
				   won't overlap other explicitly placed items or areas
				   or any items automatically placed prior to this area. */
				grid-column: oversized;
				grid-row: span 3;
			  }

			  /* Place all the buttons of the form
				 in the explicitly defined grid area. */
			  #buttons {
				grid-row: auto;

				/* Ensure the button area spans the entire grid element
				   in the row axis. */
				grid-column: 1 / -1;
				text-align: end;
			  }
			&lt;/style>
			&lt;form>
			  &lt;label for="firstname">First name:&lt;/label>
			  &lt;input type="text" id="firstname" name="firstname" />
			  &lt;label for="lastname">Last name:&lt;/label>
			  &lt;input type="text" id="lastname" name="lastname" />
			  &lt;label for="address">Address:&lt;/label>
			  &lt;input type="text" id="address" name="address" />
			  &lt;label for="address2">Address 2:&lt;/label>
			  &lt;input type="text" id="address2" name="address2" />
			  &lt;label for="city">City:&lt;/label>
			  &lt;input type="text" id="city" name="city" />
			  &lt;label for="state">State:&lt;/label>
			  &lt;select type="text" id="state" name="state">
				&lt;option value="WA">Washington&lt;/option>
			  &lt;/select>
			  &lt;label for="zip">Zip:&lt;/label>
			  &lt;input type="text" id="zip" name="zip" />

			  &lt;div id="department">
				&lt;label for="department">Department:&lt;/label>
				&lt;select id="department" name="department" multiple>
				  &lt;option value="finance">Finance&lt;/option>
				  &lt;option value="humanresources">Human Resources&lt;/option>
				  &lt;option value="marketing">Marketing&lt;/option>
				&lt;/select>
			  &lt;/div>

			  &lt;div id="buttons">
				&lt;button id="cancel">Cancel&lt;/button>
				&lt;button id="back">Back&lt;/button>
				&lt;button id="next">Next&lt;/button>
			  &lt;/div>
			&lt;/form>
		</pre>
	</div>

<h4 id='auto-placement-algo'>
Automatic Grid Item Placement Algorithm</h4>

	The following <dfn export title="auto-placement|auto-placement algorithm">auto-placement algorithm</dfn>
	places <a>grid items</a> with <a>automatic grid positions</a> into a <a>definite grid position</a>.

	To aid in clarity,
	this algorithm is written with the assumption that 'grid-auto-flow' is set to ''grid-auto-flow/row''.
	If it is instead set to ''grid-auto-flow/column'',
	swap all mentions of rows and columns in this algorithm.

	For the purpose of this algorithm,
	an <dfn>occupied grid cell</dfn>
	is any <a>grid cell</a> which is contained within
	any <a>named grid area</a>
	or the <a>grid area</a> of any previously-positioned <a>grid item</a>.

	<ol>
		<li>
			<b>Position anything that's not auto-positioned.</b>

			Before auto-positioning anything,
			position every <a>grid item</a>
			with a <a>definite grid position</a> in both axes.

		<li>
			<b>Process the items locked to a given row.</b>

			For each <a>grid item</a> with a <a>definite row position</a>
			(that is, the 'grid-row-start' and 'grid-row-end' properties define a <a>definite grid position</a>),
			in <a>order-modified document order</a>,
			position its <a>inline-start</a> edge
			to the earliest (smallest positive index) line index
			that ensures this item’s <a>grid area</a> will not overlap any <a>occupied grid cells</a>.

		<li>
			<b>Determine the number of columns in the implicit grid.</b>

			Set the number of columns in the <a>implicit grid</a> to the larger of:

			<ul>
				<li>
					The number of columns in the <a>explicit grid</a>.

				<li>
					Among all the items with a <a>definite column position</a>
					(explicitly positioned items, items positioned in the previous step, and items not yet positioned but with a definite column)
					the largest positive line index that an item’s <a>inline-end</a> edge is positioned to,
					minus 1.

				<li>
					Among all items with a <a>definite column span</a>,
					the largest such span.
			</ul>

			<div class='example'>
				For example, in the following style fragment:

				<pre class=css>
					#grid {
						display: grid;
						grid-template-columns: repeat(5, 100px);
						grid-auto-flow: row;
					}
					#grid-item {
						grid-column: 4 / span 3;
					}
				</pre>

				The number of columns needed is 6.
				The <code>#grid-item</code> element’s <a>inline-start</a> edge is positioned at index 4,
				so its span ensures that it’s <a>inline-end</a> edge will be positioned at index 7.
				This requires <code>7 - 1 = 6</code> columns to hold,
				which is larger than the <a>explicit grid</a>’s 5 columns.
			</div>


		<li>
			<b>Position the remaining grid items.</b>

			The <dfn export>auto-placement cursor</dfn> defines the current "insertion point" in the grid,
			specified as a pair of row and column <a>grid lines</a>.
			Initially the <a>auto-placement cursor</a> at is specified with a row and column position both equal to 1.

			For each <a>grid item</a> that hasn't been positioned by the previous steps,
			in <a>order-modified document order</a>:

			<dl>
				<dt>If the item has a <a>definite column position</a>:
				<dd>
					<ol>
						<li>
							Set the column position of the cursor to be equal to the <a>inline-start</a> index of the <a>grid item</a>.

						<li>
							Increment the <a>auto-placement cursor</a>’s row position until a value is found
							where the <a>grid item</a> does not overlap any <a>occupied grid cells</a>
							(creating new rows in the <a>implicit grid</a> as necessary).
							Position the item's <a>block-start</a> edge to the <a>auto-placement cursor</a>’s row position.
					</ol>

				<dt>If the item has an <a>automatic grid position</a> in both axes:
				<dd>
					<ol>
						<li>
							Increment the column position of the <a>auto-placement cursor</a>
							until this item’s <a>grid area</a> does not overlap any <a>occupied grid cells</a>
							or overflow the number of columns determined in the previous step.

						<li>
							If a non-overlapping position was found in the previous step,
							position the item’s <a>inline-start</a> and <a>block-start</a> edges
							to the <a>auto-placement cursor</a>’s column and row position, respectively
							Otherwise,
							increment the <a>auto-placement cursor</a>’s row position
							(creating new rows in the <a>implicit grid</a> as necessary),
							set its column position to 1,
							and return to the previous step.
					</ol>
			</dl>

			If 'grid-auto-flow' specifies the ''dense'' keyword,
			reset the <a>auto-placement cursor</a> to 1/1 each time an item is placed.
	</ol>

<h2 id='grid-shorthand'>
Grid Definition Shorthand: the 'grid' property</h2>

	<pre class='propdef'>
	Name: grid
	Value: <<'grid-template'>> | [ <<'grid-auto-flow'>> [ <<'grid-auto-columns'>> [ / <<'grid-auto-rows'>> ]? ]? ]
	Initial: see individual properties
	Applies to: <a>grid containers</a>
	Inherited: see individual properties
	Percentages: see individual properties
	Media: visual
	Computed value: see individual properties
	</pre>

	The 'grid' property is a shorthand that sets
	all of the explicit grid properties
	('grid-template-rows', 'grid-template-columns', and 'grid-template-areas')
	as well as all the implicit grid properties
	('grid-auto-rows', 'grid-auto-columns', and 'grid-auto-flow')
	in a single declaration.
	If <<'grid-auto-rows'>> value is omitted,
	it is set to the value specified for 'grid-auto-columns'.
	Other omitted values are set to their initial values.

	Note: Note that you can only specify the explicit <em>or</em> the implicit grid properties in a single 'grid' declaration.
	The sub-properties you don't specify are set to their initial value,
	as normal for shorthands.

	<div class='example'>
		In addition to accepting the 'grid-template' shorthand syntax for setting up the <i>explicit grid</i>,
		the 'grid' shorthand can also easily set up parameters for an auto-formatted grid.
		For example, ''grid: row 1fr;'' is equivalent to

		<pre>
			grid-template: none;
			grid-auto-columns: 1fr;
			grid-auto-rows: 1fr;
			grid-auto-flow: row;
		</pre>

		Similarly, ''grid: column 1fr / auto'' is equivalent to
		<pre>
			grid-template: none;
			grid-auto-columns: 1fr;
			grid-auto-rows: auto;
			grid-auto-flow: column;
		</pre>
	</div>

<h2 id="placement">
Placing Grid Items</h2>

	A <a>grid item</a>’s <dfn export title="grid placement|placement">placement</dfn> consists of a <a>grid position</a> and a <a>grid span</a>:

	<dl export>
		<dt><dfn>grid position</dfn>
		<dd>
			The <a>grid item</a>’s location in the <a>grid</a>.
			A <i>grid position</i> can be either
			<dfn export title="definite grid position|definite row position|definite column position|definite position">definite</dfn> (explicitly specified)
			or <dfn export title="automatic grid position|automatic row position|automatic column position|automatic position">automatic</dfn> (determined by <a>auto-placement</a>).

		<dt><dfn>grid span</dfn>
		<dd>
			How many <i>grid tracks</i> the <a>grid item</a> occupies.
			A <i>subgrid</i>’s <i>grid span</i> can be <dfn title="automatic grid span|automatic row span|automatic column span|automatic span">automatic</dfn>
			(determined by its <a>implicit grid</a>) if not specified or implied;
			a <i>grid item</i>’s <i>grid span</i> is otherwise always <dfn export title="definite grid span|definite row span|definite column span|definite span">definite</dfn> (defaulting to 1).
	</dl>

	The <dfn export title="grid-placement property">grid-placement properties</dfn>--
	the longhands 'grid-row-start', 'grid-row-end', 'grid-column-start', 'grid-column-end', and their shorthands 'grid-row', 'grid-column', and 'grid-area'--
	allow the author to specify a <i>grid item</i>’s <i>placement</i>
	by providing any (or none) of the following six pieces of information:

	<table class=data style="width: auto">
		<thead>
			<tr>
				<td>
				<th>Row
				<th>Column
		<tbody>
			<tr>
				<th>Start
				<td>row-start line
				<td>column-start line
			<tr>
				<th>End
				<td>row-end line
				<td>column-end line
			<tr>
				<th>Span
				<td>row span
				<td>column span
	</table>

	A definite value for any two of <var>Start</var>, <var>End</var>, and <var>Span</var> in a given dimension implies a definite value for the third.

	The following table summarizes the conditions under which a grid position or span is <i title=''>definite</i> or <i title=''>automatic</i>:

	<table class='data'>
		<thead>
			<tr>
				<td>
				<th>Position
				<th>Span
		<tbody>
			<tr>
				<th>Definite
				<td>At least one specified line
				<td>Explicit, implicit, or defaulted span. <br> <span class="note">Note: Non-<a>subgrids</a> default to 1.</span>
			<tr>
				<th>Automatic
				<td>No lines explicitly specified
				<td><a>Subgrid</a> without an explicit or implied span
	</table>

<h3 id='common-uses'>
Common Patterns for Grid Placement</h3>

	<em>This section is informative.</em>

	The <a>grid-placement property</a> longhands are organized into three shorthands:

	<table class=data id="grid-property-breakdown">
		<tr>
			<td colspan=4>'grid-area'
		<tr>
			<td colspan=2>'grid-column'
			<td colspan=2>'grid-row'
		<tr>
			<td>'grid-column-start'
			<td>'grid-column-end'
			<td>'grid-row-start'
			<td>'grid-row-end'
	</table>

	<style scoped>
	#grid-property-breakdown tr:nth-child(3) td {
		width: 25%;
		border-style: solid;
	}
	</style>

<h4 id='common-uses-named-areas'>
Named Areas</h4>

	An item can be placed into a <a>named grid area</a>
	(such as those produced by the template in 'grid-template-areas')
	by specifying the area’s name in 'grid-area':

	<div class='example'>
		<pre>
			article {
				grid-area: main;
				/* Places item into the named area "main". */
			}
		</pre>
	</div>

	An item can also be <em>partially</em> aligned with a <a>named grid area</a>,
	with other edges aligned to some other line:

	<div class='example'>
		<pre>
			.one {
				grid-row-start: main;
				/* Align the row-start edge to the start edge of the "main" named area. */
			}
		</pre>
	</div>

<h4 id='common-uses-numeric'>
Numeric Indexes and Spans</h4>

	Grid items can be positioned and sized by number,
	which is particularly helpful for script-driven layouts:

	<div class='example'>
		<pre>
			.two {
				grid-row: 2;    /* Place item in the second row. */
				grid-column: 3; /* Place item in the third column. */
				/* Equivalent to grid-area: 2 / 3;
			}
		</pre>
	</div>

	By default, a grid item has a span of 1.
	Different spans can be given explicitly:

	<div class='example'>
		<pre>
			.three {
				grid-row: 2 / span 5;
				/* Starts in the 2nd row,
				   spans 5 rows down (ending in the 7th row). */
			}

			.four {
				grid-row: span 5 / 7;
				/* <em>Ends</em> in the 7th row,
				   spans 5 rows up (starting in the 2nd row). */
			}
		</pre>
	</div>

	Note: Note that grid indexes are <a>writing mode</a> relative.
	For example, in a right-to-left language like Arabic,
	the first column is the rightmost column.

<h4 id='common-uses-named-lines'>
Named Lines and Spans</h4>

	Instead of counting lines by number,
	<a>named lines</a> can be referenced by their name:

	<div class='example'>
		<pre>
			.five {
				grid-column: first / middle;
				/* Span from line "first" to line "middle". */
			}
		</pre>
	</div>

	Note: Note that if a <a>named grid area</a> and a <a>named line</a> have the same name,
	the placement algorithm will prefer to use <a>named grid area</a>’s edge instead.

	If there are multiple lines of the same name,
	they effectively establish a named set of grid lines,
	which can be exclusively indexed by filtering the placement by name:

	<div class='example'>
		<pre>
			.six {
				grid-row: text 5 / text 7;
				/* Span between the 5th and 7th lines named "text". */
				grid-row: text 5 / span text 2;
				/* Same as above. */
			}
		</pre>
	</div>

<h4 id='common-uses-auto-placement'>
Auto Placement</h4>

	A <a>grid item</a> can be automatically placed into the next available empty <a>grid cell</a>,
	growing the <a>grid</a> if there's no space left.

	<div class='example'>
		<pre>
			.eight {
				grid-area: auto; /* Initial value */
			}
		</pre>
	</div>

	This can be used, for example, to list a number of sale items on a catalog site
	in a grid pattern.

	Auto-placement can be combined with an explicit span,
	if the item should take up more than one cell:

	<div class='example'>
		<pre>
			.nine {
				grid-area: span 2 / span 3;
				/* Auto-placed item, covering two rows and three columns. */
			}
		</pre>
	</div>

	Whether the <a>auto-placement algorithm</a> searchs across and adds rows,
	or searches across and adds columns,
	is controlled by the 'grid-auto-flow' property.

	Note: By default, the <a>auto-placement algorithm</a> looks linearly through the grid without backtracking;
	if it has to skip some empty spaces to place a larger item,
	it will not return to fill those spaces.
	To change this behavior,
	specify the ''dense'' keyword in 'grid-auto-flow'.

<h4 id='common-uses-auto-sizing'>
Auto Sizing Subgrids</h4>

	A subgrid without a <a>definite grid span</a> is sized to its <a>implicit grid</a>,
	i.e. all of its items within it are first placed into its own grid,
	and its span is the resulting size of its grid.

	<div class='example'>
		For example, a subgrid spanning two columns can be given an auto-spanning <i>extent</i>:
		<pre>
			.adverts {
				grid: subgrid;
				grid-column: span 2;
			}
		</pre>

		If it contains 10 auto-placed items, it will span 5 rows in its parent grid.
	</div>

	Note: Since auto-spanning <a>subgrids</a> determine their span before being positioned,
	they can also be auto-positioned.
	The above example would auto-place the <code>.adverts</code> block,
	if no further rules specified its position.

<h3 id='line-placement'>
Line-based Placement: the 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end' properties</h3>

	<pre class='propdef'>
	Name: grid-row-start, grid-column-start, grid-row-end, grid-column-end
	Value: <<grid-line>>
	Initial: auto
	Applies to: <a>grid items</a>
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value
	</pre>

	<pre>
		<dfn for="grid-row-start grid-column-start grid-row-end grid-column-end"><<grid-line>></dfn> =
		  auto |
		  <<custom-ident>> |
		  [ <<integer>> && <<custom-ident>>? ] |
		  [ span &amp;&amp; [ <<integer>> || <<custom-ident>> ] ]
	</pre>

	The 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end' properties
	determine a <a>grid item</a>’s size and location within the <i>grid</i>
	by contributing a line, a span, or nothing (automatic)
	to its <a>grid placement</a>,
	thereby specifying the <i>inline-start</i>, <i>block-start</i>, <i>inline-end</i>, and <i>block-end</i> edges of its <i>grid area</i>.

	Values have the following meanings:

	<dl dfn-for="<grid-line>" dfn-type=value>
		<dt><dfn id='grid-placement-slot'><<custom-ident>></dfn>
		<dd>
			First attempts to match the <i>grid area</i>’s edge to a <i>named grid area</i>:
			if there is a <a>named line</a> with the name ''<<custom-ident>>-start'' (for 'grid-*-start') / ''<<custom-ident>>-end'' (for 'grid-*-end'),
			contributes the first such line to the <a>grid item</a>’s <a>placement</a>.

			Note: <a>Named grid areas</a> automatically generate <a>implicit named lines</a> of this form,
			so specifying ''grid-row-start: foo'' will choose the start edge of that <a>named grid area</a>
			(unless another line named ''foo-start'' was explicitly specified before it).

			Otherwise, if there is a <a>named line</a> with the specified name,
			contributes the first such line to the <a>grid item</a>’s <a>placement</a>.

			Otherwise,
			the property contributes nothing (just as if <a value for="<grid-line>">auto</a> were specified).

		<dt><dfn id='grid-placement-int'><<integer>> && <<custom-ident>>?</dfn>
		<dd>
			Contributes the <var>N</var>th <a>grid line</a> to the <a>grid item</a>’s <a>placement</a>.
			If a negative integer is given,
			it instead counts in reverse,
			starting from the end edge of the <a>explicit grid</a>.

			If a name is given as a <<custom-ident>>,
			only lines with that name are counted.
			(If no line with that name exists,
			it instead specifies the first grid line;
			or the last, if the <<integer>> is negative.
			If not enough lines of that name exist,
			it specifies the <em>last</em> such named line;
			or the first, if the <<integer>> is negative.)

			A <<integer>> value of zero makes the declaration invalid.

		<dt><dfn id='grid-placement-span-int'>span && [ <<integer>> || <<custom-ident>> ]</var></dfn>
		<dd>
			Contributes a <a>grid span</a> to the <a>grid item</a>’s <a>placement</a>
			such that the corresponding edge of the <i>grid item</i>’s <a>grid area</a> is <var>N</var> lines from its opposite edge.

			If a name is given as a <<custom-ident>>,
			only lines with that name are counted.
			(If no line with that name exists,
			the name is ignored.
			If not enough lines of that name exist,
			it spans to the last such named line in the spanning direction.)

			If the <<integer>> is omitted, it defaults to ''1''.
			Negative integers or zero are invalid.

		<dt><dfn id='grid-placement-auto'>auto</dfn>
		<dd>
			The property contributes nothing to the <a>grid item</a>’s <a>placement</a>,
			indicating <i>auto-placement</i>, an <i>automatic span</i>, or a default span of one.
			(See <a href="#placement">Placing Grid Items</a>, above.)
	</dl>

	<div class='example'>
			Given a single-row, 8-column grid and the following 9 named lines:

		<pre>
			1  2  3  4  5  6  7  8  9
			+--+--+--+--+--+--+--+--+
			|  |  |  |  |  |  |  |  |
			A  B  C  A  B  C  A  B  C
			|  |  |  |  |  |  |  |  |
			+--+--+--+--+--+--+--+--+
		</pre>

			The following declarations place the grid item between the lines indicated by index:

		<pre>
			grid-column-start: 4; grid-column-end: auto;
			/* Line 4 to line 5 */

			grid-column-start: auto; grid-column-end: 6;
			/* Line 5 to line 6 */

			grid-column-start: C; grid-column-end: C -1;
			/* Line 3 to line 9 */

			grid-column-start: C; grid-column-end: span C;
			/* Line 3 to line 6 */

			grid-column-start: span C; grid-column-end: C -1;
			/* Line 6 to line 9 */

			grid-column-start: span C; grid-column-end: span C;
			/* Error: The end span is ignored, and an auto-placed
			   item can't span to a named line.
			   Equivalent to ''grid-column: span 1;''. */

			grid-column-start: 5; grid-column-end: C -1;
			/* Line 5 to line 9 */

			grid-column-start: 5; grid-column-end: span C;
			/* Line 5 to line 6 */

			grid-column-start: 8; grid-column-end: 8;
			/* Error: line 8 to line 9 */

			grid-column-start: B 2; grid-column-end: span 1;
			/* Line 5 to line 6 */
		</pre>
	</div>

<h4 id='grid-placement-errors'>
Grid Placement Error Handling</h4>

	If 'grid-row-end'/'grid-column-end' specifies a line at or before that specified by 'grid-row-start'/'grid-column-start',
	it instead contributes nothing.

	If both 'grid-row-start' and 'grid-row-end', or 'grid-column-start' and 'grid-column-end',
	specify a span,
	the <a>end</a> span is ignored.

	If the <a>grid item</a> has an automatic position
	and a <a>grid span</a> for a named line
	in a given dimension,
	instead treat the <a>grid span</a> as one.

<h3 id='placement-shorthands'>
Placement Shorthands: the 'grid-column', 'grid-row', and 'grid-area' properties</h3>

	<pre class='propdef'>
	Name: grid-row, grid-column
	Value: <<grid-line>> [ / <<grid-line>> ]?
	Initial: see individual properties
	Applies to: <a>grid items</a>
	Inherited: see individual properties
	Percentages: see individual properties
	Media: visual
	Computed value: see individual properties
	</pre>

	The 'grid-row' and 'grid-column' properties are shorthands for 'grid-row-start'/'grid-row-end' and 'grid-column-start'/'grid-column-end', respectively.

	If two <<grid-line>> values are specified,
	the 'grid-row-start'/'grid-column-start' longhand is set to the value before the slash,
	and the 'grid-row-end'/'grid-column-end' longhand is set to the value after the slash.

	When the second value is omitted,
	if the first value is a <<custom-ident>>,
	the 'grid-row-end'/'grid-column-end' longhand is also set to that <<custom-ident>>;
	otherwise, it is set to <a value for="<grid-line>">auto</a>.

	<pre class='propdef'>
	Name: grid-area
	Value: <<grid-line>> [ / <<grid-line>> ]{0,3}
	Initial: see individual properties
	Applies to: <a>grid items</a>
	Inherited: see individual properties
	Percentages: see individual properties
	Media: visual
	Computed value: see individual properties
	</pre>

	If four <<grid-line>> values are specified,
	'grid-row-start' is set to the first value,
	'grid-column-start' is set to the second value,
	'grid-row-end' is set to the third value,
	and 'grid-column-end' is set to the fourth value.

	When 'grid-column-end' is omitted,
	if 'grid-column-start' is a <<custom-ident>>,
	'grid-column-end' is set to that <<custom-ident>>;
	otherwise, it is set to <a value for="<grid-line>">auto</a>.

	When 'grid-row-end' is omitted,
	if 'grid-row-start' is a <<custom-ident>>,
	'grid-row-end' is set to that <<custom-ident>>;
	otherwise, it is set to <a value for="<grid-line>">auto</a>.

	When 'grid-column-start' is omitted,
	if 'grid-row-start' is a <<custom-ident>>,
	all four longhands are set to that value.
	Otherwise, it is set to <a value for="<grid-line>">auto</a>.

	Note: The resolution order for this shorthand is row-start/column-start/row-end/column-end,
	which goes CCW for LTR pages,
	the opposite direction of the related 4-edge properties using physical directions, like 'margin'.


<h3 id="abspos-items">
Absolutely-positioned Grid Items</h3>

	If an absolutely positioned element's <a>containing block</a>
	is generated by a <a>grid container</a>,
	its containing block edges are the edges of the element's <a>grid area</a>
	as given by its <a>grid-placement properties</a>.
	In this case, an <a value for="<grid-line>">auto</a> value for a <a>grid-placement property</a>
	contributes the corresponding padding edge of the <a>grid container</a> as a line.
	(Thus, by default, the <a>containing block</a> will correspond to the padding edges of the <a>grid container</a>.)
	The offset properties ('top'/'right'/'bottom'/'left')
	then indicate offsets inwards from the corresponding edges
	of the resulting <a>containing block</a>, as normal.

	Note: Note that, while absolutely-positioning an element to a <i>grid container</i>
	does allow it to align to that container's <i>grid lines</i>,
	such elements
	do not take up space or otherwise participate in the layout of the grid.

	<div class='example'>
		<pre>
			.grid {
				grid: 10rem 10rem 10rem 10rem / 1fr 1fr 1fr 1fr;
				/* 4 columns of ''10rem'' each,
				   4 equal-height rows filling the <a>grid container</a> */
				justify-content: center;
				/* center the grid horizontally within the <a>grid container</a> */
				position: relative;
				/* Establish abspos <a>containing block</a> */
			}

			.abspos {
				grid-row-start: 1;     /* 1st grid row line = top of grid container */
				grid-row-end: span 2;  /* 3rd grid row line */
				grid-column-start: 3;  /* 3rd grid col line */
				grid-column-end: auto; /* right padding edge */
				/* <a>Containing block</a> covers the top right quadrant of the <a>grid container</a> */

				position: absolute;
				top: 70px;
				bottom: 40px;
				left: 100px;
				right: 30px;
			}
		</pre>

		<figure>
			<img src="images/abspos-grid.svg" width="702" height="402" alt=''>
		</figure>

		Note: Note that grids and the <a>grid-placement properties</a> are <a>flow-relative</a>,
		while abspos offsets are <a>physical</a>,
		so if the 'direction' or 'writing-mode' properties change,
		the grid will transform to match,
		but the offsets won't.
	</div>

<h2 id='alignment'>
Alignment</h2>

	After a <a>grid container</a>’s <a>grid tracks</a> have been sized,
	and the dimensions of all <a>grid items</a> are finalized,
	<a>grid items</a> can be aligned within their <a>grid areas</a>.

	The 'margin' properties can be used to align items in a manner similar to,
	but more powerful than,
	what margins can do in block layout.
	<a>Grid items</a> also respect the alignment properties from the Box Alignment spec,
	which allow easy keyword-based alignment of items in both the <a>row axis</a> and <a>column axis</a>.

	By default,
	<a>grid items</a> stretch to fill their <a>grid area</a>.
	However, if 'justify-self' or 'align-self' compute to a value other than ''stretch''
	or margins are <a value for="margin">auto</a>,
	<a>grid items</a> will auto-size to fit their contents.


<h3 id='auto-margins'>
Aligning with <a value for="margin">auto</a> margins</h3>

	<em>This section is non-normative.
		The normative definition of how margins affect grid items is in <a section href="#layout-algorithm"></a>.</em>

	Auto margins on <a>grid items</a> have an effect very similar to auto margins in block flow:

	<ul>
		<li>
			During calculations of <a>grid track</a> sizes, auto margins are treated as ''0''.

		<li>
			Auto margins absorb positive free space
			prior to alignment via the alignment properties
			(defined in the next sections).

		<li>
			Overflowing elements ignore their auto margins and overflow in the <a>end</a> directions.
	</ul>

	Note: Note that, if free space is distributed to auto margins,
	the alignment properties will have no effect in that dimension
	because the margins will have stolen all the free space
	left over after sizing.

	<div class='example'>
		<p class='issue'>
			TODO: EXAMPLE HERE
	</div>


<h3 id='row-align'>
Row-axis Alignment: the 'justify-self' and 'justify-items' properties</h3>

	<a>Grid items</a> can be aligned in the inline dimension
	by using the 'justify-self' property on the <a>grid item</a>
	or 'justify-items' property on the <a>grid container</a>,
	as defined in [[!CSS3-ALIGN]].

	<div class='example'>
		For example,
		for an English document,
		the inline axis is horizontal,
		and so the 'justify-*' properties align the <a>grid items</a> horizontally.

		<p class='issue'>
			TODO: provide example
	</div>


<h3 id='column-align'>
Column-axis Alignment: the 'align-self' and 'align-items' properties</h3>

	<a>Grid items</a> can also be aligned in the block dimension
	(perpendicular to the inline dimension)
	by using the 'align-self' property on the <a>grid item</a>
	or 'align-items' property on the <a>grid container</a>,
	as defined in [[!CSS3-ALIGN]].

<h3 id='grid-align'>
Aligning the Grid: the 'justify-content' and 'align-content' properties</h3>

	If the <a>grid</a>’s outer edges do not correspond to the <a>grid container</a>’s content edges
	(for example, if no columns are flex-sized),
	the <a>grid</a> is aligned within the content box according to the 'justify-content' and 'align-content' properties on the <a>grid container</a>.

	<div class='example'>
		For example, the following grid is centered vertically,
		and aligned to the right edge of its <a>grid container</a>:

		<pre>
			.grid {
				display: grid;
				grid: 12rem 12rem 12rem 12rem / 10rem 10rem 10rem 10rem;
				justify-content: end;
				align-content: center;
			}
		</pre>

		<figure>
			<img src="images/align-justify-content.svg" width="352" height="252" alt=''>
		</figure>
	</div>

<h3 id='z-order'>
Z-axis Ordering: the 'z-index' property</h3>

	<a>Grid items</a> can overlap when they are positioned into intersecting <a>grid areas</a>,
	or even when positioned in non-intersecting areas because of negative margins or positioning.
	The painting order of <i>grid items</i> is exactly the same as inline blocks [CSS21],
	except that <i>order-modified document order</i> is used in place of raw document order,
	and 'z-index' values other than <a value for=z-index>auto</a> create a stacking context even if 'position' is ''static''.
	Thus the 'z-index' property can easily be used to control the z-axis order of grid items.

	<p class='note'>
		Note: Descendants that are positioned outside a grid item still participate in any stacking context established by the grid item.

	<div class="example">
		The following diagram shows several overlapping grid items,
		with a combination of implicit source order
		and explicit 'z-index'
		used to control their stacking order.

		<figure>
			<img src="images/drawing-order.png" />

			<figcaption>Drawing order controlled by z-index and source order.</figcaption>
		</figure>

		<pre>
			&lt;style type="text/css">
			  #grid {
				display: grid;
				grid-template-columns: 1fr 1fr;
				grid-template-rows: 1fr 1fr
			  }
			  #A { grid-column: 1 / span 2; grid-row: 2; align-self: end; }
			  #B { grid-column: 1; grid-row: 1; z-index: 10; }
			  #C { grid-column: 2; grid-row: 1; align-self: start; margin-left: -20px; }
			  #D { grid-column: 2; grid-row: 2; justify-self: end; align-self: start; }
			  #E { grid-column: 1 / span 2; grid-row: 1 / span 2;
				   z-index: 5; justify-self: center; align-self: center; }
			&lt;/style>

			&lt;div id="grid">
			  &lt;div id="A">A&lt;/div>
			  &lt;div id="B">B&lt;/div>
			  &lt;div id="C">C&lt;/div>
			  &lt;div id="D">D&lt;/div>
			  &lt;div id="E">E&lt;/div>
			&lt;/div>
		</pre>
	</div>

<h3 id='grid-baselines'>
Grid Baselines</h3>

	The baselines of a <a>grid container</a> are determined as follows:

	<ol>
		<li>
			If any of the <a>grid items</a> whose areas intersect the <a>grid container</a>’s first row/column
			<a href="#baseline-participation">participate in baseline alignment</a>,
			the grid container's baseline is the baseline of those <a>grid items</a>.

		<li>
			Otherwise, if the grid container has at least one <a>grid item</a> whose area intersects the first row/column,
			and the first such <a>grid item</a> (in <a>order-modified grid order</a>) has a baseline
			parallel to the relevant axis,
			the grid container's baseline is that baseline.

		<li>
			Otherwise, the grid container's baseline is <a href="http://www.w3.org/TR/css3-writing-modes/#inline-alignment">synthesized</a>
			from the first item's (in <a>order-modified grid order</a>) content box,
			or, failing that, from the grid container's content box.
	</ol>

	A <a>grid item</a> <dfn export id="baseline-participation">participates in baseline alignment</dfn> in a particular dimension
	if its value for 'align-self' or 'justify-self', as appropriate, is ''baseline''
	and its inline axis is parallel to that dimension.

	<dfn export title="order-modified grid order">'order'-modified grid order</dfn> is the order in which
	<a>grid items</a> are encountered when traversing the grid's <a>grid cells</a>,
	in row-major order if calculating the inline-axis baseline,
	or in column-major order if calculating the block-axis baseline.
	If two items are encountered at the same time,
	they are taken in <a>order-modified document order</a>.

	When calculating the baseline according to the above rules,
	if the box contributing a baseline has an 'overflow' value that allows scrolling,
	the box must be treated as being in its initial scroll position
	for the purpose of determining its baseline.

	When <a href="http://www.w3.org/TR/CSS21/tables.html#height-layout">determining the baseline of a table cell</a>,
	a grid container provides a baseline just as a line box or table-row does. [[!CSS21]]



<h2 id='layout-algorithm'>
Track Sizing Algorithm</h2>

<h3 id='algo-terms'>
Definition of Terms for use in Calculating Grid Track Sizes</h3>

	<dl>
		<dt><dfn>min track sizing function</dfn>
		<dd>
			If the track was sized with a ''minmax()'' function,
			this is the first argument to that function.
			Otherwise, it's the track's sizing function.

		<dt><dfn>max track sizing function</dfn>
		<dd>
			If the track was sized with a ''minmax()'' function,
			this is the second argument to that function.
			Otherwise, it's the track's sizing function.

		<dt><dfn>available space</dfn>
		<dd>
			The <a>grid container</a>’s content box size in the applicable dimension.

		<dt><dfn>free space</dfn>
		<dd>
			Equal to the <a>available space</a> minus the sum of the <a>base sizes</a> of all the grid tracks,
			clamped to a minimum of zero.
			This value can change over the course of the algorithm,
			as <a>base sizes</a> are adjusted.

			If <a>available space</a> is <a>indefinite</a>,
			the <a>free space</a> is <a>indefinite</a> as well.

		<dt><dfn>span count</dfn>
		<dd>
			The number of <a>grid tracks</a> crossed by a <a>grid item</a> in the applicable dimension.
	</dl>

<h3 id='algo-overview'>
Overall Sizing Algorithm</h3>

	Each track has specified <a title="min track sizing function">minimum</a> and
	<a title="max track sizing function">maximum</a> <a>sizing functions</a>
	(which may be the same).
	Each <a>sizing function</a> is either:

	<ul>
		<li>A <dfn>fixed sizing function</dfn> (<<length>> or resolveable <<percentage>>).
		<li>An <dfn>intrinsic sizing function</dfn> (''min-content'' or ''max-content'').
		<li>A <dfn>flexible sizing function</dfn> (<<flex>>).
	</ul>

	The grid layout algorithm defines how to resolve these sizing constraints into used track sizes.

	<ol>
		<li>
			First, the <a>track sizing algorithm</a> is used to resolve the sizes of the grid columns.

		<li>
			Next, the <a>track sizing algorithm</a> resolves the sizes of the grid rows.

		<li>
			Then, if the <a>min-content contribution</a> of any grid items have changed
			based on the row sizes calculated in step 2,
			steps 1 and 2 are repeated with the new <a>min-content contribution</a> (once only).

			<p class='issue'>
				What is this solving and is this the right solution?
	</ol>

	Once the size of each <a>grid area</a> is thus established,
	the <a>grid items</a> are laid out into their respective containing blocks.

	The remainder of this section is the <dfn>track sizing algorithm</dfn>,
	which calculates from the <a title="min track sizing function">min</a> and <a>max track sizing functions</a>
	the used track size.
	Each track has a <dfn>base size</dfn>,
	a <<length>> which grows throughout the algorithm
	and which will eventually be the track's final size,
	and a <dfn>growth limit</dfn>,
	a <<length>> which provides a desired maximum size for the <a>base size</a>.
	(The <a>base size</a> might end up being larger than the <a>growth limit</a>,
	but the algorithm attempts to avoid this situation.)
	There are 4 steps:

	<ol>
		<li><a href="#algo-init">Initialize Track Sizes</a>
		<li><a href="#algo-content">Resolve Content-Based Track Sizing Functions</a>
		<li><a href="#algo-grow-tracks">Grow All Tracks To Their Max</a>
		<li><a href="#algo-flex-tracks">Process Flexible Tracks</a>
	</ol>

	<p class="issue">Make sure orthogonal flows are correctly addressed.
	(<a href="http://lists.w3.org/Archives/Public/www-style/2014Feb/0389.html">discussion</a>)

<h3 id="algo-init">
Initialize Track Sizes</h3>

	<strong>Initialize each track's base size and growth limit.</strong>
	For each track,
	if the track's <a>min track sizing function</a> is:

	<dl>
		<dt>A <a>fixed sizing function</a>
		<dd>
			Resolve to an absolute length and use that size as the track’s initial <a>base size</a>.

			Note: <a>Indefinite</a> lengths cannot occur,
			as they're treated as ''auto''.

		<dt>An <a>intrinsic sizing function</a>
		<dt>A <a>flexible sizing function</a>
		<dd>
			Use an initial <a>base size</a> of zero.
	</dl>

	For each track,
	if the track's <a>max track sizing function</a> is:

	<dl>
		<dt>A <a>fixed sizing function</a>
		<dd>
			Resolve to an absolute length and use that size as the track’s initial <a>growth limit</a>.

		<dt>An <a>intrinsic sizing function</a>
		<dd>
			Use an initial <a>growth limit</a> of infinity.

		<dt>A <a>flexible sizing function</a>
		<dd>
			Use the track’s initial <a>base size</a> as its initial <a>growth limit</a>.
	</dl>

<h3 id="algo-content">
Resolve Content-Based Track Sizing Functions</h3>

	This step resolves intrinsic track <i>sizing functions</i> to absolute lengths.
	First it resolves those sizes based on items that are contained wholly within a single track.
	Then it gradually adds in the space requirements of items that span multiple tracks,
	evenly distributing the extra space across those tracks
	insofar as possible.

	When the <a>grid container</a> is being sized under a <a>min-content constraint</a>,
	a track with a flexible <a>min track sizing function</a>
	is treated as if its <a>min track sizing function</a> was ''min-content''
	for the purposes of this step.
	<span class='issue'>This seems correct, but should be checked because it wasn't in the original algorithm.</span>

	Note: There is no single way to satisfy these constraints
	when items span across multiple tracks.
	This algorithm embodies a number of heuristics
	which have been seen to deliver good results on real-world use-cases,
	such as the "game" examples earlier in this specification.
	This algorithm may be updated in the future
	to take into account more advanced heuristics as they are identified.

	<ol>
		<li>
			<strong>Size tracks to fit non-spanning items:</strong>
			For each track with an intrinsic <i>track sizing function</i>,
			consider the items in it with a span of 1:
			<ul>
				<li>
					<strong>For min-content minimums:</strong>
					If the track has a ''min-content'' <i>min track sizing function</i>,
					set its <i>base size</i>
					to the maximum of the items’ <i>min-content contributions</i>.
				<li>
					<strong>For max-content minimums:</strong>
					If the track has a ''max-content'' <i>min track sizing function</i>,
					set its <i>base size</i>
					to the maximum of the items’ <i>max-content contributions</i>.
				<li>
					<strong>For min-content maximums:</strong>
					If the track has a ''min-content'' <i>max track sizing function</i>,
					set its <i>growth limit</i>
					to the maximum of the items’ <i>min-content contributions</i>.
				<li>
					<strong>For max-content maximums:</strong>
					If the track has a ''max-content'' <i>max track sizing function</i>,
					set its <i>growth limit</i>
					to the maximum of the items’ <i>max-content contributions</i>.
			</ul>
		<li>
			<strong>Increase sizes to accommodate spanning items:</strong>
			Next, consider the items with a span of 2
			that do not span a track with a <i>flexible sizing function</i>:
			<ol>
				<li>
					<strong>For intrinsic minimums:</strong>
					First increase the <i>base size</i> of tracks with
					a <i>min track sizing function</i> of ''min-content'' or ''max-content''
					by <a href="#extra-space">distributing extra space</a> as needed
					to account for these items' <i>min-content contributions</i>.
				<li>
					<strong>For max-content minimums:</strong>
					Next continue to increase the <i>base size</i> of tracks with
					a <i>min track sizing function</i> of ''max-content''
					by <a href="#extra-space">distributing extra space</a> as needed
					to account for these items' <i>max-content contributions</i>.
				<li>
					<strong>For intrinsic maximums:</strong>
					Third increase the <i>growth limit</i> of tracks with
					a <i>max track sizing function</i> of ''min-content'' or ''max-content''
					by <a href="#extra-space">distributing extra space</a> as needed
					to account for these items' <i>min-content contributions</i>.
					Mark any tracks whose <i>growth limit</i> changed
					from infinite to finite in this step
					as <dfn>infinitely growable</dfn> for the next step.
					<!-- http://lists.w3.org/Archives/Public/www-style/2014Mar/0500.html -->
				<li>
					<strong>For max-content maximums:</strong>
					Lastly continue to increase the <i>growth limit</i> of tracks with
					a <i>max track sizing function</i> of ''max-content''
					by <a href="#extra-space">distributing extra space</a> as needed
					to account for these items' <i>max-content contributions</i>.
			</ol>

			Repeat incrementally for items with greater spans until all items have been considered.
	</ol>

	<p id='extra-space'>
		To <dfn noexport>distribute extra space</dfn>
		by increasing the affected sizes of a set of tracks
		as required by a set of intrinsic size contributions,

	<ol>
		<li>
			Maintain separately for each affected <i>base size</i> or <i>growth limit</i>
			an amount of planned increase.
			(This prevents the size increases from becoming order-dependent.)

		<li>
			For each considered item,
			<ol>
				<li>
					<strong>Find the space to distribute:</strong>
					Subtract the corresponding size (<i>base size</i> or <i>growth limit</i>) of <em>every</em> spanned track
					from the item's size contribution to find the the item's remaining size contribution.
					(For infinite <i>growth limits</i>, substitute the track's <i>base size</i>.)
					This is the space to distribute. Floor it at zero.
					<pre><var>extra-space</var> = max(0, <var>size-contribution</var> - ∑<var>track-sizes</var>)</pre>

				<li>
					<strong>Distribute space to base sizes up to growth limits:</strong>
					Distribute the space equally to the planned increase of each spanned track with an affected size,
					freezing tracks as their planned size reaches their <i>growth limits</i>
					(and continuing to grow the unfrozen tracks as needed).

					If a track was marked as <a>infinitely growable</a> for this phase,
					treat its <i>growth limit</i> as infinite for this calculation
					(and then unmark it).

					Note: If the affected size was a <a>growth limit</a>,
					this step has no effect.

				<li>
					<strong>Distribute space beyond growth limits:</strong>
					If space remains after all tracks are frozen,
					unfreeze and continue to distribute space to…

					<ul>
						<li>
							when handling ''min-content'' <i>base sizes</i>:
							any affected track that happens to also have an intrinsic <i>max track sizing function</i>;
							if there are no such tracks, then all affected tracks.
						<li>
							when handling ''max-content'' <i>base sizes</i>:
							any affected track that happens to also have a ''max-content'' <i>max track sizing function</i>;
							if there are no such tracks, then all affected tracks.
						<li>when handling any intrinsic <i>growth limit</i>:
							all affected tracks.
					</ul>
				<li>
					<strong>Update the tracks' affected sizes</strong>
					by folding in the calculated increase
					so that the next round of space distribution will account for the increase.
					(If the affected size is infinite,
					set it to the track's <i>base size</i> plus the calculated increase.)
			</ol>
	</ol>

	Note: When this step is complete,
	all intrinsic <a>base sizes</a> and <a>growth limits</a>
	will have been resolved to absolute lengths.


<h3 id="algo-grow-tracks">
Grow All Tracks To Their Max</h3>

	If the <a>free space</a> is positive, distribute it equally to all tracks,
	freezing tracks as they reach their <i>growth limits</i>
	(and continuing to grow the unfrozen tracks as needed).

	For the purpose of this step:
	if sizing the <a>grid container</a> under a <a>max-content constraint</a>,
	the <a>free space</a> is infinite;
	if sizing under a <a>min-content constraint</a>,
	the <a>free space</a> is zero.

<h3 id="algo-flex-tracks">
Process Flexible Tracks</h3>

	This step sizes flexible tracks
	using the largest value it can assign to an ''fr''
	without exceeding the <a>available space</a>.

	First, find the used <i>flex fraction</i>:
	<dl>
		<dt>If the <a>free space</a> is zero:
		<dd>
			The used <i>flex fraction</i> is zero.

		<dt>If the <a>free space</a> is a <a>definite</a> length:
		<dd>
			The used <i>flex fraction</i> is the result of
			<a href="#algo-find-fr-size">finding the size of an fr</a>
			using all of the <a>grid tracks</a>
			and a <a>space to fill</a> of the <a>available space</a>.

		<dt>If the <a>free space</a> is an <a>indefinite</a> length:
		<dd>
			The used <i>flex fraction</i> is the maximum of:

			<ul>
				<li>
					Each flexible track's <a>base size</a> divided by its <a>flex factor</a>.

				<li>The result of
					<a href="#algo-find-fr-size">finding the size of an fr</a>
					for each <a>grid item</a> that crosses a flexible track,
					using all the grid tracks that the item crosses
					and a <a>space to fill</a> of the item's <a>max-content contribution</a>.
			</ul>
	</dl>

	For each flexible track,
	if the product of the <var>used flex fraction</var> and the track's <a>flex factor</a>
	is greater than the track's <a>base size</a>,
	set its <a>base size</a> to that product.


<h4 id="algo-find-fr-size">
Find the Size of an ''fr''</h4>

	This algorithm finds the largest size that an ''fr'' unit can be
	without exceeding the target size.
	It must be called with a set of <a>grid tracks</a>
	and some quantity of <dfn>space to fill</dfn>.

	<ol>
		<li>
			Let <dfn>leftover space</dfn> be the <a>space to fill</a>
			minus the <a>base sizes</a> of the non-flexible <a>grid tracks</a>.

		<li>
			Let the <dfn>hypothetical flex fraction</dfn>
			be the <a>leftover space</a>
			divided by the sum of the <a>flex factors</a> of the flexible tracks.

		<li>
			For the flexible tracks,
			if the product of the <a>hypothetical flex fraction</a> and the track's <a>flex factor</a>
			is less than the track's base size,
			restart this algorithm
			treating all such tracks as having a <a>flex factor</a> of zero.

		<li>
			Return the <a>hypothetical flex fraction</a>.
	</ol>

	<p class='issue'>
		This section needs adjustment to handle sum(flex-factors) < 1
		the <a href="http://www.w3.org/TR/css-flexbox-1/#resolve-flexible-lengths">same way Flexbox now does it</a>.

<h2 id='pagination'>
Fragmenting Grid Layout</h2>

	<p class='issue'>
		Fill this in.

<h2 class="no-num" id="acks">
Acknowledgements</h2>

	This specification is made possible by input from
	Erik Anderson,
	Rossen Atanassov,
	Arron Eicholz,
	Sylvain Galineau,
	Markus Mielke,
	John Jansen,
	Chris Jones,
	Kathy Kam,
	Veljko Miljanic,
	Peter Salas,
	Christian Stockwell,
	Eugene Veselov,
	and the CSS Working Group members.
	Thanks to Eliot Graff for editorial input.

<h2 class="no-num" id="changes">
Changes</h2>

	The following significant changes were made since the
	<a href=http://www.w3.org/TR/2014/WD-css3-grid-layout-20140513/>13 May 2014 Working Draft</a>.

	<ul>
		<li>
	</ul>

<h2 class="no-num" id="translated-algo">
Appendix A: Translated Layout Algorithm</h2>

	Note: The following is a more direct translation of the
	<a href="http://www.w3.org/TR/2014/WD-css-grid-1-20140123/#track-sizing-algorithm">original Microsoft editors' track sizing algorithm</a>,
	from which the current algorithm is derived.
	It follows the original algorithm structure
	without being as programmatic in its language.
	It is preserved here to aid in review of the current specification
	(and will be removed in the next revision).

	This algorithm is run multiple times,
	once for each set of <a>grid items</a> with a particular <a>span count</a>,
	and each time it moves through four phases,
	each one addressing one combination of ''min-content'' or ''max-content''
	as a <a>min track sizing function</a> or <a>max track sizing function</a>.

	Starting from the set of all <a>grid items</a> in the grid,
	remove any with a <a>span count</a> greater than one
	which span a track with a <<flex>> <a>max track sizing function</a>.
	Of the remaining,
	sort them into groups according to their <a>span count</a>,
	and order the groups in ascending order of <a>span count</a>.
	For each group, in order,
	perform the following steps four times:

	<ol>
		<li>
			<b>Initialize variables</b>.

			Let each item's <dfn>needed space</dfn> be:

			<dl class="phase">
				<dt>In phase 1
				<dd>
					The min-content size of the item,
					minus the sum of the <a>base sizes</a> of the grid tracks it spans.
				<dt>In phase 2
				<dd>
					The max-content size of the item,
					minus the sum of the <a>base sizes</a> of the grid tracks it spans.
				<dt>In phase 3
				<dd>
					The min-content size of the item,
					minus the sum of the <a>growth limits</a> of the grid tracks it spans
					(or, if the <a>growth limit</a> is infinite, the <a>base size</a>).
				<dt>In phase 4
				<dd>
					The max-content size of the item,
					minus the sum of the <a>growth limits</a> of the grid tracks it spans
					(or, if the <a>growth limit</a> is infinite, the <a>base size</a>).
			</dl>

			Let each item's <dfn>growable tracks</dfn> be:

			<dl class="phase">
				<dt>In phase 1
				<dd>
					The grid tracks it spans with a ''min-content'' or ''max-content'' <a>min track sizing function</a>.
				<dt>In phase 2
				<dd>
					The grid tracks it spans with a ''max-content'' <a>min track sizing function</a>.
				<dt>In phase 3
				<dd>
					The grid tracks it spans with a ''min-content'' or ''max-content'' <a>max track sizing function</a>.
				<dt>In phase 4
				<dd>
					The grid tracks it spans with a ''max-content'' <a>max track sizing function</a>.
			</dl>

			Let each item's <dfn>overgrowable tracks</dfn> be:

			<dl class="phase">
				<dt>In phase 1
				<dd>
					The item's <a>growable tracks</a> that also have a ''min-content'' or ''max-content'' <a>max track sizing function</a>.
					If there are no such tracks,
					then it's all the <a>growable tracks</a>.
				<dt>In phase 2
				<dd>
					The item's <a>growable tracks</a> that also have a ''max-content'' <a>max track sizing function</a>.
					If there ar eno such tracks,
					then it's all the <a>growable tracks</a>.
				<dt>In phase 3
				<dt>In phase 4
				<dd>
					The item's <a>growable tracks</a>.
			</dl>

			Let each track's <dfn>growth delta</dfn> initially be zero.

		<li>
			<b>Calculate growth deltas.</b>

			For each grid item in the group:

			<ol>
				<li>
					<dl class="phase">
						<dt>In phase 1
						<dt>In phase 2
						<dd>
							Let each track's <dfn>hypothetical size</dfn>
							be the track's <a>base size</a>.
						<dt>In phase 3
						<dt>In phase 4
						<dd>
							Let each track's <a>hypothetical size</a>
							be the track's <a>growth limit</a> if it's finite,
							or else the track's <a>base size</a> otherwise.
					</dl>

				<li>
					Distribute the item's <a>needed space</a>
					as evenly as possible among the <a>hypothetical sizes</a> of the item's <a>growable tracks</a>,
					maxing each out as its <a>hypothetical size</a> reaches its <a>growth limit</a>.

					<dl class="phase">
						<dt>In phase 4
						<dd>
							If the track's <a>growth limit</a> was changed from infinite to a finite value
							in phase 3,
							treat its <a>growth limit</a> as infinite for the purposes of this step.
					</dl>

				<li>
					If all <a>growable tracks</a> reached their <a>growth limit</a> in the previous step
					and there is still <a>needed space</a> to distribute,
					distribute the leftover space evenly among the <a>hypothetical sizes</a> of the item's <a>overgrowable tracks</a>.

				<li>
					<dl class="phase">
						<dt>In phase 1
						<dt>In phase 2
						<dd>
							For each track,
							if the difference between its <a>hypothetical size</a> and its <a>base size</a>
							is greater than its <a>growth delta</a>,
							set its <a>growth delta</a> to that difference.
						<dt>In phase 3
						<dt>In phase 4
						<dd>
							For each track,
							if its <a>growth limit</a> is finite,
							and the difference between its <a>hypothetical size</a> and its <a>growth limit</a>
							is greater than its <a>growth delta</a>,
							set its <a>growth delta</a> to that difference.
							Otherwise, if its <a>growth limit</a> is infinite,
							and the difference between its <a>hypothetical size</a> and its <a>base size</a>
							is greater than its <a>growth delta</a>,
							set its <a>growth delta</a> to that difference.
					</dl>
			</ol>

		<li>
			<b>Adjust each track's affected size.</b>

			<dl class="phase">
				<dt>In phase 1
				<dt>In phase 2
				<dd>
					For each track,
					increase its <a>base size</a> by its <a>growth delta</a>.
				<dt>In phase 3
				<dt>In phase 4
				<dd>
					For each track,
					if its <a>growth limit</a> is finite,
					increase its <a>growth limit</a> by its <a>growth delta</a>.
					Otherwise, if its <a>growth limit</a> is infinite,
					set its <a>growth limit</a>
					to the sum of its <a>base size</a> and its <a>growth delta</a>.
			</dl>
	</ol>
