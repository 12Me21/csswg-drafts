<pre class='metadata'>
Title: CSS Round Display Level 1
TR: http://www.w3.org/TR/css-round-display-1/
Shortname: css-round-display
Group: csswg
Level: 1
Status: ED
Work Status: Exploring
ED: https://drafts.csswg.org/css-round-display/
Previous Version: http://www.w3.org/TR/2015/WD-css-round-display-1-20150922/
Editor: Hyojin Song, LG Electronics, hyojin22.song@lge.com
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Former Editor: Soonbo Han, LG Electronics, soonbo.han@lge.com
Abstract: This document describes CSS extensions to support a round display. It extends existing CSS features including Media Queries[[MEDIAQUERIES-4]], CSS Shapes[[CSS-SHAPES-1]], Borders[[CSS3-BORDER]], and Positioned Layout[[CSS3-POSITIONING]]. The extensions will help web authors to build a web page suitable for a round display.
</pre>

<h2 id="introduction">Introduction</h2>
<p>
Everything on the web is a rectangle. For example, the window content area in a web browser is a rectangle. Each HTML element follows the W3C box model and thus is also a rectangle. New devices with a round display are now emerging. The current web standards lack some features to support the devices as follows:
<ol>
    <li>Lack of the capability to detect a round display</li>
    <li>Lack of layout mechanisms suitable for a round display</li>
</ol>
In order to facilitate the use of the web on a round display, we need to rethink existing CSS features.
</p>
<p>
Current user agents are not capable of detecting the shape of a display so that authors cannot apply various layouts for a round display. To resolve the issue, we add the 'device-radius' media feature to Media Queries. The feature informs the web page of the property regarding the shape of the display.
</p>
<p>
To apply the shape of a display to content area, we extend the 'shape-inside' property of CSS Shapes. We also add the 'border-boundary' property to CSS Borders and introduce polar positioning for a better web design suitable for a round display.
</p>


<h2 id="terminology">Terminology</h2>
This specification follows the CSS property definition conventions from [[!CSS21]]. <br />
The detailed description of Media Queries is defined in [[MEDIAQUERIES-4]]<br />
The detailed description of CSS Shapes is defined in [[CSS-SHAPES-1]]<br />
The detailed description of Borders is defined in [[CSS3-BORDER]]<br />
The detailed description of Positioned Layout is defined in [[CSS3-POSITIONING]]<br />


<h2 id="extending-media-queries">Extending Media Queries for a round display</h2>
<p>
 Media Queries [[MEDIAQUERIES-4]] define mechanisms to support media-dependent style sheets, tailored for different environments. We propose to extend Media Queries by adding the 'device-radius' media feature to support a round display. This will allow web authors to apply different styles to a web page on the rounded display.
</p>
<section>
<h3 id="device-radius-media-feature">The 'device-radius' media feature</h3>
To use different style sheets for a rectangle display and for a round display, media queries should support some properties to identify the display shape. The 'device-radius' media feature describes the property of rounded borders of a display.
<div class='example'>
This media query indicates that different style sheets will be applied depending on the display shape.
<pre>
&lt;link media="screen and (device-radius: 0%)" rel="stylesheet" href="rectangle.css" />
&lt;link media="screen and (device-radius: 50%)" rel="stylesheet" href="round.css" />
</pre>
<p>
By the mechanism of media queries, if the value of the 'device-radius' media feature is less than 50%, '<code>rectangle.css</code>' is applied. If it is 50%, '<code>round.css</code>' is applied.
</p>
</div>
<p>As in the '<code>border-radius</code>' property, the 'device-radius' media feature can describe various round shapes of displays, such as rectangle, regular circle, ellipse, and rectangle with round corners.
</p>
<pre class='descdef mq'>
	Name: device-radius
	Type: range
    For: @media
	Value: [ <<length>> | <<percentage>> ]
	Percentage: Refer to corresponding dimension of the display
</pre>
<p class="note">
Note: To define a '<code>range</code>' type media feature, the feature may be written as a normal media feature, but with a '<code>min-</code>' or '<code>max-</code>' prefix on the feature name. '<code>min-</code>' or '<code>max-</code>' prefixes express 'greater or equal to' or 'smaller or equal to' constraints respectively.
</p>
<p>
The length or percentage value of the '<code>device-radius</code>' property defines a radius of a quarter ellipse in terms of the shape of the corner of the outer screen edge (This is similar to the '<code>border-radius</code>' property. See the 'border-radius' description). If the length is zero, the shape of screen is a rectangle, otherwise it is a rectangle with rounded corners or a circle or an ellipse. A percentage value of the '<code>device-radius</code>' is proportional to a width and a height of the screen, which have relevance to a horizontal radius and a vertical radius of the screen according to the length of width and height of the screen each. If the screen shape is the regular circle, '<code>device-radius</code>': 50% has a true value since a half of the width(=height) of the regular circle is the radius of the screen shape. In case of an ellipse with 200x100, '<code>device-radius</code>': 50% means that horizontal-radius of the screen is 100px and vertical-radius of the screen is 50px. It can't be described in length, not percentage. A negative value is not allowed.
</p>

<div class='example'>
The example below shows how a web page looks in the different shapes of displays. This is a simple clock written in HTML. (without 'device-radius')
<pre>&lt;!DOCTYPE html>

&lt;html>
&lt;head>
    &lt;link rel="stylesheet" href="rectangle.css" />
&lt;/head>
&lt;body>
    &lt;div id="clockLayer">
        &lt;div id="clockLayer">
            &lt;div id="date">2015/02/28 (SAT)&lt;/div>
            &lt;div id="time">10:11&lt;/div>
            &lt;div id="weather">&lt;img src="cloudy.png" />&lt;/div>
        &lt;/div>
    &lt;/div>
&lt;/body>
&lt;/html>
</pre>

<div style="width: 700px; height: 380px; text-align:center">
    <div style="float: left; width: 350px;">
        <img alt="An image of a rectangle clock within a rectangle display" src="images/device_radius_clock_a.png">
        <p>(A) Rectangle Display</p>
    </div>
    <div style="float: left; ">
        <img alt="An image of a round clock within a rectangle display" src="images/device_radius_clock_b.png">
        <p>(B) Round Display</p>
    </div>
</div>
<div style="width: 700px">
    <p class="caption">Devices where the 'device-radius' media feature is not applicable</p>
</div>
On the other hand, the example below shows how the 'device-radius' media feature works in the different shapes of displays. This is the same as the code above except for media queries usage. The 'device-radius' media feature can be used as follows:
<pre>&lt;!-- index.html -->

&lt;head>
    &lt;link media="screen and (device-radius: 0%)" rel="stylesheet" href="rectangle.css" />
    &lt;link media="screen and (device-radius: 50%)" rel="stylesheet" href="round.css" />
&lt;/head>
</pre>
If this example code is loaded in a regular round display, '<code>round.css</code>' will be applied by the media queries mechanism. To render the clock properly, '<code>round.css</code>' could be written as follows.
<pre>
#clockLayer {
    border-radius: 50%;
}
#clockInset {
    border-radius: 50%;
}
#date {
    text-align: center;
}
...
</pre>
<div style="width: 700px; height: 380px; text-align:center">
    <div style="float: left; width: 350px;">
        <img alt="An image of a rectangle clock within a rectangle display" src="images/device_radius_clock_a.png">
        <p>(A) Rectangle Display<br>(w/ <code>device-radius: 0%</code>)</p>
    </div>
    <div style="float: left; ">
        <img alt="An image of a round clock within a round display" src="images/device_radius_clock_c.png">
        <p>(B) Round Display<br>(w/ <code>device-radius: 50%</code>)</p>
    </div>
</div>
<div style="width: 700px">
    <p class="caption">Devices where the 'device-radius' media feature is applicable</p>
</div>
</div>
<p class="note">Note: For other shapes, such as polygons, we need to extend the media features with additional parameters. The current features have limitations to support the diversity beyond round shapes. How can we express star-shaped polygons? (e.g. SVG syntax, etc.) Of course, there is a trade-off between simplicity and expressiveness.
</p>
<p class="issue">
Using 'device-radius' with just a single value (e.g. device-radius: 50%) is enough (for simplicity)? Otherwise, do we need to support all possible values the same as 'border-radius'?
</p>

<h2 id="aligning-content">Aligning content along the display border</h2>
<h3 id="shape-inside-property">The 'shape-inside' property</h3>
<p>
CSS Shapes [[CSS-SHAPES]] define the 'shape-inside' property that aligns contents along the edge of a possibly non-rectangular wrapping area. Web authors may use this feature to fit contents inside a round display. However, it can be challenging to specify the wrapping area to be identical to the shape of a display. To address such cases, 'shape-inside' is extended with a new value named '<code>display</code>', such an element having this value will have its content (or contained elements) aligned along the display border automatically.
</p>
<pre class='link-defaults'>
spec:css21; type:type; text:<uri>
</pre>
<pre class='propdef'>
    Name: shape-inside
    Applies to: block-level elements
    Value: auto | outside-shape | [ <<basic-shape>> || shape-box ] | <<image>> | <code>display</code>
    Initial: auto
    Inherited: no
    Media: visual
    Computed value: computed lengths for <<basic-shape>>, the absolute URI for <<uri>>, otherwise as specified
    Animatable: as specified for <<basic-shape>>, otherwise no
</pre>
<p>
The example below shows how the 'shape-inside' property works when it is set to '<code>display</code>'. Without using Media Queries, contents can be aligned within the display edge automatically.
</p>
<div class='example'>
<pre>&lt;style>

    #container {
        shape-inside: display;
        // the same as circle(50% at 50%, 50%) in a regular round display
    }
    #green-box { float: left; }
    #blue-box { float: right; }
&lt;/style>
&lt;div id="container">
    &lt;p>
        Some inline content
        &lt;img id="green-box" src="green-box.jpg" />
        with a float left and float right, in a
        &lt;img id="blue-box" src="blue-box.jpg" />
        simple box with a circle shape-inside.
    &lt;/p>
&lt;/div>
</pre>
<br />
<div style="width: 500px; height: 380px; text-align:center">
    <div style="float: left; width: 230px;">
        <img alt="A layout of web contents without shape-inside:display" style="width: 230px" src="images/shape_inside_watch_a.png">
        <p>(A) Without '<code>shape-inside</code>'</p>
    </div>
    <div style="float: left; width: 230px;">
        <img alt="A layout of web contents with shape-inside: display" style="width: 230px" src="images/shape_inside_watch_b.png">
        <p>(B) With '<code>shape-inside: display</code>'</p>
    </div>
</div>
<div style="width: 500px">
    <p class="caption">Align the content along the display border</p>
</div>
</div>
<p>
This property is specially useful for complex shapes (e.g. curved, stelliform, polygonal), that wouldn't be covered by <<basic-shape>> (i.e. circle() or ellipse()), allowing web authors to conveniently align contents with the display edge.
</p>
<p>
When a containing block is placed on one end of the display and the containing block has 'shape-inside: display', the descendant blocks of the containing block are basically put on the overlapping region between the containing block and the display area. The overlapping region's shape is mostly complicated shape, so it's difficult to define the shape using previous method like basic-shape. The figure 4 describes these circumstances as follows.
</p>
<div style="width: 500px;">
    <img alt="An image of two examples to show the principle of shape-inside: display" style="width: 500px" src="images/shape_inside_a.png">
    <p class="caption">Align part of the content along the display border</p>
</div>
<p class="issue">
What if content overflows? Clipping or scrolling?
</p>

<h2 id="drawing-borders">Drawing borders around the display border</h2>
<h3 id="border-boundary-property">The 'border-boundary' property</h3>
<p>
We add the 'border-boundary' property to set a boundary constraint that affects the borders of an element.
</p>
<pre class='propdef'>
    Name: border-boundary
    Applies to: all elements
    Value: none | parent | display
    Initial: none
    Inherited: yes
    Media: visual
</pre>
<p>
When the 'border-boundary' property on an element is set to '<code>parent</code>', additional borders of the element could be drawn where the element's area and the borders of its parent are met. When it is set to '<code>display</code>', additional borders could be drawn where the element's area and the borders of screen are met. The default value is '<code>none</code>', imposing no boundary constraint on the borders.
</p>
<div class='example'>
The example below shows how the 'border-boundary' property works on drawing borders. The result is shown in Figure 5B.
<pre>&lt;style>

    #container {
        border-boundary: display;
    }
    #redBox {
        border: 5px red solid;
    }
    #greenBox {
        border: 5px green solid;
    }
    #blueBox {
        border: 5px blue solid;
    }
&lt;/style>
&lt;div id="container">
    &lt;div id="redBox">&lt;/div>
    &lt;div id="greenBox">&lt;/div>
    &lt;div id="blueBox">&lt;/div>
&lt;/div>
</pre>
<br />
<div style="width: 600px; text-align:center">
    <div style="float: left; width: 300px;">
        <img alt="An image of circle drawing border lines without border-boundary: display" style="width: 200px" src="images/border_boundary_a.png">
        <p>(A) Without '<code>border-boundary</code>'</p>
    </div>
    <div style="float: left; width: 300px;">
        <img alt="An image of circle drawing border lines with border-boundary: display" style="width: 200px" src="images/border_boundary_b.png">
        <p>(B) With '<code>border-boundary: display</code>'</p>
    </div>
</div>
<div style="width: 600px">
    <p class="caption">Align the content along the display border</p>
</div>
</div>

<p class="note">Note: If the value of 'border-boundary' is parent or display, border lines of the element are actually just a visual effect. It triggers a layout for rendering in a general way, but in the above cases (border-boundary: parent|display), the layout doesn't occur and it only draws the border lines inward from the containing block's borders. With this situation, the borders might hide contents around the display edge.
</p>

<h2 id="positioning-content">Content positioning using polar coordinate system</h2>

<p>
Polar coordinate system is a two-dimensional coordinate system that describes the position of a point in a plane with a distance from a reference point and an angle from a reference direction. Elements could be placed along a circle or concentric circles, and the polar coordinate system is useful to handle such cases.

This section introduces polar positioning to support layout of elements in the polar coordinate system where the position of an element is determined by a distance from the center point within the containing element and an angle from the Y-axis.

We add '<code>polar</code>' to the value of the 'position' property to support the polar coordinates of an element itself. The 'polar-angle' and 'polar-distance' properties specify the position of an element.
</p>
<p class="note">
Note: In polar coordinate system, a pole is the reference point and points are described as been a certain distance from it, as also a certain angle from the polar axis. In mathematical theory, the polar axis is commonly defined as the positive direction of the x-axis, but we consider the polar axis as the positive direction of the y-axis position as other CSS specifications usually do. Therefore, when the 'polar-angle'  value  of an element is 0, the element is positioned on the y-axis. If the angle value of an element increases in the positive direction from 0, the element moves clockwise. The method to determine a direction using 'polar-angle' works the same way in [[CSS-VALUES]], <<angle>> value.
</p>
<h3 id="position-property">The 'position' property</h3>
When the 'position' property on an element is set to '<code>polar</code>', the element could be affected in polar coordinate system.
<pre class='propdef'>
    Name: position
    Applies to: all elements except table-column-group and table-column
    Value: static | relative | absolute | sticky | fixed | <code>polar</code>
    Initial: static
    Inherited: no
	Percentages: N/A
    Media: visual
	Computed value: specified value
	Animatable: no
</pre>
<p class="note">
Note:  The center point of the containing block of an element indicates the origin of polar coordinate when the value of position property of the element  is '<code>polar</code>'.
</p>
<p>
In conventional coordinate system used in the web, the origin is positioned in the upper left corner of a containing block. In comparison, the origin of polar coordinates  is the center point of a containing block. Therefore different methods are required to deploy and transform elements, or set margin/padding values when using polar coordinates.

An example as below shows the difference between the conventional coordinates and the polar coordinates when positioning elements.
</p>
<div class='example'>
The codes below show the difference between conventional coordinate system in the web and polar coordinate system when positioning elements.

Figure 6A might be the result of
<pre>
&lt;body>
	&lt;div style="position: absolute; width: 100px; height: 100px; background-color: blue;">&lt;/div>
	&lt;div style="position: absolute; width: 50px; height: 50px; background-color: green;">&lt;/div>
&lt;/body>
</pre>
Figure 6B might be the result of
<pre>
&lt;body>
	&lt;div style="position: polar; width: 100px; height: 100px; background-color: blue;">&lt;/div>
	&lt;div style="position: polar; width: 50px; height: 50px; background-color: green;">&lt;/div>
&lt;/body>
</pre>

<br />
<div style="width: 700px; text-align:center">
    <div style="float: left; width: 350px;">
		<img alt="An image aligning two elements to containing block in the conventional coordinate system" style="width: 300px" src="images/polar_position_a.png">
		<p>(A) With 'position: <code>absolute</code>'</p>
	</div>
    <div style="float: left; width: 350px; ">
		<img alt="An image aligning two elements to containing block in the polar coordinate system" style="width: 300px" src="images/polar_position_b.png">
		<p>(B) With 'position: <code>polar</code>'</p>
	</div>
</div>
<div style="width: 700px">
    <p class="caption">Positioning elements in conventional coordinate system and polar coordinate system</p>
</div>

</div>


<h3 id="polar-angle-property">The 'polar-angle' property</h3>
The 'polar-angle' property specifies the angle from the Y-axis. This property is activated on condition of position: polar.
<pre class='propdef'>
    Name: polar-angle
    Applies to: all elements
    Value: <<angle>>
    Initial: 0
    Media: visual
    Inherited: no
    Percentages: N/A
	Animatable: as <a href="http://www.w3.org/TR/css3-transitions/#animatable-types">angle</a>
</pre>

<h3 id="polar-distance-property">The 'polar-distance' property</h3>
The 'polar-distance' property determines how far elements are positioned from the origin of polar coordinates. This property is activated on condition of position: polar.
<pre class='propdef'>
    Name: polar-distance
    Applies to: all elements
    Value: [ <<length>> | <<percentage>> ] [contain]?
    Initial: 0
    Media: visual
    Inherited: no
    Percentages: relative to distance from the origin of polar coordinates to edge of containing block
    Animatable: as <a href="http://www.w3.org/TR/css3-transitions/#animtype-lpcalc">length, percentage, or calc</a>
</pre>
<p>
Where
<dl>
<b>&lt;polar-distance&gt;</b> = [ <var>&lt;length&gt;</var> | <var>&lt;percentage&gt;</var> ] [contain]?
</dl>
<br>
The first value specifies the distance between the origin of polar coordinates and the anchor point of the element. The second value may be omitted. If not so, it affects the calculated value of the first value.
<br><br>
Values have the following meanings:
<dl>
<dt><var>&lt;length&gt;</var></dt>
<dd>
A length value gives a fixed length between the origin of polar coordinates and the anchor point of element.
</dd>
</dl>
<dl>
<dt><var>&lt;percentage&gt;</var></dt>
<dd>
A percentage is relative to the distance from a point of contact which is made by the edge of containing block and the gradient-line to the origin of polar coordinates. The starting point of the gradient-line is the origin of polar coordinates. And the value of the gradient of the line is polar angle value.
</dd>
</dl>
<dl>
<dt>contain</dt>
<dd>
Adjust polar-distance value when positioned element within containing block overflows shape of the containing block. The main purpose for this value is avoiding overflow of positioning elements. When overflowing occurs, the distance between the center point of containing block and the anchor point of the element is reduced until there are less than 2 points of contact between edge of shape of containing block and content block of the element.
</dd>
</dl>
</p>
<div class='example'>
Here are some examples. 
The first example shows positioning elements with polar-distance not using extent keyword value. Some parts of elements are outside the boundary of the containing block's shape:

<pre>&lt;body>

  &lt;div style="position: polar; polar-angle: 45deg; polar-distance: 100%">&lt;/div>
  &lt;div style="position: polar; polar-angle: 180deg; polar-distance: 100%">&lt;/div>
&lt;/body>
</pre>
<div style="width: 500px; text-align: center">
	<img src="images/polar_distance_a.png" style="width: 350px;"/>
</div>

In the second example, 'contain', the extent keyword value is added to the polar-distance value of each element to avoid overflowing.

<pre>&lt;body>

  &lt;div style="position: polar; polar-angle: 45deg; polar-distance: 100% contain">&lt;/div>
  &lt;div style="position: polar; polar-angle: 180deg; polar-distance: 100% contain">&lt;/div>
&lt;/body>
</pre>
<div style="width: 500px; text-align: center">
	<img src="images/polar_distance_b.png" style="width: 350px;"/>
</div>
</div>
<p class="issue">
Would polar-distance property need auto value?
</p>

<div class='example'>
This example shows a way to align elements within the polar coordinate system.
<pre>&lt;body>

  &lt;div id="circle1" style="position: polar; polar-angle: 0deg; polar-distance: 50%">&lt;/div>
  &lt;div id="circle2" style="position: polar; polar-angle: 90deg; polar-distance: 20%">&lt;/div>
  &lt;div id="circle3" style="position: polar; polar-angle: 225deg; polar-distance: 100%">&lt;/div>
&lt;/body>
</pre>
<div style="width: 400px; text-align: center">
	<img alt="An image of three elements positioned to polar coordinates" src="images/polar_a.png" style="width: 200px; border: 1px #AAA solid; text-align: center"/>
	<p class="caption">An example of polar positioning</p>
</div>
</div>

<p class="issue">
How to rotate the element itself with an axis from the element position to the central point of containing block? Is new property needed to support that at one time in polar coordinate system?
</p>
<p class="issue">
How to position items to the edge of the containing block without overflowing it? (<i>polar-anchor</i> could be suggested)
</p>
<p class="issue">
One of the profits of polar coordinate system is performance improvement. The significant performance improvement can be seen in animation using the polar coordinates. How to define animation in the polar coordinates? Is there any difference between the conventional coordinates and the polar coordinates when animate elements?
</p>
<p class="issue">
By 'polar-distance' property, a position of an element is specified based on the containing block's center. In other way, is the method of positioning elements by the distance based on the edge of the containing block needed?
</p>
<h3 id="polar-angle-property">The 'polar-anchor' property</h3>
<p>
The 'polar-anchor' property sets an anchor point of the element. The anchor point specifies a position which is a representative point of the element. The anchor point could be set as any point within a content area of the element rather than being positioned to the upper left corner of the element by CSS box model.

With position: polar, the value of polar-distance is given to the distance between an anchor point and a center point of a containing block.
</p>
<pre class='propdef'>
    Name: polar-anchor
    Applies to: all elements
    Value: <<position>>
    Initial: 50% 50%
    Media: visual
    Inherited: no
    Percentages: relative to width and height of an element
	Animatable: as <<position>>
</pre>
<p>
The property's value is given as <position> specified in 'background-position' property, but meanings of some keywords in value type are different in 'polar-anchor' property.

<dl>

<b>&lt;position&gt;</b> = [
<br>
&nbsp;[ left | center | right | top | bottom | <var>&lt;percentage&gt;</var> | <var>&lt;length&gt;</var> ]
<br>
|
<br>
&nbsp;&nbsp;[ left | center | right | <var>&lt;percentage&gt;</var> | <var>&lt;length&gt;</var> ]
<br>
&nbsp;&nbsp;[ top | center | bottom | <var>&lt;percentage&gt;</var> | <var>&lt;length&gt;</var> ]
<br>
|
<br>
&nbsp;&nbsp;[ center | [ left | right ] [ <var>&lt;percentage&gt;</var> | <var>&lt;length&gt;</var> ]? ] &amp;&amp;
<br>
&nbsp;&nbsp;[ center | [ top | bottom ] [ <var>&lt;percentage&gt;</var> | <var>&lt;length&gt;</var> ]? ]
<br>
]
</dl>

<dl>
<dt><var>&lt;percentage&gt;</var></dt>
<dd>
A percentage for the horizontal offset is relative to width of content box area of the element. A percentage for the vertical offset is relative to height of content box area of the element. For example, with a value pair of '100%, 0%', an anchor point is on the upper right corner of the element.
</dd>
</dl>

<dl>
<dt><var>&lt;length&gt;</var></dt>
<dd>
A length value gives a length offset from the upper left corner of the element's content area.
</dd>
</dl>
</p>

<p>
Only with 'polar-angle' and 'polar-distance' to position elements, adjusting values of those properties for avoiding elements sticking out of the containing block is required. When the appropriate anchor point is given, there is no need to adjust 'polar-distance' value to avoid overflowing when positioning elements in the containing block.
</p>

<div class='example'>
This example shows an alignment of four elements with different anchor points positioned in a containing block.

<pre>&lt;style>

	#item1 {
		position: polar;
		polar-angle: 45deg;
		polar-distance: 100%;
		polar-anchor: right top;
	}
	#item2 {
		position: polar;
		polar-angle: 135deg;
		polar-distance: 100%;
		polar-anchor: right bottom;
	}
	#item3 {
		position: polar;
		polar-angle: 225deg;
		polar-distance: 100%;
		polar-anchor: left bottom;
	}
	#item4 {
		position: polar;
		polar-angle: 315deg;
		polar-distance: 100%;
		polar-anchor: left top;
	}
&lt;/style>
&lt;body>
	&lt;div id="item1">&lt;/div>
	&lt;div id="item2">&lt;/div>
	&lt;div id="item3">&lt;/div>
	&lt;div id="item4">&lt;/div>
&lt;/body>
</pre>
<div style="width: 400px; text-align: center">
	<img alt="An image of four elements with different anchor points positioned in a containing block" src="images/polar_anchor.png" style="width: 300px; text-align: center"/>
	<p class="caption">An example of 'polar-anchor'</p>
</div>
</div>
<p class="issue">
Is '<code>auto</code>' needed for value of 'polar-anchor'?
</p>
<p class="issue">
How to solve overflowing when an element has 'polar-anchor' value as '<code>top</code>',  'polar-angle' value is 0deg, and 'polar-distance' is equal to the distance from center to edge of containing block?
</p>
