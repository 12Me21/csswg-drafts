<h1>Shadow DOM Styling</h1>
<pre class='metadata'>
Level: 1
Shortname: shadow-styling
Group: CSSWG
Status: ED
ED: http://dev.w3.org/csswg/shadow-styling
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Abstract: This specification defines the additions to CSS to accommodate Shadow DOM styling.
Ignored Terms: content
</pre>

<h2 id="intro">
Introduction</h2>

	...

<h2 id='shadow-dom'>
Shadow DOM CSS Concepts</h2>

	The Shadow DOM spec augments the DOM with several new concepts,
	several of which are relevant to CSS.

<h3 id='shadow-trees'>
Shadow Trees</h3>

	A <dfn export>shadow tree</dfn> is a document fragment
	that can be attached to any element in the DOM.
	An element can have any number of <a>shadow trees</a>,
	which are ordered by creation time.
	The most recently-createed <a>shadow tree</a> on an element
	is the <dfn export>active shadow tree</dfn> for that element.

	An element with a <a>shadow tree</a> is a <dfn export>shadow host</dfn>.
	It is the <dfn export>host element</dfn> for its shadow trees.

	The descendants of a <a>shadow host</a>
	must not generate boxes as normal.
	Instead, the contents of the <a>active shadow tree</a> generates boxes
	as if it were the contents of the element instead.

<h3 id='distribution-lists'>
Distribution Lists</h3>

	While the children of a <a>shadow host</a> do not generate boxes normally,
	they can be explicitly pulled into a <a>shadow tree</a> and forced to render normally.
	This is done by assigning the elements to a <dfn export>distribution list</dfn>.
	An element with a <a>distribution list</a> is an <dfn export>insertion point</dfn>.

	This specification does not define how to assign elements to a <a>distribution list</a>,
	instead leaving that to the Shadow DOM spec.
	At the time this spec is written, however,
	only <a element>content</a> elements in a <a>shadow tree</a> can have <a>distribution lists</a>.

	An <a>insertion point</a> must not generate any boxes.
	Instead, the elements in its <a>distribution list</a> generate boxes as normal,
	as if they all replaced the <a>insertion point</a> in-place.
	<span class='note'>(Akin to the behavior of ''display-box: contents''.)</span>

<h3 id='inheritance'>
Inheritance and Shadow DOM</h3>

	The <a>top-level elements</a> of a <a>shadow tree</a>
	inherit from their <a>host element</a>.

	The elements in a <a>distribution list</a> inherit normally,
	from their parent.
	Shadow DOM does not change the behavior of inheritance here.

<h2 id='selectors-data-model'>
Extensions to the Selectors Data Model</h2>

	Elements in the <a>element tree</a>
	additionally have zero or more <a>shadow trees</a>
	and zero or one <a>distribution lists</a>.

	Note: The "descendants" of an element
	are based on the children of the element,
	which does not include the <a>shadow trees</a> or <a>distribution lists</a> of the element.

	When a selector is matched against a <a>shadow tree</a>,
	the <a>initial selector match list</a>
	is the <a>shadow host</a>,
	followed by all the <a>top-level elements</a> of the <a>shadow tree</a>
	and their descendants,
	ordered by a pre-order traversal.

<h3 id='host-element'>
Host Elements in a Shadow Tree</h3>

	A <a>shadow host</a> is outside of the <a>shadow trees</a> it hosts,
	but it is sometimes useful to be able to style it from inside the <a>shadow tree</a> context.

	For the purpose of Selectors,
	a <a>host element</a> also appears in each of its <a>shadow trees</a>,
	with the contents of the <a>shadow tree</a> treated as its children.
	If an element has multiple <a>shadow trees</a>,
	it appears in each <a>shadow tree's</a> context independently;
	each <a>shadow tree</a> sees <em>itself</em> as the contents of the <a>host element</a>,
	not the other <a>shadow trees</a>.

	The <a>host element</a> is not selectable by <strong>any means</strong>
	except for the '':host'' pseudo-class.
	That is, in this context the <a>shadow host</a>
	has no tagname, ID, classes, or attributes,
	and the only additional information is has is that the '':host'' pseudo-class matches it.

	<details class='why'>
		<summary>Why is the shadow host so weird?</summary>

		The <a>shadow host</a> lives outside the <a>shadow tree</a>,
		and its markup is in control of the page author,
		not the component author.

		It would not be very good if a component used a particular class name
		internally in a <a>shadow tree</a>,
		and the page author using the component accidentally <em>also</em>
		used the the same class name and put it on the <a>host element</a>.
		Such a situation would result in accidental styling
		that is impossible for the component author to predict,
		and confusing for the page author to debug.

		However, there are still some reasonable use-cases for letting a stylesheet in a <a>shadow tree</a>
		style its <a>host element</a>.
		So, to allow this situation but prevent accidental styling,
		the <a>host element</a> appears but is completely featureless
		and unselectable except through '':host''.
	</details>



<h2 id='inheritance'>
Shadow DOM Combinators</h2>

	Shadow DOM defines several new combinators
	to help style the contents of <a>shadow trees</a> and <a>distribution lists</a>.

	<p class='issue'>
		I'm assuming here that "/foo/" is the syntax we'll agree on for named combinators.

<h3 id='shadow-combinator'>
Selecting Into A Shadow Tree: the ''/shadow/'' combinator</h3>

	When a <dfn selector>/shadow/</dfn> combinator is encountered in a selector,
	first filter the <a>selector match list</a> to only include elements with <a>shadow trees</a>.
	Then replace every element in the <a>selector match list</a>
	with the <a>top-level elements</a> of each <a>shadow tree</a> of the element.

	<div class='example'>
		For example, say you had a component with a <a>shadow tree</a> like the following:

		<pre>
			&lt;x-foo>
				&lt;"shadow tree">
					&lt;div>
						&lt;span id="not-top">...&lt;/span>
					&lt;/div>
					&lt;span id="top">...&lt;/span>
				&lt;/>
			&lt;/x-foo>
		</pre>

		For a stylesheet in the outer document,
		''x-foo /shadow/ span'' matches ''#top'',
		but not ''#not-top'',
		because it's not a <a>top-level element</a> in the <a>shadow tree</a>.

		If one wanted to target ''#not-top'',
		one way to do it would be with ''x-foo /shadow/ div > span''.
	</div>

<h3 id='shadow-all-combinator'>
Selecting All Elements In A Shadow Tree: the ''/shadow-all/'' combinator</h3>

	When a <dfn selector>/shadow-all/</dfn> combinator is encountered in a selector,
	first filter the <a>selector match list</a> to only include elements with <a>shadow trees</a>.
	Then replace every element in the <a>selector match list</a>
	with the <a>top-level elements</a> of each <a>shadow tree</a> of the element,
	and every element reachable by traversing any number of child lists
	from those elements.

	<div class='example'>
		For example, say you had a component with a <a>shadow tree</a> like the following:

		<pre>
			&lt;x-foo>
				&lt;"shadow tree">
					&lt;div>
						&lt;span id="not-top">...&lt;/span>
					&lt;/div>
					&lt;span id="top">...&lt;/span>
					&lt;x-bar>
						&lt;"shadow tree">
							&lt;span id="nested">...&lt;/span>
						&lt;/>
					&lt;/x-bar>
				&lt;/>
			&lt;/x-foo>
		</pre>

		For a stylesheet in the outer document,
		the selector ''x-foo /shadow-all/ span''
		selects ''#top'' and ''#not-top''.
		It does not match ''#nested'',
		as that element is further nested in the <a>shadow tree</a> of the <code>&lt;x-bar></code> component.
	</div>

<h3 id='shadow-deep-combinator'>
Selecting Through All Shadows: the ''/shadow-deep/'' combinator</h3>

	When a <dfn selector>/shadow-deep/</dfn> combinator is encountered in a selector,
	replace every element in the <a>selector match list</a>
	with every element reachable from the original element
	by traversing any number of child lists or shadow trees.

	<div class='example'>
		For example, say you had a component with a <a>shadow tree</a> like the following:

		<pre>
			&lt;x-foo>
				&lt;"shadow tree">
					&lt;div>
						&lt;span id="not-top">...&lt;/span>
					&lt;/div>
					&lt;span id="top">...&lt;/span>
					&lt;x-bar>
						&lt;"shadow tree">
							&lt;span id="nested">...&lt;/span>
						&lt;/>
					&lt;/x-bar>
				&lt;/>
			&lt;/x-foo>
		</pre>

		For a stylesheet in the outer document,
		the selector ''x-foo /shadow-deep/ span''
		selects all three of <code>&lt;span></code> elements:
		''#top'', ''#not-top'', <em>and</em> ''#nested''.
	</div>

<h3 id='content-combinator'>
Selecting Distributed Elements: the ''/content/'' combinator</h3>

	When a <dfn selector>/content/</dfn> combinator is encountered in a selector,
	first filter the <a>selector match list</a> to only include elements with <a>distribution lists</a>.
	Then replace every element in the <a>selector match list</a>
	with the elements in the <a>distribution list</a> of each element.

	<div class="example">
		For example, say you had a component with both children and a shadow tree,
		like the following:

		<pre>
			&lt;x-foo>
				&lt;div id="one">...&lt;/div>
				&lt;div id="two">...&lt;/div>
				&lt;div id="three">
					&lt;div id="four">...&lt;/div>
				&lt;/div>
				&lt;"shadow tree">
					&lt;div id="five">...&lt;/div>
					&lt;div id="six">...&lt;/div>
					&lt;content select=":nth-child(odd)">&lt;/content>
				&lt;/"shadow tree">
			&lt;/x-foo>
		</pre>

		For a stylesheet within the <a>shadow tree</a>,
		a selector like ''* /content/ div''
		selects ''#one'' and ''#three'',
		as they're the elements distributed by the <code>&lt;content></code> element.
	</div>

<h2 id='selectors'>
Shadow DOM Selectors</h2>

	Shadow DOM defines a few new selectors
	to help select elements in useful way related to Shadow DOM.

<h3 id='top-selector'>
Selecting Root-like Elements: the '':top'' pseudo-class</h3>

	The <dfn selector>:top</dfn> pseudo-class
	matches all elements which are not the children of other elements.
	These are called <dfn export title="top-level element">top-level elements</dfn>.

	<div class='example'>
		For example, the root of a document has no element parent.
		(In the DOM, it's the child of a <code>Document</code> object,
		which is not an element.)

		Similarly, elements that are children of a <code>ShadowRoot</code> object do not have element parents,
		nor do elements that are appended directly to a <code>DocumentFragment</code>.
	</div>

	Note: Note that this definition is based on the data model of the host document,
	not necessarily the data model of Selectors.
	For example, <a>top-level elements</a> in a <a>shadow tree</a>
	are considered to have the <a>host element</a> as their parent
	<em>for the purposes of Selectors</em>,
	but they still match '':top'' as they are not actually the child of an element.

<h3 id='host-selector'>
Selecting the Host Element: the '':host'' and '':host()'' pseudo-classes</h3>

	The <dfn selector>:host</dfn> pseudo-class,
	when evaluated in the context of a <a>shadow tree</a>,
	matches the <a>shadow tree's</a> <a>host element</a>.
	In any other context,
	it matches nothing.

	The <dfn selector title=':host()'>:host()</dfn> function pseudo-class
	has the syntax:

	<pre>:host( <<compound-selector>> )</pre>

	When evaluated in the context of a <a>shadow tree</a>,
	it matches the <a>shadow tree's</a> <a>host element</a>
	if the <a>host element</a>,
	in its normal context,
	matches the selector argument.
	In any other context,
	it matches nothing.

	<div class='example'>
		For example, say you had a component with a <a>shadow tree</a> like the following:

		<pre>
			&lt;x-foo class="foo">
				&lt;"shadow tree">
					&lt;div class="foo">...&lt;/div>
				&lt;/>
			&lt;/x-foo>
		</pre>

		For a stylesheet within the <a>shadow tree</a>:

		<ul>
			<li>'':host'' matches the <code>&lt;x-foo></code> element.
			<li>''x-foo'' matches nothing.
			<li>''.foo'' matches only the <code>&lt;div></code> element.
			<li>''.foo:host'' matches nothing
			<li>'':host(.foo)'' matches the <code>&lt;x-foo></code> element.
		</ul>
	</div>

<h3 id='ancestor-selector'>
Selecting Based on an Ancestor Outside the Shadow Tree: the '':ancestor()'' pseudo-class</h3>

	Ordinary, selectors within a <a>shadow tree</a>
	can't see elements outside the <a>shadow tree</a> at all.
	Sometimes, however, it's useful to select an ancestor that lies somewhere outside the shadow tree,
	above it in the document.

	<div class='example'>
		For example, a group of components can define a handful of color themes
		they they know how to respond to.
		Page authors could opt into a particular theme
		by adding a specific class to the components,
		or higher up in the document.
	</div>

	The <dfn selector>:ancestor()</dfn> functional pseudo-class tests whether there is an ancestor,
	outside the <a>shadow tree</a>,
	which matches a particular selector.
	Its syntax is:

	<pre>:ancestor( <<compound-selector>> )</pre>

	When evaluated in the context of a <a>shadow tree</a>,
	the '':ancestor()'' pseudo-class matches any element,
	if the <a>host element</a> or one of its ancestors matches the provided <<compound-selector>>.
	For the purpose of this pseudo-class,
	the "ancestor" of an element is its parent,
	if it has one,
	or else its <a>host element</a>,
	if it has one.

	Note: This means that the selector pierces through shadow boundaries on the way up,
	looking for elements that match its argument,
	until it reaches the document root.

<h2 id='cascading'>
Changes to the Cascading Model</h2>

	Shadow DOM enables new ways to target an element and apply styles to it,
	which don't quite fit into the existing CSS cascade.

	<p class='issue'>
		I need to go look up what was decided/written down
		for the cascading precedence
		of rules from outside a shadow tree reaching in, via the /shadow-* combinators,
		and of rules from inside a shadow tree reaching out, via the /content combinator.
		Also, the cascading precedence of styles inside a shadow tree applying to a host element,
		versus the outside document's styles applying to the host element.
